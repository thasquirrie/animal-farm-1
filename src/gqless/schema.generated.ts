/**
 * GQLESS AUTO-GENERATED CODE: PLEASE DO NOT MODIFY MANUALLY
 */

export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  bigint: any;
  bpchar: any;
  date: any;
  float8: any;
  json: any;
  jsonb: any;
  name: any;
  numeric: any;
  oid: any;
  smallint: any;
  timestamptz: any;
  uuid: any;
}

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export interface Boolean_comparison_exp {
  _eq?: Maybe<Scalars["Boolean"]>;
  _gt?: Maybe<Scalars["Boolean"]>;
  _gte?: Maybe<Scalars["Boolean"]>;
  _in?: Maybe<Array<Scalars["Boolean"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["Boolean"]>;
  _lte?: Maybe<Scalars["Boolean"]>;
  _neq?: Maybe<Scalars["Boolean"]>;
  _nin?: Maybe<Array<Scalars["Boolean"]>>;
}

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export interface Int_comparison_exp {
  _eq?: Maybe<Scalars["Int"]>;
  _gt?: Maybe<Scalars["Int"]>;
  _gte?: Maybe<Scalars["Int"]>;
  _in?: Maybe<Array<Scalars["Int"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["Int"]>;
  _lte?: Maybe<Scalars["Int"]>;
  _neq?: Maybe<Scalars["Int"]>;
  _nin?: Maybe<Array<Scalars["Int"]>>;
}

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export interface String_comparison_exp {
  _eq?: Maybe<Scalars["String"]>;
  _gt?: Maybe<Scalars["String"]>;
  _gte?: Maybe<Scalars["String"]>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars["String"]>;
  _in?: Maybe<Array<Scalars["String"]>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars["String"]>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars["String"]>;
  _lt?: Maybe<Scalars["String"]>;
  _lte?: Maybe<Scalars["String"]>;
  _neq?: Maybe<Scalars["String"]>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars["String"]>;
  _nin?: Maybe<Array<Scalars["String"]>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars["String"]>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars["String"]>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars["String"]>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars["String"]>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars["String"]>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars["String"]>;
}

/** Boolean expression to filter rows from the table "activity_logs". All fields are combined with a logical 'AND'. */
export interface activity_logs_bool_exp {
  _and?: Maybe<Array<activity_logs_bool_exp>>;
  _not?: Maybe<activity_logs_bool_exp>;
  _or?: Maybe<Array<activity_logs_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  event_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "activity_logs" */
export enum activity_logs_constraint {
  /** unique or primary key constraint */
  activity_logs_pkey = "activity_logs_pkey",
}

/** input type for inserting data into table "activity_logs" */
export interface activity_logs_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "activity_logs" */
export interface activity_logs_on_conflict {
  constraint: activity_logs_constraint;
  update_columns?: Array<activity_logs_update_column>;
  where?: Maybe<activity_logs_bool_exp>;
}

/** Ordering options when selecting data from "activity_logs". */
export interface activity_logs_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: activity_logs */
export interface activity_logs_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "activity_logs" */
export enum activity_logs_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "activity_logs" */
export interface activity_logs_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "activity_logs" */
export enum activity_logs_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "aruba_wifi_access" */
export interface aruba_wifi_access_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<aruba_wifi_access_max_order_by>;
  min?: Maybe<aruba_wifi_access_min_order_by>;
}

/** input type for inserting array relation for remote table "aruba_wifi_access" */
export interface aruba_wifi_access_arr_rel_insert_input {
  data: Array<aruba_wifi_access_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<aruba_wifi_access_on_conflict>;
}

/** Boolean expression to filter rows from the table "aruba_wifi_access". All fields are combined with a logical 'AND'. */
export interface aruba_wifi_access_bool_exp {
  _and?: Maybe<Array<aruba_wifi_access_bool_exp>>;
  _not?: Maybe<aruba_wifi_access_bool_exp>;
  _or?: Maybe<Array<aruba_wifi_access_bool_exp>>;
  access_end?: Maybe<timestamptz_comparison_exp>;
  access_start?: Maybe<timestamptz_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  guest?: Maybe<guests_bool_exp>;
  guest_uuid?: Maybe<uuid_comparison_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  password?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  wifi_ssid?: Maybe<String_comparison_exp>;
}

/** unique or primary key constraints on table "aruba_wifi_access" */
export enum aruba_wifi_access_constraint {
  /** unique or primary key constraint */
  aruba_wifi_access_pkey = "aruba_wifi_access_pkey",
}

/** input type for inserting data into table "aruba_wifi_access" */
export interface aruba_wifi_access_insert_input {
  access_end?: Maybe<Scalars["timestamptz"]>;
  access_start?: Maybe<Scalars["timestamptz"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest?: Maybe<guests_obj_rel_insert_input>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  password?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  wifi_ssid?: Maybe<Scalars["String"]>;
}

/** order by max() on columns of table "aruba_wifi_access" */
export interface aruba_wifi_access_max_order_by {
  access_end?: Maybe<order_by>;
  access_start?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  password?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wifi_ssid?: Maybe<order_by>;
}

/** order by min() on columns of table "aruba_wifi_access" */
export interface aruba_wifi_access_min_order_by {
  access_end?: Maybe<order_by>;
  access_start?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  password?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wifi_ssid?: Maybe<order_by>;
}

/** on conflict condition type for table "aruba_wifi_access" */
export interface aruba_wifi_access_on_conflict {
  constraint: aruba_wifi_access_constraint;
  update_columns?: Array<aruba_wifi_access_update_column>;
  where?: Maybe<aruba_wifi_access_bool_exp>;
}

/** Ordering options when selecting data from "aruba_wifi_access". */
export interface aruba_wifi_access_order_by {
  access_end?: Maybe<order_by>;
  access_start?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest?: Maybe<guests_order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  password?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wifi_ssid?: Maybe<order_by>;
}

/** primary key columns input for table: aruba_wifi_access */
export interface aruba_wifi_access_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "aruba_wifi_access" */
export enum aruba_wifi_access_select_column {
  /** column name */
  access_end = "access_end",
  /** column name */
  access_start = "access_start",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  password = "password",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  wifi_ssid = "wifi_ssid",
}

/** input type for updating data in table "aruba_wifi_access" */
export interface aruba_wifi_access_set_input {
  access_end?: Maybe<Scalars["timestamptz"]>;
  access_start?: Maybe<Scalars["timestamptz"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  password?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  wifi_ssid?: Maybe<Scalars["String"]>;
}

/** update columns of table "aruba_wifi_access" */
export enum aruba_wifi_access_update_column {
  /** column name */
  access_end = "access_end",
  /** column name */
  access_start = "access_start",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  password = "password",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  wifi_ssid = "wifi_ssid",
}

/** Boolean expression to filter rows from the table "auth.audit_log_entries". All fields are combined with a logical 'AND'. */
export interface auth_audit_log_entries_bool_exp {
  _and?: Maybe<Array<auth_audit_log_entries_bool_exp>>;
  _not?: Maybe<auth_audit_log_entries_bool_exp>;
  _or?: Maybe<Array<auth_audit_log_entries_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  id?: Maybe<uuid_comparison_exp>;
  instance_id?: Maybe<uuid_comparison_exp>;
  payload?: Maybe<json_comparison_exp>;
}

/** unique or primary key constraints on table "auth.audit_log_entries" */
export enum auth_audit_log_entries_constraint {
  /** unique or primary key constraint */
  audit_log_entries_pkey = "audit_log_entries_pkey",
}

/** input type for inserting data into table "auth.audit_log_entries" */
export interface auth_audit_log_entries_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["uuid"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  payload?: Maybe<Scalars["json"]>;
}

/** on conflict condition type for table "auth.audit_log_entries" */
export interface auth_audit_log_entries_on_conflict {
  constraint: auth_audit_log_entries_constraint;
  update_columns?: Array<auth_audit_log_entries_update_column>;
  where?: Maybe<auth_audit_log_entries_bool_exp>;
}

/** Ordering options when selecting data from "auth.audit_log_entries". */
export interface auth_audit_log_entries_order_by {
  created_at?: Maybe<order_by>;
  id?: Maybe<order_by>;
  instance_id?: Maybe<order_by>;
  payload?: Maybe<order_by>;
}

/** primary key columns input for table: auth_audit_log_entries */
export interface auth_audit_log_entries_pk_columns_input {
  id: Scalars["uuid"];
}

/** select columns of table "auth.audit_log_entries" */
export enum auth_audit_log_entries_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  payload = "payload",
}

/** input type for updating data in table "auth.audit_log_entries" */
export interface auth_audit_log_entries_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["uuid"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  payload?: Maybe<Scalars["json"]>;
}

/** update columns of table "auth.audit_log_entries" */
export enum auth_audit_log_entries_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  payload = "payload",
}

/** Boolean expression to filter rows from the table "auth.instances". All fields are combined with a logical 'AND'. */
export interface auth_instances_bool_exp {
  _and?: Maybe<Array<auth_instances_bool_exp>>;
  _not?: Maybe<auth_instances_bool_exp>;
  _or?: Maybe<Array<auth_instances_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  id?: Maybe<uuid_comparison_exp>;
  raw_base_config?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "auth.instances" */
export enum auth_instances_constraint {
  /** unique or primary key constraint */
  instances_pkey = "instances_pkey",
}

/** input type for inserting data into table "auth.instances" */
export interface auth_instances_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["uuid"]>;
  raw_base_config?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "auth.instances" */
export interface auth_instances_on_conflict {
  constraint: auth_instances_constraint;
  update_columns?: Array<auth_instances_update_column>;
  where?: Maybe<auth_instances_bool_exp>;
}

/** Ordering options when selecting data from "auth.instances". */
export interface auth_instances_order_by {
  created_at?: Maybe<order_by>;
  id?: Maybe<order_by>;
  raw_base_config?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: auth_instances */
export interface auth_instances_pk_columns_input {
  id: Scalars["uuid"];
}

/** select columns of table "auth.instances" */
export enum auth_instances_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  raw_base_config = "raw_base_config",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "auth.instances" */
export interface auth_instances_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["uuid"]>;
  raw_base_config?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "auth.instances" */
export enum auth_instances_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  raw_base_config = "raw_base_config",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "auth.refresh_tokens". All fields are combined with a logical 'AND'. */
export interface auth_refresh_tokens_bool_exp {
  _and?: Maybe<Array<auth_refresh_tokens_bool_exp>>;
  _not?: Maybe<auth_refresh_tokens_bool_exp>;
  _or?: Maybe<Array<auth_refresh_tokens_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  id?: Maybe<bigint_comparison_exp>;
  instance_id?: Maybe<uuid_comparison_exp>;
  revoked?: Maybe<Boolean_comparison_exp>;
  token?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_id?: Maybe<String_comparison_exp>;
}

/** unique or primary key constraints on table "auth.refresh_tokens" */
export enum auth_refresh_tokens_constraint {
  /** unique or primary key constraint */
  refresh_tokens_pkey = "refresh_tokens_pkey",
}

/** input type for incrementing numeric columns in table "auth.refresh_tokens" */
export interface auth_refresh_tokens_inc_input {
  id?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "auth.refresh_tokens" */
export interface auth_refresh_tokens_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["bigint"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  revoked?: Maybe<Scalars["Boolean"]>;
  token?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_id?: Maybe<Scalars["String"]>;
}

/** on conflict condition type for table "auth.refresh_tokens" */
export interface auth_refresh_tokens_on_conflict {
  constraint: auth_refresh_tokens_constraint;
  update_columns?: Array<auth_refresh_tokens_update_column>;
  where?: Maybe<auth_refresh_tokens_bool_exp>;
}

/** Ordering options when selecting data from "auth.refresh_tokens". */
export interface auth_refresh_tokens_order_by {
  created_at?: Maybe<order_by>;
  id?: Maybe<order_by>;
  instance_id?: Maybe<order_by>;
  revoked?: Maybe<order_by>;
  token?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_id?: Maybe<order_by>;
}

/** primary key columns input for table: auth_refresh_tokens */
export interface auth_refresh_tokens_pk_columns_input {
  id: Scalars["bigint"];
}

/** select columns of table "auth.refresh_tokens" */
export enum auth_refresh_tokens_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  revoked = "revoked",
  /** column name */
  token = "token",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_id = "user_id",
}

/** input type for updating data in table "auth.refresh_tokens" */
export interface auth_refresh_tokens_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["bigint"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  revoked?: Maybe<Scalars["Boolean"]>;
  token?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_id?: Maybe<Scalars["String"]>;
}

/** update columns of table "auth.refresh_tokens" */
export enum auth_refresh_tokens_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  revoked = "revoked",
  /** column name */
  token = "token",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_id = "user_id",
}

/** Boolean expression to filter rows from the table "auth.schema_migrations". All fields are combined with a logical 'AND'. */
export interface auth_schema_migrations_bool_exp {
  _and?: Maybe<Array<auth_schema_migrations_bool_exp>>;
  _not?: Maybe<auth_schema_migrations_bool_exp>;
  _or?: Maybe<Array<auth_schema_migrations_bool_exp>>;
  version?: Maybe<String_comparison_exp>;
}

/** unique or primary key constraints on table "auth.schema_migrations" */
export enum auth_schema_migrations_constraint {
  /** unique or primary key constraint */
  schema_migrations_pkey = "schema_migrations_pkey",
}

/** input type for inserting data into table "auth.schema_migrations" */
export interface auth_schema_migrations_insert_input {
  version?: Maybe<Scalars["String"]>;
}

/** on conflict condition type for table "auth.schema_migrations" */
export interface auth_schema_migrations_on_conflict {
  constraint: auth_schema_migrations_constraint;
  update_columns?: Array<auth_schema_migrations_update_column>;
  where?: Maybe<auth_schema_migrations_bool_exp>;
}

/** Ordering options when selecting data from "auth.schema_migrations". */
export interface auth_schema_migrations_order_by {
  version?: Maybe<order_by>;
}

/** primary key columns input for table: auth_schema_migrations */
export interface auth_schema_migrations_pk_columns_input {
  version: Scalars["String"];
}

/** select columns of table "auth.schema_migrations" */
export enum auth_schema_migrations_select_column {
  /** column name */
  version = "version",
}

/** input type for updating data in table "auth.schema_migrations" */
export interface auth_schema_migrations_set_input {
  version?: Maybe<Scalars["String"]>;
}

/** update columns of table "auth.schema_migrations" */
export enum auth_schema_migrations_update_column {
  /** column name */
  version = "version",
}

/** append existing jsonb value of filtered columns with new jsonb value */
export interface auth_users_append_input {
  raw_app_meta_data?: Maybe<Scalars["jsonb"]>;
  raw_user_meta_data?: Maybe<Scalars["jsonb"]>;
}

/** Boolean expression to filter rows from the table "auth.users". All fields are combined with a logical 'AND'. */
export interface auth_users_bool_exp {
  _and?: Maybe<Array<auth_users_bool_exp>>;
  _not?: Maybe<auth_users_bool_exp>;
  _or?: Maybe<Array<auth_users_bool_exp>>;
  aud?: Maybe<String_comparison_exp>;
  confirmation_sent_at?: Maybe<timestamptz_comparison_exp>;
  confirmation_token?: Maybe<String_comparison_exp>;
  confirmed_at?: Maybe<timestamptz_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  email?: Maybe<String_comparison_exp>;
  email_change?: Maybe<String_comparison_exp>;
  email_change_confirm_status?: Maybe<smallint_comparison_exp>;
  email_change_sent_at?: Maybe<timestamptz_comparison_exp>;
  email_change_token_current?: Maybe<String_comparison_exp>;
  email_change_token_new?: Maybe<String_comparison_exp>;
  email_confirmed_at?: Maybe<timestamptz_comparison_exp>;
  encrypted_password?: Maybe<String_comparison_exp>;
  id?: Maybe<uuid_comparison_exp>;
  instance_id?: Maybe<uuid_comparison_exp>;
  invited_at?: Maybe<timestamptz_comparison_exp>;
  is_super_admin?: Maybe<Boolean_comparison_exp>;
  last_sign_in_at?: Maybe<timestamptz_comparison_exp>;
  phone?: Maybe<String_comparison_exp>;
  phone_change?: Maybe<String_comparison_exp>;
  phone_change_sent_at?: Maybe<timestamptz_comparison_exp>;
  phone_change_token?: Maybe<String_comparison_exp>;
  phone_confirmed_at?: Maybe<timestamptz_comparison_exp>;
  raw_app_meta_data?: Maybe<jsonb_comparison_exp>;
  raw_user_meta_data?: Maybe<jsonb_comparison_exp>;
  recovery_sent_at?: Maybe<timestamptz_comparison_exp>;
  recovery_token?: Maybe<String_comparison_exp>;
  role?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
}

/** unique or primary key constraints on table "auth.users" */
export enum auth_users_constraint {
  /** unique or primary key constraint */
  users_email_key = "users_email_key",
  /** unique or primary key constraint */
  users_phone_key = "users_phone_key",
  /** unique or primary key constraint */
  users_pkey = "users_pkey",
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export interface auth_users_delete_at_path_input {
  raw_app_meta_data?: Maybe<Array<Scalars["String"]>>;
  raw_user_meta_data?: Maybe<Array<Scalars["String"]>>;
}

/** delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array */
export interface auth_users_delete_elem_input {
  raw_app_meta_data?: Maybe<Scalars["Int"]>;
  raw_user_meta_data?: Maybe<Scalars["Int"]>;
}

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export interface auth_users_delete_key_input {
  raw_app_meta_data?: Maybe<Scalars["String"]>;
  raw_user_meta_data?: Maybe<Scalars["String"]>;
}

/** input type for incrementing numeric columns in table "auth.users" */
export interface auth_users_inc_input {
  email_change_confirm_status?: Maybe<Scalars["smallint"]>;
}

/** input type for inserting data into table "auth.users" */
export interface auth_users_insert_input {
  aud?: Maybe<Scalars["String"]>;
  confirmation_sent_at?: Maybe<Scalars["timestamptz"]>;
  confirmation_token?: Maybe<Scalars["String"]>;
  confirmed_at?: Maybe<Scalars["timestamptz"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  email_change?: Maybe<Scalars["String"]>;
  email_change_confirm_status?: Maybe<Scalars["smallint"]>;
  email_change_sent_at?: Maybe<Scalars["timestamptz"]>;
  email_change_token_current?: Maybe<Scalars["String"]>;
  email_change_token_new?: Maybe<Scalars["String"]>;
  email_confirmed_at?: Maybe<Scalars["timestamptz"]>;
  encrypted_password?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["uuid"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  invited_at?: Maybe<Scalars["timestamptz"]>;
  is_super_admin?: Maybe<Scalars["Boolean"]>;
  last_sign_in_at?: Maybe<Scalars["timestamptz"]>;
  phone?: Maybe<Scalars["String"]>;
  phone_change?: Maybe<Scalars["String"]>;
  phone_change_sent_at?: Maybe<Scalars["timestamptz"]>;
  phone_change_token?: Maybe<Scalars["String"]>;
  phone_confirmed_at?: Maybe<Scalars["timestamptz"]>;
  raw_app_meta_data?: Maybe<Scalars["jsonb"]>;
  raw_user_meta_data?: Maybe<Scalars["jsonb"]>;
  recovery_sent_at?: Maybe<Scalars["timestamptz"]>;
  recovery_token?: Maybe<Scalars["String"]>;
  role?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** on conflict condition type for table "auth.users" */
export interface auth_users_on_conflict {
  constraint: auth_users_constraint;
  update_columns?: Array<auth_users_update_column>;
  where?: Maybe<auth_users_bool_exp>;
}

/** Ordering options when selecting data from "auth.users". */
export interface auth_users_order_by {
  aud?: Maybe<order_by>;
  confirmation_sent_at?: Maybe<order_by>;
  confirmation_token?: Maybe<order_by>;
  confirmed_at?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  email_change?: Maybe<order_by>;
  email_change_confirm_status?: Maybe<order_by>;
  email_change_sent_at?: Maybe<order_by>;
  email_change_token_current?: Maybe<order_by>;
  email_change_token_new?: Maybe<order_by>;
  email_confirmed_at?: Maybe<order_by>;
  encrypted_password?: Maybe<order_by>;
  id?: Maybe<order_by>;
  instance_id?: Maybe<order_by>;
  invited_at?: Maybe<order_by>;
  is_super_admin?: Maybe<order_by>;
  last_sign_in_at?: Maybe<order_by>;
  phone?: Maybe<order_by>;
  phone_change?: Maybe<order_by>;
  phone_change_sent_at?: Maybe<order_by>;
  phone_change_token?: Maybe<order_by>;
  phone_confirmed_at?: Maybe<order_by>;
  raw_app_meta_data?: Maybe<order_by>;
  raw_user_meta_data?: Maybe<order_by>;
  recovery_sent_at?: Maybe<order_by>;
  recovery_token?: Maybe<order_by>;
  role?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
}

/** primary key columns input for table: auth_users */
export interface auth_users_pk_columns_input {
  id: Scalars["uuid"];
}

/** prepend existing jsonb value of filtered columns with new jsonb value */
export interface auth_users_prepend_input {
  raw_app_meta_data?: Maybe<Scalars["jsonb"]>;
  raw_user_meta_data?: Maybe<Scalars["jsonb"]>;
}

/** select columns of table "auth.users" */
export enum auth_users_select_column {
  /** column name */
  aud = "aud",
  /** column name */
  confirmation_sent_at = "confirmation_sent_at",
  /** column name */
  confirmation_token = "confirmation_token",
  /** column name */
  confirmed_at = "confirmed_at",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  email_change = "email_change",
  /** column name */
  email_change_confirm_status = "email_change_confirm_status",
  /** column name */
  email_change_sent_at = "email_change_sent_at",
  /** column name */
  email_change_token_current = "email_change_token_current",
  /** column name */
  email_change_token_new = "email_change_token_new",
  /** column name */
  email_confirmed_at = "email_confirmed_at",
  /** column name */
  encrypted_password = "encrypted_password",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  invited_at = "invited_at",
  /** column name */
  is_super_admin = "is_super_admin",
  /** column name */
  last_sign_in_at = "last_sign_in_at",
  /** column name */
  phone = "phone",
  /** column name */
  phone_change = "phone_change",
  /** column name */
  phone_change_sent_at = "phone_change_sent_at",
  /** column name */
  phone_change_token = "phone_change_token",
  /** column name */
  phone_confirmed_at = "phone_confirmed_at",
  /** column name */
  raw_app_meta_data = "raw_app_meta_data",
  /** column name */
  raw_user_meta_data = "raw_user_meta_data",
  /** column name */
  recovery_sent_at = "recovery_sent_at",
  /** column name */
  recovery_token = "recovery_token",
  /** column name */
  role = "role",
  /** column name */
  updated_at = "updated_at",
}

/** input type for updating data in table "auth.users" */
export interface auth_users_set_input {
  aud?: Maybe<Scalars["String"]>;
  confirmation_sent_at?: Maybe<Scalars["timestamptz"]>;
  confirmation_token?: Maybe<Scalars["String"]>;
  confirmed_at?: Maybe<Scalars["timestamptz"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  email_change?: Maybe<Scalars["String"]>;
  email_change_confirm_status?: Maybe<Scalars["smallint"]>;
  email_change_sent_at?: Maybe<Scalars["timestamptz"]>;
  email_change_token_current?: Maybe<Scalars["String"]>;
  email_change_token_new?: Maybe<Scalars["String"]>;
  email_confirmed_at?: Maybe<Scalars["timestamptz"]>;
  encrypted_password?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["uuid"]>;
  instance_id?: Maybe<Scalars["uuid"]>;
  invited_at?: Maybe<Scalars["timestamptz"]>;
  is_super_admin?: Maybe<Scalars["Boolean"]>;
  last_sign_in_at?: Maybe<Scalars["timestamptz"]>;
  phone?: Maybe<Scalars["String"]>;
  phone_change?: Maybe<Scalars["String"]>;
  phone_change_sent_at?: Maybe<Scalars["timestamptz"]>;
  phone_change_token?: Maybe<Scalars["String"]>;
  phone_confirmed_at?: Maybe<Scalars["timestamptz"]>;
  raw_app_meta_data?: Maybe<Scalars["jsonb"]>;
  raw_user_meta_data?: Maybe<Scalars["jsonb"]>;
  recovery_sent_at?: Maybe<Scalars["timestamptz"]>;
  recovery_token?: Maybe<Scalars["String"]>;
  role?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** update columns of table "auth.users" */
export enum auth_users_update_column {
  /** column name */
  aud = "aud",
  /** column name */
  confirmation_sent_at = "confirmation_sent_at",
  /** column name */
  confirmation_token = "confirmation_token",
  /** column name */
  confirmed_at = "confirmed_at",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  email_change = "email_change",
  /** column name */
  email_change_confirm_status = "email_change_confirm_status",
  /** column name */
  email_change_sent_at = "email_change_sent_at",
  /** column name */
  email_change_token_current = "email_change_token_current",
  /** column name */
  email_change_token_new = "email_change_token_new",
  /** column name */
  email_confirmed_at = "email_confirmed_at",
  /** column name */
  encrypted_password = "encrypted_password",
  /** column name */
  id = "id",
  /** column name */
  instance_id = "instance_id",
  /** column name */
  invited_at = "invited_at",
  /** column name */
  is_super_admin = "is_super_admin",
  /** column name */
  last_sign_in_at = "last_sign_in_at",
  /** column name */
  phone = "phone",
  /** column name */
  phone_change = "phone_change",
  /** column name */
  phone_change_sent_at = "phone_change_sent_at",
  /** column name */
  phone_change_token = "phone_change_token",
  /** column name */
  phone_confirmed_at = "phone_confirmed_at",
  /** column name */
  raw_app_meta_data = "raw_app_meta_data",
  /** column name */
  raw_user_meta_data = "raw_user_meta_data",
  /** column name */
  recovery_sent_at = "recovery_sent_at",
  /** column name */
  recovery_token = "recovery_token",
  /** column name */
  role = "role",
  /** column name */
  updated_at = "updated_at",
}

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export interface bigint_comparison_exp {
  _eq?: Maybe<Scalars["bigint"]>;
  _gt?: Maybe<Scalars["bigint"]>;
  _gte?: Maybe<Scalars["bigint"]>;
  _in?: Maybe<Array<Scalars["bigint"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["bigint"]>;
  _lte?: Maybe<Scalars["bigint"]>;
  _neq?: Maybe<Scalars["bigint"]>;
  _nin?: Maybe<Array<Scalars["bigint"]>>;
}

/** Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'. */
export interface bpchar_comparison_exp {
  _eq?: Maybe<Scalars["bpchar"]>;
  _gt?: Maybe<Scalars["bpchar"]>;
  _gte?: Maybe<Scalars["bpchar"]>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars["bpchar"]>;
  _in?: Maybe<Array<Scalars["bpchar"]>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars["bpchar"]>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars["bpchar"]>;
  _lt?: Maybe<Scalars["bpchar"]>;
  _lte?: Maybe<Scalars["bpchar"]>;
  _neq?: Maybe<Scalars["bpchar"]>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars["bpchar"]>;
  _nin?: Maybe<Array<Scalars["bpchar"]>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars["bpchar"]>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars["bpchar"]>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars["bpchar"]>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars["bpchar"]>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars["bpchar"]>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars["bpchar"]>;
}

/** order by aggregate values of table "brand_campaigns" */
export interface brand_campaigns_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<brand_campaigns_max_order_by>;
  min?: Maybe<brand_campaigns_min_order_by>;
}

/** input type for inserting array relation for remote table "brand_campaigns" */
export interface brand_campaigns_arr_rel_insert_input {
  data: Array<brand_campaigns_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<brand_campaigns_on_conflict>;
}

/** Boolean expression to filter rows from the table "brand_campaigns". All fields are combined with a logical 'AND'. */
export interface brand_campaigns_bool_exp {
  _and?: Maybe<Array<brand_campaigns_bool_exp>>;
  _not?: Maybe<brand_campaigns_bool_exp>;
  _or?: Maybe<Array<brand_campaigns_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  campaign?: Maybe<campaigns_bool_exp>;
  campaign_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "brand_campaigns" */
export enum brand_campaigns_constraint {
  /** unique or primary key constraint */
  brand_campaigns_pkey = "brand_campaigns_pkey",
}

/** input type for inserting data into table "brand_campaigns" */
export interface brand_campaigns_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  campaign?: Maybe<campaigns_obj_rel_insert_input>;
  campaign_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_campaigns" */
export interface brand_campaigns_max_order_by {
  brand_uuid?: Maybe<order_by>;
  campaign_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_campaigns" */
export interface brand_campaigns_min_order_by {
  brand_uuid?: Maybe<order_by>;
  campaign_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "brand_campaigns" */
export interface brand_campaigns_on_conflict {
  constraint: brand_campaigns_constraint;
  update_columns?: Array<brand_campaigns_update_column>;
  where?: Maybe<brand_campaigns_bool_exp>;
}

/** Ordering options when selecting data from "brand_campaigns". */
export interface brand_campaigns_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  campaign?: Maybe<campaigns_order_by>;
  campaign_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: brand_campaigns */
export interface brand_campaigns_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "brand_campaigns" */
export enum brand_campaigns_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  campaign_uuid = "campaign_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_campaigns" */
export interface brand_campaigns_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  campaign_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "brand_campaigns" */
export enum brand_campaigns_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  campaign_uuid = "campaign_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "brand_discussions" */
export interface brand_discussions_aggregate_order_by {
  avg?: Maybe<brand_discussions_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<brand_discussions_max_order_by>;
  min?: Maybe<brand_discussions_min_order_by>;
  stddev?: Maybe<brand_discussions_stddev_order_by>;
  stddev_pop?: Maybe<brand_discussions_stddev_pop_order_by>;
  stddev_samp?: Maybe<brand_discussions_stddev_samp_order_by>;
  sum?: Maybe<brand_discussions_sum_order_by>;
  var_pop?: Maybe<brand_discussions_var_pop_order_by>;
  var_samp?: Maybe<brand_discussions_var_samp_order_by>;
  variance?: Maybe<brand_discussions_variance_order_by>;
}

/** input type for inserting array relation for remote table "brand_discussions" */
export interface brand_discussions_arr_rel_insert_input {
  data: Array<brand_discussions_insert_input>;
}

/** order by avg() on columns of table "brand_discussions" */
export interface brand_discussions_avg_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "brand_discussions". All fields are combined with a logical 'AND'. */
export interface brand_discussions_bool_exp {
  _and?: Maybe<Array<brand_discussions_bool_exp>>;
  _not?: Maybe<brand_discussions_bool_exp>;
  _or?: Maybe<Array<brand_discussions_bool_exp>>;
  comment_count?: Maybe<Int_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  first_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  first_post_uuid?: Maybe<uuid_comparison_exp>;
  last_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  last_post_uuid?: Maybe<uuid_comparison_exp>;
  locked?: Maybe<Boolean_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  participant_count?: Maybe<Int_comparison_exp>;
  private?: Maybe<Boolean_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "brand_discussions" */
export interface brand_discussions_inc_input {
  comment_count?: Maybe<Scalars["Int"]>;
  participant_count?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "brand_discussions" */
export interface brand_discussions_insert_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_discussions" */
export interface brand_discussions_max_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_discussions" */
export interface brand_discussions_min_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "brand_discussions". */
export interface brand_discussions_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  locked?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  private?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "brand_discussions" */
export enum brand_discussions_select_column {
  /** column name */
  comment_count = "comment_count",
  /** column name */
  created_at = "created_at",
  /** column name */
  first_post_timestamp = "first_post_timestamp",
  /** column name */
  first_post_uuid = "first_post_uuid",
  /** column name */
  last_post_timestamp = "last_post_timestamp",
  /** column name */
  last_post_uuid = "last_post_uuid",
  /** column name */
  locked = "locked",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  participant_count = "participant_count",
  /** column name */
  private = "private",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_discussions" */
export interface brand_discussions_set_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "brand_discussions" */
export interface brand_discussions_stddev_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "brand_discussions" */
export interface brand_discussions_stddev_pop_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "brand_discussions" */
export interface brand_discussions_stddev_samp_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by sum() on columns of table "brand_discussions" */
export interface brand_discussions_sum_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by var_pop() on columns of table "brand_discussions" */
export interface brand_discussions_var_pop_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "brand_discussions" */
export interface brand_discussions_var_samp_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by variance() on columns of table "brand_discussions" */
export interface brand_discussions_variance_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "brand_inbox". All fields are combined with a logical 'AND'. */
export interface brand_inbox_bool_exp {
  _and?: Maybe<Array<brand_inbox_bool_exp>>;
  _not?: Maybe<brand_inbox_bool_exp>;
  _or?: Maybe<Array<brand_inbox_bool_exp>>;
  conversation_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  pubsub_token?: Maybe<String_comparison_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "brand_inbox" */
export interface brand_inbox_insert_input {
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "brand_inbox" */
export interface brand_inbox_obj_rel_insert_input {
  data: brand_inbox_insert_input;
}

/** Ordering options when selecting data from "brand_inbox". */
export interface brand_inbox_order_by {
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  pubsub_token?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "brand_inbox" */
export enum brand_inbox_select_column {
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  pubsub_token = "pubsub_token",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_inbox" */
export interface brand_inbox_set_input {
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "brand_media" */
export interface brand_media_aggregate_order_by {
  avg?: Maybe<brand_media_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<brand_media_max_order_by>;
  min?: Maybe<brand_media_min_order_by>;
  stddev?: Maybe<brand_media_stddev_order_by>;
  stddev_pop?: Maybe<brand_media_stddev_pop_order_by>;
  stddev_samp?: Maybe<brand_media_stddev_samp_order_by>;
  sum?: Maybe<brand_media_sum_order_by>;
  var_pop?: Maybe<brand_media_var_pop_order_by>;
  var_samp?: Maybe<brand_media_var_samp_order_by>;
  variance?: Maybe<brand_media_variance_order_by>;
}

/** input type for inserting array relation for remote table "brand_media" */
export interface brand_media_arr_rel_insert_input {
  data: Array<brand_media_insert_input>;
}

/** order by avg() on columns of table "brand_media" */
export interface brand_media_avg_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "brand_media". All fields are combined with a logical 'AND'. */
export interface brand_media_bool_exp {
  _and?: Maybe<Array<brand_media_bool_exp>>;
  _not?: Maybe<brand_media_bool_exp>;
  _or?: Maybe<Array<brand_media_bool_exp>>;
  collection_name?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  file_name?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  mime_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  s3_bucket_name?: Maybe<String_comparison_exp>;
  s3_key?: Maybe<String_comparison_exp>;
  size?: Maybe<bigint_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "brand_media" */
export interface brand_media_inc_input {
  index?: Maybe<Scalars["Int"]>;
  size?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "brand_media" */
export interface brand_media_insert_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_media" */
export interface brand_media_max_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_media" */
export interface brand_media_min_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "brand_media". */
export interface brand_media_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "brand_media" */
export enum brand_media_select_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_media" */
export interface brand_media_set_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "brand_media" */
export interface brand_media_stddev_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "brand_media" */
export interface brand_media_stddev_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "brand_media" */
export interface brand_media_stddev_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by sum() on columns of table "brand_media" */
export interface brand_media_sum_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_pop() on columns of table "brand_media" */
export interface brand_media_var_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "brand_media" */
export interface brand_media_var_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by variance() on columns of table "brand_media" */
export interface brand_media_variance_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by aggregate values of table "brand_tags" */
export interface brand_tags_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<brand_tags_max_order_by>;
  min?: Maybe<brand_tags_min_order_by>;
}

/** input type for inserting array relation for remote table "brand_tags" */
export interface brand_tags_arr_rel_insert_input {
  data: Array<brand_tags_insert_input>;
}

/** Boolean expression to filter rows from the table "brand_tags". All fields are combined with a logical 'AND'. */
export interface brand_tags_bool_exp {
  _and?: Maybe<Array<brand_tags_bool_exp>>;
  _not?: Maybe<brand_tags_bool_exp>;
  _or?: Maybe<Array<brand_tags_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  tag_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "brand_tags" */
export interface brand_tags_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_tags" */
export interface brand_tags_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_tags" */
export interface brand_tags_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "brand_tags". */
export interface brand_tags_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** select columns of table "brand_tags" */
export enum brand_tags_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  tag_uuid = "tag_uuid",
}

/** input type for updating data in table "brand_tags" */
export interface brand_tags_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "brand_users" */
export interface brand_users_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<brand_users_max_order_by>;
  min?: Maybe<brand_users_min_order_by>;
}

/** input type for inserting array relation for remote table "brand_users" */
export interface brand_users_arr_rel_insert_input {
  data: Array<brand_users_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<brand_users_on_conflict>;
}

/** Boolean expression to filter rows from the table "brand_users". All fields are combined with a logical 'AND'. */
export interface brand_users_bool_exp {
  _and?: Maybe<Array<brand_users_bool_exp>>;
  _not?: Maybe<brand_users_bool_exp>;
  _or?: Maybe<Array<brand_users_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  guests?: Maybe<guests_bool_exp>;
  job_title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "brand_users" */
export enum brand_users_constraint {
  /** unique or primary key constraint */
  brand_users_pkey = "brand_users_pkey",
}

/** input type for inserting data into table "brand_users" */
export interface brand_users_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guests?: Maybe<guests_arr_rel_insert_input>;
  job_title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_users" */
export interface brand_users_max_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  job_title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_users" */
export interface brand_users_min_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  job_title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "brand_users" */
export interface brand_users_obj_rel_insert_input {
  data: brand_users_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<brand_users_on_conflict>;
}

/** on conflict condition type for table "brand_users" */
export interface brand_users_on_conflict {
  constraint: brand_users_constraint;
  update_columns?: Array<brand_users_update_column>;
  where?: Maybe<brand_users_bool_exp>;
}

/** Ordering options when selecting data from "brand_users". */
export interface brand_users_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guests_aggregate?: Maybe<guests_aggregate_order_by>;
  job_title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: brand_users */
export interface brand_users_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "brand_users" */
export enum brand_users_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  job_title = "job_title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_users" */
export interface brand_users_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  job_title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "brand_users" */
export enum brand_users_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  job_title = "job_title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "brand_wishes" */
export interface brand_wishes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<brand_wishes_max_order_by>;
  min?: Maybe<brand_wishes_min_order_by>;
}

/** input type for inserting array relation for remote table "brand_wishes" */
export interface brand_wishes_arr_rel_insert_input {
  data: Array<brand_wishes_insert_input>;
}

/** Boolean expression to filter rows from the table "brand_wishes". All fields are combined with a logical 'AND'. */
export interface brand_wishes_bool_exp {
  _and?: Maybe<Array<brand_wishes_bool_exp>>;
  _not?: Maybe<brand_wishes_bool_exp>;
  _or?: Maybe<Array<brand_wishes_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "brand_wishes" */
export interface brand_wishes_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "brand_wishes" */
export interface brand_wishes_max_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "brand_wishes" */
export interface brand_wishes_min_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "brand_wishes". */
export interface brand_wishes_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "brand_wishes" */
export enum brand_wishes_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brand_wishes" */
export interface brand_wishes_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "brands". All fields are combined with a logical 'AND'. */
export interface brands_bool_exp {
  _and?: Maybe<Array<brands_bool_exp>>;
  _not?: Maybe<brands_bool_exp>;
  _or?: Maybe<Array<brands_bool_exp>>;
  available?: Maybe<Boolean_comparison_exp>;
  brand_campaigns?: Maybe<brand_campaigns_bool_exp>;
  brand_users?: Maybe<brand_users_bool_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  default_addons?: Maybe<default_addons_bool_exp>;
  description?: Maybe<String_comparison_exp>;
  discount_codes?: Maybe<discount_codes_bool_exp>;
  discussions?: Maybe<brand_discussions_bool_exp>;
  fine_print?: Maybe<String_comparison_exp>;
  floor_plans?: Maybe<floor_plans_bool_exp>;
  guests?: Maybe<guests_bool_exp>;
  inbox?: Maybe<brand_inbox_bool_exp>;
  invoices?: Maybe<invoice_bool_exp>;
  listings?: Maybe<listings_bool_exp>;
  media?: Maybe<brand_media_bool_exp>;
  name?: Maybe<String_comparison_exp>;
  online?: Maybe<Boolean_comparison_exp>;
  outlets?: Maybe<outlets_bool_exp>;
  passes?: Maybe<passes_bool_exp>;
  questionaires?: Maybe<questionaires_bool_exp>;
  requests?: Maybe<requests_bool_exp>;
  reservations?: Maybe<reservations_bool_exp>;
  reviews?: Maybe<reviews_bool_exp>;
  slug?: Maybe<String_comparison_exp>;
  spaces?: Maybe<spaces_bool_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  tags?: Maybe<brand_tags_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  wishes?: Maybe<brand_wishes_bool_exp>;
}

/** unique or primary key constraints on table "brands" */
export enum brands_constraint {
  /** unique or primary key constraint */
  brands_pkey = "brands_pkey",
  /** unique or primary key constraint */
  brands_slug_unique = "brands_slug_unique",
}

/** input type for inserting data into table "brands" */
export interface brands_insert_input {
  available?: Maybe<Scalars["Boolean"]>;
  brand_campaigns?: Maybe<brand_campaigns_arr_rel_insert_input>;
  brand_users?: Maybe<brand_users_arr_rel_insert_input>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  default_addons?: Maybe<default_addons_arr_rel_insert_input>;
  description?: Maybe<Scalars["String"]>;
  discount_codes?: Maybe<discount_codes_arr_rel_insert_input>;
  discussions?: Maybe<brand_discussions_arr_rel_insert_input>;
  fine_print?: Maybe<Scalars["String"]>;
  floor_plans?: Maybe<floor_plans_arr_rel_insert_input>;
  guests?: Maybe<guests_arr_rel_insert_input>;
  inbox?: Maybe<brand_inbox_obj_rel_insert_input>;
  invoices?: Maybe<invoice_arr_rel_insert_input>;
  listings?: Maybe<listings_arr_rel_insert_input>;
  media?: Maybe<brand_media_arr_rel_insert_input>;
  name?: Maybe<Scalars["String"]>;
  online?: Maybe<Scalars["Boolean"]>;
  outlets?: Maybe<outlets_arr_rel_insert_input>;
  passes?: Maybe<passes_arr_rel_insert_input>;
  questionaires?: Maybe<questionaires_arr_rel_insert_input>;
  requests?: Maybe<requests_arr_rel_insert_input>;
  reservations?: Maybe<reservations_arr_rel_insert_input>;
  reviews?: Maybe<reviews_arr_rel_insert_input>;
  slug?: Maybe<Scalars["String"]>;
  spaces?: Maybe<spaces_arr_rel_insert_input>;
  stripe_id?: Maybe<Scalars["String"]>;
  tags?: Maybe<brand_tags_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  wishes?: Maybe<brand_wishes_arr_rel_insert_input>;
}

/** input type for inserting object relation for remote table "brands" */
export interface brands_obj_rel_insert_input {
  data: brands_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<brands_on_conflict>;
}

/** on conflict condition type for table "brands" */
export interface brands_on_conflict {
  constraint: brands_constraint;
  update_columns?: Array<brands_update_column>;
  where?: Maybe<brands_bool_exp>;
}

/** Ordering options when selecting data from "brands". */
export interface brands_order_by {
  available?: Maybe<order_by>;
  brand_campaigns_aggregate?: Maybe<brand_campaigns_aggregate_order_by>;
  brand_users_aggregate?: Maybe<brand_users_aggregate_order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  default_addons_aggregate?: Maybe<default_addons_aggregate_order_by>;
  description?: Maybe<order_by>;
  discount_codes_aggregate?: Maybe<discount_codes_aggregate_order_by>;
  discussions_aggregate?: Maybe<brand_discussions_aggregate_order_by>;
  fine_print?: Maybe<order_by>;
  floor_plans_aggregate?: Maybe<floor_plans_aggregate_order_by>;
  guests_aggregate?: Maybe<guests_aggregate_order_by>;
  inbox?: Maybe<brand_inbox_order_by>;
  invoices_aggregate?: Maybe<invoice_aggregate_order_by>;
  listings_aggregate?: Maybe<listings_aggregate_order_by>;
  media_aggregate?: Maybe<brand_media_aggregate_order_by>;
  name?: Maybe<order_by>;
  online?: Maybe<order_by>;
  outlets_aggregate?: Maybe<outlets_aggregate_order_by>;
  passes_aggregate?: Maybe<passes_aggregate_order_by>;
  questionaires_aggregate?: Maybe<questionaires_aggregate_order_by>;
  requests_aggregate?: Maybe<requests_aggregate_order_by>;
  reservations_aggregate?: Maybe<reservations_aggregate_order_by>;
  reviews_aggregate?: Maybe<reviews_aggregate_order_by>;
  slug?: Maybe<order_by>;
  spaces_aggregate?: Maybe<spaces_aggregate_order_by>;
  stripe_id?: Maybe<order_by>;
  tags_aggregate?: Maybe<brand_tags_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wishes_aggregate?: Maybe<brand_wishes_aggregate_order_by>;
}

/** primary key columns input for table: brands */
export interface brands_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "brands" */
export enum brands_select_column {
  /** column name */
  available = "available",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  fine_print = "fine_print",
  /** column name */
  name = "name",
  /** column name */
  online = "online",
  /** column name */
  slug = "slug",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "brands" */
export interface brands_set_input {
  available?: Maybe<Scalars["Boolean"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  fine_print?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  online?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "brands" */
export enum brands_update_column {
  /** column name */
  available = "available",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  fine_print = "fine_print",
  /** column name */
  name = "name",
  /** column name */
  online = "online",
  /** column name */
  slug = "slug",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "campaigns". All fields are combined with a logical 'AND'. */
export interface campaigns_bool_exp {
  _and?: Maybe<Array<campaigns_bool_exp>>;
  _not?: Maybe<campaigns_bool_exp>;
  _or?: Maybe<Array<campaigns_bool_exp>>;
  authentication?: Maybe<String_comparison_exp>;
  brand_campaigns?: Maybe<brand_campaigns_bool_exp>;
  currency_code?: Maybe<bpchar_comparison_exp>;
  date_end?: Maybe<date_comparison_exp>;
  date_start?: Maybe<date_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  discount_codes?: Maybe<discount_codes_bool_exp>;
  name?: Maybe<String_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "campaigns" */
export enum campaigns_constraint {
  /** unique or primary key constraint */
  campaigns_pkey = "campaigns_pkey",
}

/** input type for inserting data into table "campaigns" */
export interface campaigns_insert_input {
  authentication?: Maybe<Scalars["String"]>;
  brand_campaigns?: Maybe<brand_campaigns_arr_rel_insert_input>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  description?: Maybe<Scalars["String"]>;
  discount_codes?: Maybe<discount_codes_arr_rel_insert_input>;
  name?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "campaigns" */
export interface campaigns_obj_rel_insert_input {
  data: campaigns_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<campaigns_on_conflict>;
}

/** on conflict condition type for table "campaigns" */
export interface campaigns_on_conflict {
  constraint: campaigns_constraint;
  update_columns?: Array<campaigns_update_column>;
  where?: Maybe<campaigns_bool_exp>;
}

/** Ordering options when selecting data from "campaigns". */
export interface campaigns_order_by {
  authentication?: Maybe<order_by>;
  brand_campaigns_aggregate?: Maybe<brand_campaigns_aggregate_order_by>;
  currency_code?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  description?: Maybe<order_by>;
  discount_codes_aggregate?: Maybe<discount_codes_aggregate_order_by>;
  name?: Maybe<order_by>;
  type?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: campaigns */
export interface campaigns_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "campaigns" */
export enum campaigns_select_column {
  /** column name */
  authentication = "authentication",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  description = "description",
  /** column name */
  name = "name",
  /** column name */
  type = "type",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "campaigns" */
export interface campaigns_set_input {
  authentication?: Maybe<Scalars["String"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  description?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "campaigns" */
export enum campaigns_update_column {
  /** column name */
  authentication = "authentication",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  description = "description",
  /** column name */
  name = "name",
  /** column name */
  type = "type",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "card" */
export interface card_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<card_max_order_by>;
  min?: Maybe<card_min_order_by>;
}

/** input type for inserting array relation for remote table "card" */
export interface card_arr_rel_insert_input {
  data: Array<card_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<card_on_conflict>;
}

/** Boolean expression to filter rows from the table "card". All fields are combined with a logical 'AND'. */
export interface card_bool_exp {
  _and?: Maybe<Array<card_bool_exp>>;
  _not?: Maybe<card_bool_exp>;
  _or?: Maybe<Array<card_bool_exp>>;
  brand?: Maybe<String_comparison_exp>;
  country?: Maybe<String_comparison_exp>;
  last_4?: Maybe<String_comparison_exp>;
  token?: Maybe<String_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "card" */
export enum card_constraint {
  /** unique or primary key constraint */
  card_pkey = "card_pkey",
}

/** input type for inserting data into table "card" */
export interface card_insert_input {
  brand?: Maybe<Scalars["String"]>;
  country?: Maybe<Scalars["String"]>;
  last_4?: Maybe<Scalars["String"]>;
  token?: Maybe<Scalars["String"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "card" */
export interface card_max_order_by {
  brand?: Maybe<order_by>;
  country?: Maybe<order_by>;
  last_4?: Maybe<order_by>;
  token?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "card" */
export interface card_min_order_by {
  brand?: Maybe<order_by>;
  country?: Maybe<order_by>;
  last_4?: Maybe<order_by>;
  token?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "card" */
export interface card_on_conflict {
  constraint: card_constraint;
  update_columns?: Array<card_update_column>;
  where?: Maybe<card_bool_exp>;
}

/** Ordering options when selecting data from "card". */
export interface card_order_by {
  brand?: Maybe<order_by>;
  country?: Maybe<order_by>;
  last_4?: Maybe<order_by>;
  token?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: card */
export interface card_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "card" */
export enum card_select_column {
  /** column name */
  brand = "brand",
  /** column name */
  country = "country",
  /** column name */
  last_4 = "last_4",
  /** column name */
  token = "token",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "card" */
export interface card_set_input {
  brand?: Maybe<Scalars["String"]>;
  country?: Maybe<Scalars["String"]>;
  last_4?: Maybe<Scalars["String"]>;
  token?: Maybe<Scalars["String"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "card" */
export enum card_update_column {
  /** column name */
  brand = "brand",
  /** column name */
  country = "country",
  /** column name */
  last_4 = "last_4",
  /** column name */
  token = "token",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "comment_comments" */
export interface comment_comments_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<comment_comments_max_order_by>;
  min?: Maybe<comment_comments_min_order_by>;
}

/** input type for inserting array relation for remote table "comment_comments" */
export interface comment_comments_arr_rel_insert_input {
  data: Array<comment_comments_insert_input>;
}

/** Boolean expression to filter rows from the table "comment_comments". All fields are combined with a logical 'AND'. */
export interface comment_comments_bool_exp {
  _and?: Maybe<Array<comment_comments_bool_exp>>;
  _not?: Maybe<comment_comments_bool_exp>;
  _or?: Maybe<Array<comment_comments_bool_exp>>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "comment_comments" */
export interface comment_comments_insert_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "comment_comments" */
export interface comment_comments_max_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "comment_comments" */
export interface comment_comments_min_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "comment_comments". */
export interface comment_comments_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "comment_comments" */
export enum comment_comments_select_column {
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "comment_comments" */
export interface comment_comments_set_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "comment_likes" */
export interface comment_likes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<comment_likes_max_order_by>;
  min?: Maybe<comment_likes_min_order_by>;
}

/** input type for inserting array relation for remote table "comment_likes" */
export interface comment_likes_arr_rel_insert_input {
  data: Array<comment_likes_insert_input>;
}

/** Boolean expression to filter rows from the table "comment_likes". All fields are combined with a logical 'AND'. */
export interface comment_likes_bool_exp {
  _and?: Maybe<Array<comment_likes_bool_exp>>;
  _not?: Maybe<comment_likes_bool_exp>;
  _or?: Maybe<Array<comment_likes_bool_exp>>;
  liked_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "comment_likes" */
export interface comment_likes_insert_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "comment_likes" */
export interface comment_likes_max_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "comment_likes" */
export interface comment_likes_min_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "comment_likes". */
export interface comment_likes_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** select columns of table "comment_likes" */
export enum comment_likes_select_column {
  /** column name */
  liked_at = "liked_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "comment_likes" */
export interface comment_likes_set_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "conversations" */
export interface conversations_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<conversations_max_order_by>;
  min?: Maybe<conversations_min_order_by>;
}

/** input type for inserting array relation for remote table "conversations" */
export interface conversations_arr_rel_insert_input {
  data: Array<conversations_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<conversations_on_conflict>;
}

/** Boolean expression to filter rows from the table "conversations". All fields are combined with a logical 'AND'. */
export interface conversations_bool_exp {
  _and?: Maybe<Array<conversations_bool_exp>>;
  _not?: Maybe<conversations_bool_exp>;
  _or?: Maybe<Array<conversations_bool_exp>>;
  avatar_url?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  inboxes?: Maybe<inboxes_bool_exp>;
  messages?: Maybe<messages_bool_exp>;
  owner_uuid?: Maybe<uuid_comparison_exp>;
  private?: Maybe<Boolean_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "conversations" */
export enum conversations_constraint {
  /** unique or primary key constraint */
  conversations_pkey = "conversations_pkey",
}

/** input type for inserting data into table "conversations" */
export interface conversations_insert_input {
  avatar_url?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  inboxes?: Maybe<inboxes_arr_rel_insert_input>;
  messages?: Maybe<messages_arr_rel_insert_input>;
  owner_uuid?: Maybe<Scalars["uuid"]>;
  private?: Maybe<Scalars["Boolean"]>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "conversations" */
export interface conversations_max_order_by {
  avatar_url?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  owner_uuid?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "conversations" */
export interface conversations_min_order_by {
  avatar_url?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  owner_uuid?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "conversations" */
export interface conversations_obj_rel_insert_input {
  data: conversations_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<conversations_on_conflict>;
}

/** on conflict condition type for table "conversations" */
export interface conversations_on_conflict {
  constraint: conversations_constraint;
  update_columns?: Array<conversations_update_column>;
  where?: Maybe<conversations_bool_exp>;
}

/** Ordering options when selecting data from "conversations". */
export interface conversations_order_by {
  avatar_url?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  inboxes_aggregate?: Maybe<inboxes_aggregate_order_by>;
  messages_aggregate?: Maybe<messages_aggregate_order_by>;
  owner_uuid?: Maybe<order_by>;
  private?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: conversations */
export interface conversations_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "conversations" */
export enum conversations_select_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  created_at = "created_at",
  /** column name */
  owner_uuid = "owner_uuid",
  /** column name */
  private = "private",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "conversations" */
export interface conversations_set_input {
  avatar_url?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  owner_uuid?: Maybe<Scalars["uuid"]>;
  private?: Maybe<Scalars["Boolean"]>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "conversations" */
export enum conversations_update_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  created_at = "created_at",
  /** column name */
  owner_uuid = "owner_uuid",
  /** column name */
  private = "private",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "currencies". All fields are combined with a logical 'AND'. */
export interface currencies_bool_exp {
  _and?: Maybe<Array<currencies_bool_exp>>;
  _not?: Maybe<currencies_bool_exp>;
  _or?: Maybe<Array<currencies_bool_exp>>;
  activated?: Maybe<Boolean_comparison_exp>;
  code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  decimal_mark?: Maybe<String_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  symbol?: Maybe<String_comparison_exp>;
  thousands_separator?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "currencies" */
export enum currencies_constraint {
  /** unique or primary key constraint */
  currencies_code_unique = "currencies_code_unique",
  /** unique or primary key constraint */
  currencies_pkey = "currencies_pkey",
}

/** input type for inserting data into table "currencies" */
export interface currencies_insert_input {
  activated?: Maybe<Scalars["Boolean"]>;
  code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  decimal_mark?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  symbol?: Maybe<Scalars["String"]>;
  thousands_separator?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "currencies" */
export interface currencies_on_conflict {
  constraint: currencies_constraint;
  update_columns?: Array<currencies_update_column>;
  where?: Maybe<currencies_bool_exp>;
}

/** Ordering options when selecting data from "currencies". */
export interface currencies_order_by {
  activated?: Maybe<order_by>;
  code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  decimal_mark?: Maybe<order_by>;
  name?: Maybe<order_by>;
  symbol?: Maybe<order_by>;
  thousands_separator?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: currencies */
export interface currencies_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "currencies" */
export enum currencies_select_column {
  /** column name */
  activated = "activated",
  /** column name */
  code = "code",
  /** column name */
  created_at = "created_at",
  /** column name */
  decimal_mark = "decimal_mark",
  /** column name */
  name = "name",
  /** column name */
  symbol = "symbol",
  /** column name */
  thousands_separator = "thousands_separator",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "currencies" */
export interface currencies_set_input {
  activated?: Maybe<Scalars["Boolean"]>;
  code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  decimal_mark?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  symbol?: Maybe<Scalars["String"]>;
  thousands_separator?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "currencies" */
export enum currencies_update_column {
  /** column name */
  activated = "activated",
  /** column name */
  code = "code",
  /** column name */
  created_at = "created_at",
  /** column name */
  decimal_mark = "decimal_mark",
  /** column name */
  name = "name",
  /** column name */
  symbol = "symbol",
  /** column name */
  thousands_separator = "thousands_separator",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "daily_rates". All fields are combined with a logical 'AND'. */
export interface daily_rates_bool_exp {
  _and?: Maybe<Array<daily_rates_bool_exp>>;
  _not?: Maybe<daily_rates_bool_exp>;
  _or?: Maybe<Array<daily_rates_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  currency_code?: Maybe<bpchar_comparison_exp>;
  rate?: Maybe<float8_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "daily_rates" */
export enum daily_rates_constraint {
  /** unique or primary key constraint */
  daily_rates_pkey = "daily_rates_pkey",
}

/** input type for incrementing numeric columns in table "daily_rates" */
export interface daily_rates_inc_input {
  rate?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "daily_rates" */
export interface daily_rates_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  rate?: Maybe<Scalars["float8"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "daily_rates" */
export interface daily_rates_on_conflict {
  constraint: daily_rates_constraint;
  update_columns?: Array<daily_rates_update_column>;
  where?: Maybe<daily_rates_bool_exp>;
}

/** Ordering options when selecting data from "daily_rates". */
export interface daily_rates_order_by {
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  rate?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: daily_rates */
export interface daily_rates_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "daily_rates" */
export enum daily_rates_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  rate = "rate",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "daily_rates" */
export interface daily_rates_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  rate?: Maybe<Scalars["float8"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "daily_rates" */
export enum daily_rates_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  rate = "rate",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export interface date_comparison_exp {
  _eq?: Maybe<Scalars["date"]>;
  _gt?: Maybe<Scalars["date"]>;
  _gte?: Maybe<Scalars["date"]>;
  _in?: Maybe<Array<Scalars["date"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["date"]>;
  _lte?: Maybe<Scalars["date"]>;
  _neq?: Maybe<Scalars["date"]>;
  _nin?: Maybe<Array<Scalars["date"]>>;
}

/** order by aggregate values of table "default_addons" */
export interface default_addons_aggregate_order_by {
  avg?: Maybe<default_addons_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<default_addons_max_order_by>;
  min?: Maybe<default_addons_min_order_by>;
  stddev?: Maybe<default_addons_stddev_order_by>;
  stddev_pop?: Maybe<default_addons_stddev_pop_order_by>;
  stddev_samp?: Maybe<default_addons_stddev_samp_order_by>;
  sum?: Maybe<default_addons_sum_order_by>;
  var_pop?: Maybe<default_addons_var_pop_order_by>;
  var_samp?: Maybe<default_addons_var_samp_order_by>;
  variance?: Maybe<default_addons_variance_order_by>;
}

/** input type for inserting array relation for remote table "default_addons" */
export interface default_addons_arr_rel_insert_input {
  data: Array<default_addons_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<default_addons_on_conflict>;
}

/** order by avg() on columns of table "default_addons" */
export interface default_addons_avg_order_by {
  price?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "default_addons". All fields are combined with a logical 'AND'. */
export interface default_addons_bool_exp {
  _and?: Maybe<Array<default_addons_bool_exp>>;
  _not?: Maybe<default_addons_bool_exp>;
  _or?: Maybe<Array<default_addons_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  outlet_has_addons?: Maybe<outlet_has_addons_bool_exp>;
  price?: Maybe<float8_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "default_addons" */
export enum default_addons_constraint {
  /** unique or primary key constraint */
  default_addons_pkey = "default_addons_pkey",
}

/** input type for incrementing numeric columns in table "default_addons" */
export interface default_addons_inc_input {
  price?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "default_addons" */
export interface default_addons_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  outlet_has_addons?: Maybe<outlet_has_addons_arr_rel_insert_input>;
  price?: Maybe<Scalars["float8"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "default_addons" */
export interface default_addons_max_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "default_addons" */
export interface default_addons_min_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "default_addons" */
export interface default_addons_obj_rel_insert_input {
  data: default_addons_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<default_addons_on_conflict>;
}

/** on conflict condition type for table "default_addons" */
export interface default_addons_on_conflict {
  constraint: default_addons_constraint;
  update_columns?: Array<default_addons_update_column>;
  where?: Maybe<default_addons_bool_exp>;
}

/** Ordering options when selecting data from "default_addons". */
export interface default_addons_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  outlet_has_addons_aggregate?: Maybe<outlet_has_addons_aggregate_order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: default_addons */
export interface default_addons_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "default_addons" */
export enum default_addons_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  price = "price",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "default_addons" */
export interface default_addons_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  price?: Maybe<Scalars["float8"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "default_addons" */
export interface default_addons_stddev_order_by {
  price?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "default_addons" */
export interface default_addons_stddev_pop_order_by {
  price?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "default_addons" */
export interface default_addons_stddev_samp_order_by {
  price?: Maybe<order_by>;
}

/** order by sum() on columns of table "default_addons" */
export interface default_addons_sum_order_by {
  price?: Maybe<order_by>;
}

/** update columns of table "default_addons" */
export enum default_addons_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  price = "price",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "default_addons" */
export interface default_addons_var_pop_order_by {
  price?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "default_addons" */
export interface default_addons_var_samp_order_by {
  price?: Maybe<order_by>;
}

/** order by variance() on columns of table "default_addons" */
export interface default_addons_variance_order_by {
  price?: Maybe<order_by>;
}

/** order by aggregate values of table "discount_codes" */
export interface discount_codes_aggregate_order_by {
  avg?: Maybe<discount_codes_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<discount_codes_max_order_by>;
  min?: Maybe<discount_codes_min_order_by>;
  stddev?: Maybe<discount_codes_stddev_order_by>;
  stddev_pop?: Maybe<discount_codes_stddev_pop_order_by>;
  stddev_samp?: Maybe<discount_codes_stddev_samp_order_by>;
  sum?: Maybe<discount_codes_sum_order_by>;
  var_pop?: Maybe<discount_codes_var_pop_order_by>;
  var_samp?: Maybe<discount_codes_var_samp_order_by>;
  variance?: Maybe<discount_codes_variance_order_by>;
}

/** input type for inserting array relation for remote table "discount_codes" */
export interface discount_codes_arr_rel_insert_input {
  data: Array<discount_codes_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<discount_codes_on_conflict>;
}

/** order by avg() on columns of table "discount_codes" */
export interface discount_codes_avg_order_by {
  value?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "discount_codes". All fields are combined with a logical 'AND'. */
export interface discount_codes_bool_exp {
  _and?: Maybe<Array<discount_codes_bool_exp>>;
  _not?: Maybe<discount_codes_bool_exp>;
  _or?: Maybe<Array<discount_codes_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  campaign?: Maybe<campaigns_bool_exp>;
  campaign_uuid?: Maybe<uuid_comparison_exp>;
  code?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  currency_code?: Maybe<bpchar_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  eligible_brand_uuid?: Maybe<uuid_comparison_exp>;
  eligible_country_code?: Maybe<bpchar_comparison_exp>;
  eligible_listing_uuid?: Maybe<uuid_comparison_exp>;
  fine_print?: Maybe<String_comparison_exp>;
  listing?: Maybe<listings_bool_exp>;
  sponsor?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  value?: Maybe<float8_comparison_exp>;
}

/** unique or primary key constraints on table "discount_codes" */
export enum discount_codes_constraint {
  /** unique or primary key constraint */
  discount_codes_pkey = "discount_codes_pkey",
}

/** input type for incrementing numeric columns in table "discount_codes" */
export interface discount_codes_inc_input {
  value?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "discount_codes" */
export interface discount_codes_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  campaign?: Maybe<campaigns_obj_rel_insert_input>;
  campaign_uuid?: Maybe<Scalars["uuid"]>;
  code?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  description?: Maybe<Scalars["String"]>;
  eligible_brand_uuid?: Maybe<Scalars["uuid"]>;
  eligible_country_code?: Maybe<Scalars["bpchar"]>;
  eligible_listing_uuid?: Maybe<Scalars["uuid"]>;
  fine_print?: Maybe<Scalars["String"]>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  /** brand | stayr */
  sponsor?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  value?: Maybe<Scalars["float8"]>;
}

/** order by max() on columns of table "discount_codes" */
export interface discount_codes_max_order_by {
  campaign_uuid?: Maybe<order_by>;
  code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  description?: Maybe<order_by>;
  eligible_brand_uuid?: Maybe<order_by>;
  eligible_country_code?: Maybe<order_by>;
  eligible_listing_uuid?: Maybe<order_by>;
  fine_print?: Maybe<order_by>;
  /** brand | stayr */
  sponsor?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** order by min() on columns of table "discount_codes" */
export interface discount_codes_min_order_by {
  campaign_uuid?: Maybe<order_by>;
  code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  description?: Maybe<order_by>;
  eligible_brand_uuid?: Maybe<order_by>;
  eligible_country_code?: Maybe<order_by>;
  eligible_listing_uuid?: Maybe<order_by>;
  fine_print?: Maybe<order_by>;
  /** brand | stayr */
  sponsor?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** on conflict condition type for table "discount_codes" */
export interface discount_codes_on_conflict {
  constraint: discount_codes_constraint;
  update_columns?: Array<discount_codes_update_column>;
  where?: Maybe<discount_codes_bool_exp>;
}

/** Ordering options when selecting data from "discount_codes". */
export interface discount_codes_order_by {
  brand?: Maybe<brands_order_by>;
  campaign?: Maybe<campaigns_order_by>;
  campaign_uuid?: Maybe<order_by>;
  code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  description?: Maybe<order_by>;
  eligible_brand_uuid?: Maybe<order_by>;
  eligible_country_code?: Maybe<order_by>;
  eligible_listing_uuid?: Maybe<order_by>;
  fine_print?: Maybe<order_by>;
  listing?: Maybe<listings_order_by>;
  sponsor?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** primary key columns input for table: discount_codes */
export interface discount_codes_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "discount_codes" */
export enum discount_codes_select_column {
  /** column name */
  campaign_uuid = "campaign_uuid",
  /** column name */
  code = "code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  description = "description",
  /** column name */
  eligible_brand_uuid = "eligible_brand_uuid",
  /** column name */
  eligible_country_code = "eligible_country_code",
  /** column name */
  eligible_listing_uuid = "eligible_listing_uuid",
  /** column name */
  fine_print = "fine_print",
  /** column name */
  sponsor = "sponsor",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  value = "value",
}

/** input type for updating data in table "discount_codes" */
export interface discount_codes_set_input {
  campaign_uuid?: Maybe<Scalars["uuid"]>;
  code?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  description?: Maybe<Scalars["String"]>;
  eligible_brand_uuid?: Maybe<Scalars["uuid"]>;
  eligible_country_code?: Maybe<Scalars["bpchar"]>;
  eligible_listing_uuid?: Maybe<Scalars["uuid"]>;
  fine_print?: Maybe<Scalars["String"]>;
  /** brand | stayr */
  sponsor?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  value?: Maybe<Scalars["float8"]>;
}

/** order by stddev() on columns of table "discount_codes" */
export interface discount_codes_stddev_order_by {
  value?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "discount_codes" */
export interface discount_codes_stddev_pop_order_by {
  value?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "discount_codes" */
export interface discount_codes_stddev_samp_order_by {
  value?: Maybe<order_by>;
}

/** order by sum() on columns of table "discount_codes" */
export interface discount_codes_sum_order_by {
  value?: Maybe<order_by>;
}

/** update columns of table "discount_codes" */
export enum discount_codes_update_column {
  /** column name */
  campaign_uuid = "campaign_uuid",
  /** column name */
  code = "code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  description = "description",
  /** column name */
  eligible_brand_uuid = "eligible_brand_uuid",
  /** column name */
  eligible_country_code = "eligible_country_code",
  /** column name */
  eligible_listing_uuid = "eligible_listing_uuid",
  /** column name */
  fine_print = "fine_print",
  /** column name */
  sponsor = "sponsor",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  value = "value",
}

/** order by var_pop() on columns of table "discount_codes" */
export interface discount_codes_var_pop_order_by {
  value?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "discount_codes" */
export interface discount_codes_var_samp_order_by {
  value?: Maybe<order_by>;
}

/** order by variance() on columns of table "discount_codes" */
export interface discount_codes_variance_order_by {
  value?: Maybe<order_by>;
}

/** order by aggregate values of table "discussion_user" */
export interface discussion_user_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<discussion_user_max_order_by>;
  min?: Maybe<discussion_user_min_order_by>;
}

/** input type for inserting array relation for remote table "discussion_user" */
export interface discussion_user_arr_rel_insert_input {
  data: Array<discussion_user_insert_input>;
}

/** Boolean expression to filter rows from the table "discussion_user". All fields are combined with a logical 'AND'. */
export interface discussion_user_bool_exp {
  _and?: Maybe<Array<discussion_user_bool_exp>>;
  _not?: Maybe<discussion_user_bool_exp>;
  _or?: Maybe<Array<discussion_user_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  discussion?: Maybe<discussions_bool_exp>;
  discussion_uuid?: Maybe<uuid_comparison_exp>;
  last_read_at?: Maybe<timestamptz_comparison_exp>;
  last_read_post_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "discussion_user" */
export interface discussion_user_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  discussion?: Maybe<discussions_obj_rel_insert_input>;
  discussion_uuid?: Maybe<Scalars["uuid"]>;
  last_read_at?: Maybe<Scalars["timestamptz"]>;
  last_read_post_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "discussion_user" */
export interface discussion_user_max_order_by {
  created_at?: Maybe<order_by>;
  discussion_uuid?: Maybe<order_by>;
  last_read_at?: Maybe<order_by>;
  last_read_post_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "discussion_user" */
export interface discussion_user_min_order_by {
  created_at?: Maybe<order_by>;
  discussion_uuid?: Maybe<order_by>;
  last_read_at?: Maybe<order_by>;
  last_read_post_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "discussion_user". */
export interface discussion_user_order_by {
  created_at?: Maybe<order_by>;
  discussion?: Maybe<discussions_order_by>;
  discussion_uuid?: Maybe<order_by>;
  last_read_at?: Maybe<order_by>;
  last_read_post_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
}

/** select columns of table "discussion_user" */
export enum discussion_user_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  discussion_uuid = "discussion_uuid",
  /** column name */
  last_read_at = "last_read_at",
  /** column name */
  last_read_post_uuid = "last_read_post_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "discussion_user" */
export interface discussion_user_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  discussion_uuid?: Maybe<Scalars["uuid"]>;
  last_read_at?: Maybe<Scalars["timestamptz"]>;
  last_read_post_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "discussions". All fields are combined with a logical 'AND'. */
export interface discussions_bool_exp {
  _and?: Maybe<Array<discussions_bool_exp>>;
  _not?: Maybe<discussions_bool_exp>;
  _or?: Maybe<Array<discussions_bool_exp>>;
  comment_count?: Maybe<Int_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  discussion_users?: Maybe<discussion_user_bool_exp>;
  first_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  first_post_uuid?: Maybe<uuid_comparison_exp>;
  last_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  last_post_uuid?: Maybe<uuid_comparison_exp>;
  locked?: Maybe<Boolean_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  participant_count?: Maybe<Int_comparison_exp>;
  posts?: Maybe<posts_bool_exp>;
  private?: Maybe<Boolean_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "discussions" */
export enum discussions_constraint {
  /** unique or primary key constraint */
  discussions_pkey = "discussions_pkey",
  /** unique or primary key constraint */
  discussions_slug_unique = "discussions_slug_unique",
}

/** input type for incrementing numeric columns in table "discussions" */
export interface discussions_inc_input {
  comment_count?: Maybe<Scalars["Int"]>;
  participant_count?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "discussions" */
export interface discussions_insert_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  discussion_users?: Maybe<discussion_user_arr_rel_insert_input>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  posts?: Maybe<posts_arr_rel_insert_input>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "discussions" */
export interface discussions_obj_rel_insert_input {
  data: discussions_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<discussions_on_conflict>;
}

/** on conflict condition type for table "discussions" */
export interface discussions_on_conflict {
  constraint: discussions_constraint;
  update_columns?: Array<discussions_update_column>;
  where?: Maybe<discussions_bool_exp>;
}

/** Ordering options when selecting data from "discussions". */
export interface discussions_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  discussion_users_aggregate?: Maybe<discussion_user_aggregate_order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  locked?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  posts_aggregate?: Maybe<posts_aggregate_order_by>;
  private?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: discussions */
export interface discussions_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "discussions" */
export enum discussions_select_column {
  /** column name */
  comment_count = "comment_count",
  /** column name */
  created_at = "created_at",
  /** column name */
  first_post_timestamp = "first_post_timestamp",
  /** column name */
  first_post_uuid = "first_post_uuid",
  /** column name */
  last_post_timestamp = "last_post_timestamp",
  /** column name */
  last_post_uuid = "last_post_uuid",
  /** column name */
  locked = "locked",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  participant_count = "participant_count",
  /** column name */
  private = "private",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "discussions" */
export interface discussions_set_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "discussions" */
export enum discussions_update_column {
  /** column name */
  comment_count = "comment_count",
  /** column name */
  created_at = "created_at",
  /** column name */
  first_post_timestamp = "first_post_timestamp",
  /** column name */
  first_post_uuid = "first_post_uuid",
  /** column name */
  last_post_timestamp = "last_post_timestamp",
  /** column name */
  last_post_uuid = "last_post_uuid",
  /** column name */
  locked = "locked",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  participant_count = "participant_count",
  /** column name */
  private = "private",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "extensions" */
export interface extensions_aggregate_order_by {
  avg?: Maybe<extensions_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<extensions_max_order_by>;
  min?: Maybe<extensions_min_order_by>;
  stddev?: Maybe<extensions_stddev_order_by>;
  stddev_pop?: Maybe<extensions_stddev_pop_order_by>;
  stddev_samp?: Maybe<extensions_stddev_samp_order_by>;
  sum?: Maybe<extensions_sum_order_by>;
  var_pop?: Maybe<extensions_var_pop_order_by>;
  var_samp?: Maybe<extensions_var_samp_order_by>;
  variance?: Maybe<extensions_variance_order_by>;
}

/** input type for inserting array relation for remote table "extensions" */
export interface extensions_arr_rel_insert_input {
  data: Array<extensions_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<extensions_on_conflict>;
}

/** order by avg() on columns of table "extensions" */
export interface extensions_avg_order_by {
  minutes?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "extensions". All fields are combined with a logical 'AND'. */
export interface extensions_bool_exp {
  _and?: Maybe<Array<extensions_bool_exp>>;
  _not?: Maybe<extensions_bool_exp>;
  _or?: Maybe<Array<extensions_bool_exp>>;
  id?: Maybe<String_comparison_exp>;
  minutes?: Maybe<Int_comparison_exp>;
  request?: Maybe<requests_bool_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "extensions" */
export enum extensions_constraint {
  /** unique or primary key constraint */
  extensions_pkey = "extensions_pkey",
}

/** Boolean expression to filter rows from the table "extensions.geography_columns". All fields are combined with a logical 'AND'. */
export interface extensions_geography_columns_bool_exp {
  _and?: Maybe<Array<extensions_geography_columns_bool_exp>>;
  _not?: Maybe<extensions_geography_columns_bool_exp>;
  _or?: Maybe<Array<extensions_geography_columns_bool_exp>>;
  coord_dimension?: Maybe<Int_comparison_exp>;
  f_geography_column?: Maybe<name_comparison_exp>;
  f_table_catalog?: Maybe<name_comparison_exp>;
  f_table_name?: Maybe<name_comparison_exp>;
  f_table_schema?: Maybe<name_comparison_exp>;
  srid?: Maybe<Int_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
}

/** Ordering options when selecting data from "extensions.geography_columns". */
export interface extensions_geography_columns_order_by {
  coord_dimension?: Maybe<order_by>;
  f_geography_column?: Maybe<order_by>;
  f_table_catalog?: Maybe<order_by>;
  f_table_name?: Maybe<order_by>;
  f_table_schema?: Maybe<order_by>;
  srid?: Maybe<order_by>;
  type?: Maybe<order_by>;
}

/** select columns of table "extensions.geography_columns" */
export enum extensions_geography_columns_select_column {
  /** column name */
  coord_dimension = "coord_dimension",
  /** column name */
  f_geography_column = "f_geography_column",
  /** column name */
  f_table_catalog = "f_table_catalog",
  /** column name */
  f_table_name = "f_table_name",
  /** column name */
  f_table_schema = "f_table_schema",
  /** column name */
  srid = "srid",
  /** column name */
  type = "type",
}

/** Boolean expression to filter rows from the table "extensions.geometry_columns". All fields are combined with a logical 'AND'. */
export interface extensions_geometry_columns_bool_exp {
  _and?: Maybe<Array<extensions_geometry_columns_bool_exp>>;
  _not?: Maybe<extensions_geometry_columns_bool_exp>;
  _or?: Maybe<Array<extensions_geometry_columns_bool_exp>>;
  coord_dimension?: Maybe<Int_comparison_exp>;
  f_geometry_column?: Maybe<name_comparison_exp>;
  f_table_catalog?: Maybe<String_comparison_exp>;
  f_table_name?: Maybe<name_comparison_exp>;
  f_table_schema?: Maybe<name_comparison_exp>;
  srid?: Maybe<Int_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
}

/** input type for incrementing numeric columns in table "extensions.geometry_columns" */
export interface extensions_geometry_columns_inc_input {
  coord_dimension?: Maybe<Scalars["Int"]>;
  srid?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "extensions.geometry_columns" */
export interface extensions_geometry_columns_insert_input {
  coord_dimension?: Maybe<Scalars["Int"]>;
  f_geometry_column?: Maybe<Scalars["name"]>;
  f_table_catalog?: Maybe<Scalars["String"]>;
  f_table_name?: Maybe<Scalars["name"]>;
  f_table_schema?: Maybe<Scalars["name"]>;
  srid?: Maybe<Scalars["Int"]>;
  type?: Maybe<Scalars["String"]>;
}

/** Ordering options when selecting data from "extensions.geometry_columns". */
export interface extensions_geometry_columns_order_by {
  coord_dimension?: Maybe<order_by>;
  f_geometry_column?: Maybe<order_by>;
  f_table_catalog?: Maybe<order_by>;
  f_table_name?: Maybe<order_by>;
  f_table_schema?: Maybe<order_by>;
  srid?: Maybe<order_by>;
  type?: Maybe<order_by>;
}

/** select columns of table "extensions.geometry_columns" */
export enum extensions_geometry_columns_select_column {
  /** column name */
  coord_dimension = "coord_dimension",
  /** column name */
  f_geometry_column = "f_geometry_column",
  /** column name */
  f_table_catalog = "f_table_catalog",
  /** column name */
  f_table_name = "f_table_name",
  /** column name */
  f_table_schema = "f_table_schema",
  /** column name */
  srid = "srid",
  /** column name */
  type = "type",
}

/** input type for updating data in table "extensions.geometry_columns" */
export interface extensions_geometry_columns_set_input {
  coord_dimension?: Maybe<Scalars["Int"]>;
  f_geometry_column?: Maybe<Scalars["name"]>;
  f_table_catalog?: Maybe<Scalars["String"]>;
  f_table_name?: Maybe<Scalars["name"]>;
  f_table_schema?: Maybe<Scalars["name"]>;
  srid?: Maybe<Scalars["Int"]>;
  type?: Maybe<Scalars["String"]>;
}

/** input type for incrementing numeric columns in table "extensions" */
export interface extensions_inc_input {
  minutes?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "extensions" */
export interface extensions_insert_input {
  id?: Maybe<Scalars["String"]>;
  minutes?: Maybe<Scalars["Int"]>;
  request?: Maybe<requests_obj_rel_insert_input>;
  request_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "extensions" */
export interface extensions_max_order_by {
  id?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "extensions" */
export interface extensions_min_order_by {
  id?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "extensions" */
export interface extensions_on_conflict {
  constraint: extensions_constraint;
  update_columns?: Array<extensions_update_column>;
  where?: Maybe<extensions_bool_exp>;
}

/** Ordering options when selecting data from "extensions". */
export interface extensions_order_by {
  id?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  request?: Maybe<requests_order_by>;
  request_uuid?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "extensions.pg_stat_statements". All fields are combined with a logical 'AND'. */
export interface extensions_pg_stat_statements_bool_exp {
  _and?: Maybe<Array<extensions_pg_stat_statements_bool_exp>>;
  _not?: Maybe<extensions_pg_stat_statements_bool_exp>;
  _or?: Maybe<Array<extensions_pg_stat_statements_bool_exp>>;
  blk_read_time?: Maybe<float8_comparison_exp>;
  blk_write_time?: Maybe<float8_comparison_exp>;
  calls?: Maybe<bigint_comparison_exp>;
  dbid?: Maybe<oid_comparison_exp>;
  local_blks_dirtied?: Maybe<bigint_comparison_exp>;
  local_blks_hit?: Maybe<bigint_comparison_exp>;
  local_blks_read?: Maybe<bigint_comparison_exp>;
  local_blks_written?: Maybe<bigint_comparison_exp>;
  max_exec_time?: Maybe<float8_comparison_exp>;
  max_plan_time?: Maybe<float8_comparison_exp>;
  mean_exec_time?: Maybe<float8_comparison_exp>;
  mean_plan_time?: Maybe<float8_comparison_exp>;
  min_exec_time?: Maybe<float8_comparison_exp>;
  min_plan_time?: Maybe<float8_comparison_exp>;
  plans?: Maybe<bigint_comparison_exp>;
  query?: Maybe<String_comparison_exp>;
  queryid?: Maybe<bigint_comparison_exp>;
  rows?: Maybe<bigint_comparison_exp>;
  shared_blks_dirtied?: Maybe<bigint_comparison_exp>;
  shared_blks_hit?: Maybe<bigint_comparison_exp>;
  shared_blks_read?: Maybe<bigint_comparison_exp>;
  shared_blks_written?: Maybe<bigint_comparison_exp>;
  stddev_exec_time?: Maybe<float8_comparison_exp>;
  stddev_plan_time?: Maybe<float8_comparison_exp>;
  temp_blks_read?: Maybe<bigint_comparison_exp>;
  temp_blks_written?: Maybe<bigint_comparison_exp>;
  total_exec_time?: Maybe<float8_comparison_exp>;
  total_plan_time?: Maybe<float8_comparison_exp>;
  userid?: Maybe<oid_comparison_exp>;
  wal_bytes?: Maybe<numeric_comparison_exp>;
  wal_fpi?: Maybe<bigint_comparison_exp>;
  wal_records?: Maybe<bigint_comparison_exp>;
}

/** Ordering options when selecting data from "extensions.pg_stat_statements". */
export interface extensions_pg_stat_statements_order_by {
  blk_read_time?: Maybe<order_by>;
  blk_write_time?: Maybe<order_by>;
  calls?: Maybe<order_by>;
  dbid?: Maybe<order_by>;
  local_blks_dirtied?: Maybe<order_by>;
  local_blks_hit?: Maybe<order_by>;
  local_blks_read?: Maybe<order_by>;
  local_blks_written?: Maybe<order_by>;
  max_exec_time?: Maybe<order_by>;
  max_plan_time?: Maybe<order_by>;
  mean_exec_time?: Maybe<order_by>;
  mean_plan_time?: Maybe<order_by>;
  min_exec_time?: Maybe<order_by>;
  min_plan_time?: Maybe<order_by>;
  plans?: Maybe<order_by>;
  query?: Maybe<order_by>;
  queryid?: Maybe<order_by>;
  rows?: Maybe<order_by>;
  shared_blks_dirtied?: Maybe<order_by>;
  shared_blks_hit?: Maybe<order_by>;
  shared_blks_read?: Maybe<order_by>;
  shared_blks_written?: Maybe<order_by>;
  stddev_exec_time?: Maybe<order_by>;
  stddev_plan_time?: Maybe<order_by>;
  temp_blks_read?: Maybe<order_by>;
  temp_blks_written?: Maybe<order_by>;
  total_exec_time?: Maybe<order_by>;
  total_plan_time?: Maybe<order_by>;
  userid?: Maybe<order_by>;
  wal_bytes?: Maybe<order_by>;
  wal_fpi?: Maybe<order_by>;
  wal_records?: Maybe<order_by>;
}

/** select columns of table "extensions.pg_stat_statements" */
export enum extensions_pg_stat_statements_select_column {
  /** column name */
  blk_read_time = "blk_read_time",
  /** column name */
  blk_write_time = "blk_write_time",
  /** column name */
  calls = "calls",
  /** column name */
  dbid = "dbid",
  /** column name */
  local_blks_dirtied = "local_blks_dirtied",
  /** column name */
  local_blks_hit = "local_blks_hit",
  /** column name */
  local_blks_read = "local_blks_read",
  /** column name */
  local_blks_written = "local_blks_written",
  /** column name */
  max_exec_time = "max_exec_time",
  /** column name */
  max_plan_time = "max_plan_time",
  /** column name */
  mean_exec_time = "mean_exec_time",
  /** column name */
  mean_plan_time = "mean_plan_time",
  /** column name */
  min_exec_time = "min_exec_time",
  /** column name */
  min_plan_time = "min_plan_time",
  /** column name */
  plans = "plans",
  /** column name */
  query = "query",
  /** column name */
  queryid = "queryid",
  /** column name */
  rows = "rows",
  /** column name */
  shared_blks_dirtied = "shared_blks_dirtied",
  /** column name */
  shared_blks_hit = "shared_blks_hit",
  /** column name */
  shared_blks_read = "shared_blks_read",
  /** column name */
  shared_blks_written = "shared_blks_written",
  /** column name */
  stddev_exec_time = "stddev_exec_time",
  /** column name */
  stddev_plan_time = "stddev_plan_time",
  /** column name */
  temp_blks_read = "temp_blks_read",
  /** column name */
  temp_blks_written = "temp_blks_written",
  /** column name */
  total_exec_time = "total_exec_time",
  /** column name */
  total_plan_time = "total_plan_time",
  /** column name */
  userid = "userid",
  /** column name */
  wal_bytes = "wal_bytes",
  /** column name */
  wal_fpi = "wal_fpi",
  /** column name */
  wal_records = "wal_records",
}

/** primary key columns input for table: extensions */
export interface extensions_pk_columns_input {
  id: Scalars["String"];
}

/** select columns of table "extensions" */
export enum extensions_select_column {
  /** column name */
  id = "id",
  /** column name */
  minutes = "minutes",
  /** column name */
  request_uuid = "request_uuid",
}

/** input type for updating data in table "extensions" */
export interface extensions_set_input {
  id?: Maybe<Scalars["String"]>;
  minutes?: Maybe<Scalars["Int"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "extensions.spatial_ref_sys". All fields are combined with a logical 'AND'. */
export interface extensions_spatial_ref_sys_bool_exp {
  _and?: Maybe<Array<extensions_spatial_ref_sys_bool_exp>>;
  _not?: Maybe<extensions_spatial_ref_sys_bool_exp>;
  _or?: Maybe<Array<extensions_spatial_ref_sys_bool_exp>>;
  auth_name?: Maybe<String_comparison_exp>;
  auth_srid?: Maybe<Int_comparison_exp>;
  proj4text?: Maybe<String_comparison_exp>;
  srid?: Maybe<Int_comparison_exp>;
  srtext?: Maybe<String_comparison_exp>;
}

/** unique or primary key constraints on table "extensions.spatial_ref_sys" */
export enum extensions_spatial_ref_sys_constraint {
  /** unique or primary key constraint */
  spatial_ref_sys_pkey = "spatial_ref_sys_pkey",
}

/** input type for incrementing numeric columns in table "extensions.spatial_ref_sys" */
export interface extensions_spatial_ref_sys_inc_input {
  auth_srid?: Maybe<Scalars["Int"]>;
  srid?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "extensions.spatial_ref_sys" */
export interface extensions_spatial_ref_sys_insert_input {
  auth_name?: Maybe<Scalars["String"]>;
  auth_srid?: Maybe<Scalars["Int"]>;
  proj4text?: Maybe<Scalars["String"]>;
  srid?: Maybe<Scalars["Int"]>;
  srtext?: Maybe<Scalars["String"]>;
}

/** on conflict condition type for table "extensions.spatial_ref_sys" */
export interface extensions_spatial_ref_sys_on_conflict {
  constraint: extensions_spatial_ref_sys_constraint;
  update_columns?: Array<extensions_spatial_ref_sys_update_column>;
  where?: Maybe<extensions_spatial_ref_sys_bool_exp>;
}

/** Ordering options when selecting data from "extensions.spatial_ref_sys". */
export interface extensions_spatial_ref_sys_order_by {
  auth_name?: Maybe<order_by>;
  auth_srid?: Maybe<order_by>;
  proj4text?: Maybe<order_by>;
  srid?: Maybe<order_by>;
  srtext?: Maybe<order_by>;
}

/** primary key columns input for table: extensions_spatial_ref_sys */
export interface extensions_spatial_ref_sys_pk_columns_input {
  srid: Scalars["Int"];
}

/** select columns of table "extensions.spatial_ref_sys" */
export enum extensions_spatial_ref_sys_select_column {
  /** column name */
  auth_name = "auth_name",
  /** column name */
  auth_srid = "auth_srid",
  /** column name */
  proj4text = "proj4text",
  /** column name */
  srid = "srid",
  /** column name */
  srtext = "srtext",
}

/** input type for updating data in table "extensions.spatial_ref_sys" */
export interface extensions_spatial_ref_sys_set_input {
  auth_name?: Maybe<Scalars["String"]>;
  auth_srid?: Maybe<Scalars["Int"]>;
  proj4text?: Maybe<Scalars["String"]>;
  srid?: Maybe<Scalars["Int"]>;
  srtext?: Maybe<Scalars["String"]>;
}

/** update columns of table "extensions.spatial_ref_sys" */
export enum extensions_spatial_ref_sys_update_column {
  /** column name */
  auth_name = "auth_name",
  /** column name */
  auth_srid = "auth_srid",
  /** column name */
  proj4text = "proj4text",
  /** column name */
  srid = "srid",
  /** column name */
  srtext = "srtext",
}

/** order by stddev() on columns of table "extensions" */
export interface extensions_stddev_order_by {
  minutes?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "extensions" */
export interface extensions_stddev_pop_order_by {
  minutes?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "extensions" */
export interface extensions_stddev_samp_order_by {
  minutes?: Maybe<order_by>;
}

/** order by sum() on columns of table "extensions" */
export interface extensions_sum_order_by {
  minutes?: Maybe<order_by>;
}

/** update columns of table "extensions" */
export enum extensions_update_column {
  /** column name */
  id = "id",
  /** column name */
  minutes = "minutes",
  /** column name */
  request_uuid = "request_uuid",
}

/** order by var_pop() on columns of table "extensions" */
export interface extensions_var_pop_order_by {
  minutes?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "extensions" */
export interface extensions_var_samp_order_by {
  minutes?: Maybe<order_by>;
}

/** order by variance() on columns of table "extensions" */
export interface extensions_variance_order_by {
  minutes?: Maybe<order_by>;
}

/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export interface float8_comparison_exp {
  _eq?: Maybe<Scalars["float8"]>;
  _gt?: Maybe<Scalars["float8"]>;
  _gte?: Maybe<Scalars["float8"]>;
  _in?: Maybe<Array<Scalars["float8"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["float8"]>;
  _lte?: Maybe<Scalars["float8"]>;
  _neq?: Maybe<Scalars["float8"]>;
  _nin?: Maybe<Array<Scalars["float8"]>>;
}

/** order by aggregate values of table "floor_plan_grid" */
export interface floor_plan_grid_aggregate_order_by {
  avg?: Maybe<floor_plan_grid_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<floor_plan_grid_max_order_by>;
  min?: Maybe<floor_plan_grid_min_order_by>;
  stddev?: Maybe<floor_plan_grid_stddev_order_by>;
  stddev_pop?: Maybe<floor_plan_grid_stddev_pop_order_by>;
  stddev_samp?: Maybe<floor_plan_grid_stddev_samp_order_by>;
  sum?: Maybe<floor_plan_grid_sum_order_by>;
  var_pop?: Maybe<floor_plan_grid_var_pop_order_by>;
  var_samp?: Maybe<floor_plan_grid_var_samp_order_by>;
  variance?: Maybe<floor_plan_grid_variance_order_by>;
}

/** input type for inserting array relation for remote table "floor_plan_grid" */
export interface floor_plan_grid_arr_rel_insert_input {
  data: Array<floor_plan_grid_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<floor_plan_grid_on_conflict>;
}

/** order by avg() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_avg_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "floor_plan_grid". All fields are combined with a logical 'AND'. */
export interface floor_plan_grid_bool_exp {
  _and?: Maybe<Array<floor_plan_grid_bool_exp>>;
  _not?: Maybe<floor_plan_grid_bool_exp>;
  _or?: Maybe<Array<floor_plan_grid_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  floor_plan?: Maybe<floor_plans_bool_exp>;
  floor_plan_uuid?: Maybe<uuid_comparison_exp>;
  height?: Maybe<float8_comparison_exp>;
  is_overlay?: Maybe<Boolean_comparison_exp>;
  path_blocking?: Maybe<Boolean_comparison_exp>;
  spaces?: Maybe<spaces_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  width?: Maybe<float8_comparison_exp>;
  x_axis?: Maybe<float8_comparison_exp>;
  y_axis?: Maybe<float8_comparison_exp>;
}

/** unique or primary key constraints on table "floor_plan_grid" */
export enum floor_plan_grid_constraint {
  /** unique or primary key constraint */
  floor_plan_grid_pkey = "floor_plan_grid_pkey",
}

/** input type for incrementing numeric columns in table "floor_plan_grid" */
export interface floor_plan_grid_inc_input {
  height?: Maybe<Scalars["float8"]>;
  width?: Maybe<Scalars["float8"]>;
  x_axis?: Maybe<Scalars["float8"]>;
  y_axis?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "floor_plan_grid" */
export interface floor_plan_grid_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  floor_plan?: Maybe<floor_plans_obj_rel_insert_input>;
  floor_plan_uuid?: Maybe<Scalars["uuid"]>;
  height?: Maybe<Scalars["float8"]>;
  is_overlay?: Maybe<Scalars["Boolean"]>;
  path_blocking?: Maybe<Scalars["Boolean"]>;
  spaces?: Maybe<spaces_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  width?: Maybe<Scalars["float8"]>;
  x_axis?: Maybe<Scalars["float8"]>;
  y_axis?: Maybe<Scalars["float8"]>;
}

/** order by max() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_max_order_by {
  created_at?: Maybe<order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  height?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by min() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_min_order_by {
  created_at?: Maybe<order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  height?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "floor_plan_grid" */
export interface floor_plan_grid_obj_rel_insert_input {
  data: floor_plan_grid_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<floor_plan_grid_on_conflict>;
}

/** on conflict condition type for table "floor_plan_grid" */
export interface floor_plan_grid_on_conflict {
  constraint: floor_plan_grid_constraint;
  update_columns?: Array<floor_plan_grid_update_column>;
  where?: Maybe<floor_plan_grid_bool_exp>;
}

/** Ordering options when selecting data from "floor_plan_grid". */
export interface floor_plan_grid_order_by {
  created_at?: Maybe<order_by>;
  floor_plan?: Maybe<floor_plans_order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  height?: Maybe<order_by>;
  is_overlay?: Maybe<order_by>;
  path_blocking?: Maybe<order_by>;
  spaces_aggregate?: Maybe<spaces_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** primary key columns input for table: floor_plan_grid */
export interface floor_plan_grid_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "floor_plan_grid" */
export enum floor_plan_grid_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  floor_plan_uuid = "floor_plan_uuid",
  /** column name */
  height = "height",
  /** column name */
  is_overlay = "is_overlay",
  /** column name */
  path_blocking = "path_blocking",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  width = "width",
  /** column name */
  x_axis = "x_axis",
  /** column name */
  y_axis = "y_axis",
}

/** input type for updating data in table "floor_plan_grid" */
export interface floor_plan_grid_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  floor_plan_uuid?: Maybe<Scalars["uuid"]>;
  height?: Maybe<Scalars["float8"]>;
  is_overlay?: Maybe<Scalars["Boolean"]>;
  path_blocking?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  width?: Maybe<Scalars["float8"]>;
  x_axis?: Maybe<Scalars["float8"]>;
  y_axis?: Maybe<Scalars["float8"]>;
}

/** order by stddev() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_stddev_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_stddev_pop_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_stddev_samp_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by sum() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_sum_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** update columns of table "floor_plan_grid" */
export enum floor_plan_grid_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  floor_plan_uuid = "floor_plan_uuid",
  /** column name */
  height = "height",
  /** column name */
  is_overlay = "is_overlay",
  /** column name */
  path_blocking = "path_blocking",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  width = "width",
  /** column name */
  x_axis = "x_axis",
  /** column name */
  y_axis = "y_axis",
}

/** order by var_pop() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_var_pop_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_var_samp_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by variance() on columns of table "floor_plan_grid" */
export interface floor_plan_grid_variance_order_by {
  height?: Maybe<order_by>;
  width?: Maybe<order_by>;
  x_axis?: Maybe<order_by>;
  y_axis?: Maybe<order_by>;
}

/** order by aggregate values of table "floor_plans" */
export interface floor_plans_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<floor_plans_max_order_by>;
  min?: Maybe<floor_plans_min_order_by>;
}

/** input type for inserting array relation for remote table "floor_plans" */
export interface floor_plans_arr_rel_insert_input {
  data: Array<floor_plans_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<floor_plans_on_conflict>;
}

/** Boolean expression to filter rows from the table "floor_plans". All fields are combined with a logical 'AND'. */
export interface floor_plans_bool_exp {
  _and?: Maybe<Array<floor_plans_bool_exp>>;
  _not?: Maybe<floor_plans_bool_exp>;
  _or?: Maybe<Array<floor_plans_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  building?: Maybe<String_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  floor?: Maybe<String_comparison_exp>;
  floor_plan_grids?: Maybe<floor_plan_grid_bool_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  spaces?: Maybe<spaces_bool_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "floor_plans" */
export enum floor_plans_constraint {
  /** unique or primary key constraint */
  floor_plans_pkey = "floor_plans_pkey",
}

/** input type for inserting data into table "floor_plans" */
export interface floor_plans_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  building?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  floor?: Maybe<Scalars["String"]>;
  floor_plan_grids?: Maybe<floor_plan_grid_arr_rel_insert_input>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  spaces?: Maybe<spaces_arr_rel_insert_input>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "floor_plans" */
export interface floor_plans_max_order_by {
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "floor_plans" */
export interface floor_plans_min_order_by {
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "floor_plans" */
export interface floor_plans_obj_rel_insert_input {
  data: floor_plans_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<floor_plans_on_conflict>;
}

/** on conflict condition type for table "floor_plans" */
export interface floor_plans_on_conflict {
  constraint: floor_plans_constraint;
  update_columns?: Array<floor_plans_update_column>;
  where?: Maybe<floor_plans_bool_exp>;
}

/** Ordering options when selecting data from "floor_plans". */
export interface floor_plans_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  floor_plan_grids_aggregate?: Maybe<floor_plan_grid_aggregate_order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  spaces_aggregate?: Maybe<spaces_aggregate_order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: floor_plans */
export interface floor_plans_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "floor_plans" */
export enum floor_plans_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  building = "building",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  floor = "floor",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "floor_plans" */
export interface floor_plans_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  building?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  floor?: Maybe<Scalars["String"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "floor_plans" */
export enum floor_plans_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  building = "building",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  floor = "floor",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "guest_questionaires_answers" */
export interface guest_questionaires_answers_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<guest_questionaires_answers_max_order_by>;
  min?: Maybe<guest_questionaires_answers_min_order_by>;
}

/** input type for inserting array relation for remote table "guest_questionaires_answers" */
export interface guest_questionaires_answers_arr_rel_insert_input {
  data: Array<guest_questionaires_answers_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<guest_questionaires_answers_on_conflict>;
}

/** Boolean expression to filter rows from the table "guest_questionaires_answers". All fields are combined with a logical 'AND'. */
export interface guest_questionaires_answers_bool_exp {
  _and?: Maybe<Array<guest_questionaires_answers_bool_exp>>;
  _not?: Maybe<guest_questionaires_answers_bool_exp>;
  _or?: Maybe<Array<guest_questionaires_answers_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  guest_questionaire_uuid?: Maybe<uuid_comparison_exp>;
  guests_has_questionaire?: Maybe<guests_has_questionaires_bool_exp>;
  question?: Maybe<questions_bool_exp>;
  question_uuid?: Maybe<uuid_comparison_exp>;
  questionaire?: Maybe<questionaires_bool_exp>;
  questionaire_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  value?: Maybe<String_comparison_exp>;
}

/** unique or primary key constraints on table "guest_questionaires_answers" */
export enum guest_questionaires_answers_constraint {
  /** unique or primary key constraint */
  guest_questionaires_answers_pkey = "guest_questionaires_answers_pkey",
}

/** input type for inserting data into table "guest_questionaires_answers" */
export interface guest_questionaires_answers_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_questionaire_uuid?: Maybe<Scalars["uuid"]>;
  guests_has_questionaire?: Maybe<guests_has_questionaires_obj_rel_insert_input>;
  question?: Maybe<questions_obj_rel_insert_input>;
  question_uuid?: Maybe<Scalars["uuid"]>;
  questionaire?: Maybe<questionaires_obj_rel_insert_input>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  value?: Maybe<Scalars["String"]>;
}

/** order by max() on columns of table "guest_questionaires_answers" */
export interface guest_questionaires_answers_max_order_by {
  created_at?: Maybe<order_by>;
  guest_questionaire_uuid?: Maybe<order_by>;
  question_uuid?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** order by min() on columns of table "guest_questionaires_answers" */
export interface guest_questionaires_answers_min_order_by {
  created_at?: Maybe<order_by>;
  guest_questionaire_uuid?: Maybe<order_by>;
  question_uuid?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** on conflict condition type for table "guest_questionaires_answers" */
export interface guest_questionaires_answers_on_conflict {
  constraint: guest_questionaires_answers_constraint;
  update_columns?: Array<guest_questionaires_answers_update_column>;
  where?: Maybe<guest_questionaires_answers_bool_exp>;
}

/** Ordering options when selecting data from "guest_questionaires_answers". */
export interface guest_questionaires_answers_order_by {
  created_at?: Maybe<order_by>;
  guest_questionaire_uuid?: Maybe<order_by>;
  guests_has_questionaire?: Maybe<guests_has_questionaires_order_by>;
  question?: Maybe<questions_order_by>;
  question_uuid?: Maybe<order_by>;
  questionaire?: Maybe<questionaires_order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  value?: Maybe<order_by>;
}

/** primary key columns input for table: guest_questionaires_answers */
export interface guest_questionaires_answers_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "guest_questionaires_answers" */
export enum guest_questionaires_answers_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_questionaire_uuid = "guest_questionaire_uuid",
  /** column name */
  question_uuid = "question_uuid",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  value = "value",
}

/** input type for updating data in table "guest_questionaires_answers" */
export interface guest_questionaires_answers_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_questionaire_uuid?: Maybe<Scalars["uuid"]>;
  question_uuid?: Maybe<Scalars["uuid"]>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  value?: Maybe<Scalars["String"]>;
}

/** update columns of table "guest_questionaires_answers" */
export enum guest_questionaires_answers_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_questionaire_uuid = "guest_questionaire_uuid",
  /** column name */
  question_uuid = "question_uuid",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
  /** column name */
  value = "value",
}

/** order by aggregate values of table "guests" */
export interface guests_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<guests_max_order_by>;
  min?: Maybe<guests_min_order_by>;
}

/** input type for inserting array relation for remote table "guests" */
export interface guests_arr_rel_insert_input {
  data: Array<guests_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<guests_on_conflict>;
}

/** Boolean expression to filter rows from the table "guests". All fields are combined with a logical 'AND'. */
export interface guests_bool_exp {
  _and?: Maybe<Array<guests_bool_exp>>;
  _not?: Maybe<guests_bool_exp>;
  _or?: Maybe<Array<guests_bool_exp>>;
  aruba_wifi_accesses?: Maybe<aruba_wifi_access_bool_exp>;
  badge_printed?: Maybe<Boolean_comparison_exp>;
  badge_printed_at?: Maybe<timestamptz_comparison_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_user?: Maybe<brand_users_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  email?: Maybe<String_comparison_exp>;
  expected_arrival?: Maybe<timestamptz_comparison_exp>;
  host_name?: Maybe<String_comparison_exp>;
  host_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  photo_taken_at?: Maybe<timestamptz_comparison_exp>;
  photo_url?: Maybe<String_comparison_exp>;
  purpose_of_visit?: Maybe<String_comparison_exp>;
  reservation_uuid?: Maybe<uuid_comparison_exp>;
  rsvp?: Maybe<Boolean_comparison_exp>;
  rsvp_at?: Maybe<timestamptz_comparison_exp>;
  signin_at?: Maybe<timestamptz_comparison_exp>;
  signout_at?: Maybe<timestamptz_comparison_exp>;
  spaces_usages?: Maybe<spaces_usage_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "guests" */
export enum guests_constraint {
  /** unique or primary key constraint */
  guests_pkey = "guests_pkey",
}

/** order by aggregate values of table "guests_has_questionaires" */
export interface guests_has_questionaires_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<guests_has_questionaires_max_order_by>;
  min?: Maybe<guests_has_questionaires_min_order_by>;
}

/** input type for inserting array relation for remote table "guests_has_questionaires" */
export interface guests_has_questionaires_arr_rel_insert_input {
  data: Array<guests_has_questionaires_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<guests_has_questionaires_on_conflict>;
}

/** Boolean expression to filter rows from the table "guests_has_questionaires". All fields are combined with a logical 'AND'. */
export interface guests_has_questionaires_bool_exp {
  _and?: Maybe<Array<guests_has_questionaires_bool_exp>>;
  _not?: Maybe<guests_has_questionaires_bool_exp>;
  _or?: Maybe<Array<guests_has_questionaires_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  filled_at?: Maybe<timestamptz_comparison_exp>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_bool_exp>;
  guest_uuid?: Maybe<uuid_comparison_exp>;
  questionaire?: Maybe<questionaires_bool_exp>;
  questionaire_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "guests_has_questionaires" */
export enum guests_has_questionaires_constraint {
  /** unique or primary key constraint */
  guests_has_questionaires_pkey = "guests_has_questionaires_pkey",
}

/** input type for inserting data into table "guests_has_questionaires" */
export interface guests_has_questionaires_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  filled_at?: Maybe<Scalars["timestamptz"]>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_arr_rel_insert_input>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  questionaire?: Maybe<questionaires_obj_rel_insert_input>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "guests_has_questionaires" */
export interface guests_has_questionaires_max_order_by {
  created_at?: Maybe<order_by>;
  filled_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "guests_has_questionaires" */
export interface guests_has_questionaires_min_order_by {
  created_at?: Maybe<order_by>;
  filled_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "guests_has_questionaires" */
export interface guests_has_questionaires_obj_rel_insert_input {
  data: guests_has_questionaires_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<guests_has_questionaires_on_conflict>;
}

/** on conflict condition type for table "guests_has_questionaires" */
export interface guests_has_questionaires_on_conflict {
  constraint: guests_has_questionaires_constraint;
  update_columns?: Array<guests_has_questionaires_update_column>;
  where?: Maybe<guests_has_questionaires_bool_exp>;
}

/** Ordering options when selecting data from "guests_has_questionaires". */
export interface guests_has_questionaires_order_by {
  created_at?: Maybe<order_by>;
  filled_at?: Maybe<order_by>;
  guest_questionaires_answers_aggregate?: Maybe<guest_questionaires_answers_aggregate_order_by>;
  guest_uuid?: Maybe<order_by>;
  questionaire?: Maybe<questionaires_order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: guests_has_questionaires */
export interface guests_has_questionaires_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "guests_has_questionaires" */
export enum guests_has_questionaires_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  filled_at = "filled_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "guests_has_questionaires" */
export interface guests_has_questionaires_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  filled_at?: Maybe<Scalars["timestamptz"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "guests_has_questionaires" */
export enum guests_has_questionaires_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  filled_at = "filled_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for inserting data into table "guests" */
export interface guests_insert_input {
  aruba_wifi_accesses?: Maybe<aruba_wifi_access_arr_rel_insert_input>;
  badge_printed?: Maybe<Scalars["Boolean"]>;
  badge_printed_at?: Maybe<Scalars["timestamptz"]>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_user?: Maybe<brand_users_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  expected_arrival?: Maybe<Scalars["timestamptz"]>;
  host_name?: Maybe<Scalars["String"]>;
  host_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  photo_taken_at?: Maybe<Scalars["timestamptz"]>;
  photo_url?: Maybe<Scalars["String"]>;
  purpose_of_visit?: Maybe<Scalars["String"]>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  rsvp?: Maybe<Scalars["Boolean"]>;
  rsvp_at?: Maybe<Scalars["timestamptz"]>;
  signin_at?: Maybe<Scalars["timestamptz"]>;
  signout_at?: Maybe<Scalars["timestamptz"]>;
  spaces_usages?: Maybe<spaces_usage_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "guests" */
export interface guests_max_order_by {
  badge_printed_at?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  expected_arrival?: Maybe<order_by>;
  host_name?: Maybe<order_by>;
  host_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  photo_taken_at?: Maybe<order_by>;
  photo_url?: Maybe<order_by>;
  purpose_of_visit?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  rsvp_at?: Maybe<order_by>;
  signin_at?: Maybe<order_by>;
  signout_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "guests" */
export interface guests_min_order_by {
  badge_printed_at?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  expected_arrival?: Maybe<order_by>;
  host_name?: Maybe<order_by>;
  host_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  photo_taken_at?: Maybe<order_by>;
  photo_url?: Maybe<order_by>;
  purpose_of_visit?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  rsvp_at?: Maybe<order_by>;
  signin_at?: Maybe<order_by>;
  signout_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "guests" */
export interface guests_obj_rel_insert_input {
  data: guests_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<guests_on_conflict>;
}

/** on conflict condition type for table "guests" */
export interface guests_on_conflict {
  constraint: guests_constraint;
  update_columns?: Array<guests_update_column>;
  where?: Maybe<guests_bool_exp>;
}

/** Ordering options when selecting data from "guests". */
export interface guests_order_by {
  aruba_wifi_accesses_aggregate?: Maybe<aruba_wifi_access_aggregate_order_by>;
  badge_printed?: Maybe<order_by>;
  badge_printed_at?: Maybe<order_by>;
  brand?: Maybe<brands_order_by>;
  brand_user?: Maybe<brand_users_order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  expected_arrival?: Maybe<order_by>;
  host_name?: Maybe<order_by>;
  host_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  photo_taken_at?: Maybe<order_by>;
  photo_url?: Maybe<order_by>;
  purpose_of_visit?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  rsvp?: Maybe<order_by>;
  rsvp_at?: Maybe<order_by>;
  signin_at?: Maybe<order_by>;
  signout_at?: Maybe<order_by>;
  spaces_usages_aggregate?: Maybe<spaces_usage_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: guests */
export interface guests_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "guests" */
export enum guests_select_column {
  /** column name */
  badge_printed = "badge_printed",
  /** column name */
  badge_printed_at = "badge_printed_at",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  expected_arrival = "expected_arrival",
  /** column name */
  host_name = "host_name",
  /** column name */
  host_uuid = "host_uuid",
  /** column name */
  name = "name",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  photo_taken_at = "photo_taken_at",
  /** column name */
  photo_url = "photo_url",
  /** column name */
  purpose_of_visit = "purpose_of_visit",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  rsvp = "rsvp",
  /** column name */
  rsvp_at = "rsvp_at",
  /** column name */
  signin_at = "signin_at",
  /** column name */
  signout_at = "signout_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "guests" */
export interface guests_set_input {
  badge_printed?: Maybe<Scalars["Boolean"]>;
  badge_printed_at?: Maybe<Scalars["timestamptz"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  expected_arrival?: Maybe<Scalars["timestamptz"]>;
  host_name?: Maybe<Scalars["String"]>;
  host_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  photo_taken_at?: Maybe<Scalars["timestamptz"]>;
  photo_url?: Maybe<Scalars["String"]>;
  purpose_of_visit?: Maybe<Scalars["String"]>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  rsvp?: Maybe<Scalars["Boolean"]>;
  rsvp_at?: Maybe<Scalars["timestamptz"]>;
  signin_at?: Maybe<Scalars["timestamptz"]>;
  signout_at?: Maybe<Scalars["timestamptz"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "guests" */
export enum guests_update_column {
  /** column name */
  badge_printed = "badge_printed",
  /** column name */
  badge_printed_at = "badge_printed_at",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  expected_arrival = "expected_arrival",
  /** column name */
  host_name = "host_name",
  /** column name */
  host_uuid = "host_uuid",
  /** column name */
  name = "name",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  photo_taken_at = "photo_taken_at",
  /** column name */
  photo_url = "photo_url",
  /** column name */
  purpose_of_visit = "purpose_of_visit",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  rsvp = "rsvp",
  /** column name */
  rsvp_at = "rsvp_at",
  /** column name */
  signin_at = "signin_at",
  /** column name */
  signout_at = "signout_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "inboxes" */
export interface inboxes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<inboxes_max_order_by>;
  min?: Maybe<inboxes_min_order_by>;
}

/** input type for inserting array relation for remote table "inboxes" */
export interface inboxes_arr_rel_insert_input {
  data: Array<inboxes_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<inboxes_on_conflict>;
}

/** Boolean expression to filter rows from the table "inboxes". All fields are combined with a logical 'AND'. */
export interface inboxes_bool_exp {
  _and?: Maybe<Array<inboxes_bool_exp>>;
  _not?: Maybe<inboxes_bool_exp>;
  _or?: Maybe<Array<inboxes_bool_exp>>;
  conversation?: Maybe<conversations_bool_exp>;
  conversation_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  pubsub_token?: Maybe<String_comparison_exp>;
  request?: Maybe<requests_bool_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "inboxes" */
export enum inboxes_constraint {
  /** unique or primary key constraint */
  inboxes_pkey = "inboxes_pkey",
  /** unique or primary key constraint */
  inboxes_pubsub_token_unique = "inboxes_pubsub_token_unique",
}

/** input type for inserting data into table "inboxes" */
export interface inboxes_insert_input {
  conversation?: Maybe<conversations_obj_rel_insert_input>;
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request?: Maybe<requests_obj_rel_insert_input>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "inboxes" */
export interface inboxes_max_order_by {
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  pubsub_token?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "inboxes" */
export interface inboxes_min_order_by {
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  pubsub_token?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "inboxes" */
export interface inboxes_on_conflict {
  constraint: inboxes_constraint;
  update_columns?: Array<inboxes_update_column>;
  where?: Maybe<inboxes_bool_exp>;
}

/** Ordering options when selecting data from "inboxes". */
export interface inboxes_order_by {
  conversation?: Maybe<conversations_order_by>;
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  pubsub_token?: Maybe<order_by>;
  request?: Maybe<requests_order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: inboxes */
export interface inboxes_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "inboxes" */
export enum inboxes_select_column {
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  pubsub_token = "pubsub_token",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "inboxes" */
export interface inboxes_set_input {
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "inboxes" */
export enum inboxes_update_column {
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  pubsub_token = "pubsub_token",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "invoice" */
export interface invoice_aggregate_order_by {
  avg?: Maybe<invoice_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<invoice_max_order_by>;
  min?: Maybe<invoice_min_order_by>;
  stddev?: Maybe<invoice_stddev_order_by>;
  stddev_pop?: Maybe<invoice_stddev_pop_order_by>;
  stddev_samp?: Maybe<invoice_stddev_samp_order_by>;
  sum?: Maybe<invoice_sum_order_by>;
  var_pop?: Maybe<invoice_var_pop_order_by>;
  var_samp?: Maybe<invoice_var_samp_order_by>;
  variance?: Maybe<invoice_variance_order_by>;
}

/** input type for inserting array relation for remote table "invoice" */
export interface invoice_arr_rel_insert_input {
  data: Array<invoice_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<invoice_on_conflict>;
}

/** order by avg() on columns of table "invoice" */
export interface invoice_avg_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "invoice". All fields are combined with a logical 'AND'. */
export interface invoice_bool_exp {
  _and?: Maybe<Array<invoice_bool_exp>>;
  _not?: Maybe<invoice_bool_exp>;
  _or?: Maybe<Array<invoice_bool_exp>>;
  base_3rd_party_platform?: Maybe<String_comparison_exp>;
  base_3rd_party_platform_fee?: Maybe<float8_comparison_exp>;
  base_brand_gross_revenue?: Maybe<float8_comparison_exp>;
  base_cashback_by_brand?: Maybe<float8_comparison_exp>;
  base_cashback_by_stayr?: Maybe<float8_comparison_exp>;
  base_currency_code?: Maybe<bpchar_comparison_exp>;
  base_discount_by_brand?: Maybe<float8_comparison_exp>;
  base_discount_by_stayr?: Maybe<float8_comparison_exp>;
  base_payment_by_card?: Maybe<float8_comparison_exp>;
  base_payment_by_cash?: Maybe<float8_comparison_exp>;
  base_payment_by_credits?: Maybe<float8_comparison_exp>;
  base_pf_cc_fee?: Maybe<float8_comparison_exp>;
  base_pf_platform_fixed_fee?: Maybe<float8_comparison_exp>;
  base_pf_platform_type?: Maybe<String_comparison_exp>;
  base_pf_platform_variable_fee?: Maybe<float8_comparison_exp>;
  base_pf_platform_variable_rate?: Maybe<float8_comparison_exp>;
  base_pf_transaction_fee?: Maybe<float8_comparison_exp>;
  base_total_brand_collected?: Maybe<float8_comparison_exp>;
  base_total_cashback?: Maybe<float8_comparison_exp>;
  base_total_discount?: Maybe<float8_comparison_exp>;
  base_total_due_to_brand?: Maybe<float8_comparison_exp>;
  base_total_due_to_stayr?: Maybe<float8_comparison_exp>;
  base_total_payment?: Maybe<float8_comparison_exp>;
  base_total_price?: Maybe<float8_comparison_exp>;
  base_total_stayr_collected?: Maybe<float8_comparison_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_conversion_rate?: Maybe<float8_comparison_exp>;
  brand_currency_code?: Maybe<bpchar_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  email_invoice_data?: Maybe<json_comparison_exp>;
  requests?: Maybe<requests_bool_exp>;
  stripe_transfers?: Maybe<stripe_transfers_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_conversion_rate?: Maybe<float8_comparison_exp>;
  user_currency_code?: Maybe<bpchar_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "invoice" */
export enum invoice_constraint {
  /** unique or primary key constraint */
  invoice_pkey = "invoice_pkey",
}

/** input type for incrementing numeric columns in table "invoice" */
export interface invoice_inc_input {
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_variable_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_variable_rate?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_brand_collected?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_due_to_brand?: Maybe<Scalars["float8"]>;
  base_total_due_to_stayr?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_total_stayr_collected?: Maybe<Scalars["float8"]>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  user_conversion_rate?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "invoice" */
export interface invoice_insert_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_type?: Maybe<Scalars["String"]>;
  base_pf_platform_variable_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_variable_rate?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_brand_collected?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_due_to_brand?: Maybe<Scalars["float8"]>;
  base_total_due_to_stayr?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_total_stayr_collected?: Maybe<Scalars["float8"]>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  brand_currency_code?: Maybe<Scalars["bpchar"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email_invoice_data?: Maybe<Scalars["json"]>;
  requests?: Maybe<requests_arr_rel_insert_input>;
  stripe_transfers?: Maybe<stripe_transfers_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_conversion_rate?: Maybe<Scalars["float8"]>;
  user_currency_code?: Maybe<Scalars["bpchar"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "invoice" */
export interface invoice_max_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_type?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "invoice" */
export interface invoice_min_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_type?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "invoice" */
export interface invoice_obj_rel_insert_input {
  data: invoice_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<invoice_on_conflict>;
}

/** on conflict condition type for table "invoice" */
export interface invoice_on_conflict {
  constraint: invoice_constraint;
  update_columns?: Array<invoice_update_column>;
  where?: Maybe<invoice_bool_exp>;
}

/** Ordering options when selecting data from "invoice". */
export interface invoice_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_type?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand?: Maybe<brands_order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email_invoice_data?: Maybe<order_by>;
  requests_aggregate?: Maybe<requests_aggregate_order_by>;
  stripe_transfers_aggregate?: Maybe<stripe_transfers_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: invoice */
export interface invoice_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "invoice" */
export enum invoice_select_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_brand_gross_revenue = "base_brand_gross_revenue",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_pf_cc_fee = "base_pf_cc_fee",
  /** column name */
  base_pf_platform_fixed_fee = "base_pf_platform_fixed_fee",
  /** column name */
  base_pf_platform_type = "base_pf_platform_type",
  /** column name */
  base_pf_platform_variable_fee = "base_pf_platform_variable_fee",
  /** column name */
  base_pf_platform_variable_rate = "base_pf_platform_variable_rate",
  /** column name */
  base_pf_transaction_fee = "base_pf_transaction_fee",
  /** column name */
  base_total_brand_collected = "base_total_brand_collected",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_due_to_brand = "base_total_due_to_brand",
  /** column name */
  base_total_due_to_stayr = "base_total_due_to_stayr",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_total_stayr_collected = "base_total_stayr_collected",
  /** column name */
  brand_conversion_rate = "brand_conversion_rate",
  /** column name */
  brand_currency_code = "brand_currency_code",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  email_invoice_data = "email_invoice_data",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_conversion_rate = "user_conversion_rate",
  /** column name */
  user_currency_code = "user_currency_code",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "invoice" */
export interface invoice_set_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_type?: Maybe<Scalars["String"]>;
  base_pf_platform_variable_fee?: Maybe<Scalars["float8"]>;
  base_pf_platform_variable_rate?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_brand_collected?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_due_to_brand?: Maybe<Scalars["float8"]>;
  base_total_due_to_stayr?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_total_stayr_collected?: Maybe<Scalars["float8"]>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  brand_currency_code?: Maybe<Scalars["bpchar"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email_invoice_data?: Maybe<Scalars["json"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_conversion_rate?: Maybe<Scalars["float8"]>;
  user_currency_code?: Maybe<Scalars["bpchar"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "invoice" */
export interface invoice_stddev_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "invoice" */
export interface invoice_stddev_pop_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "invoice" */
export interface invoice_stddev_samp_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** order by sum() on columns of table "invoice" */
export interface invoice_sum_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** update columns of table "invoice" */
export enum invoice_update_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_brand_gross_revenue = "base_brand_gross_revenue",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_pf_cc_fee = "base_pf_cc_fee",
  /** column name */
  base_pf_platform_fixed_fee = "base_pf_platform_fixed_fee",
  /** column name */
  base_pf_platform_type = "base_pf_platform_type",
  /** column name */
  base_pf_platform_variable_fee = "base_pf_platform_variable_fee",
  /** column name */
  base_pf_platform_variable_rate = "base_pf_platform_variable_rate",
  /** column name */
  base_pf_transaction_fee = "base_pf_transaction_fee",
  /** column name */
  base_total_brand_collected = "base_total_brand_collected",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_due_to_brand = "base_total_due_to_brand",
  /** column name */
  base_total_due_to_stayr = "base_total_due_to_stayr",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_total_stayr_collected = "base_total_stayr_collected",
  /** column name */
  brand_conversion_rate = "brand_conversion_rate",
  /** column name */
  brand_currency_code = "brand_currency_code",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  email_invoice_data = "email_invoice_data",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_conversion_rate = "user_conversion_rate",
  /** column name */
  user_currency_code = "user_currency_code",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "invoice" */
export interface invoice_var_pop_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "invoice" */
export interface invoice_var_samp_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** order by variance() on columns of table "invoice" */
export interface invoice_variance_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_platform_fixed_fee?: Maybe<order_by>;
  base_pf_platform_variable_fee?: Maybe<order_by>;
  base_pf_platform_variable_rate?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_brand_collected?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_due_to_brand?: Maybe<order_by>;
  base_total_due_to_stayr?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_total_stayr_collected?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  user_conversion_rate?: Maybe<order_by>;
}

/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export interface json_comparison_exp {
  _eq?: Maybe<Scalars["json"]>;
  _gt?: Maybe<Scalars["json"]>;
  _gte?: Maybe<Scalars["json"]>;
  _in?: Maybe<Array<Scalars["json"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["json"]>;
  _lte?: Maybe<Scalars["json"]>;
  _neq?: Maybe<Scalars["json"]>;
  _nin?: Maybe<Array<Scalars["json"]>>;
}

/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export interface jsonb_comparison_exp {
  /** is the column contained in the given json value */
  _contained_in?: Maybe<Scalars["jsonb"]>;
  /** does the column contain the given json value at the top level */
  _contains?: Maybe<Scalars["jsonb"]>;
  _eq?: Maybe<Scalars["jsonb"]>;
  _gt?: Maybe<Scalars["jsonb"]>;
  _gte?: Maybe<Scalars["jsonb"]>;
  /** does the string exist as a top-level key in the column */
  _has_key?: Maybe<Scalars["String"]>;
  /** do all of these strings exist as top-level keys in the column */
  _has_keys_all?: Maybe<Array<Scalars["String"]>>;
  /** do any of these strings exist as top-level keys in the column */
  _has_keys_any?: Maybe<Array<Scalars["String"]>>;
  _in?: Maybe<Array<Scalars["jsonb"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["jsonb"]>;
  _lte?: Maybe<Scalars["jsonb"]>;
  _neq?: Maybe<Scalars["jsonb"]>;
  _nin?: Maybe<Array<Scalars["jsonb"]>>;
}

/** Boolean expression to filter rows from the table "key_performance_snapshots". All fields are combined with a logical 'AND'. */
export interface key_performance_snapshots_bool_exp {
  _and?: Maybe<Array<key_performance_snapshots_bool_exp>>;
  _not?: Maybe<key_performance_snapshots_bool_exp>;
  _or?: Maybe<Array<key_performance_snapshots_bool_exp>>;
  content?: Maybe<json_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_report?: Maybe<date_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "key_performance_snapshots" */
export enum key_performance_snapshots_constraint {
  /** unique or primary key constraint */
  key_performance_snapshots_pkey = "key_performance_snapshots_pkey",
}

/** input type for inserting data into table "key_performance_snapshots" */
export interface key_performance_snapshots_insert_input {
  content?: Maybe<Scalars["json"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_report?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "key_performance_snapshots" */
export interface key_performance_snapshots_on_conflict {
  constraint: key_performance_snapshots_constraint;
  update_columns?: Array<key_performance_snapshots_update_column>;
  where?: Maybe<key_performance_snapshots_bool_exp>;
}

/** Ordering options when selecting data from "key_performance_snapshots". */
export interface key_performance_snapshots_order_by {
  content?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_report?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: key_performance_snapshots */
export interface key_performance_snapshots_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "key_performance_snapshots" */
export enum key_performance_snapshots_select_column {
  /** column name */
  content = "content",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_report = "date_report",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "key_performance_snapshots" */
export interface key_performance_snapshots_set_input {
  content?: Maybe<Scalars["json"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_report?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "key_performance_snapshots" */
export enum key_performance_snapshots_update_column {
  /** column name */
  content = "content",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_report = "date_report",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "listing_categories". All fields are combined with a logical 'AND'. */
export interface listing_categories_bool_exp {
  _and?: Maybe<Array<listing_categories_bool_exp>>;
  _not?: Maybe<listing_categories_bool_exp>;
  _or?: Maybe<Array<listing_categories_bool_exp>>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "listing_categories" */
export enum listing_categories_constraint {
  /** unique or primary key constraint */
  listing_categories_pkey = "listing_categories_pkey",
  /** unique or primary key constraint */
  listing_categories_slug_unique = "listing_categories_slug_unique",
}

/** input type for incrementing numeric columns in table "listing_categories" */
export interface listing_categories_inc_input {
  index?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "listing_categories" */
export interface listing_categories_insert_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "listing_categories" */
export interface listing_categories_on_conflict {
  constraint: listing_categories_constraint;
  update_columns?: Array<listing_categories_update_column>;
  where?: Maybe<listing_categories_bool_exp>;
}

/** Ordering options when selecting data from "listing_categories". */
export interface listing_categories_order_by {
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  index?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: listing_categories */
export interface listing_categories_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "listing_categories" */
export enum listing_categories_select_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  index = "index",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listing_categories" */
export interface listing_categories_set_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "listing_categories" */
export enum listing_categories_update_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  index = "index",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "listing_collections". All fields are combined with a logical 'AND'. */
export interface listing_collections_bool_exp {
  _and?: Maybe<Array<listing_collections_bool_exp>>;
  _not?: Maybe<listing_collections_bool_exp>;
  _or?: Maybe<Array<listing_collections_bool_exp>>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  listing_in_collections?: Maybe<listing_in_collections_bool_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "listing_collections" */
export enum listing_collections_constraint {
  /** unique or primary key constraint */
  listing_collections_pkey = "listing_collections_pkey",
  /** unique or primary key constraint */
  listing_collections_slug_unique = "listing_collections_slug_unique",
}

/** input type for incrementing numeric columns in table "listing_collections" */
export interface listing_collections_inc_input {
  index?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "listing_collections" */
export interface listing_collections_insert_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  listing_in_collections?: Maybe<listing_in_collections_arr_rel_insert_input>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "listing_collections" */
export interface listing_collections_obj_rel_insert_input {
  data: listing_collections_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<listing_collections_on_conflict>;
}

/** on conflict condition type for table "listing_collections" */
export interface listing_collections_on_conflict {
  constraint: listing_collections_constraint;
  update_columns?: Array<listing_collections_update_column>;
  where?: Maybe<listing_collections_bool_exp>;
}

/** Ordering options when selecting data from "listing_collections". */
export interface listing_collections_order_by {
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  index?: Maybe<order_by>;
  listing_in_collections_aggregate?: Maybe<listing_in_collections_aggregate_order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: listing_collections */
export interface listing_collections_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "listing_collections" */
export enum listing_collections_select_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  index = "index",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listing_collections" */
export interface listing_collections_set_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "listing_collections" */
export enum listing_collections_update_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  index = "index",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "listing_discussions" */
export interface listing_discussions_aggregate_order_by {
  avg?: Maybe<listing_discussions_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<listing_discussions_max_order_by>;
  min?: Maybe<listing_discussions_min_order_by>;
  stddev?: Maybe<listing_discussions_stddev_order_by>;
  stddev_pop?: Maybe<listing_discussions_stddev_pop_order_by>;
  stddev_samp?: Maybe<listing_discussions_stddev_samp_order_by>;
  sum?: Maybe<listing_discussions_sum_order_by>;
  var_pop?: Maybe<listing_discussions_var_pop_order_by>;
  var_samp?: Maybe<listing_discussions_var_samp_order_by>;
  variance?: Maybe<listing_discussions_variance_order_by>;
}

/** input type for inserting array relation for remote table "listing_discussions" */
export interface listing_discussions_arr_rel_insert_input {
  data: Array<listing_discussions_insert_input>;
}

/** order by avg() on columns of table "listing_discussions" */
export interface listing_discussions_avg_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "listing_discussions". All fields are combined with a logical 'AND'. */
export interface listing_discussions_bool_exp {
  _and?: Maybe<Array<listing_discussions_bool_exp>>;
  _not?: Maybe<listing_discussions_bool_exp>;
  _or?: Maybe<Array<listing_discussions_bool_exp>>;
  comment_count?: Maybe<Int_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  first_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  first_post_uuid?: Maybe<uuid_comparison_exp>;
  last_post_timestamp?: Maybe<timestamptz_comparison_exp>;
  last_post_uuid?: Maybe<uuid_comparison_exp>;
  locked?: Maybe<Boolean_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  participant_count?: Maybe<Int_comparison_exp>;
  private?: Maybe<Boolean_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "listing_discussions" */
export interface listing_discussions_inc_input {
  comment_count?: Maybe<Scalars["Int"]>;
  participant_count?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "listing_discussions" */
export interface listing_discussions_insert_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "listing_discussions" */
export interface listing_discussions_max_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listing_discussions" */
export interface listing_discussions_min_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "listing_discussions". */
export interface listing_discussions_order_by {
  comment_count?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  first_post_timestamp?: Maybe<order_by>;
  first_post_uuid?: Maybe<order_by>;
  last_post_timestamp?: Maybe<order_by>;
  last_post_uuid?: Maybe<order_by>;
  locked?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
  private?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "listing_discussions" */
export enum listing_discussions_select_column {
  /** column name */
  comment_count = "comment_count",
  /** column name */
  created_at = "created_at",
  /** column name */
  first_post_timestamp = "first_post_timestamp",
  /** column name */
  first_post_uuid = "first_post_uuid",
  /** column name */
  last_post_timestamp = "last_post_timestamp",
  /** column name */
  last_post_uuid = "last_post_uuid",
  /** column name */
  locked = "locked",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  participant_count = "participant_count",
  /** column name */
  private = "private",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listing_discussions" */
export interface listing_discussions_set_input {
  comment_count?: Maybe<Scalars["Int"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  first_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  first_post_uuid?: Maybe<Scalars["uuid"]>;
  last_post_timestamp?: Maybe<Scalars["timestamptz"]>;
  last_post_uuid?: Maybe<Scalars["uuid"]>;
  locked?: Maybe<Scalars["Boolean"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  participant_count?: Maybe<Scalars["Int"]>;
  private?: Maybe<Scalars["Boolean"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "listing_discussions" */
export interface listing_discussions_stddev_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "listing_discussions" */
export interface listing_discussions_stddev_pop_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "listing_discussions" */
export interface listing_discussions_stddev_samp_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by sum() on columns of table "listing_discussions" */
export interface listing_discussions_sum_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by var_pop() on columns of table "listing_discussions" */
export interface listing_discussions_var_pop_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "listing_discussions" */
export interface listing_discussions_var_samp_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by variance() on columns of table "listing_discussions" */
export interface listing_discussions_variance_order_by {
  comment_count?: Maybe<order_by>;
  participant_count?: Maybe<order_by>;
}

/** order by aggregate values of table "listing_in_collections" */
export interface listing_in_collections_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<listing_in_collections_max_order_by>;
  min?: Maybe<listing_in_collections_min_order_by>;
}

/** input type for inserting array relation for remote table "listing_in_collections" */
export interface listing_in_collections_arr_rel_insert_input {
  data: Array<listing_in_collections_insert_input>;
}

/** Boolean expression to filter rows from the table "listing_in_collections". All fields are combined with a logical 'AND'. */
export interface listing_in_collections_bool_exp {
  _and?: Maybe<Array<listing_in_collections_bool_exp>>;
  _not?: Maybe<listing_in_collections_bool_exp>;
  _or?: Maybe<Array<listing_in_collections_bool_exp>>;
  collection_uuid?: Maybe<uuid_comparison_exp>;
  listing?: Maybe<listings_bool_exp>;
  listing_collection?: Maybe<listing_collections_bool_exp>;
  listing_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "listing_in_collections" */
export interface listing_in_collections_insert_input {
  collection_uuid?: Maybe<Scalars["uuid"]>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  listing_collection?: Maybe<listing_collections_obj_rel_insert_input>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "listing_in_collections" */
export interface listing_in_collections_max_order_by {
  collection_uuid?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listing_in_collections" */
export interface listing_in_collections_min_order_by {
  collection_uuid?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "listing_in_collections". */
export interface listing_in_collections_order_by {
  collection_uuid?: Maybe<order_by>;
  listing?: Maybe<listings_order_by>;
  listing_collection?: Maybe<listing_collections_order_by>;
  listing_uuid?: Maybe<order_by>;
}

/** select columns of table "listing_in_collections" */
export enum listing_in_collections_select_column {
  /** column name */
  collection_uuid = "collection_uuid",
  /** column name */
  listing_uuid = "listing_uuid",
}

/** input type for updating data in table "listing_in_collections" */
export interface listing_in_collections_set_input {
  collection_uuid?: Maybe<Scalars["uuid"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "listing_media" */
export interface listing_media_aggregate_order_by {
  avg?: Maybe<listing_media_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<listing_media_max_order_by>;
  min?: Maybe<listing_media_min_order_by>;
  stddev?: Maybe<listing_media_stddev_order_by>;
  stddev_pop?: Maybe<listing_media_stddev_pop_order_by>;
  stddev_samp?: Maybe<listing_media_stddev_samp_order_by>;
  sum?: Maybe<listing_media_sum_order_by>;
  var_pop?: Maybe<listing_media_var_pop_order_by>;
  var_samp?: Maybe<listing_media_var_samp_order_by>;
  variance?: Maybe<listing_media_variance_order_by>;
}

/** input type for inserting array relation for remote table "listing_media" */
export interface listing_media_arr_rel_insert_input {
  data: Array<listing_media_insert_input>;
}

/** order by avg() on columns of table "listing_media" */
export interface listing_media_avg_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "listing_media". All fields are combined with a logical 'AND'. */
export interface listing_media_bool_exp {
  _and?: Maybe<Array<listing_media_bool_exp>>;
  _not?: Maybe<listing_media_bool_exp>;
  _or?: Maybe<Array<listing_media_bool_exp>>;
  collection_name?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  file_name?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  mime_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  s3_bucket_name?: Maybe<String_comparison_exp>;
  s3_key?: Maybe<String_comparison_exp>;
  size?: Maybe<bigint_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "listing_media" */
export interface listing_media_inc_input {
  index?: Maybe<Scalars["Int"]>;
  size?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "listing_media" */
export interface listing_media_insert_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "listing_media" */
export interface listing_media_max_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listing_media" */
export interface listing_media_min_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "listing_media". */
export interface listing_media_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "listing_media" */
export enum listing_media_select_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listing_media" */
export interface listing_media_set_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "listing_media" */
export interface listing_media_stddev_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "listing_media" */
export interface listing_media_stddev_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "listing_media" */
export interface listing_media_stddev_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by sum() on columns of table "listing_media" */
export interface listing_media_sum_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_pop() on columns of table "listing_media" */
export interface listing_media_var_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "listing_media" */
export interface listing_media_var_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by variance() on columns of table "listing_media" */
export interface listing_media_variance_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by aggregate values of table "listing_tags" */
export interface listing_tags_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<listing_tags_max_order_by>;
  min?: Maybe<listing_tags_min_order_by>;
}

/** input type for inserting array relation for remote table "listing_tags" */
export interface listing_tags_arr_rel_insert_input {
  data: Array<listing_tags_insert_input>;
}

/** Boolean expression to filter rows from the table "listing_tags". All fields are combined with a logical 'AND'. */
export interface listing_tags_bool_exp {
  _and?: Maybe<Array<listing_tags_bool_exp>>;
  _not?: Maybe<listing_tags_bool_exp>;
  _or?: Maybe<Array<listing_tags_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  tag_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "listing_tags" */
export interface listing_tags_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "listing_tags" */
export interface listing_tags_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listing_tags" */
export interface listing_tags_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "listing_tags". */
export interface listing_tags_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** select columns of table "listing_tags" */
export enum listing_tags_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  tag_uuid = "tag_uuid",
}

/** input type for updating data in table "listing_tags" */
export interface listing_tags_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "listing_wishes" */
export interface listing_wishes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<listing_wishes_max_order_by>;
  min?: Maybe<listing_wishes_min_order_by>;
}

/** input type for inserting array relation for remote table "listing_wishes" */
export interface listing_wishes_arr_rel_insert_input {
  data: Array<listing_wishes_insert_input>;
}

/** Boolean expression to filter rows from the table "listing_wishes". All fields are combined with a logical 'AND'. */
export interface listing_wishes_bool_exp {
  _and?: Maybe<Array<listing_wishes_bool_exp>>;
  _not?: Maybe<listing_wishes_bool_exp>;
  _or?: Maybe<Array<listing_wishes_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "listing_wishes" */
export interface listing_wishes_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "listing_wishes" */
export interface listing_wishes_max_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listing_wishes" */
export interface listing_wishes_min_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "listing_wishes". */
export interface listing_wishes_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "listing_wishes" */
export enum listing_wishes_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listing_wishes" */
export interface listing_wishes_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "listings" */
export interface listings_aggregate_order_by {
  avg?: Maybe<listings_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<listings_max_order_by>;
  min?: Maybe<listings_min_order_by>;
  stddev?: Maybe<listings_stddev_order_by>;
  stddev_pop?: Maybe<listings_stddev_pop_order_by>;
  stddev_samp?: Maybe<listings_stddev_samp_order_by>;
  sum?: Maybe<listings_sum_order_by>;
  var_pop?: Maybe<listings_var_pop_order_by>;
  var_samp?: Maybe<listings_var_samp_order_by>;
  variance?: Maybe<listings_variance_order_by>;
}

/** input type for inserting array relation for remote table "listings" */
export interface listings_arr_rel_insert_input {
  data: Array<listings_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<listings_on_conflict>;
}

/** order by avg() on columns of table "listings" */
export interface listings_avg_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "listings". All fields are combined with a logical 'AND'. */
export interface listings_bool_exp {
  _and?: Maybe<Array<listings_bool_exp>>;
  _not?: Maybe<listings_bool_exp>;
  _or?: Maybe<Array<listings_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  category_slug?: Maybe<String_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  discount_codes?: Maybe<discount_codes_bool_exp>;
  discussions?: Maybe<listing_discussions_bool_exp>;
  listing_in_collections?: Maybe<listing_in_collections_bool_exp>;
  media?: Maybe<listing_media_bool_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  passes?: Maybe<passes_bool_exp>;
  price?: Maybe<float8_comparison_exp>;
  published?: Maybe<Boolean_comparison_exp>;
  published_at?: Maybe<timestamptz_comparison_exp>;
  requests?: Maybe<requests_bool_exp>;
  reservations?: Maybe<reservations_bool_exp>;
  reviews?: Maybe<reviews_bool_exp>;
  slug?: Maybe<String_comparison_exp>;
  summary?: Maybe<String_comparison_exp>;
  tags?: Maybe<listing_tags_bool_exp>;
  title?: Maybe<String_comparison_exp>;
  total_bathrooms?: Maybe<Int_comparison_exp>;
  total_bedrooms?: Maybe<Int_comparison_exp>;
  total_occupancy?: Maybe<Int_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  wishes?: Maybe<listing_wishes_bool_exp>;
}

/** unique or primary key constraints on table "listings" */
export enum listings_constraint {
  /** unique or primary key constraint */
  listings_pkey = "listings_pkey",
  /** unique or primary key constraint */
  listings_slug_unique = "listings_slug_unique",
}

/** input type for incrementing numeric columns in table "listings" */
export interface listings_inc_input {
  price?: Maybe<Scalars["float8"]>;
  total_bathrooms?: Maybe<Scalars["Int"]>;
  total_bedrooms?: Maybe<Scalars["Int"]>;
  total_occupancy?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "listings" */
export interface listings_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  category_slug?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  discount_codes?: Maybe<discount_codes_arr_rel_insert_input>;
  discussions?: Maybe<listing_discussions_arr_rel_insert_input>;
  listing_in_collections?: Maybe<listing_in_collections_arr_rel_insert_input>;
  media?: Maybe<listing_media_arr_rel_insert_input>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  passes?: Maybe<passes_arr_rel_insert_input>;
  price?: Maybe<Scalars["float8"]>;
  published?: Maybe<Scalars["Boolean"]>;
  published_at?: Maybe<Scalars["timestamptz"]>;
  requests?: Maybe<requests_arr_rel_insert_input>;
  reservations?: Maybe<reservations_arr_rel_insert_input>;
  reviews?: Maybe<reviews_arr_rel_insert_input>;
  slug?: Maybe<Scalars["String"]>;
  summary?: Maybe<Scalars["String"]>;
  tags?: Maybe<listing_tags_arr_rel_insert_input>;
  title?: Maybe<Scalars["String"]>;
  total_bathrooms?: Maybe<Scalars["Int"]>;
  total_bedrooms?: Maybe<Scalars["Int"]>;
  total_occupancy?: Maybe<Scalars["Int"]>;
  /** room | facility | item | service */
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  wishes?: Maybe<listing_wishes_arr_rel_insert_input>;
}

/** order by max() on columns of table "listings" */
export interface listings_max_order_by {
  brand_uuid?: Maybe<order_by>;
  category_slug?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  price?: Maybe<order_by>;
  published_at?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  summary?: Maybe<order_by>;
  title?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
  /** room | facility | item | service */
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "listings" */
export interface listings_min_order_by {
  brand_uuid?: Maybe<order_by>;
  category_slug?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  price?: Maybe<order_by>;
  published_at?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  summary?: Maybe<order_by>;
  title?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
  /** room | facility | item | service */
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "listings" */
export interface listings_obj_rel_insert_input {
  data: listings_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<listings_on_conflict>;
}

/** on conflict condition type for table "listings" */
export interface listings_on_conflict {
  constraint: listings_constraint;
  update_columns?: Array<listings_update_column>;
  where?: Maybe<listings_bool_exp>;
}

/** Ordering options when selecting data from "listings". */
export interface listings_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  category_slug?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  discount_codes_aggregate?: Maybe<discount_codes_aggregate_order_by>;
  discussions_aggregate?: Maybe<listing_discussions_aggregate_order_by>;
  listing_in_collections_aggregate?: Maybe<listing_in_collections_aggregate_order_by>;
  media_aggregate?: Maybe<listing_media_aggregate_order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  passes_aggregate?: Maybe<passes_aggregate_order_by>;
  price?: Maybe<order_by>;
  published?: Maybe<order_by>;
  published_at?: Maybe<order_by>;
  requests_aggregate?: Maybe<requests_aggregate_order_by>;
  reservations_aggregate?: Maybe<reservations_aggregate_order_by>;
  reviews_aggregate?: Maybe<reviews_aggregate_order_by>;
  slug?: Maybe<order_by>;
  summary?: Maybe<order_by>;
  tags_aggregate?: Maybe<listing_tags_aggregate_order_by>;
  title?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wishes_aggregate?: Maybe<listing_wishes_aggregate_order_by>;
}

/** primary key columns input for table: listings */
export interface listings_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "listings" */
export enum listings_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  category_slug = "category_slug",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  price = "price",
  /** column name */
  published = "published",
  /** column name */
  published_at = "published_at",
  /** column name */
  slug = "slug",
  /** column name */
  summary = "summary",
  /** column name */
  title = "title",
  /** column name */
  total_bathrooms = "total_bathrooms",
  /** column name */
  total_bedrooms = "total_bedrooms",
  /** column name */
  total_occupancy = "total_occupancy",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "listings" */
export interface listings_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  category_slug?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  price?: Maybe<Scalars["float8"]>;
  published?: Maybe<Scalars["Boolean"]>;
  published_at?: Maybe<Scalars["timestamptz"]>;
  slug?: Maybe<Scalars["String"]>;
  summary?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  total_bathrooms?: Maybe<Scalars["Int"]>;
  total_bedrooms?: Maybe<Scalars["Int"]>;
  total_occupancy?: Maybe<Scalars["Int"]>;
  /** room | facility | item | service */
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "listings" */
export interface listings_stddev_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "listings" */
export interface listings_stddev_pop_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "listings" */
export interface listings_stddev_samp_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by sum() on columns of table "listings" */
export interface listings_sum_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** update columns of table "listings" */
export enum listings_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  category_slug = "category_slug",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  price = "price",
  /** column name */
  published = "published",
  /** column name */
  published_at = "published_at",
  /** column name */
  slug = "slug",
  /** column name */
  summary = "summary",
  /** column name */
  title = "title",
  /** column name */
  total_bathrooms = "total_bathrooms",
  /** column name */
  total_bedrooms = "total_bedrooms",
  /** column name */
  total_occupancy = "total_occupancy",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "listings" */
export interface listings_var_pop_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "listings" */
export interface listings_var_samp_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by variance() on columns of table "listings" */
export interface listings_variance_order_by {
  price?: Maybe<order_by>;
  total_bathrooms?: Maybe<order_by>;
  total_bedrooms?: Maybe<order_by>;
  total_occupancy?: Maybe<order_by>;
}

/** order by aggregate values of table "logs" */
export interface logs_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<logs_max_order_by>;
  min?: Maybe<logs_min_order_by>;
}

/** input type for inserting array relation for remote table "logs" */
export interface logs_arr_rel_insert_input {
  data: Array<logs_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<logs_on_conflict>;
}

/** Boolean expression to filter rows from the table "logs". All fields are combined with a logical 'AND'. */
export interface logs_bool_exp {
  _and?: Maybe<Array<logs_bool_exp>>;
  _not?: Maybe<logs_bool_exp>;
  _or?: Maybe<Array<logs_bool_exp>>;
  created_at?: Maybe<uuid_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  event_type?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<uuid_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "logs" */
export enum logs_constraint {
  /** unique or primary key constraint */
  logs_pkey = "logs_pkey",
}

/** input type for inserting data into table "logs" */
export interface logs_insert_input {
  created_at?: Maybe<Scalars["uuid"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["uuid"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "logs" */
export interface logs_max_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "logs" */
export interface logs_min_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "logs" */
export interface logs_on_conflict {
  constraint: logs_constraint;
  update_columns?: Array<logs_update_column>;
  where?: Maybe<logs_bool_exp>;
}

/** Ordering options when selecting data from "logs". */
export interface logs_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: logs */
export interface logs_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "logs" */
export enum logs_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "logs" */
export interface logs_set_input {
  created_at?: Maybe<Scalars["uuid"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "logs" */
export enum logs_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "media". All fields are combined with a logical 'AND'. */
export interface media_bool_exp {
  _and?: Maybe<Array<media_bool_exp>>;
  _not?: Maybe<media_bool_exp>;
  _or?: Maybe<Array<media_bool_exp>>;
  collection_name?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  file_name?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  mime_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  s3_bucket_name?: Maybe<String_comparison_exp>;
  s3_key?: Maybe<String_comparison_exp>;
  size?: Maybe<bigint_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "media" */
export enum media_constraint {
  /** unique or primary key constraint */
  media_pkey = "media_pkey",
}

/** input type for incrementing numeric columns in table "media" */
export interface media_inc_input {
  index?: Maybe<Scalars["Int"]>;
  size?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "media" */
export interface media_insert_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "media" */
export interface media_on_conflict {
  constraint: media_constraint;
  update_columns?: Array<media_update_column>;
  where?: Maybe<media_bool_exp>;
}

/** Ordering options when selecting data from "media". */
export interface media_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: media */
export interface media_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "media" */
export enum media_select_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "media" */
export interface media_set_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "media" */
export enum media_update_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "messages" */
export interface messages_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<messages_max_order_by>;
  min?: Maybe<messages_min_order_by>;
}

/** input type for inserting array relation for remote table "messages" */
export interface messages_arr_rel_insert_input {
  data: Array<messages_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<messages_on_conflict>;
}

/** Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'. */
export interface messages_bool_exp {
  _and?: Maybe<Array<messages_bool_exp>>;
  _not?: Maybe<messages_bool_exp>;
  _or?: Maybe<Array<messages_bool_exp>>;
  author_uuid?: Maybe<uuid_comparison_exp>;
  content?: Maybe<String_comparison_exp>;
  content_type?: Maybe<String_comparison_exp>;
  conversation?: Maybe<conversations_bool_exp>;
  conversation_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  private?: Maybe<Boolean_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  read?: Maybe<Boolean_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "messages" */
export enum messages_constraint {
  /** unique or primary key constraint */
  messages_pkey = "messages_pkey",
}

/** input type for inserting data into table "messages" */
export interface messages_insert_input {
  author_uuid?: Maybe<Scalars["uuid"]>;
  content?: Maybe<Scalars["String"]>;
  content_type?: Maybe<Scalars["String"]>;
  conversation?: Maybe<conversations_obj_rel_insert_input>;
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  private?: Maybe<Scalars["Boolean"]>;
  properties?: Maybe<Scalars["json"]>;
  read?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "messages" */
export interface messages_max_order_by {
  author_uuid?: Maybe<order_by>;
  content?: Maybe<order_by>;
  content_type?: Maybe<order_by>;
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "messages" */
export interface messages_min_order_by {
  author_uuid?: Maybe<order_by>;
  content?: Maybe<order_by>;
  content_type?: Maybe<order_by>;
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "messages" */
export interface messages_on_conflict {
  constraint: messages_constraint;
  update_columns?: Array<messages_update_column>;
  where?: Maybe<messages_bool_exp>;
}

/** Ordering options when selecting data from "messages". */
export interface messages_order_by {
  author_uuid?: Maybe<order_by>;
  content?: Maybe<order_by>;
  content_type?: Maybe<order_by>;
  conversation?: Maybe<conversations_order_by>;
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  private?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  read?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: messages */
export interface messages_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "messages" */
export enum messages_select_column {
  /** column name */
  author_uuid = "author_uuid",
  /** column name */
  content = "content",
  /** column name */
  content_type = "content_type",
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  private = "private",
  /** column name */
  properties = "properties",
  /** column name */
  read = "read",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "messages" */
export interface messages_set_input {
  author_uuid?: Maybe<Scalars["uuid"]>;
  content?: Maybe<Scalars["String"]>;
  content_type?: Maybe<Scalars["String"]>;
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  private?: Maybe<Scalars["Boolean"]>;
  properties?: Maybe<Scalars["json"]>;
  read?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "messages" */
export enum messages_update_column {
  /** column name */
  author_uuid = "author_uuid",
  /** column name */
  content = "content",
  /** column name */
  content_type = "content_type",
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  private = "private",
  /** column name */
  properties = "properties",
  /** column name */
  read = "read",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "model_has_comments" */
export interface model_has_comments_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<model_has_comments_max_order_by>;
  min?: Maybe<model_has_comments_min_order_by>;
}

/** input type for inserting array relation for remote table "model_has_comments" */
export interface model_has_comments_arr_rel_insert_input {
  data: Array<model_has_comments_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<model_has_comments_on_conflict>;
}

/** Boolean expression to filter rows from the table "model_has_comments". All fields are combined with a logical 'AND'. */
export interface model_has_comments_bool_exp {
  _and?: Maybe<Array<model_has_comments_bool_exp>>;
  _not?: Maybe<model_has_comments_bool_exp>;
  _or?: Maybe<Array<model_has_comments_bool_exp>>;
  comments?: Maybe<comment_comments_bool_exp>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  likes?: Maybe<comment_likes_bool_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "model_has_comments" */
export enum model_has_comments_constraint {
  /** unique or primary key constraint */
  model_has_comments_pkey = "model_has_comments_pkey",
}

/** input type for inserting data into table "model_has_comments" */
export interface model_has_comments_insert_input {
  comments?: Maybe<comment_comments_arr_rel_insert_input>;
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  likes?: Maybe<comment_likes_arr_rel_insert_input>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "model_has_comments" */
export interface model_has_comments_max_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "model_has_comments" */
export interface model_has_comments_min_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "model_has_comments" */
export interface model_has_comments_on_conflict {
  constraint: model_has_comments_constraint;
  update_columns?: Array<model_has_comments_update_column>;
  where?: Maybe<model_has_comments_bool_exp>;
}

/** Ordering options when selecting data from "model_has_comments". */
export interface model_has_comments_order_by {
  comments_aggregate?: Maybe<comment_comments_aggregate_order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  likes_aggregate?: Maybe<comment_likes_aggregate_order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: model_has_comments */
export interface model_has_comments_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "model_has_comments" */
export enum model_has_comments_select_column {
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "model_has_comments" */
export interface model_has_comments_set_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "model_has_comments" */
export enum model_has_comments_update_column {
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "model_has_likes" */
export interface model_has_likes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<model_has_likes_max_order_by>;
  min?: Maybe<model_has_likes_min_order_by>;
}

/** input type for inserting array relation for remote table "model_has_likes" */
export interface model_has_likes_arr_rel_insert_input {
  data: Array<model_has_likes_insert_input>;
}

/** Boolean expression to filter rows from the table "model_has_likes". All fields are combined with a logical 'AND'. */
export interface model_has_likes_bool_exp {
  _and?: Maybe<Array<model_has_likes_bool_exp>>;
  _not?: Maybe<model_has_likes_bool_exp>;
  _or?: Maybe<Array<model_has_likes_bool_exp>>;
  liked_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "model_has_likes" */
export interface model_has_likes_insert_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "model_has_likes" */
export interface model_has_likes_max_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "model_has_likes" */
export interface model_has_likes_min_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "model_has_likes". */
export interface model_has_likes_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
}

/** select columns of table "model_has_likes" */
export enum model_has_likes_select_column {
  /** column name */
  liked_at = "liked_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "model_has_likes" */
export interface model_has_likes_set_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "model_has_permissions" */
export interface model_has_permissions_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<model_has_permissions_max_order_by>;
  min?: Maybe<model_has_permissions_min_order_by>;
}

/** input type for inserting array relation for remote table "model_has_permissions" */
export interface model_has_permissions_arr_rel_insert_input {
  data: Array<model_has_permissions_insert_input>;
}

/** Boolean expression to filter rows from the table "model_has_permissions". All fields are combined with a logical 'AND'. */
export interface model_has_permissions_bool_exp {
  _and?: Maybe<Array<model_has_permissions_bool_exp>>;
  _not?: Maybe<model_has_permissions_bool_exp>;
  _or?: Maybe<Array<model_has_permissions_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  permission?: Maybe<permissions_bool_exp>;
  permission_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "model_has_permissions" */
export interface model_has_permissions_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  permission?: Maybe<permissions_obj_rel_insert_input>;
  permission_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "model_has_permissions" */
export interface model_has_permissions_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  permission_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "model_has_permissions" */
export interface model_has_permissions_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  permission_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "model_has_permissions". */
export interface model_has_permissions_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  permission?: Maybe<permissions_order_by>;
  permission_uuid?: Maybe<order_by>;
}

/** select columns of table "model_has_permissions" */
export enum model_has_permissions_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  permission_uuid = "permission_uuid",
}

/** input type for updating data in table "model_has_permissions" */
export interface model_has_permissions_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  permission_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "model_has_roles" */
export interface model_has_roles_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<model_has_roles_max_order_by>;
  min?: Maybe<model_has_roles_min_order_by>;
}

/** input type for inserting array relation for remote table "model_has_roles" */
export interface model_has_roles_arr_rel_insert_input {
  data: Array<model_has_roles_insert_input>;
}

/** Boolean expression to filter rows from the table "model_has_roles". All fields are combined with a logical 'AND'. */
export interface model_has_roles_bool_exp {
  _and?: Maybe<Array<model_has_roles_bool_exp>>;
  _not?: Maybe<model_has_roles_bool_exp>;
  _or?: Maybe<Array<model_has_roles_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  role?: Maybe<roles_bool_exp>;
  role_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "model_has_roles" */
export interface model_has_roles_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role?: Maybe<roles_obj_rel_insert_input>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "model_has_roles" */
export interface model_has_roles_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "model_has_roles" */
export interface model_has_roles_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "model_has_roles". */
export interface model_has_roles_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role?: Maybe<roles_order_by>;
  role_uuid?: Maybe<order_by>;
}

/** select columns of table "model_has_roles" */
export enum model_has_roles_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  role_uuid = "role_uuid",
}

/** input type for updating data in table "model_has_roles" */
export interface model_has_roles_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "model_has_tags". All fields are combined with a logical 'AND'. */
export interface model_has_tags_bool_exp {
  _and?: Maybe<Array<model_has_tags_bool_exp>>;
  _not?: Maybe<model_has_tags_bool_exp>;
  _or?: Maybe<Array<model_has_tags_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  tag_uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "model_has_tags" */
export enum model_has_tags_constraint {
  /** unique or primary key constraint */
  model_has_tags_pkey = "model_has_tags_pkey",
}

/** input type for inserting data into table "model_has_tags" */
export interface model_has_tags_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "model_has_tags" */
export interface model_has_tags_on_conflict {
  constraint: model_has_tags_constraint;
  update_columns?: Array<model_has_tags_update_column>;
  where?: Maybe<model_has_tags_bool_exp>;
}

/** Ordering options when selecting data from "model_has_tags". */
export interface model_has_tags_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  tag_uuid?: Maybe<order_by>;
}

/** primary key columns input for table: model_has_tags */
export interface model_has_tags_pk_columns_input {
  tag_uuid: Scalars["uuid"];
}

/** select columns of table "model_has_tags" */
export enum model_has_tags_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  tag_uuid = "tag_uuid",
}

/** input type for updating data in table "model_has_tags" */
export interface model_has_tags_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  tag_uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "model_has_tags" */
export enum model_has_tags_update_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  tag_uuid = "tag_uuid",
}

/** Boolean expression to compare columns of type "name". All fields are combined with logical 'AND'. */
export interface name_comparison_exp {
  _eq?: Maybe<Scalars["name"]>;
  _gt?: Maybe<Scalars["name"]>;
  _gte?: Maybe<Scalars["name"]>;
  _in?: Maybe<Array<Scalars["name"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["name"]>;
  _lte?: Maybe<Scalars["name"]>;
  _neq?: Maybe<Scalars["name"]>;
  _nin?: Maybe<Array<Scalars["name"]>>;
}

/** order by aggregate values of table "notifications" */
export interface notifications_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<notifications_max_order_by>;
  min?: Maybe<notifications_min_order_by>;
}

/** input type for inserting array relation for remote table "notifications" */
export interface notifications_arr_rel_insert_input {
  data: Array<notifications_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<notifications_on_conflict>;
}

/** Boolean expression to filter rows from the table "notifications". All fields are combined with a logical 'AND'. */
export interface notifications_bool_exp {
  _and?: Maybe<Array<notifications_bool_exp>>;
  _not?: Maybe<notifications_bool_exp>;
  _or?: Maybe<Array<notifications_bool_exp>>;
  action_text?: Maybe<String_comparison_exp>;
  action_url?: Maybe<String_comparison_exp>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  icon?: Maybe<String_comparison_exp>;
  read?: Maybe<Boolean_comparison_exp>;
  read_at?: Maybe<timestamptz_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "notifications" */
export enum notifications_constraint {
  /** unique or primary key constraint */
  notifications_pkey = "notifications_pkey",
}

/** input type for inserting data into table "notifications" */
export interface notifications_insert_input {
  action_text?: Maybe<Scalars["String"]>;
  action_url?: Maybe<Scalars["String"]>;
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  icon?: Maybe<Scalars["String"]>;
  read?: Maybe<Scalars["Boolean"]>;
  read_at?: Maybe<Scalars["timestamptz"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "notifications" */
export interface notifications_max_order_by {
  action_text?: Maybe<order_by>;
  action_url?: Maybe<order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  icon?: Maybe<order_by>;
  read_at?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "notifications" */
export interface notifications_min_order_by {
  action_text?: Maybe<order_by>;
  action_url?: Maybe<order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  icon?: Maybe<order_by>;
  read_at?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "notifications" */
export interface notifications_on_conflict {
  constraint: notifications_constraint;
  update_columns?: Array<notifications_update_column>;
  where?: Maybe<notifications_bool_exp>;
}

/** Ordering options when selecting data from "notifications". */
export interface notifications_order_by {
  action_text?: Maybe<order_by>;
  action_url?: Maybe<order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  icon?: Maybe<order_by>;
  read?: Maybe<order_by>;
  read_at?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: notifications */
export interface notifications_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "notifications" */
export enum notifications_select_column {
  /** column name */
  action_text = "action_text",
  /** column name */
  action_url = "action_url",
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  icon = "icon",
  /** column name */
  read = "read",
  /** column name */
  read_at = "read_at",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "notifications" */
export interface notifications_set_input {
  action_text?: Maybe<Scalars["String"]>;
  action_url?: Maybe<Scalars["String"]>;
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  icon?: Maybe<Scalars["String"]>;
  read?: Maybe<Scalars["Boolean"]>;
  read_at?: Maybe<Scalars["timestamptz"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "notifications" */
export enum notifications_update_column {
  /** column name */
  action_text = "action_text",
  /** column name */
  action_url = "action_url",
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  icon = "icon",
  /** column name */
  read = "read",
  /** column name */
  read_at = "read_at",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export interface numeric_comparison_exp {
  _eq?: Maybe<Scalars["numeric"]>;
  _gt?: Maybe<Scalars["numeric"]>;
  _gte?: Maybe<Scalars["numeric"]>;
  _in?: Maybe<Array<Scalars["numeric"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["numeric"]>;
  _lte?: Maybe<Scalars["numeric"]>;
  _neq?: Maybe<Scalars["numeric"]>;
  _nin?: Maybe<Array<Scalars["numeric"]>>;
}

/** Boolean expression to compare columns of type "oid". All fields are combined with logical 'AND'. */
export interface oid_comparison_exp {
  _eq?: Maybe<Scalars["oid"]>;
  _gt?: Maybe<Scalars["oid"]>;
  _gte?: Maybe<Scalars["oid"]>;
  _in?: Maybe<Array<Scalars["oid"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["oid"]>;
  _lte?: Maybe<Scalars["oid"]>;
  _neq?: Maybe<Scalars["oid"]>;
  _nin?: Maybe<Array<Scalars["oid"]>>;
}

/** column ordering options */
export enum order_by {
  /** in ascending order, nulls last */
  asc = "asc",
  /** in ascending order, nulls first */
  asc_nulls_first = "asc_nulls_first",
  /** in ascending order, nulls last */
  asc_nulls_last = "asc_nulls_last",
  /** in descending order, nulls first */
  desc = "desc",
  /** in descending order, nulls first */
  desc_nulls_first = "desc_nulls_first",
  /** in descending order, nulls last */
  desc_nulls_last = "desc_nulls_last",
}

/** order by aggregate values of table "outlet_has_addons" */
export interface outlet_has_addons_aggregate_order_by {
  avg?: Maybe<outlet_has_addons_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<outlet_has_addons_max_order_by>;
  min?: Maybe<outlet_has_addons_min_order_by>;
  stddev?: Maybe<outlet_has_addons_stddev_order_by>;
  stddev_pop?: Maybe<outlet_has_addons_stddev_pop_order_by>;
  stddev_samp?: Maybe<outlet_has_addons_stddev_samp_order_by>;
  sum?: Maybe<outlet_has_addons_sum_order_by>;
  var_pop?: Maybe<outlet_has_addons_var_pop_order_by>;
  var_samp?: Maybe<outlet_has_addons_var_samp_order_by>;
  variance?: Maybe<outlet_has_addons_variance_order_by>;
}

/** input type for inserting array relation for remote table "outlet_has_addons" */
export interface outlet_has_addons_arr_rel_insert_input {
  data: Array<outlet_has_addons_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<outlet_has_addons_on_conflict>;
}

/** order by avg() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_avg_order_by {
  price?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "outlet_has_addons". All fields are combined with a logical 'AND'. */
export interface outlet_has_addons_bool_exp {
  _and?: Maybe<Array<outlet_has_addons_bool_exp>>;
  _not?: Maybe<outlet_has_addons_bool_exp>;
  _or?: Maybe<Array<outlet_has_addons_bool_exp>>;
  addon_uuid?: Maybe<uuid_comparison_exp>;
  available?: Maybe<Boolean_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  default_addon?: Maybe<default_addons_bool_exp>;
  description?: Maybe<String_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  price?: Maybe<float8_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
}

/** unique or primary key constraints on table "outlet_has_addons" */
export enum outlet_has_addons_constraint {
  /** unique or primary key constraint */
  outlet_has_addons_pkey = "outlet_has_addons_pkey",
}

/** input type for incrementing numeric columns in table "outlet_has_addons" */
export interface outlet_has_addons_inc_input {
  price?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "outlet_has_addons" */
export interface outlet_has_addons_insert_input {
  addon_uuid?: Maybe<Scalars["uuid"]>;
  available?: Maybe<Scalars["Boolean"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  default_addon?: Maybe<default_addons_obj_rel_insert_input>;
  description?: Maybe<Scalars["String"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  price?: Maybe<Scalars["float8"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** order by max() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_max_order_by {
  addon_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
}

/** order by min() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_min_order_by {
  addon_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
}

/** on conflict condition type for table "outlet_has_addons" */
export interface outlet_has_addons_on_conflict {
  constraint: outlet_has_addons_constraint;
  update_columns?: Array<outlet_has_addons_update_column>;
  where?: Maybe<outlet_has_addons_bool_exp>;
}

/** Ordering options when selecting data from "outlet_has_addons". */
export interface outlet_has_addons_order_by {
  addon_uuid?: Maybe<order_by>;
  available?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  default_addon?: Maybe<default_addons_order_by>;
  description?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  price?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
}

/** primary key columns input for table: outlet_has_addons */
export interface outlet_has_addons_pk_columns_input {
  outlet_uuid: Scalars["uuid"];
}

/** select columns of table "outlet_has_addons" */
export enum outlet_has_addons_select_column {
  /** column name */
  addon_uuid = "addon_uuid",
  /** column name */
  available = "available",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  price = "price",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
}

/** input type for updating data in table "outlet_has_addons" */
export interface outlet_has_addons_set_input {
  addon_uuid?: Maybe<Scalars["uuid"]>;
  available?: Maybe<Scalars["Boolean"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  price?: Maybe<Scalars["float8"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** order by stddev() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_stddev_order_by {
  price?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_stddev_pop_order_by {
  price?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_stddev_samp_order_by {
  price?: Maybe<order_by>;
}

/** order by sum() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_sum_order_by {
  price?: Maybe<order_by>;
}

/** update columns of table "outlet_has_addons" */
export enum outlet_has_addons_update_column {
  /** column name */
  addon_uuid = "addon_uuid",
  /** column name */
  available = "available",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  price = "price",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
}

/** order by var_pop() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_var_pop_order_by {
  price?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_var_samp_order_by {
  price?: Maybe<order_by>;
}

/** order by variance() on columns of table "outlet_has_addons" */
export interface outlet_has_addons_variance_order_by {
  price?: Maybe<order_by>;
}

/** order by aggregate values of table "outlets" */
export interface outlets_aggregate_order_by {
  avg?: Maybe<outlets_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<outlets_max_order_by>;
  min?: Maybe<outlets_min_order_by>;
  stddev?: Maybe<outlets_stddev_order_by>;
  stddev_pop?: Maybe<outlets_stddev_pop_order_by>;
  stddev_samp?: Maybe<outlets_stddev_samp_order_by>;
  sum?: Maybe<outlets_sum_order_by>;
  var_pop?: Maybe<outlets_var_pop_order_by>;
  var_samp?: Maybe<outlets_var_samp_order_by>;
  variance?: Maybe<outlets_variance_order_by>;
}

/** input type for inserting array relation for remote table "outlets" */
export interface outlets_arr_rel_insert_input {
  data: Array<outlets_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<outlets_on_conflict>;
}

/** order by avg() on columns of table "outlets" */
export interface outlets_avg_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "outlets". All fields are combined with a logical 'AND'. */
export interface outlets_bool_exp {
  _and?: Maybe<Array<outlets_bool_exp>>;
  _not?: Maybe<outlets_bool_exp>;
  _or?: Maybe<Array<outlets_bool_exp>>;
  area?: Maybe<String_comparison_exp>;
  aruba_wifi_accesses?: Maybe<aruba_wifi_access_bool_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  floor_plans?: Maybe<floor_plans_bool_exp>;
  full_address?: Maybe<String_comparison_exp>;
  geohash?: Maybe<String_comparison_exp>;
  gm_badge_printing?: Maybe<Boolean_comparison_exp>;
  gm_photo_taking?: Maybe<Boolean_comparison_exp>;
  guest_management?: Maybe<Boolean_comparison_exp>;
  guests?: Maybe<guests_bool_exp>;
  latitude?: Maybe<float8_comparison_exp>;
  listings?: Maybe<listings_bool_exp>;
  locale?: Maybe<bpchar_comparison_exp>;
  longitude?: Maybe<float8_comparison_exp>;
  occupancy?: Maybe<Int_comparison_exp>;
  passes?: Maybe<passes_bool_exp>;
  requests?: Maybe<requests_bool_exp>;
  reviews?: Maybe<reviews_bool_exp>;
  spaces?: Maybe<spaces_bool_exp>;
  timezone?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "outlets" */
export enum outlets_constraint {
  /** unique or primary key constraint */
  outlets_pkey = "outlets_pkey",
}

/** input type for incrementing numeric columns in table "outlets" */
export interface outlets_inc_input {
  latitude?: Maybe<Scalars["float8"]>;
  longitude?: Maybe<Scalars["float8"]>;
  occupancy?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "outlets" */
export interface outlets_insert_input {
  area?: Maybe<Scalars["String"]>;
  aruba_wifi_accesses?: Maybe<aruba_wifi_access_arr_rel_insert_input>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  floor_plans?: Maybe<floor_plans_arr_rel_insert_input>;
  full_address?: Maybe<Scalars["String"]>;
  geohash?: Maybe<Scalars["String"]>;
  gm_badge_printing?: Maybe<Scalars["Boolean"]>;
  gm_photo_taking?: Maybe<Scalars["Boolean"]>;
  guest_management?: Maybe<Scalars["Boolean"]>;
  guests?: Maybe<guests_arr_rel_insert_input>;
  latitude?: Maybe<Scalars["float8"]>;
  listings?: Maybe<listings_arr_rel_insert_input>;
  locale?: Maybe<Scalars["bpchar"]>;
  longitude?: Maybe<Scalars["float8"]>;
  occupancy?: Maybe<Scalars["Int"]>;
  passes?: Maybe<passes_arr_rel_insert_input>;
  requests?: Maybe<requests_arr_rel_insert_input>;
  reviews?: Maybe<reviews_arr_rel_insert_input>;
  spaces?: Maybe<spaces_arr_rel_insert_input>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "outlets" */
export interface outlets_max_order_by {
  area?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  full_address?: Maybe<order_by>;
  geohash?: Maybe<order_by>;
  latitude?: Maybe<order_by>;
  locale?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  timezone?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "outlets" */
export interface outlets_min_order_by {
  area?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  full_address?: Maybe<order_by>;
  geohash?: Maybe<order_by>;
  latitude?: Maybe<order_by>;
  locale?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  timezone?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "outlets" */
export interface outlets_obj_rel_insert_input {
  data: outlets_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<outlets_on_conflict>;
}

/** on conflict condition type for table "outlets" */
export interface outlets_on_conflict {
  constraint: outlets_constraint;
  update_columns?: Array<outlets_update_column>;
  where?: Maybe<outlets_bool_exp>;
}

/** Ordering options when selecting data from "outlets". */
export interface outlets_order_by {
  area?: Maybe<order_by>;
  aruba_wifi_accesses_aggregate?: Maybe<aruba_wifi_access_aggregate_order_by>;
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  floor_plans_aggregate?: Maybe<floor_plans_aggregate_order_by>;
  full_address?: Maybe<order_by>;
  geohash?: Maybe<order_by>;
  gm_badge_printing?: Maybe<order_by>;
  gm_photo_taking?: Maybe<order_by>;
  guest_management?: Maybe<order_by>;
  guests_aggregate?: Maybe<guests_aggregate_order_by>;
  latitude?: Maybe<order_by>;
  listings_aggregate?: Maybe<listings_aggregate_order_by>;
  locale?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  passes_aggregate?: Maybe<passes_aggregate_order_by>;
  requests_aggregate?: Maybe<requests_aggregate_order_by>;
  reviews_aggregate?: Maybe<reviews_aggregate_order_by>;
  spaces_aggregate?: Maybe<spaces_aggregate_order_by>;
  timezone?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: outlets */
export interface outlets_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "outlets" */
export enum outlets_select_column {
  /** column name */
  area = "area",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  full_address = "full_address",
  /** column name */
  geohash = "geohash",
  /** column name */
  gm_badge_printing = "gm_badge_printing",
  /** column name */
  gm_photo_taking = "gm_photo_taking",
  /** column name */
  guest_management = "guest_management",
  /** column name */
  latitude = "latitude",
  /** column name */
  locale = "locale",
  /** column name */
  longitude = "longitude",
  /** column name */
  occupancy = "occupancy",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "outlets" */
export interface outlets_set_input {
  area?: Maybe<Scalars["String"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  full_address?: Maybe<Scalars["String"]>;
  geohash?: Maybe<Scalars["String"]>;
  gm_badge_printing?: Maybe<Scalars["Boolean"]>;
  gm_photo_taking?: Maybe<Scalars["Boolean"]>;
  guest_management?: Maybe<Scalars["Boolean"]>;
  latitude?: Maybe<Scalars["float8"]>;
  locale?: Maybe<Scalars["bpchar"]>;
  longitude?: Maybe<Scalars["float8"]>;
  occupancy?: Maybe<Scalars["Int"]>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "outlets" */
export interface outlets_stddev_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "outlets" */
export interface outlets_stddev_pop_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "outlets" */
export interface outlets_stddev_samp_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by sum() on columns of table "outlets" */
export interface outlets_sum_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** update columns of table "outlets" */
export enum outlets_update_column {
  /** column name */
  area = "area",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  full_address = "full_address",
  /** column name */
  geohash = "geohash",
  /** column name */
  gm_badge_printing = "gm_badge_printing",
  /** column name */
  gm_photo_taking = "gm_photo_taking",
  /** column name */
  guest_management = "guest_management",
  /** column name */
  latitude = "latitude",
  /** column name */
  locale = "locale",
  /** column name */
  longitude = "longitude",
  /** column name */
  occupancy = "occupancy",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "outlets" */
export interface outlets_var_pop_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "outlets" */
export interface outlets_var_samp_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by variance() on columns of table "outlets" */
export interface outlets_variance_order_by {
  latitude?: Maybe<order_by>;
  longitude?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "passes_activity_logs". All fields are combined with a logical 'AND'. */
export interface passes_activity_logs_bool_exp {
  _and?: Maybe<Array<passes_activity_logs_bool_exp>>;
  _not?: Maybe<passes_activity_logs_bool_exp>;
  _or?: Maybe<Array<passes_activity_logs_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  event_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "passes_activity_logs" */
export interface passes_activity_logs_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Ordering options when selecting data from "passes_activity_logs". */
export interface passes_activity_logs_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "passes_activity_logs" */
export enum passes_activity_logs_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "passes_activity_logs" */
export interface passes_activity_logs_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "passes" */
export interface passes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<passes_max_order_by>;
  min?: Maybe<passes_min_order_by>;
}

/** input type for inserting array relation for remote table "passes" */
export interface passes_arr_rel_insert_input {
  data: Array<passes_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<passes_on_conflict>;
}

/** Boolean expression to filter rows from the table "passes". All fields are combined with a logical 'AND'. */
export interface passes_bool_exp {
  _and?: Maybe<Array<passes_bool_exp>>;
  _not?: Maybe<passes_bool_exp>;
  _or?: Maybe<Array<passes_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_snapshot?: Maybe<json_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_end?: Maybe<date_comparison_exp>;
  date_start?: Maybe<date_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  listing?: Maybe<listings_bool_exp>;
  listing_snapshot?: Maybe<json_comparison_exp>;
  listing_type?: Maybe<uuid_comparison_exp>;
  listing_uuid?: Maybe<uuid_comparison_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_snapshot?: Maybe<json_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  request?: Maybe<requests_bool_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
  spaces_usages?: Maybe<spaces_usage_bool_exp>;
  title?: Maybe<String_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_snapshot?: Maybe<json_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "passes" */
export enum passes_constraint {
  /** unique or primary key constraint */
  passes_pkey = "passes_pkey",
}

/** input type for inserting data into table "passes" */
export interface passes_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  description?: Maybe<Scalars["String"]>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["uuid"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  request?: Maybe<requests_obj_rel_insert_input>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  spaces_usages?: Maybe<spaces_usage_arr_rel_insert_input>;
  title?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_snapshot?: Maybe<Scalars["json"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "passes" */
export interface passes_max_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  description?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "passes" */
export interface passes_min_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  description?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "passes" */
export interface passes_obj_rel_insert_input {
  data: passes_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<passes_on_conflict>;
}

/** on conflict condition type for table "passes" */
export interface passes_on_conflict {
  constraint: passes_constraint;
  update_columns?: Array<passes_update_column>;
  where?: Maybe<passes_bool_exp>;
}

/** Ordering options when selecting data from "passes". */
export interface passes_order_by {
  brand?: Maybe<brands_order_by>;
  brand_snapshot?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  description?: Maybe<order_by>;
  listing?: Maybe<listings_order_by>;
  listing_snapshot?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_snapshot?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  request?: Maybe<requests_order_by>;
  request_uuid?: Maybe<order_by>;
  spaces_usages_aggregate?: Maybe<spaces_usage_aggregate_order_by>;
  title?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_snapshot?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: passes */
export interface passes_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "passes" */
export enum passes_select_column {
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  description = "description",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  title = "title",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "passes" */
export interface passes_set_input {
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  description?: Maybe<Scalars["String"]>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["uuid"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_snapshot?: Maybe<Scalars["json"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "passes" */
export enum passes_update_column {
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  description = "description",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  title = "title",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "payments". All fields are combined with a logical 'AND'. */
export interface payments_bool_exp {
  _and?: Maybe<Array<payments_bool_exp>>;
  _not?: Maybe<payments_bool_exp>;
  _or?: Maybe<Array<payments_bool_exp>>;
  base_3rd_party_platform?: Maybe<String_comparison_exp>;
  base_3rd_party_platform_fee?: Maybe<float8_comparison_exp>;
  base_brand_conversion_code?: Maybe<float8_comparison_exp>;
  base_brand_currency_code?: Maybe<bpchar_comparison_exp>;
  base_brand_gross_revenue?: Maybe<float8_comparison_exp>;
  base_cashback_by_brand?: Maybe<float8_comparison_exp>;
  base_cashback_by_stayr?: Maybe<float8_comparison_exp>;
  base_currency_code?: Maybe<bpchar_comparison_exp>;
  base_discount_by_brand?: Maybe<float8_comparison_exp>;
  base_discount_by_stayr?: Maybe<float8_comparison_exp>;
  base_payment_by_card?: Maybe<float8_comparison_exp>;
  base_payment_by_cash?: Maybe<float8_comparison_exp>;
  base_payment_by_credits?: Maybe<float8_comparison_exp>;
  base_pf_cc_fee?: Maybe<float8_comparison_exp>;
  base_pf_transaction_fee?: Maybe<float8_comparison_exp>;
  base_total_cashback?: Maybe<float8_comparison_exp>;
  base_total_discount?: Maybe<float8_comparison_exp>;
  base_total_payment?: Maybe<float8_comparison_exp>;
  base_total_price?: Maybe<float8_comparison_exp>;
  base_user_conversion_rate?: Maybe<float8_comparison_exp>;
  base_user_currency_code?: Maybe<bpchar_comparison_exp>;
  column_23?: Maybe<String_comparison_exp>;
  id?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "payments" */
export enum payments_constraint {
  /** unique or primary key constraint */
  payments_pkey = "payments_pkey",
}

/** input type for incrementing numeric columns in table "payments" */
export interface payments_inc_input {
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_conversion_code?: Maybe<Scalars["float8"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_user_conversion_rate?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "payments" */
export interface payments_insert_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_conversion_code?: Maybe<Scalars["float8"]>;
  base_brand_currency_code?: Maybe<Scalars["bpchar"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_user_conversion_rate?: Maybe<Scalars["float8"]>;
  base_user_currency_code?: Maybe<Scalars["bpchar"]>;
  column_23?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "payments" */
export interface payments_on_conflict {
  constraint: payments_constraint;
  update_columns?: Array<payments_update_column>;
  where?: Maybe<payments_bool_exp>;
}

/** Ordering options when selecting data from "payments". */
export interface payments_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_brand_conversion_code?: Maybe<order_by>;
  base_brand_currency_code?: Maybe<order_by>;
  base_brand_gross_revenue?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_pf_cc_fee?: Maybe<order_by>;
  base_pf_transaction_fee?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_user_conversion_rate?: Maybe<order_by>;
  base_user_currency_code?: Maybe<order_by>;
  column_23?: Maybe<order_by>;
  id?: Maybe<order_by>;
}

/** primary key columns input for table: payments */
export interface payments_pk_columns_input {
  id: Scalars["uuid"];
}

/** select columns of table "payments" */
export enum payments_select_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_brand_conversion_code = "base_brand_conversion_code",
  /** column name */
  base_brand_currency_code = "base_brand_currency_code",
  /** column name */
  base_brand_gross_revenue = "base_brand_gross_revenue",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_pf_cc_fee = "base_pf_cc_fee",
  /** column name */
  base_pf_transaction_fee = "base_pf_transaction_fee",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_user_conversion_rate = "base_user_conversion_rate",
  /** column name */
  base_user_currency_code = "base_user_currency_code",
  /** column name */
  column_23 = "column_23",
  /** column name */
  id = "id",
}

/** input type for updating data in table "payments" */
export interface payments_set_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_brand_conversion_code?: Maybe<Scalars["float8"]>;
  base_brand_currency_code?: Maybe<Scalars["bpchar"]>;
  base_brand_gross_revenue?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_pf_cc_fee?: Maybe<Scalars["float8"]>;
  base_pf_transaction_fee?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_user_conversion_rate?: Maybe<Scalars["float8"]>;
  base_user_currency_code?: Maybe<Scalars["bpchar"]>;
  column_23?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "payments" */
export enum payments_update_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_brand_conversion_code = "base_brand_conversion_code",
  /** column name */
  base_brand_currency_code = "base_brand_currency_code",
  /** column name */
  base_brand_gross_revenue = "base_brand_gross_revenue",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_pf_cc_fee = "base_pf_cc_fee",
  /** column name */
  base_pf_transaction_fee = "base_pf_transaction_fee",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_user_conversion_rate = "base_user_conversion_rate",
  /** column name */
  base_user_currency_code = "base_user_currency_code",
  /** column name */
  column_23 = "column_23",
  /** column name */
  id = "id",
}

/** Boolean expression to filter rows from the table "permissions". All fields are combined with a logical 'AND'. */
export interface permissions_bool_exp {
  _and?: Maybe<Array<permissions_bool_exp>>;
  _not?: Maybe<permissions_bool_exp>;
  _or?: Maybe<Array<permissions_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_has_permissions?: Maybe<model_has_permissions_bool_exp>;
  name?: Maybe<String_comparison_exp>;
  role_has_permissions?: Maybe<role_has_permissions_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "permissions" */
export enum permissions_constraint {
  /** unique or primary key constraint */
  permissions_pkey = "permissions_pkey",
}

/** input type for inserting data into table "permissions" */
export interface permissions_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_has_permissions?: Maybe<model_has_permissions_arr_rel_insert_input>;
  name?: Maybe<Scalars["String"]>;
  role_has_permissions?: Maybe<role_has_permissions_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "permissions" */
export interface permissions_obj_rel_insert_input {
  data: permissions_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<permissions_on_conflict>;
}

/** on conflict condition type for table "permissions" */
export interface permissions_on_conflict {
  constraint: permissions_constraint;
  update_columns?: Array<permissions_update_column>;
  where?: Maybe<permissions_bool_exp>;
}

/** Ordering options when selecting data from "permissions". */
export interface permissions_order_by {
  created_at?: Maybe<order_by>;
  model_has_permissions_aggregate?: Maybe<model_has_permissions_aggregate_order_by>;
  name?: Maybe<order_by>;
  role_has_permissions_aggregate?: Maybe<role_has_permissions_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: permissions */
export interface permissions_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "permissions" */
export enum permissions_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  name = "name",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "permissions" */
export interface permissions_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  name?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "permissions" */
export enum permissions_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  name = "name",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "post_comments" */
export interface post_comments_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<post_comments_max_order_by>;
  min?: Maybe<post_comments_min_order_by>;
}

/** input type for inserting array relation for remote table "post_comments" */
export interface post_comments_arr_rel_insert_input {
  data: Array<post_comments_insert_input>;
}

/** Boolean expression to filter rows from the table "post_comments". All fields are combined with a logical 'AND'. */
export interface post_comments_bool_exp {
  _and?: Maybe<Array<post_comments_bool_exp>>;
  _not?: Maybe<post_comments_bool_exp>;
  _or?: Maybe<Array<post_comments_bool_exp>>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "post_comments" */
export interface post_comments_insert_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "post_comments" */
export interface post_comments_max_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "post_comments" */
export interface post_comments_min_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "post_comments". */
export interface post_comments_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "post_comments" */
export enum post_comments_select_column {
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "post_comments" */
export interface post_comments_set_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "post_likes" */
export interface post_likes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<post_likes_max_order_by>;
  min?: Maybe<post_likes_min_order_by>;
}

/** input type for inserting array relation for remote table "post_likes" */
export interface post_likes_arr_rel_insert_input {
  data: Array<post_likes_insert_input>;
}

/** Boolean expression to filter rows from the table "post_likes". All fields are combined with a logical 'AND'. */
export interface post_likes_bool_exp {
  _and?: Maybe<Array<post_likes_bool_exp>>;
  _not?: Maybe<post_likes_bool_exp>;
  _or?: Maybe<Array<post_likes_bool_exp>>;
  liked_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "post_likes" */
export interface post_likes_insert_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "post_likes" */
export interface post_likes_max_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "post_likes" */
export interface post_likes_min_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "post_likes". */
export interface post_likes_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** select columns of table "post_likes" */
export enum post_likes_select_column {
  /** column name */
  liked_at = "liked_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "post_likes" */
export interface post_likes_set_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "posts" */
export interface posts_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<posts_max_order_by>;
  min?: Maybe<posts_min_order_by>;
}

/** input type for inserting array relation for remote table "posts" */
export interface posts_arr_rel_insert_input {
  data: Array<posts_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<posts_on_conflict>;
}

/** Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'. */
export interface posts_bool_exp {
  _and?: Maybe<Array<posts_bool_exp>>;
  _not?: Maybe<posts_bool_exp>;
  _or?: Maybe<Array<posts_bool_exp>>;
  author_uuid?: Maybe<uuid_comparison_exp>;
  comments?: Maybe<post_comments_bool_exp>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  discussion?: Maybe<discussions_bool_exp>;
  discussion_uuid?: Maybe<uuid_comparison_exp>;
  likes?: Maybe<post_likes_bool_exp>;
  type?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "posts" */
export enum posts_constraint {
  /** unique or primary key constraint */
  posts_pkey = "posts_pkey",
}

/** input type for inserting data into table "posts" */
export interface posts_insert_input {
  author_uuid?: Maybe<Scalars["uuid"]>;
  comments?: Maybe<post_comments_arr_rel_insert_input>;
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  discussion?: Maybe<discussions_obj_rel_insert_input>;
  discussion_uuid?: Maybe<Scalars["uuid"]>;
  likes?: Maybe<post_likes_arr_rel_insert_input>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "posts" */
export interface posts_max_order_by {
  author_uuid?: Maybe<order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  discussion_uuid?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "posts" */
export interface posts_min_order_by {
  author_uuid?: Maybe<order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  discussion_uuid?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "posts" */
export interface posts_on_conflict {
  constraint: posts_constraint;
  update_columns?: Array<posts_update_column>;
  where?: Maybe<posts_bool_exp>;
}

/** Ordering options when selecting data from "posts". */
export interface posts_order_by {
  author_uuid?: Maybe<order_by>;
  comments_aggregate?: Maybe<post_comments_aggregate_order_by>;
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  discussion?: Maybe<discussions_order_by>;
  discussion_uuid?: Maybe<order_by>;
  likes_aggregate?: Maybe<post_likes_aggregate_order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: posts */
export interface posts_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "posts" */
export enum posts_select_column {
  /** column name */
  author_uuid = "author_uuid",
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  discussion_uuid = "discussion_uuid",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "posts" */
export interface posts_set_input {
  author_uuid?: Maybe<Scalars["uuid"]>;
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  discussion_uuid?: Maybe<Scalars["uuid"]>;
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "posts" */
export enum posts_update_column {
  /** column name */
  author_uuid = "author_uuid",
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  discussion_uuid = "discussion_uuid",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "questionaires" */
export interface questionaires_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<questionaires_max_order_by>;
  min?: Maybe<questionaires_min_order_by>;
}

/** input type for inserting array relation for remote table "questionaires" */
export interface questionaires_arr_rel_insert_input {
  data: Array<questionaires_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<questionaires_on_conflict>;
}

/** Boolean expression to filter rows from the table "questionaires". All fields are combined with a logical 'AND'. */
export interface questionaires_bool_exp {
  _and?: Maybe<Array<questionaires_bool_exp>>;
  _not?: Maybe<questionaires_bool_exp>;
  _or?: Maybe<Array<questionaires_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_bool_exp>;
  guests_has_questionaires?: Maybe<guests_has_questionaires_bool_exp>;
  questions?: Maybe<questions_bool_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "questionaires" */
export enum questionaires_constraint {
  /** unique or primary key constraint */
  questionaires_pkey = "questionaires_pkey",
}

/** input type for inserting data into table "questionaires" */
export interface questionaires_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_arr_rel_insert_input>;
  guests_has_questionaires?: Maybe<guests_has_questionaires_arr_rel_insert_input>;
  questions?: Maybe<questions_arr_rel_insert_input>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "questionaires" */
export interface questionaires_max_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "questionaires" */
export interface questionaires_min_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "questionaires" */
export interface questionaires_obj_rel_insert_input {
  data: questionaires_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<questionaires_on_conflict>;
}

/** on conflict condition type for table "questionaires" */
export interface questionaires_on_conflict {
  constraint: questionaires_constraint;
  update_columns?: Array<questionaires_update_column>;
  where?: Maybe<questionaires_bool_exp>;
}

/** Ordering options when selecting data from "questionaires". */
export interface questionaires_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  guest_questionaires_answers_aggregate?: Maybe<guest_questionaires_answers_aggregate_order_by>;
  guests_has_questionaires_aggregate?: Maybe<guests_has_questionaires_aggregate_order_by>;
  questions_aggregate?: Maybe<questions_aggregate_order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: questionaires */
export interface questionaires_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "questionaires" */
export enum questionaires_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "questionaires" */
export interface questionaires_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "questionaires" */
export enum questionaires_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "questions" */
export interface questions_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<questions_max_order_by>;
  min?: Maybe<questions_min_order_by>;
}

/** input type for inserting array relation for remote table "questions" */
export interface questions_arr_rel_insert_input {
  data: Array<questions_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<questions_on_conflict>;
}

/** Boolean expression to filter rows from the table "questions". All fields are combined with a logical 'AND'. */
export interface questions_bool_exp {
  _and?: Maybe<Array<questions_bool_exp>>;
  _not?: Maybe<questions_bool_exp>;
  _or?: Maybe<Array<questions_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  field_type?: Maybe<String_comparison_exp>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_bool_exp>;
  question?: Maybe<String_comparison_exp>;
  questionaire?: Maybe<questionaires_bool_exp>;
  questionaire_uuid?: Maybe<uuid_comparison_exp>;
  required?: Maybe<Boolean_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "questions" */
export enum questions_constraint {
  /** unique or primary key constraint */
  questions_pkey = "questions_pkey",
}

/** input type for inserting data into table "questions" */
export interface questions_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  field_type?: Maybe<Scalars["String"]>;
  guest_questionaires_answers?: Maybe<guest_questionaires_answers_arr_rel_insert_input>;
  question?: Maybe<Scalars["String"]>;
  questionaire?: Maybe<questionaires_obj_rel_insert_input>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  required?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "questions" */
export interface questions_max_order_by {
  created_at?: Maybe<order_by>;
  field_type?: Maybe<order_by>;
  question?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "questions" */
export interface questions_min_order_by {
  created_at?: Maybe<order_by>;
  field_type?: Maybe<order_by>;
  question?: Maybe<order_by>;
  questionaire_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "questions" */
export interface questions_obj_rel_insert_input {
  data: questions_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<questions_on_conflict>;
}

/** on conflict condition type for table "questions" */
export interface questions_on_conflict {
  constraint: questions_constraint;
  update_columns?: Array<questions_update_column>;
  where?: Maybe<questions_bool_exp>;
}

/** Ordering options when selecting data from "questions". */
export interface questions_order_by {
  created_at?: Maybe<order_by>;
  field_type?: Maybe<order_by>;
  guest_questionaires_answers_aggregate?: Maybe<guest_questionaires_answers_aggregate_order_by>;
  question?: Maybe<order_by>;
  questionaire?: Maybe<questionaires_order_by>;
  questionaire_uuid?: Maybe<order_by>;
  required?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: questions */
export interface questions_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "questions" */
export enum questions_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  field_type = "field_type",
  /** column name */
  question = "question",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  required = "required",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "questions" */
export interface questions_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  field_type?: Maybe<Scalars["String"]>;
  question?: Maybe<Scalars["String"]>;
  questionaire_uuid?: Maybe<Scalars["uuid"]>;
  required?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "questions" */
export enum questions_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  field_type = "field_type",
  /** column name */
  question = "question",
  /** column name */
  questionaire_uuid = "questionaire_uuid",
  /** column name */
  required = "required",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "requests" */
export interface requests_aggregate_order_by {
  avg?: Maybe<requests_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<requests_max_order_by>;
  min?: Maybe<requests_min_order_by>;
  stddev?: Maybe<requests_stddev_order_by>;
  stddev_pop?: Maybe<requests_stddev_pop_order_by>;
  stddev_samp?: Maybe<requests_stddev_samp_order_by>;
  sum?: Maybe<requests_sum_order_by>;
  var_pop?: Maybe<requests_var_pop_order_by>;
  var_samp?: Maybe<requests_var_samp_order_by>;
  variance?: Maybe<requests_variance_order_by>;
}

/** input type for inserting array relation for remote table "requests" */
export interface requests_arr_rel_insert_input {
  data: Array<requests_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<requests_on_conflict>;
}

/** order by avg() on columns of table "requests" */
export interface requests_avg_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "requests". All fields are combined with a logical 'AND'. */
export interface requests_bool_exp {
  _and?: Maybe<Array<requests_bool_exp>>;
  _not?: Maybe<requests_bool_exp>;
  _or?: Maybe<Array<requests_bool_exp>>;
  base_3rd_party_platform?: Maybe<String_comparison_exp>;
  base_3rd_party_platform_fee?: Maybe<float8_comparison_exp>;
  base_cashback_by_brand?: Maybe<float8_comparison_exp>;
  base_cashback_by_stayr?: Maybe<float8_comparison_exp>;
  base_currency_code?: Maybe<bpchar_comparison_exp>;
  base_discount_by_brand?: Maybe<float8_comparison_exp>;
  base_discount_by_stayr?: Maybe<float8_comparison_exp>;
  base_payment_by_card?: Maybe<float8_comparison_exp>;
  base_payment_by_cash?: Maybe<float8_comparison_exp>;
  base_payment_by_credits?: Maybe<float8_comparison_exp>;
  base_total_cashback?: Maybe<float8_comparison_exp>;
  base_total_discount?: Maybe<float8_comparison_exp>;
  base_total_payment?: Maybe<float8_comparison_exp>;
  base_total_price?: Maybe<float8_comparison_exp>;
  base_unit_price?: Maybe<float8_comparison_exp>;
  booking_type?: Maybe<String_comparison_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_conversion_rate?: Maybe<float8_comparison_exp>;
  brand_currency_code?: Maybe<bpchar_comparison_exp>;
  brand_snapshot?: Maybe<json_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  checkin_at?: Maybe<timestamptz_comparison_exp>;
  checkout_at?: Maybe<timestamptz_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  email_receipt_data?: Maybe<json_comparison_exp>;
  extensions?: Maybe<extensions_bool_exp>;
  inboxes?: Maybe<inboxes_bool_exp>;
  invoice?: Maybe<invoice_bool_exp>;
  invoice_uuid?: Maybe<uuid_comparison_exp>;
  listing?: Maybe<listings_bool_exp>;
  listing_snapshot?: Maybe<json_comparison_exp>;
  listing_type?: Maybe<String_comparison_exp>;
  listing_uuid?: Maybe<uuid_comparison_exp>;
  minutes?: Maybe<Int_comparison_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_snapshot?: Maybe<json_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  passes?: Maybe<passes_bool_exp>;
  payment_intent_snapshot?: Maybe<json_comparison_exp>;
  quantity?: Maybe<Int_comparison_exp>;
  reservations?: Maybe<reservations_bool_exp>;
  short_id?: Maybe<String_comparison_exp>;
  source_snapshot?: Maybe<json_comparison_exp>;
  status?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_conversion_code?: Maybe<float8_comparison_exp>;
  user_currency_code?: Maybe<bpchar_comparison_exp>;
  user_snapshot?: Maybe<json_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "requests" */
export enum requests_constraint {
  /** unique or primary key constraint */
  requests_pkey = "requests_pkey",
  /** unique or primary key constraint */
  requests_short_id_unique = "requests_short_id_unique",
}

/** input type for incrementing numeric columns in table "requests" */
export interface requests_inc_input {
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_unit_price?: Maybe<Scalars["float8"]>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  minutes?: Maybe<Scalars["Int"]>;
  quantity?: Maybe<Scalars["Int"]>;
  user_conversion_code?: Maybe<Scalars["float8"]>;
}

/** input type for inserting data into table "requests" */
export interface requests_insert_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_unit_price?: Maybe<Scalars["float8"]>;
  booking_type?: Maybe<Scalars["String"]>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  brand_currency_code?: Maybe<Scalars["bpchar"]>;
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  checkin_at?: Maybe<Scalars["timestamptz"]>;
  checkout_at?: Maybe<Scalars["timestamptz"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email_receipt_data?: Maybe<Scalars["json"]>;
  extensions?: Maybe<extensions_arr_rel_insert_input>;
  inboxes?: Maybe<inboxes_arr_rel_insert_input>;
  invoice?: Maybe<invoice_obj_rel_insert_input>;
  invoice_uuid?: Maybe<Scalars["uuid"]>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  minutes?: Maybe<Scalars["Int"]>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  passes?: Maybe<passes_arr_rel_insert_input>;
  payment_intent_snapshot?: Maybe<Scalars["json"]>;
  quantity?: Maybe<Scalars["Int"]>;
  reservations?: Maybe<reservations_arr_rel_insert_input>;
  short_id?: Maybe<Scalars["String"]>;
  source_snapshot?: Maybe<Scalars["json"]>;
  status?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_conversion_code?: Maybe<Scalars["float8"]>;
  user_currency_code?: Maybe<Scalars["bpchar"]>;
  user_snapshot?: Maybe<Scalars["json"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "requests" */
export interface requests_max_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  booking_type?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  invoice_uuid?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  short_id?: Maybe<order_by>;
  status?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "requests" */
export interface requests_min_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  booking_type?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  invoice_uuid?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  short_id?: Maybe<order_by>;
  status?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "requests" */
export interface requests_obj_rel_insert_input {
  data: requests_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<requests_on_conflict>;
}

/** on conflict condition type for table "requests" */
export interface requests_on_conflict {
  constraint: requests_constraint;
  update_columns?: Array<requests_update_column>;
  where?: Maybe<requests_bool_exp>;
}

/** Ordering options when selecting data from "requests". */
export interface requests_order_by {
  base_3rd_party_platform?: Maybe<order_by>;
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_currency_code?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  booking_type?: Maybe<order_by>;
  brand?: Maybe<brands_order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  brand_currency_code?: Maybe<order_by>;
  brand_snapshot?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email_receipt_data?: Maybe<order_by>;
  extensions_aggregate?: Maybe<extensions_aggregate_order_by>;
  inboxes_aggregate?: Maybe<inboxes_aggregate_order_by>;
  invoice?: Maybe<invoice_order_by>;
  invoice_uuid?: Maybe<order_by>;
  listing?: Maybe<listings_order_by>;
  listing_snapshot?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_snapshot?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  passes_aggregate?: Maybe<passes_aggregate_order_by>;
  payment_intent_snapshot?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  reservations_aggregate?: Maybe<reservations_aggregate_order_by>;
  short_id?: Maybe<order_by>;
  source_snapshot?: Maybe<order_by>;
  status?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_conversion_code?: Maybe<order_by>;
  user_currency_code?: Maybe<order_by>;
  user_snapshot?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: requests */
export interface requests_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "requests" */
export enum requests_select_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_unit_price = "base_unit_price",
  /** column name */
  booking_type = "booking_type",
  /** column name */
  brand_conversion_rate = "brand_conversion_rate",
  /** column name */
  brand_currency_code = "brand_currency_code",
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  checkin_at = "checkin_at",
  /** column name */
  checkout_at = "checkout_at",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  email_receipt_data = "email_receipt_data",
  /** column name */
  invoice_uuid = "invoice_uuid",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  minutes = "minutes",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  payment_intent_snapshot = "payment_intent_snapshot",
  /** column name */
  quantity = "quantity",
  /** column name */
  short_id = "short_id",
  /** column name */
  source_snapshot = "source_snapshot",
  /** column name */
  status = "status",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_conversion_code = "user_conversion_code",
  /** column name */
  user_currency_code = "user_currency_code",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "requests" */
export interface requests_set_input {
  base_3rd_party_platform?: Maybe<Scalars["String"]>;
  base_3rd_party_platform_fee?: Maybe<Scalars["float8"]>;
  base_cashback_by_brand?: Maybe<Scalars["float8"]>;
  base_cashback_by_stayr?: Maybe<Scalars["float8"]>;
  base_currency_code?: Maybe<Scalars["bpchar"]>;
  base_discount_by_brand?: Maybe<Scalars["float8"]>;
  base_discount_by_stayr?: Maybe<Scalars["float8"]>;
  base_payment_by_card?: Maybe<Scalars["float8"]>;
  base_payment_by_cash?: Maybe<Scalars["float8"]>;
  base_payment_by_credits?: Maybe<Scalars["float8"]>;
  base_total_cashback?: Maybe<Scalars["float8"]>;
  base_total_discount?: Maybe<Scalars["float8"]>;
  base_total_payment?: Maybe<Scalars["float8"]>;
  base_total_price?: Maybe<Scalars["float8"]>;
  base_unit_price?: Maybe<Scalars["float8"]>;
  booking_type?: Maybe<Scalars["String"]>;
  brand_conversion_rate?: Maybe<Scalars["float8"]>;
  brand_currency_code?: Maybe<Scalars["bpchar"]>;
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  checkin_at?: Maybe<Scalars["timestamptz"]>;
  checkout_at?: Maybe<Scalars["timestamptz"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email_receipt_data?: Maybe<Scalars["json"]>;
  invoice_uuid?: Maybe<Scalars["uuid"]>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  minutes?: Maybe<Scalars["Int"]>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  payment_intent_snapshot?: Maybe<Scalars["json"]>;
  quantity?: Maybe<Scalars["Int"]>;
  short_id?: Maybe<Scalars["String"]>;
  source_snapshot?: Maybe<Scalars["json"]>;
  status?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_conversion_code?: Maybe<Scalars["float8"]>;
  user_currency_code?: Maybe<Scalars["bpchar"]>;
  user_snapshot?: Maybe<Scalars["json"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "requests" */
export interface requests_stddev_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "requests" */
export interface requests_stddev_pop_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "requests" */
export interface requests_stddev_samp_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** order by sum() on columns of table "requests" */
export interface requests_sum_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** update columns of table "requests" */
export enum requests_update_column {
  /** column name */
  base_3rd_party_platform = "base_3rd_party_platform",
  /** column name */
  base_3rd_party_platform_fee = "base_3rd_party_platform_fee",
  /** column name */
  base_cashback_by_brand = "base_cashback_by_brand",
  /** column name */
  base_cashback_by_stayr = "base_cashback_by_stayr",
  /** column name */
  base_currency_code = "base_currency_code",
  /** column name */
  base_discount_by_brand = "base_discount_by_brand",
  /** column name */
  base_discount_by_stayr = "base_discount_by_stayr",
  /** column name */
  base_payment_by_card = "base_payment_by_card",
  /** column name */
  base_payment_by_cash = "base_payment_by_cash",
  /** column name */
  base_payment_by_credits = "base_payment_by_credits",
  /** column name */
  base_total_cashback = "base_total_cashback",
  /** column name */
  base_total_discount = "base_total_discount",
  /** column name */
  base_total_payment = "base_total_payment",
  /** column name */
  base_total_price = "base_total_price",
  /** column name */
  base_unit_price = "base_unit_price",
  /** column name */
  booking_type = "booking_type",
  /** column name */
  brand_conversion_rate = "brand_conversion_rate",
  /** column name */
  brand_currency_code = "brand_currency_code",
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  checkin_at = "checkin_at",
  /** column name */
  checkout_at = "checkout_at",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  email_receipt_data = "email_receipt_data",
  /** column name */
  invoice_uuid = "invoice_uuid",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  minutes = "minutes",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  payment_intent_snapshot = "payment_intent_snapshot",
  /** column name */
  quantity = "quantity",
  /** column name */
  short_id = "short_id",
  /** column name */
  source_snapshot = "source_snapshot",
  /** column name */
  status = "status",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_conversion_code = "user_conversion_code",
  /** column name */
  user_currency_code = "user_currency_code",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "requests" */
export interface requests_var_pop_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "requests" */
export interface requests_var_samp_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** order by variance() on columns of table "requests" */
export interface requests_variance_order_by {
  base_3rd_party_platform_fee?: Maybe<order_by>;
  base_cashback_by_brand?: Maybe<order_by>;
  base_cashback_by_stayr?: Maybe<order_by>;
  base_discount_by_brand?: Maybe<order_by>;
  base_discount_by_stayr?: Maybe<order_by>;
  base_payment_by_card?: Maybe<order_by>;
  base_payment_by_cash?: Maybe<order_by>;
  base_payment_by_credits?: Maybe<order_by>;
  base_total_cashback?: Maybe<order_by>;
  base_total_discount?: Maybe<order_by>;
  base_total_payment?: Maybe<order_by>;
  base_total_price?: Maybe<order_by>;
  base_unit_price?: Maybe<order_by>;
  brand_conversion_rate?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  user_conversion_code?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "reservations_activity_logs". All fields are combined with a logical 'AND'. */
export interface reservations_activity_logs_bool_exp {
  _and?: Maybe<Array<reservations_activity_logs_bool_exp>>;
  _not?: Maybe<reservations_activity_logs_bool_exp>;
  _or?: Maybe<Array<reservations_activity_logs_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  event_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "reservations_activity_logs" */
export interface reservations_activity_logs_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Ordering options when selecting data from "reservations_activity_logs". */
export interface reservations_activity_logs_order_by {
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  event_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "reservations_activity_logs" */
export enum reservations_activity_logs_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  event_type = "event_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "reservations_activity_logs" */
export interface reservations_activity_logs_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  event_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "reservations" */
export interface reservations_aggregate_order_by {
  avg?: Maybe<reservations_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<reservations_max_order_by>;
  min?: Maybe<reservations_min_order_by>;
  stddev?: Maybe<reservations_stddev_order_by>;
  stddev_pop?: Maybe<reservations_stddev_pop_order_by>;
  stddev_samp?: Maybe<reservations_stddev_samp_order_by>;
  sum?: Maybe<reservations_sum_order_by>;
  var_pop?: Maybe<reservations_var_pop_order_by>;
  var_samp?: Maybe<reservations_var_samp_order_by>;
  variance?: Maybe<reservations_variance_order_by>;
}

/** input type for inserting array relation for remote table "reservations" */
export interface reservations_arr_rel_insert_input {
  data: Array<reservations_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<reservations_on_conflict>;
}

/** order by avg() on columns of table "reservations" */
export interface reservations_avg_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "reservations". All fields are combined with a logical 'AND'. */
export interface reservations_bool_exp {
  _and?: Maybe<Array<reservations_bool_exp>>;
  _not?: Maybe<reservations_bool_exp>;
  _or?: Maybe<Array<reservations_bool_exp>>;
  booking_type?: Maybe<String_comparison_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_snapshot?: Maybe<json_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  checkin_at?: Maybe<timestamptz_comparison_exp>;
  checkout_at?: Maybe<timestamptz_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  listing?: Maybe<listings_bool_exp>;
  listing_snapshot?: Maybe<json_comparison_exp>;
  listing_type?: Maybe<String_comparison_exp>;
  listing_uuid?: Maybe<uuid_comparison_exp>;
  minutes?: Maybe<Int_comparison_exp>;
  outlet_snapshot?: Maybe<json_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  quantity?: Maybe<Int_comparison_exp>;
  request?: Maybe<requests_bool_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
  reviews?: Maybe<reviews_bool_exp>;
  spaces_usages?: Maybe<spaces_usage_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_snapshot?: Maybe<json_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "reservations" */
export enum reservations_constraint {
  /** unique or primary key constraint */
  reservations_pkey = "reservations_pkey",
}

/** input type for incrementing numeric columns in table "reservations" */
export interface reservations_inc_input {
  minutes?: Maybe<Scalars["Int"]>;
  quantity?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "reservations" */
export interface reservations_insert_input {
  booking_type?: Maybe<Scalars["String"]>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  checkin_at?: Maybe<Scalars["timestamptz"]>;
  checkout_at?: Maybe<Scalars["timestamptz"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  minutes?: Maybe<Scalars["Int"]>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  quantity?: Maybe<Scalars["Int"]>;
  request?: Maybe<requests_obj_rel_insert_input>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  reviews?: Maybe<reviews_arr_rel_insert_input>;
  spaces_usages?: Maybe<spaces_usage_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_snapshot?: Maybe<Scalars["json"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "reservations" */
export interface reservations_max_order_by {
  booking_type?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "reservations" */
export interface reservations_min_order_by {
  booking_type?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "reservations" */
export interface reservations_obj_rel_insert_input {
  data: reservations_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<reservations_on_conflict>;
}

/** on conflict condition type for table "reservations" */
export interface reservations_on_conflict {
  constraint: reservations_constraint;
  update_columns?: Array<reservations_update_column>;
  where?: Maybe<reservations_bool_exp>;
}

/** Ordering options when selecting data from "reservations". */
export interface reservations_order_by {
  booking_type?: Maybe<order_by>;
  brand?: Maybe<brands_order_by>;
  brand_snapshot?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  checkin_at?: Maybe<order_by>;
  checkout_at?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  listing?: Maybe<listings_order_by>;
  listing_snapshot?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  minutes?: Maybe<order_by>;
  outlet_snapshot?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  request?: Maybe<requests_order_by>;
  request_uuid?: Maybe<order_by>;
  reviews_aggregate?: Maybe<reviews_aggregate_order_by>;
  spaces_usages_aggregate?: Maybe<spaces_usage_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  user_snapshot?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: reservations */
export interface reservations_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "reservations" */
export enum reservations_select_column {
  /** column name */
  booking_type = "booking_type",
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  checkin_at = "checkin_at",
  /** column name */
  checkout_at = "checkout_at",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  minutes = "minutes",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  quantity = "quantity",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "reservations" */
export interface reservations_set_input {
  booking_type?: Maybe<Scalars["String"]>;
  brand_snapshot?: Maybe<Scalars["json"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  checkin_at?: Maybe<Scalars["timestamptz"]>;
  checkout_at?: Maybe<Scalars["timestamptz"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  listing_snapshot?: Maybe<Scalars["json"]>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  minutes?: Maybe<Scalars["Int"]>;
  outlet_snapshot?: Maybe<Scalars["json"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  quantity?: Maybe<Scalars["Int"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_snapshot?: Maybe<Scalars["json"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "reservations" */
export interface reservations_stddev_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "reservations" */
export interface reservations_stddev_pop_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "reservations" */
export interface reservations_stddev_samp_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by sum() on columns of table "reservations" */
export interface reservations_sum_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** update columns of table "reservations" */
export enum reservations_update_column {
  /** column name */
  booking_type = "booking_type",
  /** column name */
  brand_snapshot = "brand_snapshot",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  checkin_at = "checkin_at",
  /** column name */
  checkout_at = "checkout_at",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  listing_snapshot = "listing_snapshot",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  minutes = "minutes",
  /** column name */
  outlet_snapshot = "outlet_snapshot",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  quantity = "quantity",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_snapshot = "user_snapshot",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "reservations" */
export interface reservations_var_pop_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "reservations" */
export interface reservations_var_samp_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by variance() on columns of table "reservations" */
export interface reservations_variance_order_by {
  minutes?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
}

/** order by aggregate values of table "review_comments" */
export interface review_comments_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<review_comments_max_order_by>;
  min?: Maybe<review_comments_min_order_by>;
}

/** input type for inserting array relation for remote table "review_comments" */
export interface review_comments_arr_rel_insert_input {
  data: Array<review_comments_insert_input>;
}

/** Boolean expression to filter rows from the table "review_comments". All fields are combined with a logical 'AND'. */
export interface review_comments_bool_exp {
  _and?: Maybe<Array<review_comments_bool_exp>>;
  _not?: Maybe<review_comments_bool_exp>;
  _or?: Maybe<Array<review_comments_bool_exp>>;
  content?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "review_comments" */
export interface review_comments_insert_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "review_comments" */
export interface review_comments_max_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "review_comments" */
export interface review_comments_min_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "review_comments". */
export interface review_comments_order_by {
  content?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "review_comments" */
export enum review_comments_select_column {
  /** column name */
  content = "content",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "review_comments" */
export interface review_comments_set_input {
  content?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "review_likes" */
export interface review_likes_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<review_likes_max_order_by>;
  min?: Maybe<review_likes_min_order_by>;
}

/** input type for inserting array relation for remote table "review_likes" */
export interface review_likes_arr_rel_insert_input {
  data: Array<review_likes_insert_input>;
}

/** Boolean expression to filter rows from the table "review_likes". All fields are combined with a logical 'AND'. */
export interface review_likes_bool_exp {
  _and?: Maybe<Array<review_likes_bool_exp>>;
  _not?: Maybe<review_likes_bool_exp>;
  _or?: Maybe<Array<review_likes_bool_exp>>;
  liked_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "review_likes" */
export interface review_likes_insert_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "review_likes" */
export interface review_likes_max_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "review_likes" */
export interface review_likes_min_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "review_likes". */
export interface review_likes_order_by {
  liked_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** select columns of table "review_likes" */
export enum review_likes_select_column {
  /** column name */
  liked_at = "liked_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "review_likes" */
export interface review_likes_set_input {
  liked_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "review_media" */
export interface review_media_aggregate_order_by {
  avg?: Maybe<review_media_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<review_media_max_order_by>;
  min?: Maybe<review_media_min_order_by>;
  stddev?: Maybe<review_media_stddev_order_by>;
  stddev_pop?: Maybe<review_media_stddev_pop_order_by>;
  stddev_samp?: Maybe<review_media_stddev_samp_order_by>;
  sum?: Maybe<review_media_sum_order_by>;
  var_pop?: Maybe<review_media_var_pop_order_by>;
  var_samp?: Maybe<review_media_var_samp_order_by>;
  variance?: Maybe<review_media_variance_order_by>;
}

/** input type for inserting array relation for remote table "review_media" */
export interface review_media_arr_rel_insert_input {
  data: Array<review_media_insert_input>;
}

/** order by avg() on columns of table "review_media" */
export interface review_media_avg_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "review_media". All fields are combined with a logical 'AND'. */
export interface review_media_bool_exp {
  _and?: Maybe<Array<review_media_bool_exp>>;
  _not?: Maybe<review_media_bool_exp>;
  _or?: Maybe<Array<review_media_bool_exp>>;
  collection_name?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  file_name?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  mime_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  s3_bucket_name?: Maybe<String_comparison_exp>;
  s3_key?: Maybe<String_comparison_exp>;
  size?: Maybe<bigint_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "review_media" */
export interface review_media_inc_input {
  index?: Maybe<Scalars["Int"]>;
  size?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "review_media" */
export interface review_media_insert_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "review_media" */
export interface review_media_max_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "review_media" */
export interface review_media_min_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "review_media". */
export interface review_media_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "review_media" */
export enum review_media_select_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "review_media" */
export interface review_media_set_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "review_media" */
export interface review_media_stddev_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "review_media" */
export interface review_media_stddev_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "review_media" */
export interface review_media_stddev_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by sum() on columns of table "review_media" */
export interface review_media_sum_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_pop() on columns of table "review_media" */
export interface review_media_var_pop_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "review_media" */
export interface review_media_var_samp_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by variance() on columns of table "review_media" */
export interface review_media_variance_order_by {
  index?: Maybe<order_by>;
  size?: Maybe<order_by>;
}

/** order by aggregate values of table "reviews" */
export interface reviews_aggregate_order_by {
  avg?: Maybe<reviews_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<reviews_max_order_by>;
  min?: Maybe<reviews_min_order_by>;
  stddev?: Maybe<reviews_stddev_order_by>;
  stddev_pop?: Maybe<reviews_stddev_pop_order_by>;
  stddev_samp?: Maybe<reviews_stddev_samp_order_by>;
  sum?: Maybe<reviews_sum_order_by>;
  var_pop?: Maybe<reviews_var_pop_order_by>;
  var_samp?: Maybe<reviews_var_samp_order_by>;
  variance?: Maybe<reviews_variance_order_by>;
}

/** input type for inserting array relation for remote table "reviews" */
export interface reviews_arr_rel_insert_input {
  data: Array<reviews_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<reviews_on_conflict>;
}

/** order by avg() on columns of table "reviews" */
export interface reviews_avg_order_by {
  rating?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "reviews". All fields are combined with a logical 'AND'. */
export interface reviews_bool_exp {
  _and?: Maybe<Array<reviews_bool_exp>>;
  _not?: Maybe<reviews_bool_exp>;
  _or?: Maybe<Array<reviews_bool_exp>>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  comment?: Maybe<String_comparison_exp>;
  comments?: Maybe<review_comments_bool_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  likes?: Maybe<review_likes_bool_exp>;
  listing?: Maybe<listings_bool_exp>;
  listing_type?: Maybe<String_comparison_exp>;
  listing_uuid?: Maybe<uuid_comparison_exp>;
  media?: Maybe<review_media_bool_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  rating?: Maybe<Int_comparison_exp>;
  reservation?: Maybe<reservations_bool_exp>;
  reservation_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "reviews" */
export enum reviews_constraint {
  /** unique or primary key constraint */
  reviews_pkey = "reviews_pkey",
}

/** input type for incrementing numeric columns in table "reviews" */
export interface reviews_inc_input {
  rating?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "reviews" */
export interface reviews_insert_input {
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  comment?: Maybe<Scalars["String"]>;
  comments?: Maybe<review_comments_arr_rel_insert_input>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  likes?: Maybe<review_likes_arr_rel_insert_input>;
  listing?: Maybe<listings_obj_rel_insert_input>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  media?: Maybe<review_media_arr_rel_insert_input>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  rating?: Maybe<Scalars["Int"]>;
  reservation?: Maybe<reservations_obj_rel_insert_input>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "reviews" */
export interface reviews_max_order_by {
  brand_uuid?: Maybe<order_by>;
  comment?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  rating?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "reviews" */
export interface reviews_min_order_by {
  brand_uuid?: Maybe<order_by>;
  comment?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  rating?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "reviews" */
export interface reviews_on_conflict {
  constraint: reviews_constraint;
  update_columns?: Array<reviews_update_column>;
  where?: Maybe<reviews_bool_exp>;
}

/** Ordering options when selecting data from "reviews". */
export interface reviews_order_by {
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  comment?: Maybe<order_by>;
  comments_aggregate?: Maybe<review_comments_aggregate_order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  likes_aggregate?: Maybe<review_likes_aggregate_order_by>;
  listing?: Maybe<listings_order_by>;
  listing_type?: Maybe<order_by>;
  listing_uuid?: Maybe<order_by>;
  media_aggregate?: Maybe<review_media_aggregate_order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  rating?: Maybe<order_by>;
  reservation?: Maybe<reservations_order_by>;
  reservation_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: reviews */
export interface reviews_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "reviews" */
export enum reviews_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  comment = "comment",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  rating = "rating",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "reviews" */
export interface reviews_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  comment?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  listing_type?: Maybe<Scalars["String"]>;
  listing_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  rating?: Maybe<Scalars["Int"]>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "reviews" */
export interface reviews_stddev_order_by {
  rating?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "reviews" */
export interface reviews_stddev_pop_order_by {
  rating?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "reviews" */
export interface reviews_stddev_samp_order_by {
  rating?: Maybe<order_by>;
}

/** order by sum() on columns of table "reviews" */
export interface reviews_sum_order_by {
  rating?: Maybe<order_by>;
}

/** update columns of table "reviews" */
export enum reviews_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  comment = "comment",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  listing_type = "listing_type",
  /** column name */
  listing_uuid = "listing_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  rating = "rating",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "reviews" */
export interface reviews_var_pop_order_by {
  rating?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "reviews" */
export interface reviews_var_samp_order_by {
  rating?: Maybe<order_by>;
}

/** order by variance() on columns of table "reviews" */
export interface reviews_variance_order_by {
  rating?: Maybe<order_by>;
}

/** order by aggregate values of table "role_has_permissions" */
export interface role_has_permissions_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<role_has_permissions_max_order_by>;
  min?: Maybe<role_has_permissions_min_order_by>;
}

/** input type for inserting array relation for remote table "role_has_permissions" */
export interface role_has_permissions_arr_rel_insert_input {
  data: Array<role_has_permissions_insert_input>;
}

/** Boolean expression to filter rows from the table "role_has_permissions". All fields are combined with a logical 'AND'. */
export interface role_has_permissions_bool_exp {
  _and?: Maybe<Array<role_has_permissions_bool_exp>>;
  _not?: Maybe<role_has_permissions_bool_exp>;
  _or?: Maybe<Array<role_has_permissions_bool_exp>>;
  permission?: Maybe<permissions_bool_exp>;
  permission_uuid?: Maybe<uuid_comparison_exp>;
  role?: Maybe<roles_bool_exp>;
  role_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "role_has_permissions" */
export interface role_has_permissions_insert_input {
  permission?: Maybe<permissions_obj_rel_insert_input>;
  permission_uuid?: Maybe<Scalars["uuid"]>;
  role?: Maybe<roles_obj_rel_insert_input>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "role_has_permissions" */
export interface role_has_permissions_max_order_by {
  permission_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "role_has_permissions" */
export interface role_has_permissions_min_order_by {
  permission_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "role_has_permissions". */
export interface role_has_permissions_order_by {
  permission?: Maybe<permissions_order_by>;
  permission_uuid?: Maybe<order_by>;
  role?: Maybe<roles_order_by>;
  role_uuid?: Maybe<order_by>;
}

/** select columns of table "role_has_permissions" */
export enum role_has_permissions_select_column {
  /** column name */
  permission_uuid = "permission_uuid",
  /** column name */
  role_uuid = "role_uuid",
}

/** input type for updating data in table "role_has_permissions" */
export interface role_has_permissions_set_input {
  permission_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "roles". All fields are combined with a logical 'AND'. */
export interface roles_bool_exp {
  _and?: Maybe<Array<roles_bool_exp>>;
  _not?: Maybe<roles_bool_exp>;
  _or?: Maybe<Array<roles_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_has_roles?: Maybe<model_has_roles_bool_exp>;
  name?: Maybe<String_comparison_exp>;
  role_has_permissions?: Maybe<role_has_permissions_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "roles" */
export enum roles_constraint {
  /** unique or primary key constraint */
  roles_pkey = "roles_pkey",
}

/** input type for inserting data into table "roles" */
export interface roles_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_has_roles?: Maybe<model_has_roles_arr_rel_insert_input>;
  name?: Maybe<Scalars["String"]>;
  role_has_permissions?: Maybe<role_has_permissions_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "roles" */
export interface roles_obj_rel_insert_input {
  data: roles_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<roles_on_conflict>;
}

/** on conflict condition type for table "roles" */
export interface roles_on_conflict {
  constraint: roles_constraint;
  update_columns?: Array<roles_update_column>;
  where?: Maybe<roles_bool_exp>;
}

/** Ordering options when selecting data from "roles". */
export interface roles_order_by {
  created_at?: Maybe<order_by>;
  model_has_roles_aggregate?: Maybe<model_has_roles_aggregate_order_by>;
  name?: Maybe<order_by>;
  role_has_permissions_aggregate?: Maybe<role_has_permissions_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: roles */
export interface roles_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "roles" */
export enum roles_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  name = "name",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "roles" */
export interface roles_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  name?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "roles" */
export enum roles_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  name = "name",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'. */
export interface smallint_comparison_exp {
  _eq?: Maybe<Scalars["smallint"]>;
  _gt?: Maybe<Scalars["smallint"]>;
  _gte?: Maybe<Scalars["smallint"]>;
  _in?: Maybe<Array<Scalars["smallint"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["smallint"]>;
  _lte?: Maybe<Scalars["smallint"]>;
  _neq?: Maybe<Scalars["smallint"]>;
  _nin?: Maybe<Array<Scalars["smallint"]>>;
}

/** order by aggregate values of table "social_relationships" */
export interface social_relationships_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<social_relationships_max_order_by>;
  min?: Maybe<social_relationships_min_order_by>;
}

/** input type for inserting array relation for remote table "social_relationships" */
export interface social_relationships_arr_rel_insert_input {
  data: Array<social_relationships_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<social_relationships_on_conflict>;
}

/** Boolean expression to filter rows from the table "social_relationships". All fields are combined with a logical 'AND'. */
export interface social_relationships_bool_exp {
  _and?: Maybe<Array<social_relationships_bool_exp>>;
  _not?: Maybe<social_relationships_bool_exp>;
  _or?: Maybe<Array<social_relationships_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  followed_uuid?: Maybe<uuid_comparison_exp>;
  follower_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  userByFollowerUuid?: Maybe<users_bool_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "social_relationships" */
export enum social_relationships_constraint {
  /** unique or primary key constraint */
  social_relationships_pkey = "social_relationships_pkey",
}

/** input type for inserting data into table "social_relationships" */
export interface social_relationships_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  followed_uuid?: Maybe<Scalars["uuid"]>;
  follower_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  userByFollowerUuid?: Maybe<users_obj_rel_insert_input>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "social_relationships" */
export interface social_relationships_max_order_by {
  created_at?: Maybe<order_by>;
  followed_uuid?: Maybe<order_by>;
  follower_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "social_relationships" */
export interface social_relationships_min_order_by {
  created_at?: Maybe<order_by>;
  followed_uuid?: Maybe<order_by>;
  follower_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "social_relationships" */
export interface social_relationships_on_conflict {
  constraint: social_relationships_constraint;
  update_columns?: Array<social_relationships_update_column>;
  where?: Maybe<social_relationships_bool_exp>;
}

/** Ordering options when selecting data from "social_relationships". */
export interface social_relationships_order_by {
  created_at?: Maybe<order_by>;
  followed_uuid?: Maybe<order_by>;
  follower_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  userByFollowerUuid?: Maybe<users_order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: social_relationships */
export interface social_relationships_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "social_relationships" */
export enum social_relationships_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  followed_uuid = "followed_uuid",
  /** column name */
  follower_uuid = "follower_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "social_relationships" */
export interface social_relationships_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  followed_uuid?: Maybe<Scalars["uuid"]>;
  follower_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "social_relationships" */
export enum social_relationships_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  followed_uuid = "followed_uuid",
  /** column name */
  follower_uuid = "follower_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "spaces" */
export interface spaces_aggregate_order_by {
  avg?: Maybe<spaces_avg_order_by>;
  count?: Maybe<order_by>;
  max?: Maybe<spaces_max_order_by>;
  min?: Maybe<spaces_min_order_by>;
  stddev?: Maybe<spaces_stddev_order_by>;
  stddev_pop?: Maybe<spaces_stddev_pop_order_by>;
  stddev_samp?: Maybe<spaces_stddev_samp_order_by>;
  sum?: Maybe<spaces_sum_order_by>;
  var_pop?: Maybe<spaces_var_pop_order_by>;
  var_samp?: Maybe<spaces_var_samp_order_by>;
  variance?: Maybe<spaces_variance_order_by>;
}

/** input type for inserting array relation for remote table "spaces" */
export interface spaces_arr_rel_insert_input {
  data: Array<spaces_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<spaces_on_conflict>;
}

/** order by avg() on columns of table "spaces" */
export interface spaces_avg_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "spaces". All fields are combined with a logical 'AND'. */
export interface spaces_bool_exp {
  _and?: Maybe<Array<spaces_bool_exp>>;
  _not?: Maybe<spaces_bool_exp>;
  _or?: Maybe<Array<spaces_bool_exp>>;
  available?: Maybe<Boolean_comparison_exp>;
  brand?: Maybe<brands_bool_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  building?: Maybe<String_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  floor?: Maybe<Int_comparison_exp>;
  floor_plan?: Maybe<floor_plans_bool_exp>;
  floor_plan_grid?: Maybe<floor_plan_grid_bool_exp>;
  floor_plan_uuid?: Maybe<uuid_comparison_exp>;
  grid_uuid?: Maybe<uuid_comparison_exp>;
  occupancy?: Maybe<Int_comparison_exp>;
  outlet?: Maybe<outlets_bool_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  pathing?: Maybe<json_comparison_exp>;
  section?: Maybe<String_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  spaces_usages?: Maybe<spaces_usage_bool_exp>;
  title?: Maybe<String_comparison_exp>;
  type?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "spaces" */
export enum spaces_constraint {
  /** unique or primary key constraint */
  spaces_pkey = "spaces_pkey",
  /** unique or primary key constraint */
  spaces_slug_unique = "spaces_slug_unique",
}

/** order by aggregate values of table "spaces_guests" */
export interface spaces_guests_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<spaces_guests_max_order_by>;
  min?: Maybe<spaces_guests_min_order_by>;
}

/** input type for inserting array relation for remote table "spaces_guests" */
export interface spaces_guests_arr_rel_insert_input {
  data: Array<spaces_guests_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<spaces_guests_on_conflict>;
}

/** Boolean expression to filter rows from the table "spaces_guests". All fields are combined with a logical 'AND'. */
export interface spaces_guests_bool_exp {
  _and?: Maybe<Array<spaces_guests_bool_exp>>;
  _not?: Maybe<spaces_guests_bool_exp>;
  _or?: Maybe<Array<spaces_guests_bool_exp>>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  guest_uuid?: Maybe<uuid_comparison_exp>;
  invited_by_uuid?: Maybe<uuid_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  space_usage_uuid?: Maybe<uuid_comparison_exp>;
  space_uuid?: Maybe<uuid_comparison_exp>;
  spaces_usage?: Maybe<spaces_usage_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "spaces_guests" */
export enum spaces_guests_constraint {
  /** unique or primary key constraint */
  spaces_guests_pkey = "spaces_guests_pkey",
}

/** input type for inserting data into table "spaces_guests" */
export interface spaces_guests_insert_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  invited_by_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  space_usage_uuid?: Maybe<Scalars["uuid"]>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  spaces_usage?: Maybe<spaces_usage_obj_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "spaces_guests" */
export interface spaces_guests_max_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "spaces_guests" */
export interface spaces_guests_min_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "spaces_guests" */
export interface spaces_guests_on_conflict {
  constraint: spaces_guests_constraint;
  update_columns?: Array<spaces_guests_update_column>;
  where?: Maybe<spaces_guests_bool_exp>;
}

/** Ordering options when selecting data from "spaces_guests". */
export interface spaces_guests_order_by {
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  spaces_usage?: Maybe<spaces_usage_order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: spaces_guests */
export interface spaces_guests_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "spaces_guests" */
export enum spaces_guests_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  invited_by_uuid = "invited_by_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  space_usage_uuid = "space_usage_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "spaces_guests" */
export interface spaces_guests_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  invited_by_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  space_usage_uuid?: Maybe<Scalars["uuid"]>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "spaces_guests" */
export enum spaces_guests_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  invited_by_uuid = "invited_by_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  space_usage_uuid = "space_usage_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for incrementing numeric columns in table "spaces" */
export interface spaces_inc_input {
  floor?: Maybe<Scalars["Int"]>;
  occupancy?: Maybe<Scalars["Int"]>;
}

/** input type for inserting data into table "spaces" */
export interface spaces_insert_input {
  available?: Maybe<Scalars["Boolean"]>;
  brand?: Maybe<brands_obj_rel_insert_input>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  building?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  floor?: Maybe<Scalars["Int"]>;
  floor_plan?: Maybe<floor_plans_obj_rel_insert_input>;
  floor_plan_grid?: Maybe<floor_plan_grid_obj_rel_insert_input>;
  floor_plan_uuid?: Maybe<Scalars["uuid"]>;
  grid_uuid?: Maybe<Scalars["uuid"]>;
  occupancy?: Maybe<Scalars["Int"]>;
  outlet?: Maybe<outlets_obj_rel_insert_input>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  pathing?: Maybe<Scalars["json"]>;
  section?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  spaces_usages?: Maybe<spaces_usage_arr_rel_insert_input>;
  title?: Maybe<Scalars["String"]>;
  /** desk | meeting_room | event_space */
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "spaces" */
export interface spaces_max_order_by {
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  grid_uuid?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  section?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  /** desk | meeting_room | event_space */
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "spaces" */
export interface spaces_min_order_by {
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  grid_uuid?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  section?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  /** desk | meeting_room | event_space */
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "spaces" */
export interface spaces_obj_rel_insert_input {
  data: spaces_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<spaces_on_conflict>;
}

/** on conflict condition type for table "spaces" */
export interface spaces_on_conflict {
  constraint: spaces_constraint;
  update_columns?: Array<spaces_update_column>;
  where?: Maybe<spaces_bool_exp>;
}

/** Ordering options when selecting data from "spaces". */
export interface spaces_order_by {
  available?: Maybe<order_by>;
  brand?: Maybe<brands_order_by>;
  brand_uuid?: Maybe<order_by>;
  building?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  floor?: Maybe<order_by>;
  floor_plan?: Maybe<floor_plans_order_by>;
  floor_plan_grid?: Maybe<floor_plan_grid_order_by>;
  floor_plan_uuid?: Maybe<order_by>;
  grid_uuid?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
  outlet?: Maybe<outlets_order_by>;
  outlet_uuid?: Maybe<order_by>;
  pathing?: Maybe<order_by>;
  section?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  spaces_usages_aggregate?: Maybe<spaces_usage_aggregate_order_by>;
  title?: Maybe<order_by>;
  type?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: spaces */
export interface spaces_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "spaces" */
export enum spaces_select_column {
  /** column name */
  available = "available",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  building = "building",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  floor = "floor",
  /** column name */
  floor_plan_uuid = "floor_plan_uuid",
  /** column name */
  grid_uuid = "grid_uuid",
  /** column name */
  occupancy = "occupancy",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  pathing = "pathing",
  /** column name */
  section = "section",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "spaces" */
export interface spaces_set_input {
  available?: Maybe<Scalars["Boolean"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  building?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  floor?: Maybe<Scalars["Int"]>;
  floor_plan_uuid?: Maybe<Scalars["uuid"]>;
  grid_uuid?: Maybe<Scalars["uuid"]>;
  occupancy?: Maybe<Scalars["Int"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  pathing?: Maybe<Scalars["json"]>;
  section?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  /** desk | meeting_room | event_space */
  type?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by stddev() on columns of table "spaces" */
export interface spaces_stddev_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by stddev_pop() on columns of table "spaces" */
export interface spaces_stddev_pop_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by stddev_samp() on columns of table "spaces" */
export interface spaces_stddev_samp_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by sum() on columns of table "spaces" */
export interface spaces_sum_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** update columns of table "spaces" */
export enum spaces_update_column {
  /** column name */
  available = "available",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  building = "building",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  floor = "floor",
  /** column name */
  floor_plan_uuid = "floor_plan_uuid",
  /** column name */
  grid_uuid = "grid_uuid",
  /** column name */
  occupancy = "occupancy",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  pathing = "pathing",
  /** column name */
  section = "section",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  type = "type",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "spaces_usage" */
export interface spaces_usage_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<spaces_usage_max_order_by>;
  min?: Maybe<spaces_usage_min_order_by>;
}

/** input type for inserting array relation for remote table "spaces_usage" */
export interface spaces_usage_arr_rel_insert_input {
  data: Array<spaces_usage_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<spaces_usage_on_conflict>;
}

/** Boolean expression to filter rows from the table "spaces_usage". All fields are combined with a logical 'AND'. */
export interface spaces_usage_bool_exp {
  _and?: Maybe<Array<spaces_usage_bool_exp>>;
  _not?: Maybe<spaces_usage_bool_exp>;
  _or?: Maybe<Array<spaces_usage_bool_exp>>;
  active?: Maybe<Boolean_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  guest?: Maybe<guests_bool_exp>;
  guest_uuid?: Maybe<uuid_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  pass?: Maybe<passes_bool_exp>;
  pass_uuid?: Maybe<uuid_comparison_exp>;
  permanent?: Maybe<Boolean_comparison_exp>;
  releasable?: Maybe<Boolean_comparison_exp>;
  released?: Maybe<Boolean_comparison_exp>;
  released_at?: Maybe<timestamptz_comparison_exp>;
  reservation?: Maybe<reservations_bool_exp>;
  reservation_end?: Maybe<timestamptz_comparison_exp>;
  reservation_start?: Maybe<timestamptz_comparison_exp>;
  reservation_uuid?: Maybe<uuid_comparison_exp>;
  space?: Maybe<spaces_bool_exp>;
  space_uuid?: Maybe<uuid_comparison_exp>;
  spaces_guests?: Maybe<spaces_guests_bool_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "spaces_usage" */
export enum spaces_usage_constraint {
  /** unique or primary key constraint */
  spaces_usage_pkey = "spaces_usage_pkey",
}

/** input type for inserting data into table "spaces_usage" */
export interface spaces_usage_insert_input {
  active?: Maybe<Scalars["Boolean"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest?: Maybe<guests_obj_rel_insert_input>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  pass?: Maybe<passes_obj_rel_insert_input>;
  pass_uuid?: Maybe<Scalars["uuid"]>;
  permanent?: Maybe<Scalars["Boolean"]>;
  releasable?: Maybe<Scalars["Boolean"]>;
  released?: Maybe<Scalars["Boolean"]>;
  released_at?: Maybe<Scalars["timestamptz"]>;
  reservation?: Maybe<reservations_obj_rel_insert_input>;
  reservation_end?: Maybe<Scalars["timestamptz"]>;
  reservation_start?: Maybe<Scalars["timestamptz"]>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  space?: Maybe<spaces_obj_rel_insert_input>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  spaces_guests?: Maybe<spaces_guests_arr_rel_insert_input>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "spaces_usage" */
export interface spaces_usage_max_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  pass_uuid?: Maybe<order_by>;
  released_at?: Maybe<order_by>;
  reservation_end?: Maybe<order_by>;
  reservation_start?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "spaces_usage" */
export interface spaces_usage_min_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  pass_uuid?: Maybe<order_by>;
  released_at?: Maybe<order_by>;
  reservation_end?: Maybe<order_by>;
  reservation_start?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "spaces_usage" */
export interface spaces_usage_obj_rel_insert_input {
  data: spaces_usage_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<spaces_usage_on_conflict>;
}

/** on conflict condition type for table "spaces_usage" */
export interface spaces_usage_on_conflict {
  constraint: spaces_usage_constraint;
  update_columns?: Array<spaces_usage_update_column>;
  where?: Maybe<spaces_usage_bool_exp>;
}

/** Ordering options when selecting data from "spaces_usage". */
export interface spaces_usage_order_by {
  active?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  guest?: Maybe<guests_order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  pass?: Maybe<passes_order_by>;
  pass_uuid?: Maybe<order_by>;
  permanent?: Maybe<order_by>;
  releasable?: Maybe<order_by>;
  released?: Maybe<order_by>;
  released_at?: Maybe<order_by>;
  reservation?: Maybe<reservations_order_by>;
  reservation_end?: Maybe<order_by>;
  reservation_start?: Maybe<order_by>;
  reservation_uuid?: Maybe<order_by>;
  space?: Maybe<spaces_order_by>;
  space_uuid?: Maybe<order_by>;
  spaces_guests_aggregate?: Maybe<spaces_guests_aggregate_order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: spaces_usage */
export interface spaces_usage_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "spaces_usage" */
export enum spaces_usage_select_column {
  /** column name */
  active = "active",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  pass_uuid = "pass_uuid",
  /** column name */
  permanent = "permanent",
  /** column name */
  releasable = "releasable",
  /** column name */
  released = "released",
  /** column name */
  released_at = "released_at",
  /** column name */
  reservation_end = "reservation_end",
  /** column name */
  reservation_start = "reservation_start",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "spaces_usage" */
export interface spaces_usage_set_input {
  active?: Maybe<Scalars["Boolean"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  pass_uuid?: Maybe<Scalars["uuid"]>;
  permanent?: Maybe<Scalars["Boolean"]>;
  releasable?: Maybe<Scalars["Boolean"]>;
  released?: Maybe<Scalars["Boolean"]>;
  released_at?: Maybe<Scalars["timestamptz"]>;
  reservation_end?: Maybe<Scalars["timestamptz"]>;
  reservation_start?: Maybe<Scalars["timestamptz"]>;
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "spaces_usage" */
export enum spaces_usage_update_column {
  /** column name */
  active = "active",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  pass_uuid = "pass_uuid",
  /** column name */
  permanent = "permanent",
  /** column name */
  releasable = "releasable",
  /** column name */
  released = "released",
  /** column name */
  released_at = "released_at",
  /** column name */
  reservation_end = "reservation_end",
  /** column name */
  reservation_start = "reservation_start",
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by var_pop() on columns of table "spaces" */
export interface spaces_var_pop_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by var_samp() on columns of table "spaces" */
export interface spaces_var_samp_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** order by variance() on columns of table "spaces" */
export interface spaces_variance_order_by {
  floor?: Maybe<order_by>;
  occupancy?: Maybe<order_by>;
}

/** Boolean expression to filter rows from the table "storage.buckets". All fields are combined with a logical 'AND'. */
export interface storage_buckets_bool_exp {
  _and?: Maybe<Array<storage_buckets_bool_exp>>;
  _not?: Maybe<storage_buckets_bool_exp>;
  _or?: Maybe<Array<storage_buckets_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  id?: Maybe<String_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  owner?: Maybe<uuid_comparison_exp>;
  public?: Maybe<Boolean_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
}

/** unique or primary key constraints on table "storage.buckets" */
export enum storage_buckets_constraint {
  /** unique or primary key constraint */
  bname = "bname",
  /** unique or primary key constraint */
  buckets_pkey = "buckets_pkey",
}

/** input type for inserting data into table "storage.buckets" */
export interface storage_buckets_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  owner?: Maybe<Scalars["uuid"]>;
  public?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** on conflict condition type for table "storage.buckets" */
export interface storage_buckets_on_conflict {
  constraint: storage_buckets_constraint;
  update_columns?: Array<storage_buckets_update_column>;
  where?: Maybe<storage_buckets_bool_exp>;
}

/** Ordering options when selecting data from "storage.buckets". */
export interface storage_buckets_order_by {
  created_at?: Maybe<order_by>;
  id?: Maybe<order_by>;
  name?: Maybe<order_by>;
  owner?: Maybe<order_by>;
  public?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
}

/** primary key columns input for table: storage_buckets */
export interface storage_buckets_pk_columns_input {
  id: Scalars["String"];
}

/** select columns of table "storage.buckets" */
export enum storage_buckets_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  name = "name",
  /** column name */
  owner = "owner",
  /** column name */
  public = "public",
  /** column name */
  updated_at = "updated_at",
}

/** input type for updating data in table "storage.buckets" */
export interface storage_buckets_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  id?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  owner?: Maybe<Scalars["uuid"]>;
  public?: Maybe<Scalars["Boolean"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
}

/** update columns of table "storage.buckets" */
export enum storage_buckets_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  id = "id",
  /** column name */
  name = "name",
  /** column name */
  owner = "owner",
  /** column name */
  public = "public",
  /** column name */
  updated_at = "updated_at",
}

/** order by aggregate values of table "stripe_transfers" */
export interface stripe_transfers_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<stripe_transfers_max_order_by>;
  min?: Maybe<stripe_transfers_min_order_by>;
}

/** input type for inserting array relation for remote table "stripe_transfers" */
export interface stripe_transfers_arr_rel_insert_input {
  data: Array<stripe_transfers_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<stripe_transfers_on_conflict>;
}

/** Boolean expression to filter rows from the table "stripe_transfers". All fields are combined with a logical 'AND'. */
export interface stripe_transfers_bool_exp {
  _and?: Maybe<Array<stripe_transfers_bool_exp>>;
  _not?: Maybe<stripe_transfers_bool_exp>;
  _or?: Maybe<Array<stripe_transfers_bool_exp>>;
  amount?: Maybe<String_comparison_exp>;
  brand_currency?: Maybe<String_comparison_exp>;
  brand_stripe_id?: Maybe<String_comparison_exp>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  invoice?: Maybe<invoice_bool_exp>;
  invoice_uuid?: Maybe<uuid_comparison_exp>;
  stripe_transfer_id?: Maybe<String_comparison_exp>;
  transfer_snapshot?: Maybe<json_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "stripe_transfers" */
export enum stripe_transfers_constraint {
  /** unique or primary key constraint */
  stripe_transfers_pkey = "stripe_transfers_pkey",
}

/** input type for inserting data into table "stripe_transfers" */
export interface stripe_transfers_insert_input {
  amount?: Maybe<Scalars["String"]>;
  brand_currency?: Maybe<Scalars["String"]>;
  brand_stripe_id?: Maybe<Scalars["String"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  invoice?: Maybe<invoice_obj_rel_insert_input>;
  invoice_uuid?: Maybe<Scalars["uuid"]>;
  stripe_transfer_id?: Maybe<Scalars["String"]>;
  transfer_snapshot?: Maybe<Scalars["json"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "stripe_transfers" */
export interface stripe_transfers_max_order_by {
  amount?: Maybe<order_by>;
  brand_currency?: Maybe<order_by>;
  brand_stripe_id?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  invoice_uuid?: Maybe<order_by>;
  stripe_transfer_id?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "stripe_transfers" */
export interface stripe_transfers_min_order_by {
  amount?: Maybe<order_by>;
  brand_currency?: Maybe<order_by>;
  brand_stripe_id?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  invoice_uuid?: Maybe<order_by>;
  stripe_transfer_id?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "stripe_transfers" */
export interface stripe_transfers_on_conflict {
  constraint: stripe_transfers_constraint;
  update_columns?: Array<stripe_transfers_update_column>;
  where?: Maybe<stripe_transfers_bool_exp>;
}

/** Ordering options when selecting data from "stripe_transfers". */
export interface stripe_transfers_order_by {
  amount?: Maybe<order_by>;
  brand_currency?: Maybe<order_by>;
  brand_stripe_id?: Maybe<order_by>;
  brand_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  invoice?: Maybe<invoice_order_by>;
  invoice_uuid?: Maybe<order_by>;
  stripe_transfer_id?: Maybe<order_by>;
  transfer_snapshot?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: stripe_transfers */
export interface stripe_transfers_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "stripe_transfers" */
export enum stripe_transfers_select_column {
  /** column name */
  amount = "amount",
  /** column name */
  brand_currency = "brand_currency",
  /** column name */
  brand_stripe_id = "brand_stripe_id",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  invoice_uuid = "invoice_uuid",
  /** column name */
  stripe_transfer_id = "stripe_transfer_id",
  /** column name */
  transfer_snapshot = "transfer_snapshot",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "stripe_transfers" */
export interface stripe_transfers_set_input {
  amount?: Maybe<Scalars["String"]>;
  brand_currency?: Maybe<Scalars["String"]>;
  brand_stripe_id?: Maybe<Scalars["String"]>;
  brand_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  invoice_uuid?: Maybe<Scalars["uuid"]>;
  stripe_transfer_id?: Maybe<Scalars["String"]>;
  transfer_snapshot?: Maybe<Scalars["json"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "stripe_transfers" */
export enum stripe_transfers_update_column {
  /** column name */
  amount = "amount",
  /** column name */
  brand_currency = "brand_currency",
  /** column name */
  brand_stripe_id = "brand_stripe_id",
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  invoice_uuid = "invoice_uuid",
  /** column name */
  stripe_transfer_id = "stripe_transfer_id",
  /** column name */
  transfer_snapshot = "transfer_snapshot",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "subscriptions". All fields are combined with a logical 'AND'. */
export interface subscriptions_bool_exp {
  _and?: Maybe<Array<subscriptions_bool_exp>>;
  _not?: Maybe<subscriptions_bool_exp>;
  _or?: Maybe<Array<subscriptions_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_end?: Maybe<date_comparison_exp>;
  date_start?: Maybe<date_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  quantity?: Maybe<String_comparison_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  stripe_status?: Maybe<String_comparison_exp>;
  trial_ends_at?: Maybe<date_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "subscriptions" */
export enum subscriptions_constraint {
  /** unique or primary key constraint */
  subscriptions_pkey = "subscriptions_pkey",
}

/** input type for inserting data into table "subscriptions" */
export interface subscriptions_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "subscriptions" */
export interface subscriptions_on_conflict {
  constraint: subscriptions_constraint;
  update_columns?: Array<subscriptions_update_column>;
  where?: Maybe<subscriptions_bool_exp>;
}

/** Ordering options when selecting data from "subscriptions". */
export interface subscriptions_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: subscriptions */
export interface subscriptions_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "subscriptions" */
export enum subscriptions_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  quantity = "quantity",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  stripe_status = "stripe_status",
  /** column name */
  trial_ends_at = "trial_ends_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "subscriptions" */
export interface subscriptions_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "subscriptions" */
export enum subscriptions_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  quantity = "quantity",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  stripe_status = "stripe_status",
  /** column name */
  trial_ends_at = "trial_ends_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to filter rows from the table "supabase_functions.hooks". All fields are combined with a logical 'AND'. */
export interface supabase_functions_hooks_bool_exp {
  _and?: Maybe<Array<supabase_functions_hooks_bool_exp>>;
  _not?: Maybe<supabase_functions_hooks_bool_exp>;
  _or?: Maybe<Array<supabase_functions_hooks_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  hook_name?: Maybe<String_comparison_exp>;
  hook_table_id?: Maybe<Int_comparison_exp>;
  id?: Maybe<bigint_comparison_exp>;
  request_id?: Maybe<bigint_comparison_exp>;
}

/** unique or primary key constraints on table "supabase_functions.hooks" */
export enum supabase_functions_hooks_constraint {
  /** unique or primary key constraint */
  hooks_pkey = "hooks_pkey",
}

/** input type for incrementing numeric columns in table "supabase_functions.hooks" */
export interface supabase_functions_hooks_inc_input {
  hook_table_id?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["bigint"]>;
  request_id?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "supabase_functions.hooks" */
export interface supabase_functions_hooks_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  hook_name?: Maybe<Scalars["String"]>;
  hook_table_id?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["bigint"]>;
  request_id?: Maybe<Scalars["bigint"]>;
}

/** on conflict condition type for table "supabase_functions.hooks" */
export interface supabase_functions_hooks_on_conflict {
  constraint: supabase_functions_hooks_constraint;
  update_columns?: Array<supabase_functions_hooks_update_column>;
  where?: Maybe<supabase_functions_hooks_bool_exp>;
}

/** Ordering options when selecting data from "supabase_functions.hooks". */
export interface supabase_functions_hooks_order_by {
  created_at?: Maybe<order_by>;
  hook_name?: Maybe<order_by>;
  hook_table_id?: Maybe<order_by>;
  id?: Maybe<order_by>;
  request_id?: Maybe<order_by>;
}

/** primary key columns input for table: supabase_functions_hooks */
export interface supabase_functions_hooks_pk_columns_input {
  id: Scalars["bigint"];
}

/** select columns of table "supabase_functions.hooks" */
export enum supabase_functions_hooks_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  hook_name = "hook_name",
  /** column name */
  hook_table_id = "hook_table_id",
  /** column name */
  id = "id",
  /** column name */
  request_id = "request_id",
}

/** input type for updating data in table "supabase_functions.hooks" */
export interface supabase_functions_hooks_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  hook_name?: Maybe<Scalars["String"]>;
  hook_table_id?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["bigint"]>;
  request_id?: Maybe<Scalars["bigint"]>;
}

/** update columns of table "supabase_functions.hooks" */
export enum supabase_functions_hooks_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  hook_name = "hook_name",
  /** column name */
  hook_table_id = "hook_table_id",
  /** column name */
  id = "id",
  /** column name */
  request_id = "request_id",
}

/** Boolean expression to filter rows from the table "tags". All fields are combined with a logical 'AND'. */
export interface tags_bool_exp {
  _and?: Maybe<Array<tags_bool_exp>>;
  _not?: Maybe<tags_bool_exp>;
  _or?: Maybe<Array<tags_bool_exp>>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  description?: Maybe<String_comparison_exp>;
  slug?: Maybe<String_comparison_exp>;
  title?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "tags" */
export enum tags_constraint {
  /** unique or primary key constraint */
  tags_pkey = "tags_pkey",
  /** unique or primary key constraint */
  tags_slug_unique = "tags_slug_unique",
}

/** input type for inserting data into table "tags" */
export interface tags_insert_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "tags" */
export interface tags_on_conflict {
  constraint: tags_constraint;
  update_columns?: Array<tags_update_column>;
  where?: Maybe<tags_bool_exp>;
}

/** Ordering options when selecting data from "tags". */
export interface tags_order_by {
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  description?: Maybe<order_by>;
  slug?: Maybe<order_by>;
  title?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: tags */
export interface tags_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "tags" */
export enum tags_select_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "tags" */
export interface tags_set_input {
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  description?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  title?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "tags" */
export enum tags_update_column {
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  description = "description",
  /** column name */
  slug = "slug",
  /** column name */
  title = "title",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "team_memberships" */
export interface team_memberships_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<team_memberships_max_order_by>;
  min?: Maybe<team_memberships_min_order_by>;
}

/** input type for inserting array relation for remote table "team_memberships" */
export interface team_memberships_arr_rel_insert_input {
  data: Array<team_memberships_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<team_memberships_on_conflict>;
}

/** Boolean expression to filter rows from the table "team_memberships". All fields are combined with a logical 'AND'. */
export interface team_memberships_bool_exp {
  _and?: Maybe<Array<team_memberships_bool_exp>>;
  _not?: Maybe<team_memberships_bool_exp>;
  _or?: Maybe<Array<team_memberships_bool_exp>>;
  accepted?: Maybe<Boolean_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  email?: Maybe<String_comparison_exp>;
  invited_by_uuid?: Maybe<uuid_comparison_exp>;
  team?: Maybe<teams_bool_exp>;
  team_schedules?: Maybe<team_schedules_bool_exp>;
  team_uuid?: Maybe<uuid_comparison_exp>;
  token?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  userByUserUuid?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "team_memberships" */
export enum team_memberships_constraint {
  /** unique or primary key constraint */
  team_memberships_pkey = "team_memberships_pkey",
  /** unique or primary key constraint */
  team_memberships_token_unique = "team_memberships_token_unique",
}

/** input type for inserting data into table "team_memberships" */
export interface team_memberships_insert_input {
  accepted?: Maybe<Scalars["Boolean"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  invited_by_uuid?: Maybe<Scalars["uuid"]>;
  team?: Maybe<teams_obj_rel_insert_input>;
  team_schedules?: Maybe<team_schedules_arr_rel_insert_input>;
  team_uuid?: Maybe<Scalars["uuid"]>;
  token?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  userByUserUuid?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "team_memberships" */
export interface team_memberships_max_order_by {
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  team_uuid?: Maybe<order_by>;
  token?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "team_memberships" */
export interface team_memberships_min_order_by {
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  team_uuid?: Maybe<order_by>;
  token?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** input type for inserting object relation for remote table "team_memberships" */
export interface team_memberships_obj_rel_insert_input {
  data: team_memberships_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<team_memberships_on_conflict>;
}

/** on conflict condition type for table "team_memberships" */
export interface team_memberships_on_conflict {
  constraint: team_memberships_constraint;
  update_columns?: Array<team_memberships_update_column>;
  where?: Maybe<team_memberships_bool_exp>;
}

/** Ordering options when selecting data from "team_memberships". */
export interface team_memberships_order_by {
  accepted?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  email?: Maybe<order_by>;
  invited_by_uuid?: Maybe<order_by>;
  team?: Maybe<teams_order_by>;
  team_schedules_aggregate?: Maybe<team_schedules_aggregate_order_by>;
  team_uuid?: Maybe<order_by>;
  token?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  userByUserUuid?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: team_memberships */
export interface team_memberships_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "team_memberships" */
export enum team_memberships_select_column {
  /** column name */
  accepted = "accepted",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  invited_by_uuid = "invited_by_uuid",
  /** column name */
  team_uuid = "team_uuid",
  /** column name */
  token = "token",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "team_memberships" */
export interface team_memberships_set_input {
  accepted?: Maybe<Scalars["Boolean"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  email?: Maybe<Scalars["String"]>;
  invited_by_uuid?: Maybe<Scalars["uuid"]>;
  team_uuid?: Maybe<Scalars["uuid"]>;
  token?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "team_memberships" */
export enum team_memberships_update_column {
  /** column name */
  accepted = "accepted",
  /** column name */
  created_at = "created_at",
  /** column name */
  email = "email",
  /** column name */
  invited_by_uuid = "invited_by_uuid",
  /** column name */
  team_uuid = "team_uuid",
  /** column name */
  token = "token",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "team_roles" */
export interface team_roles_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<team_roles_max_order_by>;
  min?: Maybe<team_roles_min_order_by>;
}

/** input type for inserting array relation for remote table "team_roles" */
export interface team_roles_arr_rel_insert_input {
  data: Array<team_roles_insert_input>;
}

/** Boolean expression to filter rows from the table "team_roles". All fields are combined with a logical 'AND'. */
export interface team_roles_bool_exp {
  _and?: Maybe<Array<team_roles_bool_exp>>;
  _not?: Maybe<team_roles_bool_exp>;
  _or?: Maybe<Array<team_roles_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  role_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "team_roles" */
export interface team_roles_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "team_roles" */
export interface team_roles_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "team_roles" */
export interface team_roles_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "team_roles". */
export interface team_roles_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** select columns of table "team_roles" */
export enum team_roles_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  role_uuid = "role_uuid",
}

/** input type for updating data in table "team_roles" */
export interface team_roles_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "team_schedules" */
export interface team_schedules_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<team_schedules_max_order_by>;
  min?: Maybe<team_schedules_min_order_by>;
}

/** input type for inserting array relation for remote table "team_schedules" */
export interface team_schedules_arr_rel_insert_input {
  data: Array<team_schedules_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<team_schedules_on_conflict>;
}

/** Boolean expression to filter rows from the table "team_schedules". All fields are combined with a logical 'AND'. */
export interface team_schedules_bool_exp {
  _and?: Maybe<Array<team_schedules_bool_exp>>;
  _not?: Maybe<team_schedules_bool_exp>;
  _or?: Maybe<Array<team_schedules_bool_exp>>;
  brand_uuid?: Maybe<uuid_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_schedule?: Maybe<date_comparison_exp>;
  guest_uuid?: Maybe<uuid_comparison_exp>;
  outlet_uuid?: Maybe<uuid_comparison_exp>;
  space_usage_uuid?: Maybe<uuid_comparison_exp>;
  space_uuid?: Maybe<uuid_comparison_exp>;
  team?: Maybe<teams_bool_exp>;
  team_member_uuid?: Maybe<uuid_comparison_exp>;
  team_membership?: Maybe<team_memberships_bool_exp>;
  team_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "team_schedules" */
export enum team_schedules_constraint {
  /** unique or primary key constraint */
  team_schedules_pkey = "team_schedules_pkey",
}

/** input type for inserting data into table "team_schedules" */
export interface team_schedules_insert_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_schedule?: Maybe<Scalars["date"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  space_usage_uuid?: Maybe<Scalars["uuid"]>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  team?: Maybe<teams_obj_rel_insert_input>;
  team_member_uuid?: Maybe<Scalars["uuid"]>;
  team_membership?: Maybe<team_memberships_obj_rel_insert_input>;
  team_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "team_schedules" */
export interface team_schedules_max_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_schedule?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  team_member_uuid?: Maybe<order_by>;
  team_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "team_schedules" */
export interface team_schedules_min_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_schedule?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  team_member_uuid?: Maybe<order_by>;
  team_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "team_schedules" */
export interface team_schedules_on_conflict {
  constraint: team_schedules_constraint;
  update_columns?: Array<team_schedules_update_column>;
  where?: Maybe<team_schedules_bool_exp>;
}

/** Ordering options when selecting data from "team_schedules". */
export interface team_schedules_order_by {
  brand_uuid?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  date_schedule?: Maybe<order_by>;
  guest_uuid?: Maybe<order_by>;
  outlet_uuid?: Maybe<order_by>;
  space_usage_uuid?: Maybe<order_by>;
  space_uuid?: Maybe<order_by>;
  team?: Maybe<teams_order_by>;
  team_member_uuid?: Maybe<order_by>;
  team_membership?: Maybe<team_memberships_order_by>;
  team_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: team_schedules */
export interface team_schedules_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "team_schedules" */
export enum team_schedules_select_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_schedule = "date_schedule",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  space_usage_uuid = "space_usage_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  team_member_uuid = "team_member_uuid",
  /** column name */
  team_uuid = "team_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "team_schedules" */
export interface team_schedules_set_input {
  brand_uuid?: Maybe<Scalars["uuid"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_schedule?: Maybe<Scalars["date"]>;
  guest_uuid?: Maybe<Scalars["uuid"]>;
  outlet_uuid?: Maybe<Scalars["uuid"]>;
  space_usage_uuid?: Maybe<Scalars["uuid"]>;
  space_uuid?: Maybe<Scalars["uuid"]>;
  team_member_uuid?: Maybe<Scalars["uuid"]>;
  team_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "team_schedules" */
export enum team_schedules_update_column {
  /** column name */
  brand_uuid = "brand_uuid",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  date_schedule = "date_schedule",
  /** column name */
  guest_uuid = "guest_uuid",
  /** column name */
  outlet_uuid = "outlet_uuid",
  /** column name */
  space_usage_uuid = "space_usage_uuid",
  /** column name */
  space_uuid = "space_uuid",
  /** column name */
  team_member_uuid = "team_member_uuid",
  /** column name */
  team_uuid = "team_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "team_subscriptions" */
export interface team_subscriptions_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<team_subscriptions_max_order_by>;
  min?: Maybe<team_subscriptions_min_order_by>;
}

/** input type for inserting array relation for remote table "team_subscriptions" */
export interface team_subscriptions_arr_rel_insert_input {
  data: Array<team_subscriptions_insert_input>;
}

/** Boolean expression to filter rows from the table "team_subscriptions". All fields are combined with a logical 'AND'. */
export interface team_subscriptions_bool_exp {
  _and?: Maybe<Array<team_subscriptions_bool_exp>>;
  _not?: Maybe<team_subscriptions_bool_exp>;
  _or?: Maybe<Array<team_subscriptions_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_end?: Maybe<date_comparison_exp>;
  date_start?: Maybe<date_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  quantity?: Maybe<String_comparison_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  stripe_status?: Maybe<String_comparison_exp>;
  trial_ends_at?: Maybe<date_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "team_subscriptions" */
export interface team_subscriptions_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "team_subscriptions" */
export interface team_subscriptions_max_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "team_subscriptions" */
export interface team_subscriptions_min_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "team_subscriptions". */
export interface team_subscriptions_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "team_subscriptions" */
export enum team_subscriptions_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  quantity = "quantity",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  stripe_status = "stripe_status",
  /** column name */
  trial_ends_at = "trial_ends_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "team_subscriptions" */
export interface team_subscriptions_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "teams". All fields are combined with a logical 'AND'. */
export interface teams_bool_exp {
  _and?: Maybe<Array<teams_bool_exp>>;
  _not?: Maybe<teams_bool_exp>;
  _or?: Maybe<Array<teams_bool_exp>>;
  avatar_url?: Maybe<String_comparison_exp>;
  billing_address?: Maybe<String_comparison_exp>;
  billing_address_2?: Maybe<String_comparison_exp>;
  billing_city?: Maybe<String_comparison_exp>;
  billing_country_code?: Maybe<String_comparison_exp>;
  billing_state?: Maybe<String_comparison_exp>;
  billing_zip?: Maybe<String_comparison_exp>;
  bio?: Maybe<String_comparison_exp>;
  business_id?: Maybe<String_comparison_exp>;
  card_brand?: Maybe<String_comparison_exp>;
  card_country?: Maybe<String_comparison_exp>;
  card_last_4?: Maybe<String_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  currency_code?: Maybe<bpchar_comparison_exp>;
  current_billing_plan?: Maybe<String_comparison_exp>;
  locale?: Maybe<String_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  roles?: Maybe<team_roles_bool_exp>;
  slug?: Maybe<String_comparison_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  subscriptions?: Maybe<team_subscriptions_bool_exp>;
  team_memberships?: Maybe<team_memberships_bool_exp>;
  team_schedules?: Maybe<team_schedules_bool_exp>;
  timezone?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "teams" */
export enum teams_constraint {
  /** unique or primary key constraint */
  teams_pkey = "teams_pkey",
  /** unique or primary key constraint */
  teams_slug_unique = "teams_slug_unique",
}

/** input type for inserting data into table "teams" */
export interface teams_insert_input {
  avatar_url?: Maybe<Scalars["String"]>;
  billing_address?: Maybe<Scalars["String"]>;
  billing_address_2?: Maybe<Scalars["String"]>;
  billing_city?: Maybe<Scalars["String"]>;
  billing_country_code?: Maybe<Scalars["String"]>;
  billing_state?: Maybe<Scalars["String"]>;
  billing_zip?: Maybe<Scalars["String"]>;
  bio?: Maybe<Scalars["String"]>;
  business_id?: Maybe<Scalars["String"]>;
  card_brand?: Maybe<Scalars["String"]>;
  card_country?: Maybe<Scalars["String"]>;
  card_last_4?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  current_billing_plan?: Maybe<Scalars["String"]>;
  locale?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  roles?: Maybe<team_roles_arr_rel_insert_input>;
  slug?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  subscriptions?: Maybe<team_subscriptions_arr_rel_insert_input>;
  team_memberships?: Maybe<team_memberships_arr_rel_insert_input>;
  team_schedules?: Maybe<team_schedules_arr_rel_insert_input>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "teams" */
export interface teams_obj_rel_insert_input {
  data: teams_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<teams_on_conflict>;
}

/** on conflict condition type for table "teams" */
export interface teams_on_conflict {
  constraint: teams_constraint;
  update_columns?: Array<teams_update_column>;
  where?: Maybe<teams_bool_exp>;
}

/** Ordering options when selecting data from "teams". */
export interface teams_order_by {
  avatar_url?: Maybe<order_by>;
  billing_address?: Maybe<order_by>;
  billing_address_2?: Maybe<order_by>;
  billing_city?: Maybe<order_by>;
  billing_country_code?: Maybe<order_by>;
  billing_state?: Maybe<order_by>;
  billing_zip?: Maybe<order_by>;
  bio?: Maybe<order_by>;
  business_id?: Maybe<order_by>;
  card_brand?: Maybe<order_by>;
  card_country?: Maybe<order_by>;
  card_last_4?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  current_billing_plan?: Maybe<order_by>;
  locale?: Maybe<order_by>;
  name?: Maybe<order_by>;
  roles_aggregate?: Maybe<team_roles_aggregate_order_by>;
  slug?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  subscriptions_aggregate?: Maybe<team_subscriptions_aggregate_order_by>;
  team_memberships_aggregate?: Maybe<team_memberships_aggregate_order_by>;
  team_schedules_aggregate?: Maybe<team_schedules_aggregate_order_by>;
  timezone?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: teams */
export interface teams_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "teams" */
export enum teams_select_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  billing_address = "billing_address",
  /** column name */
  billing_address_2 = "billing_address_2",
  /** column name */
  billing_city = "billing_city",
  /** column name */
  billing_country_code = "billing_country_code",
  /** column name */
  billing_state = "billing_state",
  /** column name */
  billing_zip = "billing_zip",
  /** column name */
  bio = "bio",
  /** column name */
  business_id = "business_id",
  /** column name */
  card_brand = "card_brand",
  /** column name */
  card_country = "card_country",
  /** column name */
  card_last_4 = "card_last_4",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  current_billing_plan = "current_billing_plan",
  /** column name */
  locale = "locale",
  /** column name */
  name = "name",
  /** column name */
  slug = "slug",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "teams" */
export interface teams_set_input {
  avatar_url?: Maybe<Scalars["String"]>;
  billing_address?: Maybe<Scalars["String"]>;
  billing_address_2?: Maybe<Scalars["String"]>;
  billing_city?: Maybe<Scalars["String"]>;
  billing_country_code?: Maybe<Scalars["String"]>;
  billing_state?: Maybe<Scalars["String"]>;
  billing_zip?: Maybe<Scalars["String"]>;
  bio?: Maybe<Scalars["String"]>;
  business_id?: Maybe<Scalars["String"]>;
  card_brand?: Maybe<Scalars["String"]>;
  card_country?: Maybe<Scalars["String"]>;
  card_last_4?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  current_billing_plan?: Maybe<Scalars["String"]>;
  locale?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  slug?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "teams" */
export enum teams_update_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  billing_address = "billing_address",
  /** column name */
  billing_address_2 = "billing_address_2",
  /** column name */
  billing_city = "billing_city",
  /** column name */
  billing_country_code = "billing_country_code",
  /** column name */
  billing_state = "billing_state",
  /** column name */
  billing_zip = "billing_zip",
  /** column name */
  bio = "bio",
  /** column name */
  business_id = "business_id",
  /** column name */
  card_brand = "card_brand",
  /** column name */
  card_country = "card_country",
  /** column name */
  card_last_4 = "card_last_4",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  current_billing_plan = "current_billing_plan",
  /** column name */
  locale = "locale",
  /** column name */
  name = "name",
  /** column name */
  slug = "slug",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export interface timestamptz_comparison_exp {
  _eq?: Maybe<Scalars["timestamptz"]>;
  _gt?: Maybe<Scalars["timestamptz"]>;
  _gte?: Maybe<Scalars["timestamptz"]>;
  _in?: Maybe<Array<Scalars["timestamptz"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["timestamptz"]>;
  _lte?: Maybe<Scalars["timestamptz"]>;
  _neq?: Maybe<Scalars["timestamptz"]>;
  _nin?: Maybe<Array<Scalars["timestamptz"]>>;
}

/** order by aggregate values of table "user_has_reservations" */
export interface user_has_reservations_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<user_has_reservations_max_order_by>;
  min?: Maybe<user_has_reservations_min_order_by>;
}

/** input type for inserting array relation for remote table "user_has_reservations" */
export interface user_has_reservations_arr_rel_insert_input {
  data: Array<user_has_reservations_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<user_has_reservations_on_conflict>;
}

/** Boolean expression to filter rows from the table "user_has_reservations". All fields are combined with a logical 'AND'. */
export interface user_has_reservations_bool_exp {
  _and?: Maybe<Array<user_has_reservations_bool_exp>>;
  _not?: Maybe<user_has_reservations_bool_exp>;
  _or?: Maybe<Array<user_has_reservations_bool_exp>>;
  reservation_uuid?: Maybe<uuid_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "user_has_reservations" */
export enum user_has_reservations_constraint {
  /** unique or primary key constraint */
  user_has_reservations_pkey = "user_has_reservations_pkey",
}

/** input type for inserting data into table "user_has_reservations" */
export interface user_has_reservations_insert_input {
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "user_has_reservations" */
export interface user_has_reservations_max_order_by {
  reservation_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "user_has_reservations" */
export interface user_has_reservations_min_order_by {
  reservation_uuid?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "user_has_reservations" */
export interface user_has_reservations_on_conflict {
  constraint: user_has_reservations_constraint;
  update_columns?: Array<user_has_reservations_update_column>;
  where?: Maybe<user_has_reservations_bool_exp>;
}

/** Ordering options when selecting data from "user_has_reservations". */
export interface user_has_reservations_order_by {
  reservation_uuid?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
}

/** primary key columns input for table: user_has_reservations */
export interface user_has_reservations_pk_columns_input {
  reservation_uuid: Scalars["uuid"];
}

/** select columns of table "user_has_reservations" */
export enum user_has_reservations_select_column {
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** input type for updating data in table "user_has_reservations" */
export interface user_has_reservations_set_input {
  reservation_uuid?: Maybe<Scalars["uuid"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "user_has_reservations" */
export enum user_has_reservations_update_column {
  /** column name */
  reservation_uuid = "reservation_uuid",
  /** column name */
  user_uuid = "user_uuid",
}

/** Boolean expression to filter rows from the table "user_inbox". All fields are combined with a logical 'AND'. */
export interface user_inbox_bool_exp {
  _and?: Maybe<Array<user_inbox_bool_exp>>;
  _not?: Maybe<user_inbox_bool_exp>;
  _or?: Maybe<Array<user_inbox_bool_exp>>;
  conversation_uuid?: Maybe<uuid_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  pubsub_token?: Maybe<String_comparison_exp>;
  request_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "user_inbox" */
export interface user_inbox_insert_input {
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "user_inbox" */
export interface user_inbox_obj_rel_insert_input {
  data: user_inbox_insert_input;
}

/** Ordering options when selecting data from "user_inbox". */
export interface user_inbox_order_by {
  conversation_uuid?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  pubsub_token?: Maybe<order_by>;
  request_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "user_inbox" */
export enum user_inbox_select_column {
  /** column name */
  conversation_uuid = "conversation_uuid",
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  pubsub_token = "pubsub_token",
  /** column name */
  request_uuid = "request_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "user_inbox" */
export interface user_inbox_set_input {
  conversation_uuid?: Maybe<Scalars["uuid"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  pubsub_token?: Maybe<Scalars["String"]>;
  request_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "user_media". All fields are combined with a logical 'AND'. */
export interface user_media_bool_exp {
  _and?: Maybe<Array<user_media_bool_exp>>;
  _not?: Maybe<user_media_bool_exp>;
  _or?: Maybe<Array<user_media_bool_exp>>;
  collection_name?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  file_name?: Maybe<String_comparison_exp>;
  index?: Maybe<Int_comparison_exp>;
  mime_type?: Maybe<String_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  properties?: Maybe<json_comparison_exp>;
  s3_bucket_name?: Maybe<String_comparison_exp>;
  s3_key?: Maybe<String_comparison_exp>;
  size?: Maybe<bigint_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for incrementing numeric columns in table "user_media" */
export interface user_media_inc_input {
  index?: Maybe<Scalars["Int"]>;
  size?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "user_media" */
export interface user_media_insert_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** input type for inserting object relation for remote table "user_media" */
export interface user_media_obj_rel_insert_input {
  data: user_media_insert_input;
}

/** Ordering options when selecting data from "user_media". */
export interface user_media_order_by {
  collection_name?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  file_name?: Maybe<order_by>;
  index?: Maybe<order_by>;
  mime_type?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  properties?: Maybe<order_by>;
  s3_bucket_name?: Maybe<order_by>;
  s3_key?: Maybe<order_by>;
  size?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "user_media" */
export enum user_media_select_column {
  /** column name */
  collection_name = "collection_name",
  /** column name */
  created_at = "created_at",
  /** column name */
  file_name = "file_name",
  /** column name */
  index = "index",
  /** column name */
  mime_type = "mime_type",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  properties = "properties",
  /** column name */
  s3_bucket_name = "s3_bucket_name",
  /** column name */
  s3_key = "s3_key",
  /** column name */
  size = "size",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "user_media" */
export interface user_media_set_input {
  collection_name?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  file_name?: Maybe<Scalars["String"]>;
  index?: Maybe<Scalars["Int"]>;
  mime_type?: Maybe<Scalars["String"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  properties?: Maybe<Scalars["json"]>;
  s3_bucket_name?: Maybe<Scalars["String"]>;
  s3_key?: Maybe<Scalars["String"]>;
  size?: Maybe<Scalars["bigint"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by aggregate values of table "user_roles" */
export interface user_roles_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<user_roles_max_order_by>;
  min?: Maybe<user_roles_min_order_by>;
}

/** input type for inserting array relation for remote table "user_roles" */
export interface user_roles_arr_rel_insert_input {
  data: Array<user_roles_insert_input>;
}

/** Boolean expression to filter rows from the table "user_roles". All fields are combined with a logical 'AND'. */
export interface user_roles_bool_exp {
  _and?: Maybe<Array<user_roles_bool_exp>>;
  _not?: Maybe<user_roles_bool_exp>;
  _or?: Maybe<Array<user_roles_bool_exp>>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  role_uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "user_roles" */
export interface user_roles_insert_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "user_roles" */
export interface user_roles_max_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "user_roles" */
export interface user_roles_min_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "user_roles". */
export interface user_roles_order_by {
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  role_uuid?: Maybe<order_by>;
}

/** select columns of table "user_roles" */
export enum user_roles_select_column {
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  role_uuid = "role_uuid",
}

/** input type for updating data in table "user_roles" */
export interface user_roles_set_input {
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  role_uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "user_sessions". All fields are combined with a logical 'AND'. */
export interface user_sessions_bool_exp {
  _and?: Maybe<Array<user_sessions_bool_exp>>;
  _not?: Maybe<user_sessions_bool_exp>;
  _or?: Maybe<Array<user_sessions_bool_exp>>;
  brand?: Maybe<String_comparison_exp>;
  country_code?: Maybe<bpchar_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  device_name?: Maybe<String_comparison_exp>;
  device_year_class?: Maybe<String_comparison_exp>;
  duration?: Maybe<bigint_comparison_exp>;
  hostname?: Maybe<String_comparison_exp>;
  ip_address?: Maybe<String_comparison_exp>;
  manufacturer?: Maybe<String_comparison_exp>;
  model_id?: Maybe<String_comparison_exp>;
  model_name?: Maybe<String_comparison_exp>;
  native_app_version?: Maybe<String_comparison_exp>;
  native_build_version?: Maybe<String_comparison_exp>;
  os_build_fingerprint?: Maybe<String_comparison_exp>;
  os_build_id?: Maybe<String_comparison_exp>;
  os_internal_build_id?: Maybe<String_comparison_exp>;
  os_name?: Maybe<String_comparison_exp>;
  os_version?: Maybe<String_comparison_exp>;
  platform?: Maybe<String_comparison_exp>;
  platform_api_level?: Maybe<String_comparison_exp>;
  product_name?: Maybe<String_comparison_exp>;
  status_bar_height?: Maybe<String_comparison_exp>;
  total_memory?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_agent?: Maybe<String_comparison_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "user_sessions" */
export enum user_sessions_constraint {
  /** unique or primary key constraint */
  user_sessions_pkey = "user_sessions_pkey",
}

/** input type for incrementing numeric columns in table "user_sessions" */
export interface user_sessions_inc_input {
  duration?: Maybe<Scalars["bigint"]>;
}

/** input type for inserting data into table "user_sessions" */
export interface user_sessions_insert_input {
  brand?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  device_name?: Maybe<Scalars["String"]>;
  device_year_class?: Maybe<Scalars["String"]>;
  duration?: Maybe<Scalars["bigint"]>;
  hostname?: Maybe<Scalars["String"]>;
  ip_address?: Maybe<Scalars["String"]>;
  manufacturer?: Maybe<Scalars["String"]>;
  model_id?: Maybe<Scalars["String"]>;
  model_name?: Maybe<Scalars["String"]>;
  native_app_version?: Maybe<Scalars["String"]>;
  native_build_version?: Maybe<Scalars["String"]>;
  os_build_fingerprint?: Maybe<Scalars["String"]>;
  os_build_id?: Maybe<Scalars["String"]>;
  os_internal_build_id?: Maybe<Scalars["String"]>;
  os_name?: Maybe<Scalars["String"]>;
  os_version?: Maybe<Scalars["String"]>;
  platform?: Maybe<Scalars["String"]>;
  platform_api_level?: Maybe<Scalars["String"]>;
  product_name?: Maybe<Scalars["String"]>;
  status_bar_height?: Maybe<Scalars["String"]>;
  total_memory?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_agent?: Maybe<Scalars["String"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** on conflict condition type for table "user_sessions" */
export interface user_sessions_on_conflict {
  constraint: user_sessions_constraint;
  update_columns?: Array<user_sessions_update_column>;
  where?: Maybe<user_sessions_bool_exp>;
}

/** Ordering options when selecting data from "user_sessions". */
export interface user_sessions_order_by {
  brand?: Maybe<order_by>;
  country_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  device_name?: Maybe<order_by>;
  device_year_class?: Maybe<order_by>;
  duration?: Maybe<order_by>;
  hostname?: Maybe<order_by>;
  ip_address?: Maybe<order_by>;
  manufacturer?: Maybe<order_by>;
  model_id?: Maybe<order_by>;
  model_name?: Maybe<order_by>;
  native_app_version?: Maybe<order_by>;
  native_build_version?: Maybe<order_by>;
  os_build_fingerprint?: Maybe<order_by>;
  os_build_id?: Maybe<order_by>;
  os_internal_build_id?: Maybe<order_by>;
  os_name?: Maybe<order_by>;
  os_version?: Maybe<order_by>;
  platform?: Maybe<order_by>;
  platform_api_level?: Maybe<order_by>;
  product_name?: Maybe<order_by>;
  status_bar_height?: Maybe<order_by>;
  total_memory?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_agent?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: user_sessions */
export interface user_sessions_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "user_sessions" */
export enum user_sessions_select_column {
  /** column name */
  brand = "brand",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  device_name = "device_name",
  /** column name */
  device_year_class = "device_year_class",
  /** column name */
  duration = "duration",
  /** column name */
  hostname = "hostname",
  /** column name */
  ip_address = "ip_address",
  /** column name */
  manufacturer = "manufacturer",
  /** column name */
  model_id = "model_id",
  /** column name */
  model_name = "model_name",
  /** column name */
  native_app_version = "native_app_version",
  /** column name */
  native_build_version = "native_build_version",
  /** column name */
  os_build_fingerprint = "os_build_fingerprint",
  /** column name */
  os_build_id = "os_build_id",
  /** column name */
  os_internal_build_id = "os_internal_build_id",
  /** column name */
  os_name = "os_name",
  /** column name */
  os_version = "os_version",
  /** column name */
  platform = "platform",
  /** column name */
  platform_api_level = "platform_api_level",
  /** column name */
  product_name = "product_name",
  /** column name */
  status_bar_height = "status_bar_height",
  /** column name */
  total_memory = "total_memory",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_agent = "user_agent",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "user_sessions" */
export interface user_sessions_set_input {
  brand?: Maybe<Scalars["String"]>;
  country_code?: Maybe<Scalars["bpchar"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  device_name?: Maybe<Scalars["String"]>;
  device_year_class?: Maybe<Scalars["String"]>;
  duration?: Maybe<Scalars["bigint"]>;
  hostname?: Maybe<Scalars["String"]>;
  ip_address?: Maybe<Scalars["String"]>;
  manufacturer?: Maybe<Scalars["String"]>;
  model_id?: Maybe<Scalars["String"]>;
  model_name?: Maybe<Scalars["String"]>;
  native_app_version?: Maybe<Scalars["String"]>;
  native_build_version?: Maybe<Scalars["String"]>;
  os_build_fingerprint?: Maybe<Scalars["String"]>;
  os_build_id?: Maybe<Scalars["String"]>;
  os_internal_build_id?: Maybe<Scalars["String"]>;
  os_name?: Maybe<Scalars["String"]>;
  os_version?: Maybe<Scalars["String"]>;
  platform?: Maybe<Scalars["String"]>;
  platform_api_level?: Maybe<Scalars["String"]>;
  product_name?: Maybe<Scalars["String"]>;
  status_bar_height?: Maybe<Scalars["String"]>;
  total_memory?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_agent?: Maybe<Scalars["String"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "user_sessions" */
export enum user_sessions_update_column {
  /** column name */
  brand = "brand",
  /** column name */
  country_code = "country_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  device_name = "device_name",
  /** column name */
  device_year_class = "device_year_class",
  /** column name */
  duration = "duration",
  /** column name */
  hostname = "hostname",
  /** column name */
  ip_address = "ip_address",
  /** column name */
  manufacturer = "manufacturer",
  /** column name */
  model_id = "model_id",
  /** column name */
  model_name = "model_name",
  /** column name */
  native_app_version = "native_app_version",
  /** column name */
  native_build_version = "native_build_version",
  /** column name */
  os_build_fingerprint = "os_build_fingerprint",
  /** column name */
  os_build_id = "os_build_id",
  /** column name */
  os_internal_build_id = "os_internal_build_id",
  /** column name */
  os_name = "os_name",
  /** column name */
  os_version = "os_version",
  /** column name */
  platform = "platform",
  /** column name */
  platform_api_level = "platform_api_level",
  /** column name */
  product_name = "product_name",
  /** column name */
  status_bar_height = "status_bar_height",
  /** column name */
  total_memory = "total_memory",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_agent = "user_agent",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** order by aggregate values of table "user_subscriptions" */
export interface user_subscriptions_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<user_subscriptions_max_order_by>;
  min?: Maybe<user_subscriptions_min_order_by>;
}

/** input type for inserting array relation for remote table "user_subscriptions" */
export interface user_subscriptions_arr_rel_insert_input {
  data: Array<user_subscriptions_insert_input>;
}

/** Boolean expression to filter rows from the table "user_subscriptions". All fields are combined with a logical 'AND'. */
export interface user_subscriptions_bool_exp {
  _and?: Maybe<Array<user_subscriptions_bool_exp>>;
  _not?: Maybe<user_subscriptions_bool_exp>;
  _or?: Maybe<Array<user_subscriptions_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  date_end?: Maybe<date_comparison_exp>;
  date_start?: Maybe<date_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  name?: Maybe<String_comparison_exp>;
  quantity?: Maybe<String_comparison_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  stripe_status?: Maybe<String_comparison_exp>;
  trial_ends_at?: Maybe<date_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** input type for inserting data into table "user_subscriptions" */
export interface user_subscriptions_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "user_subscriptions" */
export interface user_subscriptions_max_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "user_subscriptions" */
export interface user_subscriptions_min_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** Ordering options when selecting data from "user_subscriptions". */
export interface user_subscriptions_order_by {
  created_at?: Maybe<order_by>;
  date_end?: Maybe<order_by>;
  date_start?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  name?: Maybe<order_by>;
  quantity?: Maybe<order_by>;
  stripe_id?: Maybe<order_by>;
  stripe_status?: Maybe<order_by>;
  trial_ends_at?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** select columns of table "user_subscriptions" */
export enum user_subscriptions_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  date_end = "date_end",
  /** column name */
  date_start = "date_start",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  name = "name",
  /** column name */
  quantity = "quantity",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  stripe_status = "stripe_status",
  /** column name */
  trial_ends_at = "trial_ends_at",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "user_subscriptions" */
export interface user_subscriptions_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  date_end?: Maybe<Scalars["date"]>;
  date_start?: Maybe<Scalars["date"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  name?: Maybe<Scalars["String"]>;
  quantity?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  stripe_status?: Maybe<Scalars["String"]>;
  trial_ends_at?: Maybe<Scalars["date"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export interface users_bool_exp {
  _and?: Maybe<Array<users_bool_exp>>;
  _not?: Maybe<users_bool_exp>;
  _or?: Maybe<Array<users_bool_exp>>;
  avatar?: Maybe<user_media_bool_exp>;
  avatar_url?: Maybe<String_comparison_exp>;
  billing_address?: Maybe<String_comparison_exp>;
  billing_address_2?: Maybe<String_comparison_exp>;
  billing_city?: Maybe<String_comparison_exp>;
  billing_country_code?: Maybe<String_comparison_exp>;
  billing_state?: Maybe<String_comparison_exp>;
  billing_zip?: Maybe<String_comparison_exp>;
  bio?: Maybe<String_comparison_exp>;
  brand_users?: Maybe<brand_users_bool_exp>;
  cards?: Maybe<card_bool_exp>;
  conversations?: Maybe<conversations_bool_exp>;
  country_birth_code?: Maybe<String_comparison_exp>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  currency_code?: Maybe<bpchar_comparison_exp>;
  date_birth?: Maybe<date_comparison_exp>;
  discussion_users?: Maybe<discussion_user_bool_exp>;
  display_name?: Maybe<String_comparison_exp>;
  email?: Maybe<String_comparison_exp>;
  email_verified_at?: Maybe<timestamptz_comparison_exp>;
  full_name?: Maybe<String_comparison_exp>;
  gender?: Maybe<String_comparison_exp>;
  guests?: Maybe<guests_bool_exp>;
  inbox?: Maybe<user_inbox_bool_exp>;
  last_read_announcement_at?: Maybe<timestamptz_comparison_exp>;
  last_seen_at?: Maybe<timestamptz_comparison_exp>;
  locale?: Maybe<bpchar_comparison_exp>;
  logs?: Maybe<logs_bool_exp>;
  mobile_no?: Maybe<String_comparison_exp>;
  mobile_verified_at?: Maybe<timestamptz_comparison_exp>;
  model_has_comments?: Maybe<model_has_comments_bool_exp>;
  model_has_likes?: Maybe<model_has_likes_bool_exp>;
  nationality?: Maybe<String_comparison_exp>;
  notifications?: Maybe<notifications_bool_exp>;
  passes?: Maybe<passes_bool_exp>;
  password?: Maybe<String_comparison_exp>;
  posts?: Maybe<posts_bool_exp>;
  requests?: Maybe<requests_bool_exp>;
  reviews?: Maybe<reviews_bool_exp>;
  roles?: Maybe<user_roles_bool_exp>;
  socialRelationshipsByFollowerUuid?: Maybe<social_relationships_bool_exp>;
  social_relationships?: Maybe<social_relationships_bool_exp>;
  spaces_usages?: Maybe<spaces_usage_bool_exp>;
  stripe_id?: Maybe<String_comparison_exp>;
  subscriptions?: Maybe<user_subscriptions_bool_exp>;
  teamMembershipsByUserUuid?: Maybe<team_memberships_bool_exp>;
  team_memberships?: Maybe<team_memberships_bool_exp>;
  timezone?: Maybe<String_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user_has_reservations?: Maybe<user_has_reservations_bool_exp>;
  username?: Maybe<String_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
  wishlists?: Maybe<wishlist_bool_exp>;
}

/** unique or primary key constraints on table "users" */
export enum users_constraint {
  /** unique or primary key constraint */
  users_email_unique = "users_email_unique",
  /** unique or primary key constraint */
  users_pkey = "users_pkey",
  /** unique or primary key constraint */
  users_username_unique = "users_username_unique",
}

/** input type for inserting data into table "users" */
export interface users_insert_input {
  avatar?: Maybe<user_media_obj_rel_insert_input>;
  avatar_url?: Maybe<Scalars["String"]>;
  billing_address?: Maybe<Scalars["String"]>;
  billing_address_2?: Maybe<Scalars["String"]>;
  billing_city?: Maybe<Scalars["String"]>;
  billing_country_code?: Maybe<Scalars["String"]>;
  billing_state?: Maybe<Scalars["String"]>;
  billing_zip?: Maybe<Scalars["String"]>;
  bio?: Maybe<Scalars["String"]>;
  brand_users?: Maybe<brand_users_arr_rel_insert_input>;
  cards?: Maybe<card_arr_rel_insert_input>;
  conversations?: Maybe<conversations_arr_rel_insert_input>;
  country_birth_code?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  date_birth?: Maybe<Scalars["date"]>;
  discussion_users?: Maybe<discussion_user_arr_rel_insert_input>;
  display_name?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  email_verified_at?: Maybe<Scalars["timestamptz"]>;
  full_name?: Maybe<Scalars["String"]>;
  gender?: Maybe<Scalars["String"]>;
  guests?: Maybe<guests_arr_rel_insert_input>;
  inbox?: Maybe<user_inbox_obj_rel_insert_input>;
  last_read_announcement_at?: Maybe<Scalars["timestamptz"]>;
  last_seen_at?: Maybe<Scalars["timestamptz"]>;
  locale?: Maybe<Scalars["bpchar"]>;
  logs?: Maybe<logs_arr_rel_insert_input>;
  mobile_no?: Maybe<Scalars["String"]>;
  mobile_verified_at?: Maybe<Scalars["timestamptz"]>;
  model_has_comments?: Maybe<model_has_comments_arr_rel_insert_input>;
  model_has_likes?: Maybe<model_has_likes_arr_rel_insert_input>;
  nationality?: Maybe<Scalars["String"]>;
  notifications?: Maybe<notifications_arr_rel_insert_input>;
  passes?: Maybe<passes_arr_rel_insert_input>;
  password?: Maybe<Scalars["String"]>;
  posts?: Maybe<posts_arr_rel_insert_input>;
  requests?: Maybe<requests_arr_rel_insert_input>;
  reviews?: Maybe<reviews_arr_rel_insert_input>;
  roles?: Maybe<user_roles_arr_rel_insert_input>;
  socialRelationshipsByFollowerUuid?: Maybe<social_relationships_arr_rel_insert_input>;
  social_relationships?: Maybe<social_relationships_arr_rel_insert_input>;
  spaces_usages?: Maybe<spaces_usage_arr_rel_insert_input>;
  stripe_id?: Maybe<Scalars["String"]>;
  subscriptions?: Maybe<user_subscriptions_arr_rel_insert_input>;
  teamMembershipsByUserUuid?: Maybe<team_memberships_arr_rel_insert_input>;
  team_memberships?: Maybe<team_memberships_arr_rel_insert_input>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_has_reservations?: Maybe<user_has_reservations_arr_rel_insert_input>;
  username?: Maybe<Scalars["String"]>;
  uuid?: Maybe<Scalars["uuid"]>;
  wishlists?: Maybe<wishlist_arr_rel_insert_input>;
}

/** input type for inserting object relation for remote table "users" */
export interface users_obj_rel_insert_input {
  data: users_insert_input;
  /** on conflict condition */
  on_conflict?: Maybe<users_on_conflict>;
}

/** on conflict condition type for table "users" */
export interface users_on_conflict {
  constraint: users_constraint;
  update_columns?: Array<users_update_column>;
  where?: Maybe<users_bool_exp>;
}

/** Ordering options when selecting data from "users". */
export interface users_order_by {
  avatar?: Maybe<user_media_order_by>;
  avatar_url?: Maybe<order_by>;
  billing_address?: Maybe<order_by>;
  billing_address_2?: Maybe<order_by>;
  billing_city?: Maybe<order_by>;
  billing_country_code?: Maybe<order_by>;
  billing_state?: Maybe<order_by>;
  billing_zip?: Maybe<order_by>;
  bio?: Maybe<order_by>;
  brand_users_aggregate?: Maybe<brand_users_aggregate_order_by>;
  cards_aggregate?: Maybe<card_aggregate_order_by>;
  conversations_aggregate?: Maybe<conversations_aggregate_order_by>;
  country_birth_code?: Maybe<order_by>;
  created_at?: Maybe<order_by>;
  currency_code?: Maybe<order_by>;
  date_birth?: Maybe<order_by>;
  discussion_users_aggregate?: Maybe<discussion_user_aggregate_order_by>;
  display_name?: Maybe<order_by>;
  email?: Maybe<order_by>;
  email_verified_at?: Maybe<order_by>;
  full_name?: Maybe<order_by>;
  gender?: Maybe<order_by>;
  guests_aggregate?: Maybe<guests_aggregate_order_by>;
  inbox?: Maybe<user_inbox_order_by>;
  last_read_announcement_at?: Maybe<order_by>;
  last_seen_at?: Maybe<order_by>;
  locale?: Maybe<order_by>;
  logs_aggregate?: Maybe<logs_aggregate_order_by>;
  mobile_no?: Maybe<order_by>;
  mobile_verified_at?: Maybe<order_by>;
  model_has_comments_aggregate?: Maybe<model_has_comments_aggregate_order_by>;
  model_has_likes_aggregate?: Maybe<model_has_likes_aggregate_order_by>;
  nationality?: Maybe<order_by>;
  notifications_aggregate?: Maybe<notifications_aggregate_order_by>;
  passes_aggregate?: Maybe<passes_aggregate_order_by>;
  password?: Maybe<order_by>;
  posts_aggregate?: Maybe<posts_aggregate_order_by>;
  requests_aggregate?: Maybe<requests_aggregate_order_by>;
  reviews_aggregate?: Maybe<reviews_aggregate_order_by>;
  roles_aggregate?: Maybe<user_roles_aggregate_order_by>;
  socialRelationshipsByFollowerUuid_aggregate?: Maybe<social_relationships_aggregate_order_by>;
  social_relationships_aggregate?: Maybe<social_relationships_aggregate_order_by>;
  spaces_usages_aggregate?: Maybe<spaces_usage_aggregate_order_by>;
  stripe_id?: Maybe<order_by>;
  subscriptions_aggregate?: Maybe<user_subscriptions_aggregate_order_by>;
  teamMembershipsByUserUuid_aggregate?: Maybe<team_memberships_aggregate_order_by>;
  team_memberships_aggregate?: Maybe<team_memberships_aggregate_order_by>;
  timezone?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_has_reservations_aggregate?: Maybe<user_has_reservations_aggregate_order_by>;
  username?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
  wishlists_aggregate?: Maybe<wishlist_aggregate_order_by>;
}

/** primary key columns input for table: users */
export interface users_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "users" */
export enum users_select_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  billing_address = "billing_address",
  /** column name */
  billing_address_2 = "billing_address_2",
  /** column name */
  billing_city = "billing_city",
  /** column name */
  billing_country_code = "billing_country_code",
  /** column name */
  billing_state = "billing_state",
  /** column name */
  billing_zip = "billing_zip",
  /** column name */
  bio = "bio",
  /** column name */
  country_birth_code = "country_birth_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  date_birth = "date_birth",
  /** column name */
  display_name = "display_name",
  /** column name */
  email = "email",
  /** column name */
  email_verified_at = "email_verified_at",
  /** column name */
  full_name = "full_name",
  /** column name */
  gender = "gender",
  /** column name */
  last_read_announcement_at = "last_read_announcement_at",
  /** column name */
  last_seen_at = "last_seen_at",
  /** column name */
  locale = "locale",
  /** column name */
  mobile_no = "mobile_no",
  /** column name */
  mobile_verified_at = "mobile_verified_at",
  /** column name */
  nationality = "nationality",
  /** column name */
  password = "password",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  username = "username",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "users" */
export interface users_set_input {
  avatar_url?: Maybe<Scalars["String"]>;
  billing_address?: Maybe<Scalars["String"]>;
  billing_address_2?: Maybe<Scalars["String"]>;
  billing_city?: Maybe<Scalars["String"]>;
  billing_country_code?: Maybe<Scalars["String"]>;
  billing_state?: Maybe<Scalars["String"]>;
  billing_zip?: Maybe<Scalars["String"]>;
  bio?: Maybe<Scalars["String"]>;
  country_birth_code?: Maybe<Scalars["String"]>;
  created_at?: Maybe<Scalars["timestamptz"]>;
  currency_code?: Maybe<Scalars["bpchar"]>;
  date_birth?: Maybe<Scalars["date"]>;
  display_name?: Maybe<Scalars["String"]>;
  email?: Maybe<Scalars["String"]>;
  email_verified_at?: Maybe<Scalars["timestamptz"]>;
  full_name?: Maybe<Scalars["String"]>;
  gender?: Maybe<Scalars["String"]>;
  last_read_announcement_at?: Maybe<Scalars["timestamptz"]>;
  last_seen_at?: Maybe<Scalars["timestamptz"]>;
  locale?: Maybe<Scalars["bpchar"]>;
  mobile_no?: Maybe<Scalars["String"]>;
  mobile_verified_at?: Maybe<Scalars["timestamptz"]>;
  nationality?: Maybe<Scalars["String"]>;
  password?: Maybe<Scalars["String"]>;
  stripe_id?: Maybe<Scalars["String"]>;
  timezone?: Maybe<Scalars["String"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  username?: Maybe<Scalars["String"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "users" */
export enum users_update_column {
  /** column name */
  avatar_url = "avatar_url",
  /** column name */
  billing_address = "billing_address",
  /** column name */
  billing_address_2 = "billing_address_2",
  /** column name */
  billing_city = "billing_city",
  /** column name */
  billing_country_code = "billing_country_code",
  /** column name */
  billing_state = "billing_state",
  /** column name */
  billing_zip = "billing_zip",
  /** column name */
  bio = "bio",
  /** column name */
  country_birth_code = "country_birth_code",
  /** column name */
  created_at = "created_at",
  /** column name */
  currency_code = "currency_code",
  /** column name */
  date_birth = "date_birth",
  /** column name */
  display_name = "display_name",
  /** column name */
  email = "email",
  /** column name */
  email_verified_at = "email_verified_at",
  /** column name */
  full_name = "full_name",
  /** column name */
  gender = "gender",
  /** column name */
  last_read_announcement_at = "last_read_announcement_at",
  /** column name */
  last_seen_at = "last_seen_at",
  /** column name */
  locale = "locale",
  /** column name */
  mobile_no = "mobile_no",
  /** column name */
  mobile_verified_at = "mobile_verified_at",
  /** column name */
  nationality = "nationality",
  /** column name */
  password = "password",
  /** column name */
  stripe_id = "stripe_id",
  /** column name */
  timezone = "timezone",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  username = "username",
  /** column name */
  uuid = "uuid",
}

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export interface uuid_comparison_exp {
  _eq?: Maybe<Scalars["uuid"]>;
  _gt?: Maybe<Scalars["uuid"]>;
  _gte?: Maybe<Scalars["uuid"]>;
  _in?: Maybe<Array<Scalars["uuid"]>>;
  _is_null?: Maybe<Scalars["Boolean"]>;
  _lt?: Maybe<Scalars["uuid"]>;
  _lte?: Maybe<Scalars["uuid"]>;
  _neq?: Maybe<Scalars["uuid"]>;
  _nin?: Maybe<Array<Scalars["uuid"]>>;
}

/** order by aggregate values of table "wishlist" */
export interface wishlist_aggregate_order_by {
  count?: Maybe<order_by>;
  max?: Maybe<wishlist_max_order_by>;
  min?: Maybe<wishlist_min_order_by>;
}

/** input type for inserting array relation for remote table "wishlist" */
export interface wishlist_arr_rel_insert_input {
  data: Array<wishlist_insert_input>;
  /** on conflict condition */
  on_conflict?: Maybe<wishlist_on_conflict>;
}

/** Boolean expression to filter rows from the table "wishlist". All fields are combined with a logical 'AND'. */
export interface wishlist_bool_exp {
  _and?: Maybe<Array<wishlist_bool_exp>>;
  _not?: Maybe<wishlist_bool_exp>;
  _or?: Maybe<Array<wishlist_bool_exp>>;
  created_at?: Maybe<timestamptz_comparison_exp>;
  model_type?: Maybe<String_comparison_exp>;
  model_uuid?: Maybe<uuid_comparison_exp>;
  updated_at?: Maybe<timestamptz_comparison_exp>;
  user?: Maybe<users_bool_exp>;
  user_uuid?: Maybe<uuid_comparison_exp>;
  uuid?: Maybe<uuid_comparison_exp>;
}

/** unique or primary key constraints on table "wishlist" */
export enum wishlist_constraint {
  /** unique or primary key constraint */
  wishlist_pkey = "wishlist_pkey",
}

/** input type for inserting data into table "wishlist" */
export interface wishlist_insert_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user?: Maybe<users_obj_rel_insert_input>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** order by max() on columns of table "wishlist" */
export interface wishlist_max_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** order by min() on columns of table "wishlist" */
export interface wishlist_min_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** on conflict condition type for table "wishlist" */
export interface wishlist_on_conflict {
  constraint: wishlist_constraint;
  update_columns?: Array<wishlist_update_column>;
  where?: Maybe<wishlist_bool_exp>;
}

/** Ordering options when selecting data from "wishlist". */
export interface wishlist_order_by {
  created_at?: Maybe<order_by>;
  model_type?: Maybe<order_by>;
  model_uuid?: Maybe<order_by>;
  updated_at?: Maybe<order_by>;
  user?: Maybe<users_order_by>;
  user_uuid?: Maybe<order_by>;
  uuid?: Maybe<order_by>;
}

/** primary key columns input for table: wishlist */
export interface wishlist_pk_columns_input {
  uuid: Scalars["uuid"];
}

/** select columns of table "wishlist" */
export enum wishlist_select_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

/** input type for updating data in table "wishlist" */
export interface wishlist_set_input {
  created_at?: Maybe<Scalars["timestamptz"]>;
  model_type?: Maybe<Scalars["String"]>;
  model_uuid?: Maybe<Scalars["uuid"]>;
  updated_at?: Maybe<Scalars["timestamptz"]>;
  user_uuid?: Maybe<Scalars["uuid"]>;
  uuid?: Maybe<Scalars["uuid"]>;
}

/** update columns of table "wishlist" */
export enum wishlist_update_column {
  /** column name */
  created_at = "created_at",
  /** column name */
  model_type = "model_type",
  /** column name */
  model_uuid = "model_uuid",
  /** column name */
  updated_at = "updated_at",
  /** column name */
  user_uuid = "user_uuid",
  /** column name */
  uuid = "uuid",
}

export const scalarsEnumsHash: import("gqless").ScalarsEnumsHash = {
  Boolean: true,
  Float: true,
  Int: true,
  String: true,
  activity_logs_constraint: true,
  activity_logs_select_column: true,
  activity_logs_update_column: true,
  aruba_wifi_access_constraint: true,
  aruba_wifi_access_select_column: true,
  aruba_wifi_access_update_column: true,
  auth_audit_log_entries_constraint: true,
  auth_audit_log_entries_select_column: true,
  auth_audit_log_entries_update_column: true,
  auth_instances_constraint: true,
  auth_instances_select_column: true,
  auth_instances_update_column: true,
  auth_refresh_tokens_constraint: true,
  auth_refresh_tokens_select_column: true,
  auth_refresh_tokens_update_column: true,
  auth_schema_migrations_constraint: true,
  auth_schema_migrations_select_column: true,
  auth_schema_migrations_update_column: true,
  auth_users_constraint: true,
  auth_users_select_column: true,
  auth_users_update_column: true,
  bigint: true,
  bpchar: true,
  brand_campaigns_constraint: true,
  brand_campaigns_select_column: true,
  brand_campaigns_update_column: true,
  brand_discussions_select_column: true,
  brand_inbox_select_column: true,
  brand_media_select_column: true,
  brand_tags_select_column: true,
  brand_users_constraint: true,
  brand_users_select_column: true,
  brand_users_update_column: true,
  brand_wishes_select_column: true,
  brands_constraint: true,
  brands_select_column: true,
  brands_update_column: true,
  campaigns_constraint: true,
  campaigns_select_column: true,
  campaigns_update_column: true,
  card_constraint: true,
  card_select_column: true,
  card_update_column: true,
  comment_comments_select_column: true,
  comment_likes_select_column: true,
  conversations_constraint: true,
  conversations_select_column: true,
  conversations_update_column: true,
  currencies_constraint: true,
  currencies_select_column: true,
  currencies_update_column: true,
  daily_rates_constraint: true,
  daily_rates_select_column: true,
  daily_rates_update_column: true,
  date: true,
  default_addons_constraint: true,
  default_addons_select_column: true,
  default_addons_update_column: true,
  discount_codes_constraint: true,
  discount_codes_select_column: true,
  discount_codes_update_column: true,
  discussion_user_select_column: true,
  discussions_constraint: true,
  discussions_select_column: true,
  discussions_update_column: true,
  extensions_constraint: true,
  extensions_geography_columns_select_column: true,
  extensions_geometry_columns_select_column: true,
  extensions_pg_stat_statements_select_column: true,
  extensions_select_column: true,
  extensions_spatial_ref_sys_constraint: true,
  extensions_spatial_ref_sys_select_column: true,
  extensions_spatial_ref_sys_update_column: true,
  extensions_update_column: true,
  float8: true,
  floor_plan_grid_constraint: true,
  floor_plan_grid_select_column: true,
  floor_plan_grid_update_column: true,
  floor_plans_constraint: true,
  floor_plans_select_column: true,
  floor_plans_update_column: true,
  guest_questionaires_answers_constraint: true,
  guest_questionaires_answers_select_column: true,
  guest_questionaires_answers_update_column: true,
  guests_constraint: true,
  guests_has_questionaires_constraint: true,
  guests_has_questionaires_select_column: true,
  guests_has_questionaires_update_column: true,
  guests_select_column: true,
  guests_update_column: true,
  inboxes_constraint: true,
  inboxes_select_column: true,
  inboxes_update_column: true,
  invoice_constraint: true,
  invoice_select_column: true,
  invoice_update_column: true,
  json: true,
  jsonb: true,
  key_performance_snapshots_constraint: true,
  key_performance_snapshots_select_column: true,
  key_performance_snapshots_update_column: true,
  listing_categories_constraint: true,
  listing_categories_select_column: true,
  listing_categories_update_column: true,
  listing_collections_constraint: true,
  listing_collections_select_column: true,
  listing_collections_update_column: true,
  listing_discussions_select_column: true,
  listing_in_collections_select_column: true,
  listing_media_select_column: true,
  listing_tags_select_column: true,
  listing_wishes_select_column: true,
  listings_constraint: true,
  listings_select_column: true,
  listings_update_column: true,
  logs_constraint: true,
  logs_select_column: true,
  logs_update_column: true,
  media_constraint: true,
  media_select_column: true,
  media_update_column: true,
  messages_constraint: true,
  messages_select_column: true,
  messages_update_column: true,
  model_has_comments_constraint: true,
  model_has_comments_select_column: true,
  model_has_comments_update_column: true,
  model_has_likes_select_column: true,
  model_has_permissions_select_column: true,
  model_has_roles_select_column: true,
  model_has_tags_constraint: true,
  model_has_tags_select_column: true,
  model_has_tags_update_column: true,
  name: true,
  notifications_constraint: true,
  notifications_select_column: true,
  notifications_update_column: true,
  numeric: true,
  oid: true,
  order_by: true,
  outlet_has_addons_constraint: true,
  outlet_has_addons_select_column: true,
  outlet_has_addons_update_column: true,
  outlets_constraint: true,
  outlets_select_column: true,
  outlets_update_column: true,
  passes_activity_logs_select_column: true,
  passes_constraint: true,
  passes_select_column: true,
  passes_update_column: true,
  payments_constraint: true,
  payments_select_column: true,
  payments_update_column: true,
  permissions_constraint: true,
  permissions_select_column: true,
  permissions_update_column: true,
  post_comments_select_column: true,
  post_likes_select_column: true,
  posts_constraint: true,
  posts_select_column: true,
  posts_update_column: true,
  questionaires_constraint: true,
  questionaires_select_column: true,
  questionaires_update_column: true,
  questions_constraint: true,
  questions_select_column: true,
  questions_update_column: true,
  requests_constraint: true,
  requests_select_column: true,
  requests_update_column: true,
  reservations_activity_logs_select_column: true,
  reservations_constraint: true,
  reservations_select_column: true,
  reservations_update_column: true,
  review_comments_select_column: true,
  review_likes_select_column: true,
  review_media_select_column: true,
  reviews_constraint: true,
  reviews_select_column: true,
  reviews_update_column: true,
  role_has_permissions_select_column: true,
  roles_constraint: true,
  roles_select_column: true,
  roles_update_column: true,
  smallint: true,
  social_relationships_constraint: true,
  social_relationships_select_column: true,
  social_relationships_update_column: true,
  spaces_constraint: true,
  spaces_guests_constraint: true,
  spaces_guests_select_column: true,
  spaces_guests_update_column: true,
  spaces_select_column: true,
  spaces_update_column: true,
  spaces_usage_constraint: true,
  spaces_usage_select_column: true,
  spaces_usage_update_column: true,
  storage_buckets_constraint: true,
  storage_buckets_select_column: true,
  storage_buckets_update_column: true,
  stripe_transfers_constraint: true,
  stripe_transfers_select_column: true,
  stripe_transfers_update_column: true,
  subscriptions_constraint: true,
  subscriptions_select_column: true,
  subscriptions_update_column: true,
  supabase_functions_hooks_constraint: true,
  supabase_functions_hooks_select_column: true,
  supabase_functions_hooks_update_column: true,
  tags_constraint: true,
  tags_select_column: true,
  tags_update_column: true,
  team_memberships_constraint: true,
  team_memberships_select_column: true,
  team_memberships_update_column: true,
  team_roles_select_column: true,
  team_schedules_constraint: true,
  team_schedules_select_column: true,
  team_schedules_update_column: true,
  team_subscriptions_select_column: true,
  teams_constraint: true,
  teams_select_column: true,
  teams_update_column: true,
  timestamptz: true,
  user_has_reservations_constraint: true,
  user_has_reservations_select_column: true,
  user_has_reservations_update_column: true,
  user_inbox_select_column: true,
  user_media_select_column: true,
  user_roles_select_column: true,
  user_sessions_constraint: true,
  user_sessions_select_column: true,
  user_sessions_update_column: true,
  user_subscriptions_select_column: true,
  users_constraint: true,
  users_select_column: true,
  users_update_column: true,
  uuid: true,
  wishlist_constraint: true,
  wishlist_select_column: true,
  wishlist_update_column: true,
};
export const generatedSchema = {
  query: {
    __typename: { __type: "String!" },
    activity_logs: {
      __type: "[activity_logs!]!",
      __args: {
        distinct_on: "[activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[activity_logs_order_by!]",
        where: "activity_logs_bool_exp",
      },
    },
    activity_logs_aggregate: {
      __type: "activity_logs_aggregate!",
      __args: {
        distinct_on: "[activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[activity_logs_order_by!]",
        where: "activity_logs_bool_exp",
      },
    },
    activity_logs_by_pk: { __type: "activity_logs", __args: { uuid: "uuid!" } },
    aruba_wifi_access: {
      __type: "[aruba_wifi_access!]!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_access_aggregate: {
      __type: "aruba_wifi_access_aggregate!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_access_by_pk: {
      __type: "aruba_wifi_access",
      __args: { uuid: "uuid!" },
    },
    auth_audit_log_entries: {
      __type: "[auth_audit_log_entries!]!",
      __args: {
        distinct_on: "[auth_audit_log_entries_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_audit_log_entries_order_by!]",
        where: "auth_audit_log_entries_bool_exp",
      },
    },
    auth_audit_log_entries_aggregate: {
      __type: "auth_audit_log_entries_aggregate!",
      __args: {
        distinct_on: "[auth_audit_log_entries_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_audit_log_entries_order_by!]",
        where: "auth_audit_log_entries_bool_exp",
      },
    },
    auth_audit_log_entries_by_pk: {
      __type: "auth_audit_log_entries",
      __args: { id: "uuid!" },
    },
    auth_instances: {
      __type: "[auth_instances!]!",
      __args: {
        distinct_on: "[auth_instances_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_instances_order_by!]",
        where: "auth_instances_bool_exp",
      },
    },
    auth_instances_aggregate: {
      __type: "auth_instances_aggregate!",
      __args: {
        distinct_on: "[auth_instances_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_instances_order_by!]",
        where: "auth_instances_bool_exp",
      },
    },
    auth_instances_by_pk: { __type: "auth_instances", __args: { id: "uuid!" } },
    auth_refresh_tokens: {
      __type: "[auth_refresh_tokens!]!",
      __args: {
        distinct_on: "[auth_refresh_tokens_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_refresh_tokens_order_by!]",
        where: "auth_refresh_tokens_bool_exp",
      },
    },
    auth_refresh_tokens_aggregate: {
      __type: "auth_refresh_tokens_aggregate!",
      __args: {
        distinct_on: "[auth_refresh_tokens_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_refresh_tokens_order_by!]",
        where: "auth_refresh_tokens_bool_exp",
      },
    },
    auth_refresh_tokens_by_pk: {
      __type: "auth_refresh_tokens",
      __args: { id: "bigint!" },
    },
    auth_schema_migrations: {
      __type: "[auth_schema_migrations!]!",
      __args: {
        distinct_on: "[auth_schema_migrations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_schema_migrations_order_by!]",
        where: "auth_schema_migrations_bool_exp",
      },
    },
    auth_schema_migrations_aggregate: {
      __type: "auth_schema_migrations_aggregate!",
      __args: {
        distinct_on: "[auth_schema_migrations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_schema_migrations_order_by!]",
        where: "auth_schema_migrations_bool_exp",
      },
    },
    auth_schema_migrations_by_pk: {
      __type: "auth_schema_migrations",
      __args: { version: "String!" },
    },
    auth_users: {
      __type: "[auth_users!]!",
      __args: {
        distinct_on: "[auth_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_users_order_by!]",
        where: "auth_users_bool_exp",
      },
    },
    auth_users_aggregate: {
      __type: "auth_users_aggregate!",
      __args: {
        distinct_on: "[auth_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_users_order_by!]",
        where: "auth_users_bool_exp",
      },
    },
    auth_users_by_pk: { __type: "auth_users", __args: { id: "uuid!" } },
    brand_campaigns: {
      __type: "[brand_campaigns!]!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_aggregate: {
      __type: "brand_campaigns_aggregate!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_by_pk: {
      __type: "brand_campaigns",
      __args: { uuid: "uuid!" },
    },
    brand_discussions: {
      __type: "[brand_discussions!]!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    brand_discussions_aggregate: {
      __type: "brand_discussions_aggregate!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    brand_inbox: {
      __type: "[brand_inbox!]!",
      __args: {
        distinct_on: "[brand_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_inbox_order_by!]",
        where: "brand_inbox_bool_exp",
      },
    },
    brand_inbox_aggregate: {
      __type: "brand_inbox_aggregate!",
      __args: {
        distinct_on: "[brand_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_inbox_order_by!]",
        where: "brand_inbox_bool_exp",
      },
    },
    brand_media: {
      __type: "[brand_media!]!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    brand_media_aggregate: {
      __type: "brand_media_aggregate!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    brand_tags: {
      __type: "[brand_tags!]!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    brand_tags_aggregate: {
      __type: "brand_tags_aggregate!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    brand_users: {
      __type: "[brand_users!]!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_aggregate: {
      __type: "brand_users_aggregate!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_by_pk: { __type: "brand_users", __args: { uuid: "uuid!" } },
    brand_wishes: {
      __type: "[brand_wishes!]!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
    brand_wishes_aggregate: {
      __type: "brand_wishes_aggregate!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
    brands: {
      __type: "[brands!]!",
      __args: {
        distinct_on: "[brands_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brands_order_by!]",
        where: "brands_bool_exp",
      },
    },
    brands_aggregate: {
      __type: "brands_aggregate!",
      __args: {
        distinct_on: "[brands_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brands_order_by!]",
        where: "brands_bool_exp",
      },
    },
    brands_by_pk: { __type: "brands", __args: { uuid: "uuid!" } },
    campaigns: {
      __type: "[campaigns!]!",
      __args: {
        distinct_on: "[campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[campaigns_order_by!]",
        where: "campaigns_bool_exp",
      },
    },
    campaigns_aggregate: {
      __type: "campaigns_aggregate!",
      __args: {
        distinct_on: "[campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[campaigns_order_by!]",
        where: "campaigns_bool_exp",
      },
    },
    campaigns_by_pk: { __type: "campaigns", __args: { uuid: "uuid!" } },
    card: {
      __type: "[card!]!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    card_aggregate: {
      __type: "card_aggregate!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    card_by_pk: { __type: "card", __args: { uuid: "uuid!" } },
    comment_comments: {
      __type: "[comment_comments!]!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    comment_comments_aggregate: {
      __type: "comment_comments_aggregate!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    comment_likes: {
      __type: "[comment_likes!]!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    comment_likes_aggregate: {
      __type: "comment_likes_aggregate!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    conversations: {
      __type: "[conversations!]!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    conversations_aggregate: {
      __type: "conversations_aggregate!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    conversations_by_pk: { __type: "conversations", __args: { uuid: "uuid!" } },
    currencies: {
      __type: "[currencies!]!",
      __args: {
        distinct_on: "[currencies_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[currencies_order_by!]",
        where: "currencies_bool_exp",
      },
    },
    currencies_aggregate: {
      __type: "currencies_aggregate!",
      __args: {
        distinct_on: "[currencies_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[currencies_order_by!]",
        where: "currencies_bool_exp",
      },
    },
    currencies_by_pk: { __type: "currencies", __args: { uuid: "uuid!" } },
    daily_rates: {
      __type: "[daily_rates!]!",
      __args: {
        distinct_on: "[daily_rates_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[daily_rates_order_by!]",
        where: "daily_rates_bool_exp",
      },
    },
    daily_rates_aggregate: {
      __type: "daily_rates_aggregate!",
      __args: {
        distinct_on: "[daily_rates_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[daily_rates_order_by!]",
        where: "daily_rates_bool_exp",
      },
    },
    daily_rates_by_pk: { __type: "daily_rates", __args: { uuid: "uuid!" } },
    default_addons: {
      __type: "[default_addons!]!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    default_addons_aggregate: {
      __type: "default_addons_aggregate!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    default_addons_by_pk: {
      __type: "default_addons",
      __args: { uuid: "uuid!" },
    },
    discount_codes: {
      __type: "[discount_codes!]!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_aggregate: {
      __type: "discount_codes_aggregate!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_by_pk: {
      __type: "discount_codes",
      __args: { uuid: "uuid!" },
    },
    discussion_user: {
      __type: "[discussion_user!]!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussion_user_aggregate: {
      __type: "discussion_user_aggregate!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussions: {
      __type: "[discussions!]!",
      __args: {
        distinct_on: "[discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussions_order_by!]",
        where: "discussions_bool_exp",
      },
    },
    discussions_aggregate: {
      __type: "discussions_aggregate!",
      __args: {
        distinct_on: "[discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussions_order_by!]",
        where: "discussions_bool_exp",
      },
    },
    discussions_by_pk: { __type: "discussions", __args: { uuid: "uuid!" } },
    extensions: {
      __type: "[extensions!]!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    extensions_aggregate: {
      __type: "extensions_aggregate!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    extensions_by_pk: { __type: "extensions", __args: { id: "String!" } },
    extensions_geography_columns: {
      __type: "[extensions_geography_columns!]!",
      __args: {
        distinct_on: "[extensions_geography_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geography_columns_order_by!]",
        where: "extensions_geography_columns_bool_exp",
      },
    },
    extensions_geography_columns_aggregate: {
      __type: "extensions_geography_columns_aggregate!",
      __args: {
        distinct_on: "[extensions_geography_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geography_columns_order_by!]",
        where: "extensions_geography_columns_bool_exp",
      },
    },
    extensions_geometry_columns: {
      __type: "[extensions_geometry_columns!]!",
      __args: {
        distinct_on: "[extensions_geometry_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geometry_columns_order_by!]",
        where: "extensions_geometry_columns_bool_exp",
      },
    },
    extensions_geometry_columns_aggregate: {
      __type: "extensions_geometry_columns_aggregate!",
      __args: {
        distinct_on: "[extensions_geometry_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geometry_columns_order_by!]",
        where: "extensions_geometry_columns_bool_exp",
      },
    },
    extensions_pg_stat_statements: {
      __type: "[extensions_pg_stat_statements!]!",
      __args: {
        distinct_on: "[extensions_pg_stat_statements_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_pg_stat_statements_order_by!]",
        where: "extensions_pg_stat_statements_bool_exp",
      },
    },
    extensions_pg_stat_statements_aggregate: {
      __type: "extensions_pg_stat_statements_aggregate!",
      __args: {
        distinct_on: "[extensions_pg_stat_statements_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_pg_stat_statements_order_by!]",
        where: "extensions_pg_stat_statements_bool_exp",
      },
    },
    extensions_spatial_ref_sys: {
      __type: "[extensions_spatial_ref_sys!]!",
      __args: {
        distinct_on: "[extensions_spatial_ref_sys_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_spatial_ref_sys_order_by!]",
        where: "extensions_spatial_ref_sys_bool_exp",
      },
    },
    extensions_spatial_ref_sys_aggregate: {
      __type: "extensions_spatial_ref_sys_aggregate!",
      __args: {
        distinct_on: "[extensions_spatial_ref_sys_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_spatial_ref_sys_order_by!]",
        where: "extensions_spatial_ref_sys_bool_exp",
      },
    },
    extensions_spatial_ref_sys_by_pk: {
      __type: "extensions_spatial_ref_sys",
      __args: { srid: "Int!" },
    },
    floor_plan_grid: {
      __type: "[floor_plan_grid!]!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    floor_plan_grid_aggregate: {
      __type: "floor_plan_grid_aggregate!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    floor_plan_grid_by_pk: {
      __type: "floor_plan_grid",
      __args: { uuid: "uuid!" },
    },
    floor_plans: {
      __type: "[floor_plans!]!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_aggregate: {
      __type: "floor_plans_aggregate!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_by_pk: { __type: "floor_plans", __args: { uuid: "uuid!" } },
    guest_questionaires_answers: {
      __type: "[guest_questionaires_answers!]!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_by_pk: {
      __type: "guest_questionaires_answers",
      __args: { uuid: "uuid!" },
    },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_by_pk: { __type: "guests", __args: { uuid: "uuid!" } },
    guests_has_questionaires: {
      __type: "[guests_has_questionaires!]!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    guests_has_questionaires_aggregate: {
      __type: "guests_has_questionaires_aggregate!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    guests_has_questionaires_by_pk: {
      __type: "guests_has_questionaires",
      __args: { uuid: "uuid!" },
    },
    inboxes: {
      __type: "[inboxes!]!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_aggregate: {
      __type: "inboxes_aggregate!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_by_pk: { __type: "inboxes", __args: { uuid: "uuid!" } },
    invoice: {
      __type: "[invoice!]!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    invoice_aggregate: {
      __type: "invoice_aggregate!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    invoice_by_pk: { __type: "invoice", __args: { uuid: "uuid!" } },
    key_performance_snapshots: {
      __type: "[key_performance_snapshots!]!",
      __args: {
        distinct_on: "[key_performance_snapshots_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[key_performance_snapshots_order_by!]",
        where: "key_performance_snapshots_bool_exp",
      },
    },
    key_performance_snapshots_aggregate: {
      __type: "key_performance_snapshots_aggregate!",
      __args: {
        distinct_on: "[key_performance_snapshots_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[key_performance_snapshots_order_by!]",
        where: "key_performance_snapshots_bool_exp",
      },
    },
    key_performance_snapshots_by_pk: {
      __type: "key_performance_snapshots",
      __args: { uuid: "uuid!" },
    },
    listing_categories: {
      __type: "[listing_categories!]!",
      __args: {
        distinct_on: "[listing_categories_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_categories_order_by!]",
        where: "listing_categories_bool_exp",
      },
    },
    listing_categories_aggregate: {
      __type: "listing_categories_aggregate!",
      __args: {
        distinct_on: "[listing_categories_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_categories_order_by!]",
        where: "listing_categories_bool_exp",
      },
    },
    listing_categories_by_pk: {
      __type: "listing_categories",
      __args: { uuid: "uuid!" },
    },
    listing_collections: {
      __type: "[listing_collections!]!",
      __args: {
        distinct_on: "[listing_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_collections_order_by!]",
        where: "listing_collections_bool_exp",
      },
    },
    listing_collections_aggregate: {
      __type: "listing_collections_aggregate!",
      __args: {
        distinct_on: "[listing_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_collections_order_by!]",
        where: "listing_collections_bool_exp",
      },
    },
    listing_collections_by_pk: {
      __type: "listing_collections",
      __args: { uuid: "uuid!" },
    },
    listing_discussions: {
      __type: "[listing_discussions!]!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    listing_discussions_aggregate: {
      __type: "listing_discussions_aggregate!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    listing_in_collections: {
      __type: "[listing_in_collections!]!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_media: {
      __type: "[listing_media!]!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    listing_media_aggregate: {
      __type: "listing_media_aggregate!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    listing_tags: {
      __type: "[listing_tags!]!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    listing_tags_aggregate: {
      __type: "listing_tags_aggregate!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    listing_wishes: {
      __type: "[listing_wishes!]!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
    listing_wishes_aggregate: {
      __type: "listing_wishes_aggregate!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
    listings: {
      __type: "[listings!]!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_aggregate: {
      __type: "listings_aggregate!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_by_pk: { __type: "listings", __args: { uuid: "uuid!" } },
    logs: {
      __type: "[logs!]!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    logs_aggregate: {
      __type: "logs_aggregate!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    logs_by_pk: { __type: "logs", __args: { uuid: "uuid!" } },
    media: {
      __type: "[media!]!",
      __args: {
        distinct_on: "[media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[media_order_by!]",
        where: "media_bool_exp",
      },
    },
    media_aggregate: {
      __type: "media_aggregate!",
      __args: {
        distinct_on: "[media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[media_order_by!]",
        where: "media_bool_exp",
      },
    },
    media_by_pk: { __type: "media", __args: { uuid: "uuid!" } },
    messages: {
      __type: "[messages!]!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    messages_aggregate: {
      __type: "messages_aggregate!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    messages_by_pk: { __type: "messages", __args: { uuid: "uuid!" } },
    model_has_comments: {
      __type: "[model_has_comments!]!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_comments_aggregate: {
      __type: "model_has_comments_aggregate!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_comments_by_pk: {
      __type: "model_has_comments",
      __args: { uuid: "uuid!" },
    },
    model_has_likes: {
      __type: "[model_has_likes!]!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    model_has_likes_aggregate: {
      __type: "model_has_likes_aggregate!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    model_has_permissions: {
      __type: "[model_has_permissions!]!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    model_has_permissions_aggregate: {
      __type: "model_has_permissions_aggregate!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    model_has_roles: {
      __type: "[model_has_roles!]!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    model_has_roles_aggregate: {
      __type: "model_has_roles_aggregate!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    model_has_tags: {
      __type: "[model_has_tags!]!",
      __args: {
        distinct_on: "[model_has_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_tags_order_by!]",
        where: "model_has_tags_bool_exp",
      },
    },
    model_has_tags_aggregate: {
      __type: "model_has_tags_aggregate!",
      __args: {
        distinct_on: "[model_has_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_tags_order_by!]",
        where: "model_has_tags_bool_exp",
      },
    },
    model_has_tags_by_pk: {
      __type: "model_has_tags",
      __args: { tag_uuid: "uuid!" },
    },
    notifications: {
      __type: "[notifications!]!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    notifications_aggregate: {
      __type: "notifications_aggregate!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    notifications_by_pk: { __type: "notifications", __args: { uuid: "uuid!" } },
    outlet_has_addons: {
      __type: "[outlet_has_addons!]!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    outlet_has_addons_aggregate: {
      __type: "outlet_has_addons_aggregate!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    outlet_has_addons_by_pk: {
      __type: "outlet_has_addons",
      __args: { outlet_uuid: "uuid!" },
    },
    outlets: {
      __type: "[outlets!]!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    outlets_aggregate: {
      __type: "outlets_aggregate!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    outlets_by_pk: { __type: "outlets", __args: { uuid: "uuid!" } },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_activity_logs: {
      __type: "[passes_activity_logs!]!",
      __args: {
        distinct_on: "[passes_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_activity_logs_order_by!]",
        where: "passes_activity_logs_bool_exp",
      },
    },
    passes_activity_logs_aggregate: {
      __type: "passes_activity_logs_aggregate!",
      __args: {
        distinct_on: "[passes_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_activity_logs_order_by!]",
        where: "passes_activity_logs_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_by_pk: { __type: "passes", __args: { uuid: "uuid!" } },
    payments: {
      __type: "[payments!]!",
      __args: {
        distinct_on: "[payments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[payments_order_by!]",
        where: "payments_bool_exp",
      },
    },
    payments_aggregate: {
      __type: "payments_aggregate!",
      __args: {
        distinct_on: "[payments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[payments_order_by!]",
        where: "payments_bool_exp",
      },
    },
    payments_by_pk: { __type: "payments", __args: { id: "uuid!" } },
    permissions: {
      __type: "[permissions!]!",
      __args: {
        distinct_on: "[permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[permissions_order_by!]",
        where: "permissions_bool_exp",
      },
    },
    permissions_aggregate: {
      __type: "permissions_aggregate!",
      __args: {
        distinct_on: "[permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[permissions_order_by!]",
        where: "permissions_bool_exp",
      },
    },
    permissions_by_pk: { __type: "permissions", __args: { uuid: "uuid!" } },
    post_comments: {
      __type: "[post_comments!]!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    post_comments_aggregate: {
      __type: "post_comments_aggregate!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    post_likes: {
      __type: "[post_likes!]!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    post_likes_aggregate: {
      __type: "post_likes_aggregate!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    posts: {
      __type: "[posts!]!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_aggregate: {
      __type: "posts_aggregate!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_by_pk: { __type: "posts", __args: { uuid: "uuid!" } },
    questionaires: {
      __type: "[questionaires!]!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    questionaires_aggregate: {
      __type: "questionaires_aggregate!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    questionaires_by_pk: { __type: "questionaires", __args: { uuid: "uuid!" } },
    questions: {
      __type: "[questions!]!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    questions_aggregate: {
      __type: "questions_aggregate!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    questions_by_pk: { __type: "questions", __args: { uuid: "uuid!" } },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_by_pk: { __type: "requests", __args: { uuid: "uuid!" } },
    reservations: {
      __type: "[reservations!]!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_activity_logs: {
      __type: "[reservations_activity_logs!]!",
      __args: {
        distinct_on: "[reservations_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_activity_logs_order_by!]",
        where: "reservations_activity_logs_bool_exp",
      },
    },
    reservations_activity_logs_aggregate: {
      __type: "reservations_activity_logs_aggregate!",
      __args: {
        distinct_on: "[reservations_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_activity_logs_order_by!]",
        where: "reservations_activity_logs_bool_exp",
      },
    },
    reservations_aggregate: {
      __type: "reservations_aggregate!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_by_pk: { __type: "reservations", __args: { uuid: "uuid!" } },
    review_comments: {
      __type: "[review_comments!]!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    review_comments_aggregate: {
      __type: "review_comments_aggregate!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    review_likes: {
      __type: "[review_likes!]!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    review_likes_aggregate: {
      __type: "review_likes_aggregate!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    review_media: {
      __type: "[review_media!]!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    review_media_aggregate: {
      __type: "review_media_aggregate!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_by_pk: { __type: "reviews", __args: { uuid: "uuid!" } },
    role_has_permissions: {
      __type: "[role_has_permissions!]!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    roles: {
      __type: "[roles!]!",
      __args: {
        distinct_on: "[roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[roles_order_by!]",
        where: "roles_bool_exp",
      },
    },
    roles_aggregate: {
      __type: "roles_aggregate!",
      __args: {
        distinct_on: "[roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[roles_order_by!]",
        where: "roles_bool_exp",
      },
    },
    roles_by_pk: { __type: "roles", __args: { uuid: "uuid!" } },
    social_relationships: {
      __type: "[social_relationships!]!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships_aggregate: {
      __type: "social_relationships_aggregate!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships_by_pk: {
      __type: "social_relationships",
      __args: { uuid: "uuid!" },
    },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_by_pk: { __type: "spaces", __args: { uuid: "uuid!" } },
    spaces_guests: {
      __type: "[spaces_guests!]!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    spaces_guests_aggregate: {
      __type: "spaces_guests_aggregate!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    spaces_guests_by_pk: { __type: "spaces_guests", __args: { uuid: "uuid!" } },
    spaces_usage: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usage_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usage_by_pk: { __type: "spaces_usage", __args: { uuid: "uuid!" } },
    storage_buckets: {
      __type: "[storage_buckets!]!",
      __args: {
        distinct_on: "[storage_buckets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[storage_buckets_order_by!]",
        where: "storage_buckets_bool_exp",
      },
    },
    storage_buckets_aggregate: {
      __type: "storage_buckets_aggregate!",
      __args: {
        distinct_on: "[storage_buckets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[storage_buckets_order_by!]",
        where: "storage_buckets_bool_exp",
      },
    },
    storage_buckets_by_pk: {
      __type: "storage_buckets",
      __args: { id: "String!" },
    },
    stripe_transfers: {
      __type: "[stripe_transfers!]!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    stripe_transfers_aggregate: {
      __type: "stripe_transfers_aggregate!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    stripe_transfers_by_pk: {
      __type: "stripe_transfers",
      __args: { uuid: "uuid!" },
    },
    subscriptions: {
      __type: "[subscriptions!]!",
      __args: {
        distinct_on: "[subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[subscriptions_order_by!]",
        where: "subscriptions_bool_exp",
      },
    },
    subscriptions_aggregate: {
      __type: "subscriptions_aggregate!",
      __args: {
        distinct_on: "[subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[subscriptions_order_by!]",
        where: "subscriptions_bool_exp",
      },
    },
    subscriptions_by_pk: { __type: "subscriptions", __args: { uuid: "uuid!" } },
    supabase_functions_hooks: {
      __type: "[supabase_functions_hooks!]!",
      __args: {
        distinct_on: "[supabase_functions_hooks_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[supabase_functions_hooks_order_by!]",
        where: "supabase_functions_hooks_bool_exp",
      },
    },
    supabase_functions_hooks_aggregate: {
      __type: "supabase_functions_hooks_aggregate!",
      __args: {
        distinct_on: "[supabase_functions_hooks_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[supabase_functions_hooks_order_by!]",
        where: "supabase_functions_hooks_bool_exp",
      },
    },
    supabase_functions_hooks_by_pk: {
      __type: "supabase_functions_hooks",
      __args: { id: "bigint!" },
    },
    tags: {
      __type: "[tags!]!",
      __args: {
        distinct_on: "[tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[tags_order_by!]",
        where: "tags_bool_exp",
      },
    },
    tags_aggregate: {
      __type: "tags_aggregate!",
      __args: {
        distinct_on: "[tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[tags_order_by!]",
        where: "tags_bool_exp",
      },
    },
    tags_by_pk: { __type: "tags", __args: { uuid: "uuid!" } },
    team_memberships: {
      __type: "[team_memberships!]!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_by_pk: {
      __type: "team_memberships",
      __args: { uuid: "uuid!" },
    },
    team_roles: {
      __type: "[team_roles!]!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    team_roles_aggregate: {
      __type: "team_roles_aggregate!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    team_schedules: {
      __type: "[team_schedules!]!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_aggregate: {
      __type: "team_schedules_aggregate!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_by_pk: {
      __type: "team_schedules",
      __args: { uuid: "uuid!" },
    },
    team_subscriptions: {
      __type: "[team_subscriptions!]!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    team_subscriptions_aggregate: {
      __type: "team_subscriptions_aggregate!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    teams: {
      __type: "[teams!]!",
      __args: {
        distinct_on: "[teams_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[teams_order_by!]",
        where: "teams_bool_exp",
      },
    },
    teams_aggregate: {
      __type: "teams_aggregate!",
      __args: {
        distinct_on: "[teams_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[teams_order_by!]",
        where: "teams_bool_exp",
      },
    },
    teams_by_pk: { __type: "teams", __args: { uuid: "uuid!" } },
    user_has_reservations: {
      __type: "[user_has_reservations!]!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    user_has_reservations_aggregate: {
      __type: "user_has_reservations_aggregate!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    user_has_reservations_by_pk: {
      __type: "user_has_reservations",
      __args: { reservation_uuid: "uuid!" },
    },
    user_inbox: {
      __type: "[user_inbox!]!",
      __args: {
        distinct_on: "[user_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_inbox_order_by!]",
        where: "user_inbox_bool_exp",
      },
    },
    user_inbox_aggregate: {
      __type: "user_inbox_aggregate!",
      __args: {
        distinct_on: "[user_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_inbox_order_by!]",
        where: "user_inbox_bool_exp",
      },
    },
    user_media: {
      __type: "[user_media!]!",
      __args: {
        distinct_on: "[user_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_media_order_by!]",
        where: "user_media_bool_exp",
      },
    },
    user_media_aggregate: {
      __type: "user_media_aggregate!",
      __args: {
        distinct_on: "[user_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_media_order_by!]",
        where: "user_media_bool_exp",
      },
    },
    user_roles: {
      __type: "[user_roles!]!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    user_roles_aggregate: {
      __type: "user_roles_aggregate!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    user_sessions: {
      __type: "[user_sessions!]!",
      __args: {
        distinct_on: "[user_sessions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_sessions_order_by!]",
        where: "user_sessions_bool_exp",
      },
    },
    user_sessions_aggregate: {
      __type: "user_sessions_aggregate!",
      __args: {
        distinct_on: "[user_sessions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_sessions_order_by!]",
        where: "user_sessions_bool_exp",
      },
    },
    user_sessions_by_pk: { __type: "user_sessions", __args: { uuid: "uuid!" } },
    user_subscriptions: {
      __type: "[user_subscriptions!]!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    user_subscriptions_aggregate: {
      __type: "user_subscriptions_aggregate!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    users: {
      __type: "[users!]!",
      __args: {
        distinct_on: "[users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[users_order_by!]",
        where: "users_bool_exp",
      },
    },
    users_aggregate: {
      __type: "users_aggregate!",
      __args: {
        distinct_on: "[users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[users_order_by!]",
        where: "users_bool_exp",
      },
    },
    users_by_pk: { __type: "users", __args: { uuid: "uuid!" } },
    wishlist: {
      __type: "[wishlist!]!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
    wishlist_aggregate: {
      __type: "wishlist_aggregate!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
    wishlist_by_pk: { __type: "wishlist", __args: { uuid: "uuid!" } },
  },
  mutation: {
    __typename: { __type: "String!" },
    delete_activity_logs: {
      __type: "activity_logs_mutation_response",
      __args: { where: "activity_logs_bool_exp!" },
    },
    delete_activity_logs_by_pk: {
      __type: "activity_logs",
      __args: { uuid: "uuid!" },
    },
    delete_aruba_wifi_access: {
      __type: "aruba_wifi_access_mutation_response",
      __args: { where: "aruba_wifi_access_bool_exp!" },
    },
    delete_aruba_wifi_access_by_pk: {
      __type: "aruba_wifi_access",
      __args: { uuid: "uuid!" },
    },
    delete_auth_audit_log_entries: {
      __type: "auth_audit_log_entries_mutation_response",
      __args: { where: "auth_audit_log_entries_bool_exp!" },
    },
    delete_auth_audit_log_entries_by_pk: {
      __type: "auth_audit_log_entries",
      __args: { id: "uuid!" },
    },
    delete_auth_instances: {
      __type: "auth_instances_mutation_response",
      __args: { where: "auth_instances_bool_exp!" },
    },
    delete_auth_instances_by_pk: {
      __type: "auth_instances",
      __args: { id: "uuid!" },
    },
    delete_auth_refresh_tokens: {
      __type: "auth_refresh_tokens_mutation_response",
      __args: { where: "auth_refresh_tokens_bool_exp!" },
    },
    delete_auth_refresh_tokens_by_pk: {
      __type: "auth_refresh_tokens",
      __args: { id: "bigint!" },
    },
    delete_auth_schema_migrations: {
      __type: "auth_schema_migrations_mutation_response",
      __args: { where: "auth_schema_migrations_bool_exp!" },
    },
    delete_auth_schema_migrations_by_pk: {
      __type: "auth_schema_migrations",
      __args: { version: "String!" },
    },
    delete_auth_users: {
      __type: "auth_users_mutation_response",
      __args: { where: "auth_users_bool_exp!" },
    },
    delete_auth_users_by_pk: { __type: "auth_users", __args: { id: "uuid!" } },
    delete_brand_campaigns: {
      __type: "brand_campaigns_mutation_response",
      __args: { where: "brand_campaigns_bool_exp!" },
    },
    delete_brand_campaigns_by_pk: {
      __type: "brand_campaigns",
      __args: { uuid: "uuid!" },
    },
    delete_brand_discussions: {
      __type: "brand_discussions_mutation_response",
      __args: { where: "brand_discussions_bool_exp!" },
    },
    delete_brand_inbox: {
      __type: "brand_inbox_mutation_response",
      __args: { where: "brand_inbox_bool_exp!" },
    },
    delete_brand_media: {
      __type: "brand_media_mutation_response",
      __args: { where: "brand_media_bool_exp!" },
    },
    delete_brand_tags: {
      __type: "brand_tags_mutation_response",
      __args: { where: "brand_tags_bool_exp!" },
    },
    delete_brand_users: {
      __type: "brand_users_mutation_response",
      __args: { where: "brand_users_bool_exp!" },
    },
    delete_brand_users_by_pk: {
      __type: "brand_users",
      __args: { uuid: "uuid!" },
    },
    delete_brand_wishes: {
      __type: "brand_wishes_mutation_response",
      __args: { where: "brand_wishes_bool_exp!" },
    },
    delete_brands: {
      __type: "brands_mutation_response",
      __args: { where: "brands_bool_exp!" },
    },
    delete_brands_by_pk: { __type: "brands", __args: { uuid: "uuid!" } },
    delete_campaigns: {
      __type: "campaigns_mutation_response",
      __args: { where: "campaigns_bool_exp!" },
    },
    delete_campaigns_by_pk: { __type: "campaigns", __args: { uuid: "uuid!" } },
    delete_card: {
      __type: "card_mutation_response",
      __args: { where: "card_bool_exp!" },
    },
    delete_card_by_pk: { __type: "card", __args: { uuid: "uuid!" } },
    delete_comment_comments: {
      __type: "comment_comments_mutation_response",
      __args: { where: "comment_comments_bool_exp!" },
    },
    delete_comment_likes: {
      __type: "comment_likes_mutation_response",
      __args: { where: "comment_likes_bool_exp!" },
    },
    delete_conversations: {
      __type: "conversations_mutation_response",
      __args: { where: "conversations_bool_exp!" },
    },
    delete_conversations_by_pk: {
      __type: "conversations",
      __args: { uuid: "uuid!" },
    },
    delete_currencies: {
      __type: "currencies_mutation_response",
      __args: { where: "currencies_bool_exp!" },
    },
    delete_currencies_by_pk: {
      __type: "currencies",
      __args: { uuid: "uuid!" },
    },
    delete_daily_rates: {
      __type: "daily_rates_mutation_response",
      __args: { where: "daily_rates_bool_exp!" },
    },
    delete_daily_rates_by_pk: {
      __type: "daily_rates",
      __args: { uuid: "uuid!" },
    },
    delete_default_addons: {
      __type: "default_addons_mutation_response",
      __args: { where: "default_addons_bool_exp!" },
    },
    delete_default_addons_by_pk: {
      __type: "default_addons",
      __args: { uuid: "uuid!" },
    },
    delete_discount_codes: {
      __type: "discount_codes_mutation_response",
      __args: { where: "discount_codes_bool_exp!" },
    },
    delete_discount_codes_by_pk: {
      __type: "discount_codes",
      __args: { uuid: "uuid!" },
    },
    delete_discussion_user: {
      __type: "discussion_user_mutation_response",
      __args: { where: "discussion_user_bool_exp!" },
    },
    delete_discussions: {
      __type: "discussions_mutation_response",
      __args: { where: "discussions_bool_exp!" },
    },
    delete_discussions_by_pk: {
      __type: "discussions",
      __args: { uuid: "uuid!" },
    },
    delete_extensions: {
      __type: "extensions_mutation_response",
      __args: { where: "extensions_bool_exp!" },
    },
    delete_extensions_by_pk: {
      __type: "extensions",
      __args: { id: "String!" },
    },
    delete_extensions_geometry_columns: {
      __type: "extensions_geometry_columns_mutation_response",
      __args: { where: "extensions_geometry_columns_bool_exp!" },
    },
    delete_extensions_spatial_ref_sys: {
      __type: "extensions_spatial_ref_sys_mutation_response",
      __args: { where: "extensions_spatial_ref_sys_bool_exp!" },
    },
    delete_extensions_spatial_ref_sys_by_pk: {
      __type: "extensions_spatial_ref_sys",
      __args: { srid: "Int!" },
    },
    delete_floor_plan_grid: {
      __type: "floor_plan_grid_mutation_response",
      __args: { where: "floor_plan_grid_bool_exp!" },
    },
    delete_floor_plan_grid_by_pk: {
      __type: "floor_plan_grid",
      __args: { uuid: "uuid!" },
    },
    delete_floor_plans: {
      __type: "floor_plans_mutation_response",
      __args: { where: "floor_plans_bool_exp!" },
    },
    delete_floor_plans_by_pk: {
      __type: "floor_plans",
      __args: { uuid: "uuid!" },
    },
    delete_guest_questionaires_answers: {
      __type: "guest_questionaires_answers_mutation_response",
      __args: { where: "guest_questionaires_answers_bool_exp!" },
    },
    delete_guest_questionaires_answers_by_pk: {
      __type: "guest_questionaires_answers",
      __args: { uuid: "uuid!" },
    },
    delete_guests: {
      __type: "guests_mutation_response",
      __args: { where: "guests_bool_exp!" },
    },
    delete_guests_by_pk: { __type: "guests", __args: { uuid: "uuid!" } },
    delete_guests_has_questionaires: {
      __type: "guests_has_questionaires_mutation_response",
      __args: { where: "guests_has_questionaires_bool_exp!" },
    },
    delete_guests_has_questionaires_by_pk: {
      __type: "guests_has_questionaires",
      __args: { uuid: "uuid!" },
    },
    delete_inboxes: {
      __type: "inboxes_mutation_response",
      __args: { where: "inboxes_bool_exp!" },
    },
    delete_inboxes_by_pk: { __type: "inboxes", __args: { uuid: "uuid!" } },
    delete_invoice: {
      __type: "invoice_mutation_response",
      __args: { where: "invoice_bool_exp!" },
    },
    delete_invoice_by_pk: { __type: "invoice", __args: { uuid: "uuid!" } },
    delete_key_performance_snapshots: {
      __type: "key_performance_snapshots_mutation_response",
      __args: { where: "key_performance_snapshots_bool_exp!" },
    },
    delete_key_performance_snapshots_by_pk: {
      __type: "key_performance_snapshots",
      __args: { uuid: "uuid!" },
    },
    delete_listing_categories: {
      __type: "listing_categories_mutation_response",
      __args: { where: "listing_categories_bool_exp!" },
    },
    delete_listing_categories_by_pk: {
      __type: "listing_categories",
      __args: { uuid: "uuid!" },
    },
    delete_listing_collections: {
      __type: "listing_collections_mutation_response",
      __args: { where: "listing_collections_bool_exp!" },
    },
    delete_listing_collections_by_pk: {
      __type: "listing_collections",
      __args: { uuid: "uuid!" },
    },
    delete_listing_discussions: {
      __type: "listing_discussions_mutation_response",
      __args: { where: "listing_discussions_bool_exp!" },
    },
    delete_listing_in_collections: {
      __type: "listing_in_collections_mutation_response",
      __args: { where: "listing_in_collections_bool_exp!" },
    },
    delete_listing_media: {
      __type: "listing_media_mutation_response",
      __args: { where: "listing_media_bool_exp!" },
    },
    delete_listing_tags: {
      __type: "listing_tags_mutation_response",
      __args: { where: "listing_tags_bool_exp!" },
    },
    delete_listing_wishes: {
      __type: "listing_wishes_mutation_response",
      __args: { where: "listing_wishes_bool_exp!" },
    },
    delete_listings: {
      __type: "listings_mutation_response",
      __args: { where: "listings_bool_exp!" },
    },
    delete_listings_by_pk: { __type: "listings", __args: { uuid: "uuid!" } },
    delete_logs: {
      __type: "logs_mutation_response",
      __args: { where: "logs_bool_exp!" },
    },
    delete_logs_by_pk: { __type: "logs", __args: { uuid: "uuid!" } },
    delete_media: {
      __type: "media_mutation_response",
      __args: { where: "media_bool_exp!" },
    },
    delete_media_by_pk: { __type: "media", __args: { uuid: "uuid!" } },
    delete_messages: {
      __type: "messages_mutation_response",
      __args: { where: "messages_bool_exp!" },
    },
    delete_messages_by_pk: { __type: "messages", __args: { uuid: "uuid!" } },
    delete_model_has_comments: {
      __type: "model_has_comments_mutation_response",
      __args: { where: "model_has_comments_bool_exp!" },
    },
    delete_model_has_comments_by_pk: {
      __type: "model_has_comments",
      __args: { uuid: "uuid!" },
    },
    delete_model_has_likes: {
      __type: "model_has_likes_mutation_response",
      __args: { where: "model_has_likes_bool_exp!" },
    },
    delete_model_has_permissions: {
      __type: "model_has_permissions_mutation_response",
      __args: { where: "model_has_permissions_bool_exp!" },
    },
    delete_model_has_roles: {
      __type: "model_has_roles_mutation_response",
      __args: { where: "model_has_roles_bool_exp!" },
    },
    delete_model_has_tags: {
      __type: "model_has_tags_mutation_response",
      __args: { where: "model_has_tags_bool_exp!" },
    },
    delete_model_has_tags_by_pk: {
      __type: "model_has_tags",
      __args: { tag_uuid: "uuid!" },
    },
    delete_notifications: {
      __type: "notifications_mutation_response",
      __args: { where: "notifications_bool_exp!" },
    },
    delete_notifications_by_pk: {
      __type: "notifications",
      __args: { uuid: "uuid!" },
    },
    delete_outlet_has_addons: {
      __type: "outlet_has_addons_mutation_response",
      __args: { where: "outlet_has_addons_bool_exp!" },
    },
    delete_outlet_has_addons_by_pk: {
      __type: "outlet_has_addons",
      __args: { outlet_uuid: "uuid!" },
    },
    delete_outlets: {
      __type: "outlets_mutation_response",
      __args: { where: "outlets_bool_exp!" },
    },
    delete_outlets_by_pk: { __type: "outlets", __args: { uuid: "uuid!" } },
    delete_passes: {
      __type: "passes_mutation_response",
      __args: { where: "passes_bool_exp!" },
    },
    delete_passes_activity_logs: {
      __type: "passes_activity_logs_mutation_response",
      __args: { where: "passes_activity_logs_bool_exp!" },
    },
    delete_passes_by_pk: { __type: "passes", __args: { uuid: "uuid!" } },
    delete_payments: {
      __type: "payments_mutation_response",
      __args: { where: "payments_bool_exp!" },
    },
    delete_payments_by_pk: { __type: "payments", __args: { id: "uuid!" } },
    delete_permissions: {
      __type: "permissions_mutation_response",
      __args: { where: "permissions_bool_exp!" },
    },
    delete_permissions_by_pk: {
      __type: "permissions",
      __args: { uuid: "uuid!" },
    },
    delete_post_comments: {
      __type: "post_comments_mutation_response",
      __args: { where: "post_comments_bool_exp!" },
    },
    delete_post_likes: {
      __type: "post_likes_mutation_response",
      __args: { where: "post_likes_bool_exp!" },
    },
    delete_posts: {
      __type: "posts_mutation_response",
      __args: { where: "posts_bool_exp!" },
    },
    delete_posts_by_pk: { __type: "posts", __args: { uuid: "uuid!" } },
    delete_questionaires: {
      __type: "questionaires_mutation_response",
      __args: { where: "questionaires_bool_exp!" },
    },
    delete_questionaires_by_pk: {
      __type: "questionaires",
      __args: { uuid: "uuid!" },
    },
    delete_questions: {
      __type: "questions_mutation_response",
      __args: { where: "questions_bool_exp!" },
    },
    delete_questions_by_pk: { __type: "questions", __args: { uuid: "uuid!" } },
    delete_requests: {
      __type: "requests_mutation_response",
      __args: { where: "requests_bool_exp!" },
    },
    delete_requests_by_pk: { __type: "requests", __args: { uuid: "uuid!" } },
    delete_reservations: {
      __type: "reservations_mutation_response",
      __args: { where: "reservations_bool_exp!" },
    },
    delete_reservations_activity_logs: {
      __type: "reservations_activity_logs_mutation_response",
      __args: { where: "reservations_activity_logs_bool_exp!" },
    },
    delete_reservations_by_pk: {
      __type: "reservations",
      __args: { uuid: "uuid!" },
    },
    delete_review_comments: {
      __type: "review_comments_mutation_response",
      __args: { where: "review_comments_bool_exp!" },
    },
    delete_review_likes: {
      __type: "review_likes_mutation_response",
      __args: { where: "review_likes_bool_exp!" },
    },
    delete_review_media: {
      __type: "review_media_mutation_response",
      __args: { where: "review_media_bool_exp!" },
    },
    delete_reviews: {
      __type: "reviews_mutation_response",
      __args: { where: "reviews_bool_exp!" },
    },
    delete_reviews_by_pk: { __type: "reviews", __args: { uuid: "uuid!" } },
    delete_role_has_permissions: {
      __type: "role_has_permissions_mutation_response",
      __args: { where: "role_has_permissions_bool_exp!" },
    },
    delete_roles: {
      __type: "roles_mutation_response",
      __args: { where: "roles_bool_exp!" },
    },
    delete_roles_by_pk: { __type: "roles", __args: { uuid: "uuid!" } },
    delete_social_relationships: {
      __type: "social_relationships_mutation_response",
      __args: { where: "social_relationships_bool_exp!" },
    },
    delete_social_relationships_by_pk: {
      __type: "social_relationships",
      __args: { uuid: "uuid!" },
    },
    delete_spaces: {
      __type: "spaces_mutation_response",
      __args: { where: "spaces_bool_exp!" },
    },
    delete_spaces_by_pk: { __type: "spaces", __args: { uuid: "uuid!" } },
    delete_spaces_guests: {
      __type: "spaces_guests_mutation_response",
      __args: { where: "spaces_guests_bool_exp!" },
    },
    delete_spaces_guests_by_pk: {
      __type: "spaces_guests",
      __args: { uuid: "uuid!" },
    },
    delete_spaces_usage: {
      __type: "spaces_usage_mutation_response",
      __args: { where: "spaces_usage_bool_exp!" },
    },
    delete_spaces_usage_by_pk: {
      __type: "spaces_usage",
      __args: { uuid: "uuid!" },
    },
    delete_storage_buckets: {
      __type: "storage_buckets_mutation_response",
      __args: { where: "storage_buckets_bool_exp!" },
    },
    delete_storage_buckets_by_pk: {
      __type: "storage_buckets",
      __args: { id: "String!" },
    },
    delete_stripe_transfers: {
      __type: "stripe_transfers_mutation_response",
      __args: { where: "stripe_transfers_bool_exp!" },
    },
    delete_stripe_transfers_by_pk: {
      __type: "stripe_transfers",
      __args: { uuid: "uuid!" },
    },
    delete_subscriptions: {
      __type: "subscriptions_mutation_response",
      __args: { where: "subscriptions_bool_exp!" },
    },
    delete_subscriptions_by_pk: {
      __type: "subscriptions",
      __args: { uuid: "uuid!" },
    },
    delete_supabase_functions_hooks: {
      __type: "supabase_functions_hooks_mutation_response",
      __args: { where: "supabase_functions_hooks_bool_exp!" },
    },
    delete_supabase_functions_hooks_by_pk: {
      __type: "supabase_functions_hooks",
      __args: { id: "bigint!" },
    },
    delete_tags: {
      __type: "tags_mutation_response",
      __args: { where: "tags_bool_exp!" },
    },
    delete_tags_by_pk: { __type: "tags", __args: { uuid: "uuid!" } },
    delete_team_memberships: {
      __type: "team_memberships_mutation_response",
      __args: { where: "team_memberships_bool_exp!" },
    },
    delete_team_memberships_by_pk: {
      __type: "team_memberships",
      __args: { uuid: "uuid!" },
    },
    delete_team_roles: {
      __type: "team_roles_mutation_response",
      __args: { where: "team_roles_bool_exp!" },
    },
    delete_team_schedules: {
      __type: "team_schedules_mutation_response",
      __args: { where: "team_schedules_bool_exp!" },
    },
    delete_team_schedules_by_pk: {
      __type: "team_schedules",
      __args: { uuid: "uuid!" },
    },
    delete_team_subscriptions: {
      __type: "team_subscriptions_mutation_response",
      __args: { where: "team_subscriptions_bool_exp!" },
    },
    delete_teams: {
      __type: "teams_mutation_response",
      __args: { where: "teams_bool_exp!" },
    },
    delete_teams_by_pk: { __type: "teams", __args: { uuid: "uuid!" } },
    delete_user_has_reservations: {
      __type: "user_has_reservations_mutation_response",
      __args: { where: "user_has_reservations_bool_exp!" },
    },
    delete_user_has_reservations_by_pk: {
      __type: "user_has_reservations",
      __args: { reservation_uuid: "uuid!" },
    },
    delete_user_inbox: {
      __type: "user_inbox_mutation_response",
      __args: { where: "user_inbox_bool_exp!" },
    },
    delete_user_media: {
      __type: "user_media_mutation_response",
      __args: { where: "user_media_bool_exp!" },
    },
    delete_user_roles: {
      __type: "user_roles_mutation_response",
      __args: { where: "user_roles_bool_exp!" },
    },
    delete_user_sessions: {
      __type: "user_sessions_mutation_response",
      __args: { where: "user_sessions_bool_exp!" },
    },
    delete_user_sessions_by_pk: {
      __type: "user_sessions",
      __args: { uuid: "uuid!" },
    },
    delete_user_subscriptions: {
      __type: "user_subscriptions_mutation_response",
      __args: { where: "user_subscriptions_bool_exp!" },
    },
    delete_users: {
      __type: "users_mutation_response",
      __args: { where: "users_bool_exp!" },
    },
    delete_users_by_pk: { __type: "users", __args: { uuid: "uuid!" } },
    delete_wishlist: {
      __type: "wishlist_mutation_response",
      __args: { where: "wishlist_bool_exp!" },
    },
    delete_wishlist_by_pk: { __type: "wishlist", __args: { uuid: "uuid!" } },
    insert_activity_logs: {
      __type: "activity_logs_mutation_response",
      __args: {
        objects: "[activity_logs_insert_input!]!",
        on_conflict: "activity_logs_on_conflict",
      },
    },
    insert_activity_logs_one: {
      __type: "activity_logs",
      __args: {
        object: "activity_logs_insert_input!",
        on_conflict: "activity_logs_on_conflict",
      },
    },
    insert_aruba_wifi_access: {
      __type: "aruba_wifi_access_mutation_response",
      __args: {
        objects: "[aruba_wifi_access_insert_input!]!",
        on_conflict: "aruba_wifi_access_on_conflict",
      },
    },
    insert_aruba_wifi_access_one: {
      __type: "aruba_wifi_access",
      __args: {
        object: "aruba_wifi_access_insert_input!",
        on_conflict: "aruba_wifi_access_on_conflict",
      },
    },
    insert_auth_audit_log_entries: {
      __type: "auth_audit_log_entries_mutation_response",
      __args: {
        objects: "[auth_audit_log_entries_insert_input!]!",
        on_conflict: "auth_audit_log_entries_on_conflict",
      },
    },
    insert_auth_audit_log_entries_one: {
      __type: "auth_audit_log_entries",
      __args: {
        object: "auth_audit_log_entries_insert_input!",
        on_conflict: "auth_audit_log_entries_on_conflict",
      },
    },
    insert_auth_instances: {
      __type: "auth_instances_mutation_response",
      __args: {
        objects: "[auth_instances_insert_input!]!",
        on_conflict: "auth_instances_on_conflict",
      },
    },
    insert_auth_instances_one: {
      __type: "auth_instances",
      __args: {
        object: "auth_instances_insert_input!",
        on_conflict: "auth_instances_on_conflict",
      },
    },
    insert_auth_refresh_tokens: {
      __type: "auth_refresh_tokens_mutation_response",
      __args: {
        objects: "[auth_refresh_tokens_insert_input!]!",
        on_conflict: "auth_refresh_tokens_on_conflict",
      },
    },
    insert_auth_refresh_tokens_one: {
      __type: "auth_refresh_tokens",
      __args: {
        object: "auth_refresh_tokens_insert_input!",
        on_conflict: "auth_refresh_tokens_on_conflict",
      },
    },
    insert_auth_schema_migrations: {
      __type: "auth_schema_migrations_mutation_response",
      __args: {
        objects: "[auth_schema_migrations_insert_input!]!",
        on_conflict: "auth_schema_migrations_on_conflict",
      },
    },
    insert_auth_schema_migrations_one: {
      __type: "auth_schema_migrations",
      __args: {
        object: "auth_schema_migrations_insert_input!",
        on_conflict: "auth_schema_migrations_on_conflict",
      },
    },
    insert_auth_users: {
      __type: "auth_users_mutation_response",
      __args: {
        objects: "[auth_users_insert_input!]!",
        on_conflict: "auth_users_on_conflict",
      },
    },
    insert_auth_users_one: {
      __type: "auth_users",
      __args: {
        object: "auth_users_insert_input!",
        on_conflict: "auth_users_on_conflict",
      },
    },
    insert_brand_campaigns: {
      __type: "brand_campaigns_mutation_response",
      __args: {
        objects: "[brand_campaigns_insert_input!]!",
        on_conflict: "brand_campaigns_on_conflict",
      },
    },
    insert_brand_campaigns_one: {
      __type: "brand_campaigns",
      __args: {
        object: "brand_campaigns_insert_input!",
        on_conflict: "brand_campaigns_on_conflict",
      },
    },
    insert_brand_discussions: {
      __type: "brand_discussions_mutation_response",
      __args: { objects: "[brand_discussions_insert_input!]!" },
    },
    insert_brand_discussions_one: {
      __type: "brand_discussions",
      __args: { object: "brand_discussions_insert_input!" },
    },
    insert_brand_inbox: {
      __type: "brand_inbox_mutation_response",
      __args: { objects: "[brand_inbox_insert_input!]!" },
    },
    insert_brand_inbox_one: {
      __type: "brand_inbox",
      __args: { object: "brand_inbox_insert_input!" },
    },
    insert_brand_media: {
      __type: "brand_media_mutation_response",
      __args: { objects: "[brand_media_insert_input!]!" },
    },
    insert_brand_media_one: {
      __type: "brand_media",
      __args: { object: "brand_media_insert_input!" },
    },
    insert_brand_tags: {
      __type: "brand_tags_mutation_response",
      __args: { objects: "[brand_tags_insert_input!]!" },
    },
    insert_brand_tags_one: {
      __type: "brand_tags",
      __args: { object: "brand_tags_insert_input!" },
    },
    insert_brand_users: {
      __type: "brand_users_mutation_response",
      __args: {
        objects: "[brand_users_insert_input!]!",
        on_conflict: "brand_users_on_conflict",
      },
    },
    insert_brand_users_one: {
      __type: "brand_users",
      __args: {
        object: "brand_users_insert_input!",
        on_conflict: "brand_users_on_conflict",
      },
    },
    insert_brand_wishes: {
      __type: "brand_wishes_mutation_response",
      __args: { objects: "[brand_wishes_insert_input!]!" },
    },
    insert_brand_wishes_one: {
      __type: "brand_wishes",
      __args: { object: "brand_wishes_insert_input!" },
    },
    insert_brands: {
      __type: "brands_mutation_response",
      __args: {
        objects: "[brands_insert_input!]!",
        on_conflict: "brands_on_conflict",
      },
    },
    insert_brands_one: {
      __type: "brands",
      __args: {
        object: "brands_insert_input!",
        on_conflict: "brands_on_conflict",
      },
    },
    insert_campaigns: {
      __type: "campaigns_mutation_response",
      __args: {
        objects: "[campaigns_insert_input!]!",
        on_conflict: "campaigns_on_conflict",
      },
    },
    insert_campaigns_one: {
      __type: "campaigns",
      __args: {
        object: "campaigns_insert_input!",
        on_conflict: "campaigns_on_conflict",
      },
    },
    insert_card: {
      __type: "card_mutation_response",
      __args: {
        objects: "[card_insert_input!]!",
        on_conflict: "card_on_conflict",
      },
    },
    insert_card_one: {
      __type: "card",
      __args: { object: "card_insert_input!", on_conflict: "card_on_conflict" },
    },
    insert_comment_comments: {
      __type: "comment_comments_mutation_response",
      __args: { objects: "[comment_comments_insert_input!]!" },
    },
    insert_comment_comments_one: {
      __type: "comment_comments",
      __args: { object: "comment_comments_insert_input!" },
    },
    insert_comment_likes: {
      __type: "comment_likes_mutation_response",
      __args: { objects: "[comment_likes_insert_input!]!" },
    },
    insert_comment_likes_one: {
      __type: "comment_likes",
      __args: { object: "comment_likes_insert_input!" },
    },
    insert_conversations: {
      __type: "conversations_mutation_response",
      __args: {
        objects: "[conversations_insert_input!]!",
        on_conflict: "conversations_on_conflict",
      },
    },
    insert_conversations_one: {
      __type: "conversations",
      __args: {
        object: "conversations_insert_input!",
        on_conflict: "conversations_on_conflict",
      },
    },
    insert_currencies: {
      __type: "currencies_mutation_response",
      __args: {
        objects: "[currencies_insert_input!]!",
        on_conflict: "currencies_on_conflict",
      },
    },
    insert_currencies_one: {
      __type: "currencies",
      __args: {
        object: "currencies_insert_input!",
        on_conflict: "currencies_on_conflict",
      },
    },
    insert_daily_rates: {
      __type: "daily_rates_mutation_response",
      __args: {
        objects: "[daily_rates_insert_input!]!",
        on_conflict: "daily_rates_on_conflict",
      },
    },
    insert_daily_rates_one: {
      __type: "daily_rates",
      __args: {
        object: "daily_rates_insert_input!",
        on_conflict: "daily_rates_on_conflict",
      },
    },
    insert_default_addons: {
      __type: "default_addons_mutation_response",
      __args: {
        objects: "[default_addons_insert_input!]!",
        on_conflict: "default_addons_on_conflict",
      },
    },
    insert_default_addons_one: {
      __type: "default_addons",
      __args: {
        object: "default_addons_insert_input!",
        on_conflict: "default_addons_on_conflict",
      },
    },
    insert_discount_codes: {
      __type: "discount_codes_mutation_response",
      __args: {
        objects: "[discount_codes_insert_input!]!",
        on_conflict: "discount_codes_on_conflict",
      },
    },
    insert_discount_codes_one: {
      __type: "discount_codes",
      __args: {
        object: "discount_codes_insert_input!",
        on_conflict: "discount_codes_on_conflict",
      },
    },
    insert_discussion_user: {
      __type: "discussion_user_mutation_response",
      __args: { objects: "[discussion_user_insert_input!]!" },
    },
    insert_discussion_user_one: {
      __type: "discussion_user",
      __args: { object: "discussion_user_insert_input!" },
    },
    insert_discussions: {
      __type: "discussions_mutation_response",
      __args: {
        objects: "[discussions_insert_input!]!",
        on_conflict: "discussions_on_conflict",
      },
    },
    insert_discussions_one: {
      __type: "discussions",
      __args: {
        object: "discussions_insert_input!",
        on_conflict: "discussions_on_conflict",
      },
    },
    insert_extensions: {
      __type: "extensions_mutation_response",
      __args: {
        objects: "[extensions_insert_input!]!",
        on_conflict: "extensions_on_conflict",
      },
    },
    insert_extensions_geometry_columns: {
      __type: "extensions_geometry_columns_mutation_response",
      __args: { objects: "[extensions_geometry_columns_insert_input!]!" },
    },
    insert_extensions_geometry_columns_one: {
      __type: "extensions_geometry_columns",
      __args: { object: "extensions_geometry_columns_insert_input!" },
    },
    insert_extensions_one: {
      __type: "extensions",
      __args: {
        object: "extensions_insert_input!",
        on_conflict: "extensions_on_conflict",
      },
    },
    insert_extensions_spatial_ref_sys: {
      __type: "extensions_spatial_ref_sys_mutation_response",
      __args: {
        objects: "[extensions_spatial_ref_sys_insert_input!]!",
        on_conflict: "extensions_spatial_ref_sys_on_conflict",
      },
    },
    insert_extensions_spatial_ref_sys_one: {
      __type: "extensions_spatial_ref_sys",
      __args: {
        object: "extensions_spatial_ref_sys_insert_input!",
        on_conflict: "extensions_spatial_ref_sys_on_conflict",
      },
    },
    insert_floor_plan_grid: {
      __type: "floor_plan_grid_mutation_response",
      __args: {
        objects: "[floor_plan_grid_insert_input!]!",
        on_conflict: "floor_plan_grid_on_conflict",
      },
    },
    insert_floor_plan_grid_one: {
      __type: "floor_plan_grid",
      __args: {
        object: "floor_plan_grid_insert_input!",
        on_conflict: "floor_plan_grid_on_conflict",
      },
    },
    insert_floor_plans: {
      __type: "floor_plans_mutation_response",
      __args: {
        objects: "[floor_plans_insert_input!]!",
        on_conflict: "floor_plans_on_conflict",
      },
    },
    insert_floor_plans_one: {
      __type: "floor_plans",
      __args: {
        object: "floor_plans_insert_input!",
        on_conflict: "floor_plans_on_conflict",
      },
    },
    insert_guest_questionaires_answers: {
      __type: "guest_questionaires_answers_mutation_response",
      __args: {
        objects: "[guest_questionaires_answers_insert_input!]!",
        on_conflict: "guest_questionaires_answers_on_conflict",
      },
    },
    insert_guest_questionaires_answers_one: {
      __type: "guest_questionaires_answers",
      __args: {
        object: "guest_questionaires_answers_insert_input!",
        on_conflict: "guest_questionaires_answers_on_conflict",
      },
    },
    insert_guests: {
      __type: "guests_mutation_response",
      __args: {
        objects: "[guests_insert_input!]!",
        on_conflict: "guests_on_conflict",
      },
    },
    insert_guests_has_questionaires: {
      __type: "guests_has_questionaires_mutation_response",
      __args: {
        objects: "[guests_has_questionaires_insert_input!]!",
        on_conflict: "guests_has_questionaires_on_conflict",
      },
    },
    insert_guests_has_questionaires_one: {
      __type: "guests_has_questionaires",
      __args: {
        object: "guests_has_questionaires_insert_input!",
        on_conflict: "guests_has_questionaires_on_conflict",
      },
    },
    insert_guests_one: {
      __type: "guests",
      __args: {
        object: "guests_insert_input!",
        on_conflict: "guests_on_conflict",
      },
    },
    insert_inboxes: {
      __type: "inboxes_mutation_response",
      __args: {
        objects: "[inboxes_insert_input!]!",
        on_conflict: "inboxes_on_conflict",
      },
    },
    insert_inboxes_one: {
      __type: "inboxes",
      __args: {
        object: "inboxes_insert_input!",
        on_conflict: "inboxes_on_conflict",
      },
    },
    insert_invoice: {
      __type: "invoice_mutation_response",
      __args: {
        objects: "[invoice_insert_input!]!",
        on_conflict: "invoice_on_conflict",
      },
    },
    insert_invoice_one: {
      __type: "invoice",
      __args: {
        object: "invoice_insert_input!",
        on_conflict: "invoice_on_conflict",
      },
    },
    insert_key_performance_snapshots: {
      __type: "key_performance_snapshots_mutation_response",
      __args: {
        objects: "[key_performance_snapshots_insert_input!]!",
        on_conflict: "key_performance_snapshots_on_conflict",
      },
    },
    insert_key_performance_snapshots_one: {
      __type: "key_performance_snapshots",
      __args: {
        object: "key_performance_snapshots_insert_input!",
        on_conflict: "key_performance_snapshots_on_conflict",
      },
    },
    insert_listing_categories: {
      __type: "listing_categories_mutation_response",
      __args: {
        objects: "[listing_categories_insert_input!]!",
        on_conflict: "listing_categories_on_conflict",
      },
    },
    insert_listing_categories_one: {
      __type: "listing_categories",
      __args: {
        object: "listing_categories_insert_input!",
        on_conflict: "listing_categories_on_conflict",
      },
    },
    insert_listing_collections: {
      __type: "listing_collections_mutation_response",
      __args: {
        objects: "[listing_collections_insert_input!]!",
        on_conflict: "listing_collections_on_conflict",
      },
    },
    insert_listing_collections_one: {
      __type: "listing_collections",
      __args: {
        object: "listing_collections_insert_input!",
        on_conflict: "listing_collections_on_conflict",
      },
    },
    insert_listing_discussions: {
      __type: "listing_discussions_mutation_response",
      __args: { objects: "[listing_discussions_insert_input!]!" },
    },
    insert_listing_discussions_one: {
      __type: "listing_discussions",
      __args: { object: "listing_discussions_insert_input!" },
    },
    insert_listing_in_collections: {
      __type: "listing_in_collections_mutation_response",
      __args: { objects: "[listing_in_collections_insert_input!]!" },
    },
    insert_listing_in_collections_one: {
      __type: "listing_in_collections",
      __args: { object: "listing_in_collections_insert_input!" },
    },
    insert_listing_media: {
      __type: "listing_media_mutation_response",
      __args: { objects: "[listing_media_insert_input!]!" },
    },
    insert_listing_media_one: {
      __type: "listing_media",
      __args: { object: "listing_media_insert_input!" },
    },
    insert_listing_tags: {
      __type: "listing_tags_mutation_response",
      __args: { objects: "[listing_tags_insert_input!]!" },
    },
    insert_listing_tags_one: {
      __type: "listing_tags",
      __args: { object: "listing_tags_insert_input!" },
    },
    insert_listing_wishes: {
      __type: "listing_wishes_mutation_response",
      __args: { objects: "[listing_wishes_insert_input!]!" },
    },
    insert_listing_wishes_one: {
      __type: "listing_wishes",
      __args: { object: "listing_wishes_insert_input!" },
    },
    insert_listings: {
      __type: "listings_mutation_response",
      __args: {
        objects: "[listings_insert_input!]!",
        on_conflict: "listings_on_conflict",
      },
    },
    insert_listings_one: {
      __type: "listings",
      __args: {
        object: "listings_insert_input!",
        on_conflict: "listings_on_conflict",
      },
    },
    insert_logs: {
      __type: "logs_mutation_response",
      __args: {
        objects: "[logs_insert_input!]!",
        on_conflict: "logs_on_conflict",
      },
    },
    insert_logs_one: {
      __type: "logs",
      __args: { object: "logs_insert_input!", on_conflict: "logs_on_conflict" },
    },
    insert_media: {
      __type: "media_mutation_response",
      __args: {
        objects: "[media_insert_input!]!",
        on_conflict: "media_on_conflict",
      },
    },
    insert_media_one: {
      __type: "media",
      __args: {
        object: "media_insert_input!",
        on_conflict: "media_on_conflict",
      },
    },
    insert_messages: {
      __type: "messages_mutation_response",
      __args: {
        objects: "[messages_insert_input!]!",
        on_conflict: "messages_on_conflict",
      },
    },
    insert_messages_one: {
      __type: "messages",
      __args: {
        object: "messages_insert_input!",
        on_conflict: "messages_on_conflict",
      },
    },
    insert_model_has_comments: {
      __type: "model_has_comments_mutation_response",
      __args: {
        objects: "[model_has_comments_insert_input!]!",
        on_conflict: "model_has_comments_on_conflict",
      },
    },
    insert_model_has_comments_one: {
      __type: "model_has_comments",
      __args: {
        object: "model_has_comments_insert_input!",
        on_conflict: "model_has_comments_on_conflict",
      },
    },
    insert_model_has_likes: {
      __type: "model_has_likes_mutation_response",
      __args: { objects: "[model_has_likes_insert_input!]!" },
    },
    insert_model_has_likes_one: {
      __type: "model_has_likes",
      __args: { object: "model_has_likes_insert_input!" },
    },
    insert_model_has_permissions: {
      __type: "model_has_permissions_mutation_response",
      __args: { objects: "[model_has_permissions_insert_input!]!" },
    },
    insert_model_has_permissions_one: {
      __type: "model_has_permissions",
      __args: { object: "model_has_permissions_insert_input!" },
    },
    insert_model_has_roles: {
      __type: "model_has_roles_mutation_response",
      __args: { objects: "[model_has_roles_insert_input!]!" },
    },
    insert_model_has_roles_one: {
      __type: "model_has_roles",
      __args: { object: "model_has_roles_insert_input!" },
    },
    insert_model_has_tags: {
      __type: "model_has_tags_mutation_response",
      __args: {
        objects: "[model_has_tags_insert_input!]!",
        on_conflict: "model_has_tags_on_conflict",
      },
    },
    insert_model_has_tags_one: {
      __type: "model_has_tags",
      __args: {
        object: "model_has_tags_insert_input!",
        on_conflict: "model_has_tags_on_conflict",
      },
    },
    insert_notifications: {
      __type: "notifications_mutation_response",
      __args: {
        objects: "[notifications_insert_input!]!",
        on_conflict: "notifications_on_conflict",
      },
    },
    insert_notifications_one: {
      __type: "notifications",
      __args: {
        object: "notifications_insert_input!",
        on_conflict: "notifications_on_conflict",
      },
    },
    insert_outlet_has_addons: {
      __type: "outlet_has_addons_mutation_response",
      __args: {
        objects: "[outlet_has_addons_insert_input!]!",
        on_conflict: "outlet_has_addons_on_conflict",
      },
    },
    insert_outlet_has_addons_one: {
      __type: "outlet_has_addons",
      __args: {
        object: "outlet_has_addons_insert_input!",
        on_conflict: "outlet_has_addons_on_conflict",
      },
    },
    insert_outlets: {
      __type: "outlets_mutation_response",
      __args: {
        objects: "[outlets_insert_input!]!",
        on_conflict: "outlets_on_conflict",
      },
    },
    insert_outlets_one: {
      __type: "outlets",
      __args: {
        object: "outlets_insert_input!",
        on_conflict: "outlets_on_conflict",
      },
    },
    insert_passes: {
      __type: "passes_mutation_response",
      __args: {
        objects: "[passes_insert_input!]!",
        on_conflict: "passes_on_conflict",
      },
    },
    insert_passes_activity_logs: {
      __type: "passes_activity_logs_mutation_response",
      __args: { objects: "[passes_activity_logs_insert_input!]!" },
    },
    insert_passes_activity_logs_one: {
      __type: "passes_activity_logs",
      __args: { object: "passes_activity_logs_insert_input!" },
    },
    insert_passes_one: {
      __type: "passes",
      __args: {
        object: "passes_insert_input!",
        on_conflict: "passes_on_conflict",
      },
    },
    insert_payments: {
      __type: "payments_mutation_response",
      __args: {
        objects: "[payments_insert_input!]!",
        on_conflict: "payments_on_conflict",
      },
    },
    insert_payments_one: {
      __type: "payments",
      __args: {
        object: "payments_insert_input!",
        on_conflict: "payments_on_conflict",
      },
    },
    insert_permissions: {
      __type: "permissions_mutation_response",
      __args: {
        objects: "[permissions_insert_input!]!",
        on_conflict: "permissions_on_conflict",
      },
    },
    insert_permissions_one: {
      __type: "permissions",
      __args: {
        object: "permissions_insert_input!",
        on_conflict: "permissions_on_conflict",
      },
    },
    insert_post_comments: {
      __type: "post_comments_mutation_response",
      __args: { objects: "[post_comments_insert_input!]!" },
    },
    insert_post_comments_one: {
      __type: "post_comments",
      __args: { object: "post_comments_insert_input!" },
    },
    insert_post_likes: {
      __type: "post_likes_mutation_response",
      __args: { objects: "[post_likes_insert_input!]!" },
    },
    insert_post_likes_one: {
      __type: "post_likes",
      __args: { object: "post_likes_insert_input!" },
    },
    insert_posts: {
      __type: "posts_mutation_response",
      __args: {
        objects: "[posts_insert_input!]!",
        on_conflict: "posts_on_conflict",
      },
    },
    insert_posts_one: {
      __type: "posts",
      __args: {
        object: "posts_insert_input!",
        on_conflict: "posts_on_conflict",
      },
    },
    insert_questionaires: {
      __type: "questionaires_mutation_response",
      __args: {
        objects: "[questionaires_insert_input!]!",
        on_conflict: "questionaires_on_conflict",
      },
    },
    insert_questionaires_one: {
      __type: "questionaires",
      __args: {
        object: "questionaires_insert_input!",
        on_conflict: "questionaires_on_conflict",
      },
    },
    insert_questions: {
      __type: "questions_mutation_response",
      __args: {
        objects: "[questions_insert_input!]!",
        on_conflict: "questions_on_conflict",
      },
    },
    insert_questions_one: {
      __type: "questions",
      __args: {
        object: "questions_insert_input!",
        on_conflict: "questions_on_conflict",
      },
    },
    insert_requests: {
      __type: "requests_mutation_response",
      __args: {
        objects: "[requests_insert_input!]!",
        on_conflict: "requests_on_conflict",
      },
    },
    insert_requests_one: {
      __type: "requests",
      __args: {
        object: "requests_insert_input!",
        on_conflict: "requests_on_conflict",
      },
    },
    insert_reservations: {
      __type: "reservations_mutation_response",
      __args: {
        objects: "[reservations_insert_input!]!",
        on_conflict: "reservations_on_conflict",
      },
    },
    insert_reservations_activity_logs: {
      __type: "reservations_activity_logs_mutation_response",
      __args: { objects: "[reservations_activity_logs_insert_input!]!" },
    },
    insert_reservations_activity_logs_one: {
      __type: "reservations_activity_logs",
      __args: { object: "reservations_activity_logs_insert_input!" },
    },
    insert_reservations_one: {
      __type: "reservations",
      __args: {
        object: "reservations_insert_input!",
        on_conflict: "reservations_on_conflict",
      },
    },
    insert_review_comments: {
      __type: "review_comments_mutation_response",
      __args: { objects: "[review_comments_insert_input!]!" },
    },
    insert_review_comments_one: {
      __type: "review_comments",
      __args: { object: "review_comments_insert_input!" },
    },
    insert_review_likes: {
      __type: "review_likes_mutation_response",
      __args: { objects: "[review_likes_insert_input!]!" },
    },
    insert_review_likes_one: {
      __type: "review_likes",
      __args: { object: "review_likes_insert_input!" },
    },
    insert_review_media: {
      __type: "review_media_mutation_response",
      __args: { objects: "[review_media_insert_input!]!" },
    },
    insert_review_media_one: {
      __type: "review_media",
      __args: { object: "review_media_insert_input!" },
    },
    insert_reviews: {
      __type: "reviews_mutation_response",
      __args: {
        objects: "[reviews_insert_input!]!",
        on_conflict: "reviews_on_conflict",
      },
    },
    insert_reviews_one: {
      __type: "reviews",
      __args: {
        object: "reviews_insert_input!",
        on_conflict: "reviews_on_conflict",
      },
    },
    insert_role_has_permissions: {
      __type: "role_has_permissions_mutation_response",
      __args: { objects: "[role_has_permissions_insert_input!]!" },
    },
    insert_role_has_permissions_one: {
      __type: "role_has_permissions",
      __args: { object: "role_has_permissions_insert_input!" },
    },
    insert_roles: {
      __type: "roles_mutation_response",
      __args: {
        objects: "[roles_insert_input!]!",
        on_conflict: "roles_on_conflict",
      },
    },
    insert_roles_one: {
      __type: "roles",
      __args: {
        object: "roles_insert_input!",
        on_conflict: "roles_on_conflict",
      },
    },
    insert_social_relationships: {
      __type: "social_relationships_mutation_response",
      __args: {
        objects: "[social_relationships_insert_input!]!",
        on_conflict: "social_relationships_on_conflict",
      },
    },
    insert_social_relationships_one: {
      __type: "social_relationships",
      __args: {
        object: "social_relationships_insert_input!",
        on_conflict: "social_relationships_on_conflict",
      },
    },
    insert_spaces: {
      __type: "spaces_mutation_response",
      __args: {
        objects: "[spaces_insert_input!]!",
        on_conflict: "spaces_on_conflict",
      },
    },
    insert_spaces_guests: {
      __type: "spaces_guests_mutation_response",
      __args: {
        objects: "[spaces_guests_insert_input!]!",
        on_conflict: "spaces_guests_on_conflict",
      },
    },
    insert_spaces_guests_one: {
      __type: "spaces_guests",
      __args: {
        object: "spaces_guests_insert_input!",
        on_conflict: "spaces_guests_on_conflict",
      },
    },
    insert_spaces_one: {
      __type: "spaces",
      __args: {
        object: "spaces_insert_input!",
        on_conflict: "spaces_on_conflict",
      },
    },
    insert_spaces_usage: {
      __type: "spaces_usage_mutation_response",
      __args: {
        objects: "[spaces_usage_insert_input!]!",
        on_conflict: "spaces_usage_on_conflict",
      },
    },
    insert_spaces_usage_one: {
      __type: "spaces_usage",
      __args: {
        object: "spaces_usage_insert_input!",
        on_conflict: "spaces_usage_on_conflict",
      },
    },
    insert_storage_buckets: {
      __type: "storage_buckets_mutation_response",
      __args: {
        objects: "[storage_buckets_insert_input!]!",
        on_conflict: "storage_buckets_on_conflict",
      },
    },
    insert_storage_buckets_one: {
      __type: "storage_buckets",
      __args: {
        object: "storage_buckets_insert_input!",
        on_conflict: "storage_buckets_on_conflict",
      },
    },
    insert_stripe_transfers: {
      __type: "stripe_transfers_mutation_response",
      __args: {
        objects: "[stripe_transfers_insert_input!]!",
        on_conflict: "stripe_transfers_on_conflict",
      },
    },
    insert_stripe_transfers_one: {
      __type: "stripe_transfers",
      __args: {
        object: "stripe_transfers_insert_input!",
        on_conflict: "stripe_transfers_on_conflict",
      },
    },
    insert_subscriptions: {
      __type: "subscriptions_mutation_response",
      __args: {
        objects: "[subscriptions_insert_input!]!",
        on_conflict: "subscriptions_on_conflict",
      },
    },
    insert_subscriptions_one: {
      __type: "subscriptions",
      __args: {
        object: "subscriptions_insert_input!",
        on_conflict: "subscriptions_on_conflict",
      },
    },
    insert_supabase_functions_hooks: {
      __type: "supabase_functions_hooks_mutation_response",
      __args: {
        objects: "[supabase_functions_hooks_insert_input!]!",
        on_conflict: "supabase_functions_hooks_on_conflict",
      },
    },
    insert_supabase_functions_hooks_one: {
      __type: "supabase_functions_hooks",
      __args: {
        object: "supabase_functions_hooks_insert_input!",
        on_conflict: "supabase_functions_hooks_on_conflict",
      },
    },
    insert_tags: {
      __type: "tags_mutation_response",
      __args: {
        objects: "[tags_insert_input!]!",
        on_conflict: "tags_on_conflict",
      },
    },
    insert_tags_one: {
      __type: "tags",
      __args: { object: "tags_insert_input!", on_conflict: "tags_on_conflict" },
    },
    insert_team_memberships: {
      __type: "team_memberships_mutation_response",
      __args: {
        objects: "[team_memberships_insert_input!]!",
        on_conflict: "team_memberships_on_conflict",
      },
    },
    insert_team_memberships_one: {
      __type: "team_memberships",
      __args: {
        object: "team_memberships_insert_input!",
        on_conflict: "team_memberships_on_conflict",
      },
    },
    insert_team_roles: {
      __type: "team_roles_mutation_response",
      __args: { objects: "[team_roles_insert_input!]!" },
    },
    insert_team_roles_one: {
      __type: "team_roles",
      __args: { object: "team_roles_insert_input!" },
    },
    insert_team_schedules: {
      __type: "team_schedules_mutation_response",
      __args: {
        objects: "[team_schedules_insert_input!]!",
        on_conflict: "team_schedules_on_conflict",
      },
    },
    insert_team_schedules_one: {
      __type: "team_schedules",
      __args: {
        object: "team_schedules_insert_input!",
        on_conflict: "team_schedules_on_conflict",
      },
    },
    insert_team_subscriptions: {
      __type: "team_subscriptions_mutation_response",
      __args: { objects: "[team_subscriptions_insert_input!]!" },
    },
    insert_team_subscriptions_one: {
      __type: "team_subscriptions",
      __args: { object: "team_subscriptions_insert_input!" },
    },
    insert_teams: {
      __type: "teams_mutation_response",
      __args: {
        objects: "[teams_insert_input!]!",
        on_conflict: "teams_on_conflict",
      },
    },
    insert_teams_one: {
      __type: "teams",
      __args: {
        object: "teams_insert_input!",
        on_conflict: "teams_on_conflict",
      },
    },
    insert_user_has_reservations: {
      __type: "user_has_reservations_mutation_response",
      __args: {
        objects: "[user_has_reservations_insert_input!]!",
        on_conflict: "user_has_reservations_on_conflict",
      },
    },
    insert_user_has_reservations_one: {
      __type: "user_has_reservations",
      __args: {
        object: "user_has_reservations_insert_input!",
        on_conflict: "user_has_reservations_on_conflict",
      },
    },
    insert_user_inbox: {
      __type: "user_inbox_mutation_response",
      __args: { objects: "[user_inbox_insert_input!]!" },
    },
    insert_user_inbox_one: {
      __type: "user_inbox",
      __args: { object: "user_inbox_insert_input!" },
    },
    insert_user_media: {
      __type: "user_media_mutation_response",
      __args: { objects: "[user_media_insert_input!]!" },
    },
    insert_user_media_one: {
      __type: "user_media",
      __args: { object: "user_media_insert_input!" },
    },
    insert_user_roles: {
      __type: "user_roles_mutation_response",
      __args: { objects: "[user_roles_insert_input!]!" },
    },
    insert_user_roles_one: {
      __type: "user_roles",
      __args: { object: "user_roles_insert_input!" },
    },
    insert_user_sessions: {
      __type: "user_sessions_mutation_response",
      __args: {
        objects: "[user_sessions_insert_input!]!",
        on_conflict: "user_sessions_on_conflict",
      },
    },
    insert_user_sessions_one: {
      __type: "user_sessions",
      __args: {
        object: "user_sessions_insert_input!",
        on_conflict: "user_sessions_on_conflict",
      },
    },
    insert_user_subscriptions: {
      __type: "user_subscriptions_mutation_response",
      __args: { objects: "[user_subscriptions_insert_input!]!" },
    },
    insert_user_subscriptions_one: {
      __type: "user_subscriptions",
      __args: { object: "user_subscriptions_insert_input!" },
    },
    insert_users: {
      __type: "users_mutation_response",
      __args: {
        objects: "[users_insert_input!]!",
        on_conflict: "users_on_conflict",
      },
    },
    insert_users_one: {
      __type: "users",
      __args: {
        object: "users_insert_input!",
        on_conflict: "users_on_conflict",
      },
    },
    insert_wishlist: {
      __type: "wishlist_mutation_response",
      __args: {
        objects: "[wishlist_insert_input!]!",
        on_conflict: "wishlist_on_conflict",
      },
    },
    insert_wishlist_one: {
      __type: "wishlist",
      __args: {
        object: "wishlist_insert_input!",
        on_conflict: "wishlist_on_conflict",
      },
    },
    update_activity_logs: {
      __type: "activity_logs_mutation_response",
      __args: {
        _set: "activity_logs_set_input",
        where: "activity_logs_bool_exp!",
      },
    },
    update_activity_logs_by_pk: {
      __type: "activity_logs",
      __args: {
        _set: "activity_logs_set_input",
        pk_columns: "activity_logs_pk_columns_input!",
      },
    },
    update_aruba_wifi_access: {
      __type: "aruba_wifi_access_mutation_response",
      __args: {
        _set: "aruba_wifi_access_set_input",
        where: "aruba_wifi_access_bool_exp!",
      },
    },
    update_aruba_wifi_access_by_pk: {
      __type: "aruba_wifi_access",
      __args: {
        _set: "aruba_wifi_access_set_input",
        pk_columns: "aruba_wifi_access_pk_columns_input!",
      },
    },
    update_auth_audit_log_entries: {
      __type: "auth_audit_log_entries_mutation_response",
      __args: {
        _set: "auth_audit_log_entries_set_input",
        where: "auth_audit_log_entries_bool_exp!",
      },
    },
    update_auth_audit_log_entries_by_pk: {
      __type: "auth_audit_log_entries",
      __args: {
        _set: "auth_audit_log_entries_set_input",
        pk_columns: "auth_audit_log_entries_pk_columns_input!",
      },
    },
    update_auth_instances: {
      __type: "auth_instances_mutation_response",
      __args: {
        _set: "auth_instances_set_input",
        where: "auth_instances_bool_exp!",
      },
    },
    update_auth_instances_by_pk: {
      __type: "auth_instances",
      __args: {
        _set: "auth_instances_set_input",
        pk_columns: "auth_instances_pk_columns_input!",
      },
    },
    update_auth_refresh_tokens: {
      __type: "auth_refresh_tokens_mutation_response",
      __args: {
        _inc: "auth_refresh_tokens_inc_input",
        _set: "auth_refresh_tokens_set_input",
        where: "auth_refresh_tokens_bool_exp!",
      },
    },
    update_auth_refresh_tokens_by_pk: {
      __type: "auth_refresh_tokens",
      __args: {
        _inc: "auth_refresh_tokens_inc_input",
        _set: "auth_refresh_tokens_set_input",
        pk_columns: "auth_refresh_tokens_pk_columns_input!",
      },
    },
    update_auth_schema_migrations: {
      __type: "auth_schema_migrations_mutation_response",
      __args: {
        _set: "auth_schema_migrations_set_input",
        where: "auth_schema_migrations_bool_exp!",
      },
    },
    update_auth_schema_migrations_by_pk: {
      __type: "auth_schema_migrations",
      __args: {
        _set: "auth_schema_migrations_set_input",
        pk_columns: "auth_schema_migrations_pk_columns_input!",
      },
    },
    update_auth_users: {
      __type: "auth_users_mutation_response",
      __args: {
        _append: "auth_users_append_input",
        _delete_at_path: "auth_users_delete_at_path_input",
        _delete_elem: "auth_users_delete_elem_input",
        _delete_key: "auth_users_delete_key_input",
        _inc: "auth_users_inc_input",
        _prepend: "auth_users_prepend_input",
        _set: "auth_users_set_input",
        where: "auth_users_bool_exp!",
      },
    },
    update_auth_users_by_pk: {
      __type: "auth_users",
      __args: {
        _append: "auth_users_append_input",
        _delete_at_path: "auth_users_delete_at_path_input",
        _delete_elem: "auth_users_delete_elem_input",
        _delete_key: "auth_users_delete_key_input",
        _inc: "auth_users_inc_input",
        _prepend: "auth_users_prepend_input",
        _set: "auth_users_set_input",
        pk_columns: "auth_users_pk_columns_input!",
      },
    },
    update_brand_campaigns: {
      __type: "brand_campaigns_mutation_response",
      __args: {
        _set: "brand_campaigns_set_input",
        where: "brand_campaigns_bool_exp!",
      },
    },
    update_brand_campaigns_by_pk: {
      __type: "brand_campaigns",
      __args: {
        _set: "brand_campaigns_set_input",
        pk_columns: "brand_campaigns_pk_columns_input!",
      },
    },
    update_brand_discussions: {
      __type: "brand_discussions_mutation_response",
      __args: {
        _inc: "brand_discussions_inc_input",
        _set: "brand_discussions_set_input",
        where: "brand_discussions_bool_exp!",
      },
    },
    update_brand_inbox: {
      __type: "brand_inbox_mutation_response",
      __args: { _set: "brand_inbox_set_input", where: "brand_inbox_bool_exp!" },
    },
    update_brand_media: {
      __type: "brand_media_mutation_response",
      __args: {
        _inc: "brand_media_inc_input",
        _set: "brand_media_set_input",
        where: "brand_media_bool_exp!",
      },
    },
    update_brand_tags: {
      __type: "brand_tags_mutation_response",
      __args: { _set: "brand_tags_set_input", where: "brand_tags_bool_exp!" },
    },
    update_brand_users: {
      __type: "brand_users_mutation_response",
      __args: { _set: "brand_users_set_input", where: "brand_users_bool_exp!" },
    },
    update_brand_users_by_pk: {
      __type: "brand_users",
      __args: {
        _set: "brand_users_set_input",
        pk_columns: "brand_users_pk_columns_input!",
      },
    },
    update_brand_wishes: {
      __type: "brand_wishes_mutation_response",
      __args: {
        _set: "brand_wishes_set_input",
        where: "brand_wishes_bool_exp!",
      },
    },
    update_brands: {
      __type: "brands_mutation_response",
      __args: { _set: "brands_set_input", where: "brands_bool_exp!" },
    },
    update_brands_by_pk: {
      __type: "brands",
      __args: {
        _set: "brands_set_input",
        pk_columns: "brands_pk_columns_input!",
      },
    },
    update_campaigns: {
      __type: "campaigns_mutation_response",
      __args: { _set: "campaigns_set_input", where: "campaigns_bool_exp!" },
    },
    update_campaigns_by_pk: {
      __type: "campaigns",
      __args: {
        _set: "campaigns_set_input",
        pk_columns: "campaigns_pk_columns_input!",
      },
    },
    update_card: {
      __type: "card_mutation_response",
      __args: { _set: "card_set_input", where: "card_bool_exp!" },
    },
    update_card_by_pk: {
      __type: "card",
      __args: { _set: "card_set_input", pk_columns: "card_pk_columns_input!" },
    },
    update_comment_comments: {
      __type: "comment_comments_mutation_response",
      __args: {
        _set: "comment_comments_set_input",
        where: "comment_comments_bool_exp!",
      },
    },
    update_comment_likes: {
      __type: "comment_likes_mutation_response",
      __args: {
        _set: "comment_likes_set_input",
        where: "comment_likes_bool_exp!",
      },
    },
    update_conversations: {
      __type: "conversations_mutation_response",
      __args: {
        _set: "conversations_set_input",
        where: "conversations_bool_exp!",
      },
    },
    update_conversations_by_pk: {
      __type: "conversations",
      __args: {
        _set: "conversations_set_input",
        pk_columns: "conversations_pk_columns_input!",
      },
    },
    update_currencies: {
      __type: "currencies_mutation_response",
      __args: { _set: "currencies_set_input", where: "currencies_bool_exp!" },
    },
    update_currencies_by_pk: {
      __type: "currencies",
      __args: {
        _set: "currencies_set_input",
        pk_columns: "currencies_pk_columns_input!",
      },
    },
    update_daily_rates: {
      __type: "daily_rates_mutation_response",
      __args: {
        _inc: "daily_rates_inc_input",
        _set: "daily_rates_set_input",
        where: "daily_rates_bool_exp!",
      },
    },
    update_daily_rates_by_pk: {
      __type: "daily_rates",
      __args: {
        _inc: "daily_rates_inc_input",
        _set: "daily_rates_set_input",
        pk_columns: "daily_rates_pk_columns_input!",
      },
    },
    update_default_addons: {
      __type: "default_addons_mutation_response",
      __args: {
        _inc: "default_addons_inc_input",
        _set: "default_addons_set_input",
        where: "default_addons_bool_exp!",
      },
    },
    update_default_addons_by_pk: {
      __type: "default_addons",
      __args: {
        _inc: "default_addons_inc_input",
        _set: "default_addons_set_input",
        pk_columns: "default_addons_pk_columns_input!",
      },
    },
    update_discount_codes: {
      __type: "discount_codes_mutation_response",
      __args: {
        _inc: "discount_codes_inc_input",
        _set: "discount_codes_set_input",
        where: "discount_codes_bool_exp!",
      },
    },
    update_discount_codes_by_pk: {
      __type: "discount_codes",
      __args: {
        _inc: "discount_codes_inc_input",
        _set: "discount_codes_set_input",
        pk_columns: "discount_codes_pk_columns_input!",
      },
    },
    update_discussion_user: {
      __type: "discussion_user_mutation_response",
      __args: {
        _set: "discussion_user_set_input",
        where: "discussion_user_bool_exp!",
      },
    },
    update_discussions: {
      __type: "discussions_mutation_response",
      __args: {
        _inc: "discussions_inc_input",
        _set: "discussions_set_input",
        where: "discussions_bool_exp!",
      },
    },
    update_discussions_by_pk: {
      __type: "discussions",
      __args: {
        _inc: "discussions_inc_input",
        _set: "discussions_set_input",
        pk_columns: "discussions_pk_columns_input!",
      },
    },
    update_extensions: {
      __type: "extensions_mutation_response",
      __args: {
        _inc: "extensions_inc_input",
        _set: "extensions_set_input",
        where: "extensions_bool_exp!",
      },
    },
    update_extensions_by_pk: {
      __type: "extensions",
      __args: {
        _inc: "extensions_inc_input",
        _set: "extensions_set_input",
        pk_columns: "extensions_pk_columns_input!",
      },
    },
    update_extensions_geometry_columns: {
      __type: "extensions_geometry_columns_mutation_response",
      __args: {
        _inc: "extensions_geometry_columns_inc_input",
        _set: "extensions_geometry_columns_set_input",
        where: "extensions_geometry_columns_bool_exp!",
      },
    },
    update_extensions_spatial_ref_sys: {
      __type: "extensions_spatial_ref_sys_mutation_response",
      __args: {
        _inc: "extensions_spatial_ref_sys_inc_input",
        _set: "extensions_spatial_ref_sys_set_input",
        where: "extensions_spatial_ref_sys_bool_exp!",
      },
    },
    update_extensions_spatial_ref_sys_by_pk: {
      __type: "extensions_spatial_ref_sys",
      __args: {
        _inc: "extensions_spatial_ref_sys_inc_input",
        _set: "extensions_spatial_ref_sys_set_input",
        pk_columns: "extensions_spatial_ref_sys_pk_columns_input!",
      },
    },
    update_floor_plan_grid: {
      __type: "floor_plan_grid_mutation_response",
      __args: {
        _inc: "floor_plan_grid_inc_input",
        _set: "floor_plan_grid_set_input",
        where: "floor_plan_grid_bool_exp!",
      },
    },
    update_floor_plan_grid_by_pk: {
      __type: "floor_plan_grid",
      __args: {
        _inc: "floor_plan_grid_inc_input",
        _set: "floor_plan_grid_set_input",
        pk_columns: "floor_plan_grid_pk_columns_input!",
      },
    },
    update_floor_plans: {
      __type: "floor_plans_mutation_response",
      __args: { _set: "floor_plans_set_input", where: "floor_plans_bool_exp!" },
    },
    update_floor_plans_by_pk: {
      __type: "floor_plans",
      __args: {
        _set: "floor_plans_set_input",
        pk_columns: "floor_plans_pk_columns_input!",
      },
    },
    update_guest_questionaires_answers: {
      __type: "guest_questionaires_answers_mutation_response",
      __args: {
        _set: "guest_questionaires_answers_set_input",
        where: "guest_questionaires_answers_bool_exp!",
      },
    },
    update_guest_questionaires_answers_by_pk: {
      __type: "guest_questionaires_answers",
      __args: {
        _set: "guest_questionaires_answers_set_input",
        pk_columns: "guest_questionaires_answers_pk_columns_input!",
      },
    },
    update_guests: {
      __type: "guests_mutation_response",
      __args: { _set: "guests_set_input", where: "guests_bool_exp!" },
    },
    update_guests_by_pk: {
      __type: "guests",
      __args: {
        _set: "guests_set_input",
        pk_columns: "guests_pk_columns_input!",
      },
    },
    update_guests_has_questionaires: {
      __type: "guests_has_questionaires_mutation_response",
      __args: {
        _set: "guests_has_questionaires_set_input",
        where: "guests_has_questionaires_bool_exp!",
      },
    },
    update_guests_has_questionaires_by_pk: {
      __type: "guests_has_questionaires",
      __args: {
        _set: "guests_has_questionaires_set_input",
        pk_columns: "guests_has_questionaires_pk_columns_input!",
      },
    },
    update_inboxes: {
      __type: "inboxes_mutation_response",
      __args: { _set: "inboxes_set_input", where: "inboxes_bool_exp!" },
    },
    update_inboxes_by_pk: {
      __type: "inboxes",
      __args: {
        _set: "inboxes_set_input",
        pk_columns: "inboxes_pk_columns_input!",
      },
    },
    update_invoice: {
      __type: "invoice_mutation_response",
      __args: {
        _inc: "invoice_inc_input",
        _set: "invoice_set_input",
        where: "invoice_bool_exp!",
      },
    },
    update_invoice_by_pk: {
      __type: "invoice",
      __args: {
        _inc: "invoice_inc_input",
        _set: "invoice_set_input",
        pk_columns: "invoice_pk_columns_input!",
      },
    },
    update_key_performance_snapshots: {
      __type: "key_performance_snapshots_mutation_response",
      __args: {
        _set: "key_performance_snapshots_set_input",
        where: "key_performance_snapshots_bool_exp!",
      },
    },
    update_key_performance_snapshots_by_pk: {
      __type: "key_performance_snapshots",
      __args: {
        _set: "key_performance_snapshots_set_input",
        pk_columns: "key_performance_snapshots_pk_columns_input!",
      },
    },
    update_listing_categories: {
      __type: "listing_categories_mutation_response",
      __args: {
        _inc: "listing_categories_inc_input",
        _set: "listing_categories_set_input",
        where: "listing_categories_bool_exp!",
      },
    },
    update_listing_categories_by_pk: {
      __type: "listing_categories",
      __args: {
        _inc: "listing_categories_inc_input",
        _set: "listing_categories_set_input",
        pk_columns: "listing_categories_pk_columns_input!",
      },
    },
    update_listing_collections: {
      __type: "listing_collections_mutation_response",
      __args: {
        _inc: "listing_collections_inc_input",
        _set: "listing_collections_set_input",
        where: "listing_collections_bool_exp!",
      },
    },
    update_listing_collections_by_pk: {
      __type: "listing_collections",
      __args: {
        _inc: "listing_collections_inc_input",
        _set: "listing_collections_set_input",
        pk_columns: "listing_collections_pk_columns_input!",
      },
    },
    update_listing_discussions: {
      __type: "listing_discussions_mutation_response",
      __args: {
        _inc: "listing_discussions_inc_input",
        _set: "listing_discussions_set_input",
        where: "listing_discussions_bool_exp!",
      },
    },
    update_listing_in_collections: {
      __type: "listing_in_collections_mutation_response",
      __args: {
        _set: "listing_in_collections_set_input",
        where: "listing_in_collections_bool_exp!",
      },
    },
    update_listing_media: {
      __type: "listing_media_mutation_response",
      __args: {
        _inc: "listing_media_inc_input",
        _set: "listing_media_set_input",
        where: "listing_media_bool_exp!",
      },
    },
    update_listing_tags: {
      __type: "listing_tags_mutation_response",
      __args: {
        _set: "listing_tags_set_input",
        where: "listing_tags_bool_exp!",
      },
    },
    update_listing_wishes: {
      __type: "listing_wishes_mutation_response",
      __args: {
        _set: "listing_wishes_set_input",
        where: "listing_wishes_bool_exp!",
      },
    },
    update_listings: {
      __type: "listings_mutation_response",
      __args: {
        _inc: "listings_inc_input",
        _set: "listings_set_input",
        where: "listings_bool_exp!",
      },
    },
    update_listings_by_pk: {
      __type: "listings",
      __args: {
        _inc: "listings_inc_input",
        _set: "listings_set_input",
        pk_columns: "listings_pk_columns_input!",
      },
    },
    update_logs: {
      __type: "logs_mutation_response",
      __args: { _set: "logs_set_input", where: "logs_bool_exp!" },
    },
    update_logs_by_pk: {
      __type: "logs",
      __args: { _set: "logs_set_input", pk_columns: "logs_pk_columns_input!" },
    },
    update_media: {
      __type: "media_mutation_response",
      __args: {
        _inc: "media_inc_input",
        _set: "media_set_input",
        where: "media_bool_exp!",
      },
    },
    update_media_by_pk: {
      __type: "media",
      __args: {
        _inc: "media_inc_input",
        _set: "media_set_input",
        pk_columns: "media_pk_columns_input!",
      },
    },
    update_messages: {
      __type: "messages_mutation_response",
      __args: { _set: "messages_set_input", where: "messages_bool_exp!" },
    },
    update_messages_by_pk: {
      __type: "messages",
      __args: {
        _set: "messages_set_input",
        pk_columns: "messages_pk_columns_input!",
      },
    },
    update_model_has_comments: {
      __type: "model_has_comments_mutation_response",
      __args: {
        _set: "model_has_comments_set_input",
        where: "model_has_comments_bool_exp!",
      },
    },
    update_model_has_comments_by_pk: {
      __type: "model_has_comments",
      __args: {
        _set: "model_has_comments_set_input",
        pk_columns: "model_has_comments_pk_columns_input!",
      },
    },
    update_model_has_likes: {
      __type: "model_has_likes_mutation_response",
      __args: {
        _set: "model_has_likes_set_input",
        where: "model_has_likes_bool_exp!",
      },
    },
    update_model_has_permissions: {
      __type: "model_has_permissions_mutation_response",
      __args: {
        _set: "model_has_permissions_set_input",
        where: "model_has_permissions_bool_exp!",
      },
    },
    update_model_has_roles: {
      __type: "model_has_roles_mutation_response",
      __args: {
        _set: "model_has_roles_set_input",
        where: "model_has_roles_bool_exp!",
      },
    },
    update_model_has_tags: {
      __type: "model_has_tags_mutation_response",
      __args: {
        _set: "model_has_tags_set_input",
        where: "model_has_tags_bool_exp!",
      },
    },
    update_model_has_tags_by_pk: {
      __type: "model_has_tags",
      __args: {
        _set: "model_has_tags_set_input",
        pk_columns: "model_has_tags_pk_columns_input!",
      },
    },
    update_notifications: {
      __type: "notifications_mutation_response",
      __args: {
        _set: "notifications_set_input",
        where: "notifications_bool_exp!",
      },
    },
    update_notifications_by_pk: {
      __type: "notifications",
      __args: {
        _set: "notifications_set_input",
        pk_columns: "notifications_pk_columns_input!",
      },
    },
    update_outlet_has_addons: {
      __type: "outlet_has_addons_mutation_response",
      __args: {
        _inc: "outlet_has_addons_inc_input",
        _set: "outlet_has_addons_set_input",
        where: "outlet_has_addons_bool_exp!",
      },
    },
    update_outlet_has_addons_by_pk: {
      __type: "outlet_has_addons",
      __args: {
        _inc: "outlet_has_addons_inc_input",
        _set: "outlet_has_addons_set_input",
        pk_columns: "outlet_has_addons_pk_columns_input!",
      },
    },
    update_outlets: {
      __type: "outlets_mutation_response",
      __args: {
        _inc: "outlets_inc_input",
        _set: "outlets_set_input",
        where: "outlets_bool_exp!",
      },
    },
    update_outlets_by_pk: {
      __type: "outlets",
      __args: {
        _inc: "outlets_inc_input",
        _set: "outlets_set_input",
        pk_columns: "outlets_pk_columns_input!",
      },
    },
    update_passes: {
      __type: "passes_mutation_response",
      __args: { _set: "passes_set_input", where: "passes_bool_exp!" },
    },
    update_passes_activity_logs: {
      __type: "passes_activity_logs_mutation_response",
      __args: {
        _set: "passes_activity_logs_set_input",
        where: "passes_activity_logs_bool_exp!",
      },
    },
    update_passes_by_pk: {
      __type: "passes",
      __args: {
        _set: "passes_set_input",
        pk_columns: "passes_pk_columns_input!",
      },
    },
    update_payments: {
      __type: "payments_mutation_response",
      __args: {
        _inc: "payments_inc_input",
        _set: "payments_set_input",
        where: "payments_bool_exp!",
      },
    },
    update_payments_by_pk: {
      __type: "payments",
      __args: {
        _inc: "payments_inc_input",
        _set: "payments_set_input",
        pk_columns: "payments_pk_columns_input!",
      },
    },
    update_permissions: {
      __type: "permissions_mutation_response",
      __args: { _set: "permissions_set_input", where: "permissions_bool_exp!" },
    },
    update_permissions_by_pk: {
      __type: "permissions",
      __args: {
        _set: "permissions_set_input",
        pk_columns: "permissions_pk_columns_input!",
      },
    },
    update_post_comments: {
      __type: "post_comments_mutation_response",
      __args: {
        _set: "post_comments_set_input",
        where: "post_comments_bool_exp!",
      },
    },
    update_post_likes: {
      __type: "post_likes_mutation_response",
      __args: { _set: "post_likes_set_input", where: "post_likes_bool_exp!" },
    },
    update_posts: {
      __type: "posts_mutation_response",
      __args: { _set: "posts_set_input", where: "posts_bool_exp!" },
    },
    update_posts_by_pk: {
      __type: "posts",
      __args: {
        _set: "posts_set_input",
        pk_columns: "posts_pk_columns_input!",
      },
    },
    update_questionaires: {
      __type: "questionaires_mutation_response",
      __args: {
        _set: "questionaires_set_input",
        where: "questionaires_bool_exp!",
      },
    },
    update_questionaires_by_pk: {
      __type: "questionaires",
      __args: {
        _set: "questionaires_set_input",
        pk_columns: "questionaires_pk_columns_input!",
      },
    },
    update_questions: {
      __type: "questions_mutation_response",
      __args: { _set: "questions_set_input", where: "questions_bool_exp!" },
    },
    update_questions_by_pk: {
      __type: "questions",
      __args: {
        _set: "questions_set_input",
        pk_columns: "questions_pk_columns_input!",
      },
    },
    update_requests: {
      __type: "requests_mutation_response",
      __args: {
        _inc: "requests_inc_input",
        _set: "requests_set_input",
        where: "requests_bool_exp!",
      },
    },
    update_requests_by_pk: {
      __type: "requests",
      __args: {
        _inc: "requests_inc_input",
        _set: "requests_set_input",
        pk_columns: "requests_pk_columns_input!",
      },
    },
    update_reservations: {
      __type: "reservations_mutation_response",
      __args: {
        _inc: "reservations_inc_input",
        _set: "reservations_set_input",
        where: "reservations_bool_exp!",
      },
    },
    update_reservations_activity_logs: {
      __type: "reservations_activity_logs_mutation_response",
      __args: {
        _set: "reservations_activity_logs_set_input",
        where: "reservations_activity_logs_bool_exp!",
      },
    },
    update_reservations_by_pk: {
      __type: "reservations",
      __args: {
        _inc: "reservations_inc_input",
        _set: "reservations_set_input",
        pk_columns: "reservations_pk_columns_input!",
      },
    },
    update_review_comments: {
      __type: "review_comments_mutation_response",
      __args: {
        _set: "review_comments_set_input",
        where: "review_comments_bool_exp!",
      },
    },
    update_review_likes: {
      __type: "review_likes_mutation_response",
      __args: {
        _set: "review_likes_set_input",
        where: "review_likes_bool_exp!",
      },
    },
    update_review_media: {
      __type: "review_media_mutation_response",
      __args: {
        _inc: "review_media_inc_input",
        _set: "review_media_set_input",
        where: "review_media_bool_exp!",
      },
    },
    update_reviews: {
      __type: "reviews_mutation_response",
      __args: {
        _inc: "reviews_inc_input",
        _set: "reviews_set_input",
        where: "reviews_bool_exp!",
      },
    },
    update_reviews_by_pk: {
      __type: "reviews",
      __args: {
        _inc: "reviews_inc_input",
        _set: "reviews_set_input",
        pk_columns: "reviews_pk_columns_input!",
      },
    },
    update_role_has_permissions: {
      __type: "role_has_permissions_mutation_response",
      __args: {
        _set: "role_has_permissions_set_input",
        where: "role_has_permissions_bool_exp!",
      },
    },
    update_roles: {
      __type: "roles_mutation_response",
      __args: { _set: "roles_set_input", where: "roles_bool_exp!" },
    },
    update_roles_by_pk: {
      __type: "roles",
      __args: {
        _set: "roles_set_input",
        pk_columns: "roles_pk_columns_input!",
      },
    },
    update_social_relationships: {
      __type: "social_relationships_mutation_response",
      __args: {
        _set: "social_relationships_set_input",
        where: "social_relationships_bool_exp!",
      },
    },
    update_social_relationships_by_pk: {
      __type: "social_relationships",
      __args: {
        _set: "social_relationships_set_input",
        pk_columns: "social_relationships_pk_columns_input!",
      },
    },
    update_spaces: {
      __type: "spaces_mutation_response",
      __args: {
        _inc: "spaces_inc_input",
        _set: "spaces_set_input",
        where: "spaces_bool_exp!",
      },
    },
    update_spaces_by_pk: {
      __type: "spaces",
      __args: {
        _inc: "spaces_inc_input",
        _set: "spaces_set_input",
        pk_columns: "spaces_pk_columns_input!",
      },
    },
    update_spaces_guests: {
      __type: "spaces_guests_mutation_response",
      __args: {
        _set: "spaces_guests_set_input",
        where: "spaces_guests_bool_exp!",
      },
    },
    update_spaces_guests_by_pk: {
      __type: "spaces_guests",
      __args: {
        _set: "spaces_guests_set_input",
        pk_columns: "spaces_guests_pk_columns_input!",
      },
    },
    update_spaces_usage: {
      __type: "spaces_usage_mutation_response",
      __args: {
        _set: "spaces_usage_set_input",
        where: "spaces_usage_bool_exp!",
      },
    },
    update_spaces_usage_by_pk: {
      __type: "spaces_usage",
      __args: {
        _set: "spaces_usage_set_input",
        pk_columns: "spaces_usage_pk_columns_input!",
      },
    },
    update_storage_buckets: {
      __type: "storage_buckets_mutation_response",
      __args: {
        _set: "storage_buckets_set_input",
        where: "storage_buckets_bool_exp!",
      },
    },
    update_storage_buckets_by_pk: {
      __type: "storage_buckets",
      __args: {
        _set: "storage_buckets_set_input",
        pk_columns: "storage_buckets_pk_columns_input!",
      },
    },
    update_stripe_transfers: {
      __type: "stripe_transfers_mutation_response",
      __args: {
        _set: "stripe_transfers_set_input",
        where: "stripe_transfers_bool_exp!",
      },
    },
    update_stripe_transfers_by_pk: {
      __type: "stripe_transfers",
      __args: {
        _set: "stripe_transfers_set_input",
        pk_columns: "stripe_transfers_pk_columns_input!",
      },
    },
    update_subscriptions: {
      __type: "subscriptions_mutation_response",
      __args: {
        _set: "subscriptions_set_input",
        where: "subscriptions_bool_exp!",
      },
    },
    update_subscriptions_by_pk: {
      __type: "subscriptions",
      __args: {
        _set: "subscriptions_set_input",
        pk_columns: "subscriptions_pk_columns_input!",
      },
    },
    update_supabase_functions_hooks: {
      __type: "supabase_functions_hooks_mutation_response",
      __args: {
        _inc: "supabase_functions_hooks_inc_input",
        _set: "supabase_functions_hooks_set_input",
        where: "supabase_functions_hooks_bool_exp!",
      },
    },
    update_supabase_functions_hooks_by_pk: {
      __type: "supabase_functions_hooks",
      __args: {
        _inc: "supabase_functions_hooks_inc_input",
        _set: "supabase_functions_hooks_set_input",
        pk_columns: "supabase_functions_hooks_pk_columns_input!",
      },
    },
    update_tags: {
      __type: "tags_mutation_response",
      __args: { _set: "tags_set_input", where: "tags_bool_exp!" },
    },
    update_tags_by_pk: {
      __type: "tags",
      __args: { _set: "tags_set_input", pk_columns: "tags_pk_columns_input!" },
    },
    update_team_memberships: {
      __type: "team_memberships_mutation_response",
      __args: {
        _set: "team_memberships_set_input",
        where: "team_memberships_bool_exp!",
      },
    },
    update_team_memberships_by_pk: {
      __type: "team_memberships",
      __args: {
        _set: "team_memberships_set_input",
        pk_columns: "team_memberships_pk_columns_input!",
      },
    },
    update_team_roles: {
      __type: "team_roles_mutation_response",
      __args: { _set: "team_roles_set_input", where: "team_roles_bool_exp!" },
    },
    update_team_schedules: {
      __type: "team_schedules_mutation_response",
      __args: {
        _set: "team_schedules_set_input",
        where: "team_schedules_bool_exp!",
      },
    },
    update_team_schedules_by_pk: {
      __type: "team_schedules",
      __args: {
        _set: "team_schedules_set_input",
        pk_columns: "team_schedules_pk_columns_input!",
      },
    },
    update_team_subscriptions: {
      __type: "team_subscriptions_mutation_response",
      __args: {
        _set: "team_subscriptions_set_input",
        where: "team_subscriptions_bool_exp!",
      },
    },
    update_teams: {
      __type: "teams_mutation_response",
      __args: { _set: "teams_set_input", where: "teams_bool_exp!" },
    },
    update_teams_by_pk: {
      __type: "teams",
      __args: {
        _set: "teams_set_input",
        pk_columns: "teams_pk_columns_input!",
      },
    },
    update_user_has_reservations: {
      __type: "user_has_reservations_mutation_response",
      __args: {
        _set: "user_has_reservations_set_input",
        where: "user_has_reservations_bool_exp!",
      },
    },
    update_user_has_reservations_by_pk: {
      __type: "user_has_reservations",
      __args: {
        _set: "user_has_reservations_set_input",
        pk_columns: "user_has_reservations_pk_columns_input!",
      },
    },
    update_user_inbox: {
      __type: "user_inbox_mutation_response",
      __args: { _set: "user_inbox_set_input", where: "user_inbox_bool_exp!" },
    },
    update_user_media: {
      __type: "user_media_mutation_response",
      __args: {
        _inc: "user_media_inc_input",
        _set: "user_media_set_input",
        where: "user_media_bool_exp!",
      },
    },
    update_user_roles: {
      __type: "user_roles_mutation_response",
      __args: { _set: "user_roles_set_input", where: "user_roles_bool_exp!" },
    },
    update_user_sessions: {
      __type: "user_sessions_mutation_response",
      __args: {
        _inc: "user_sessions_inc_input",
        _set: "user_sessions_set_input",
        where: "user_sessions_bool_exp!",
      },
    },
    update_user_sessions_by_pk: {
      __type: "user_sessions",
      __args: {
        _inc: "user_sessions_inc_input",
        _set: "user_sessions_set_input",
        pk_columns: "user_sessions_pk_columns_input!",
      },
    },
    update_user_subscriptions: {
      __type: "user_subscriptions_mutation_response",
      __args: {
        _set: "user_subscriptions_set_input",
        where: "user_subscriptions_bool_exp!",
      },
    },
    update_users: {
      __type: "users_mutation_response",
      __args: { _set: "users_set_input", where: "users_bool_exp!" },
    },
    update_users_by_pk: {
      __type: "users",
      __args: {
        _set: "users_set_input",
        pk_columns: "users_pk_columns_input!",
      },
    },
    update_wishlist: {
      __type: "wishlist_mutation_response",
      __args: { _set: "wishlist_set_input", where: "wishlist_bool_exp!" },
    },
    update_wishlist_by_pk: {
      __type: "wishlist",
      __args: {
        _set: "wishlist_set_input",
        pk_columns: "wishlist_pk_columns_input!",
      },
    },
  },
  subscription: {
    __typename: { __type: "String!" },
    activity_logs: {
      __type: "[activity_logs!]!",
      __args: {
        distinct_on: "[activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[activity_logs_order_by!]",
        where: "activity_logs_bool_exp",
      },
    },
    activity_logs_aggregate: {
      __type: "activity_logs_aggregate!",
      __args: {
        distinct_on: "[activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[activity_logs_order_by!]",
        where: "activity_logs_bool_exp",
      },
    },
    activity_logs_by_pk: { __type: "activity_logs", __args: { uuid: "uuid!" } },
    aruba_wifi_access: {
      __type: "[aruba_wifi_access!]!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_access_aggregate: {
      __type: "aruba_wifi_access_aggregate!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_access_by_pk: {
      __type: "aruba_wifi_access",
      __args: { uuid: "uuid!" },
    },
    auth_audit_log_entries: {
      __type: "[auth_audit_log_entries!]!",
      __args: {
        distinct_on: "[auth_audit_log_entries_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_audit_log_entries_order_by!]",
        where: "auth_audit_log_entries_bool_exp",
      },
    },
    auth_audit_log_entries_aggregate: {
      __type: "auth_audit_log_entries_aggregate!",
      __args: {
        distinct_on: "[auth_audit_log_entries_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_audit_log_entries_order_by!]",
        where: "auth_audit_log_entries_bool_exp",
      },
    },
    auth_audit_log_entries_by_pk: {
      __type: "auth_audit_log_entries",
      __args: { id: "uuid!" },
    },
    auth_instances: {
      __type: "[auth_instances!]!",
      __args: {
        distinct_on: "[auth_instances_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_instances_order_by!]",
        where: "auth_instances_bool_exp",
      },
    },
    auth_instances_aggregate: {
      __type: "auth_instances_aggregate!",
      __args: {
        distinct_on: "[auth_instances_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_instances_order_by!]",
        where: "auth_instances_bool_exp",
      },
    },
    auth_instances_by_pk: { __type: "auth_instances", __args: { id: "uuid!" } },
    auth_refresh_tokens: {
      __type: "[auth_refresh_tokens!]!",
      __args: {
        distinct_on: "[auth_refresh_tokens_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_refresh_tokens_order_by!]",
        where: "auth_refresh_tokens_bool_exp",
      },
    },
    auth_refresh_tokens_aggregate: {
      __type: "auth_refresh_tokens_aggregate!",
      __args: {
        distinct_on: "[auth_refresh_tokens_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_refresh_tokens_order_by!]",
        where: "auth_refresh_tokens_bool_exp",
      },
    },
    auth_refresh_tokens_by_pk: {
      __type: "auth_refresh_tokens",
      __args: { id: "bigint!" },
    },
    auth_schema_migrations: {
      __type: "[auth_schema_migrations!]!",
      __args: {
        distinct_on: "[auth_schema_migrations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_schema_migrations_order_by!]",
        where: "auth_schema_migrations_bool_exp",
      },
    },
    auth_schema_migrations_aggregate: {
      __type: "auth_schema_migrations_aggregate!",
      __args: {
        distinct_on: "[auth_schema_migrations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_schema_migrations_order_by!]",
        where: "auth_schema_migrations_bool_exp",
      },
    },
    auth_schema_migrations_by_pk: {
      __type: "auth_schema_migrations",
      __args: { version: "String!" },
    },
    auth_users: {
      __type: "[auth_users!]!",
      __args: {
        distinct_on: "[auth_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_users_order_by!]",
        where: "auth_users_bool_exp",
      },
    },
    auth_users_aggregate: {
      __type: "auth_users_aggregate!",
      __args: {
        distinct_on: "[auth_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[auth_users_order_by!]",
        where: "auth_users_bool_exp",
      },
    },
    auth_users_by_pk: { __type: "auth_users", __args: { id: "uuid!" } },
    brand_campaigns: {
      __type: "[brand_campaigns!]!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_aggregate: {
      __type: "brand_campaigns_aggregate!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_by_pk: {
      __type: "brand_campaigns",
      __args: { uuid: "uuid!" },
    },
    brand_discussions: {
      __type: "[brand_discussions!]!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    brand_discussions_aggregate: {
      __type: "brand_discussions_aggregate!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    brand_inbox: {
      __type: "[brand_inbox!]!",
      __args: {
        distinct_on: "[brand_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_inbox_order_by!]",
        where: "brand_inbox_bool_exp",
      },
    },
    brand_inbox_aggregate: {
      __type: "brand_inbox_aggregate!",
      __args: {
        distinct_on: "[brand_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_inbox_order_by!]",
        where: "brand_inbox_bool_exp",
      },
    },
    brand_media: {
      __type: "[brand_media!]!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    brand_media_aggregate: {
      __type: "brand_media_aggregate!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    brand_tags: {
      __type: "[brand_tags!]!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    brand_tags_aggregate: {
      __type: "brand_tags_aggregate!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    brand_users: {
      __type: "[brand_users!]!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_aggregate: {
      __type: "brand_users_aggregate!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_by_pk: { __type: "brand_users", __args: { uuid: "uuid!" } },
    brand_wishes: {
      __type: "[brand_wishes!]!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
    brand_wishes_aggregate: {
      __type: "brand_wishes_aggregate!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
    brands: {
      __type: "[brands!]!",
      __args: {
        distinct_on: "[brands_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brands_order_by!]",
        where: "brands_bool_exp",
      },
    },
    brands_aggregate: {
      __type: "brands_aggregate!",
      __args: {
        distinct_on: "[brands_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brands_order_by!]",
        where: "brands_bool_exp",
      },
    },
    brands_by_pk: { __type: "brands", __args: { uuid: "uuid!" } },
    campaigns: {
      __type: "[campaigns!]!",
      __args: {
        distinct_on: "[campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[campaigns_order_by!]",
        where: "campaigns_bool_exp",
      },
    },
    campaigns_aggregate: {
      __type: "campaigns_aggregate!",
      __args: {
        distinct_on: "[campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[campaigns_order_by!]",
        where: "campaigns_bool_exp",
      },
    },
    campaigns_by_pk: { __type: "campaigns", __args: { uuid: "uuid!" } },
    card: {
      __type: "[card!]!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    card_aggregate: {
      __type: "card_aggregate!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    card_by_pk: { __type: "card", __args: { uuid: "uuid!" } },
    comment_comments: {
      __type: "[comment_comments!]!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    comment_comments_aggregate: {
      __type: "comment_comments_aggregate!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    comment_likes: {
      __type: "[comment_likes!]!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    comment_likes_aggregate: {
      __type: "comment_likes_aggregate!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    conversations: {
      __type: "[conversations!]!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    conversations_aggregate: {
      __type: "conversations_aggregate!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    conversations_by_pk: { __type: "conversations", __args: { uuid: "uuid!" } },
    currencies: {
      __type: "[currencies!]!",
      __args: {
        distinct_on: "[currencies_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[currencies_order_by!]",
        where: "currencies_bool_exp",
      },
    },
    currencies_aggregate: {
      __type: "currencies_aggregate!",
      __args: {
        distinct_on: "[currencies_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[currencies_order_by!]",
        where: "currencies_bool_exp",
      },
    },
    currencies_by_pk: { __type: "currencies", __args: { uuid: "uuid!" } },
    daily_rates: {
      __type: "[daily_rates!]!",
      __args: {
        distinct_on: "[daily_rates_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[daily_rates_order_by!]",
        where: "daily_rates_bool_exp",
      },
    },
    daily_rates_aggregate: {
      __type: "daily_rates_aggregate!",
      __args: {
        distinct_on: "[daily_rates_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[daily_rates_order_by!]",
        where: "daily_rates_bool_exp",
      },
    },
    daily_rates_by_pk: { __type: "daily_rates", __args: { uuid: "uuid!" } },
    default_addons: {
      __type: "[default_addons!]!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    default_addons_aggregate: {
      __type: "default_addons_aggregate!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    default_addons_by_pk: {
      __type: "default_addons",
      __args: { uuid: "uuid!" },
    },
    discount_codes: {
      __type: "[discount_codes!]!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_aggregate: {
      __type: "discount_codes_aggregate!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_by_pk: {
      __type: "discount_codes",
      __args: { uuid: "uuid!" },
    },
    discussion_user: {
      __type: "[discussion_user!]!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussion_user_aggregate: {
      __type: "discussion_user_aggregate!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussions: {
      __type: "[discussions!]!",
      __args: {
        distinct_on: "[discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussions_order_by!]",
        where: "discussions_bool_exp",
      },
    },
    discussions_aggregate: {
      __type: "discussions_aggregate!",
      __args: {
        distinct_on: "[discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussions_order_by!]",
        where: "discussions_bool_exp",
      },
    },
    discussions_by_pk: { __type: "discussions", __args: { uuid: "uuid!" } },
    extensions: {
      __type: "[extensions!]!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    extensions_aggregate: {
      __type: "extensions_aggregate!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    extensions_by_pk: { __type: "extensions", __args: { id: "String!" } },
    extensions_geography_columns: {
      __type: "[extensions_geography_columns!]!",
      __args: {
        distinct_on: "[extensions_geography_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geography_columns_order_by!]",
        where: "extensions_geography_columns_bool_exp",
      },
    },
    extensions_geography_columns_aggregate: {
      __type: "extensions_geography_columns_aggregate!",
      __args: {
        distinct_on: "[extensions_geography_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geography_columns_order_by!]",
        where: "extensions_geography_columns_bool_exp",
      },
    },
    extensions_geometry_columns: {
      __type: "[extensions_geometry_columns!]!",
      __args: {
        distinct_on: "[extensions_geometry_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geometry_columns_order_by!]",
        where: "extensions_geometry_columns_bool_exp",
      },
    },
    extensions_geometry_columns_aggregate: {
      __type: "extensions_geometry_columns_aggregate!",
      __args: {
        distinct_on: "[extensions_geometry_columns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_geometry_columns_order_by!]",
        where: "extensions_geometry_columns_bool_exp",
      },
    },
    extensions_pg_stat_statements: {
      __type: "[extensions_pg_stat_statements!]!",
      __args: {
        distinct_on: "[extensions_pg_stat_statements_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_pg_stat_statements_order_by!]",
        where: "extensions_pg_stat_statements_bool_exp",
      },
    },
    extensions_pg_stat_statements_aggregate: {
      __type: "extensions_pg_stat_statements_aggregate!",
      __args: {
        distinct_on: "[extensions_pg_stat_statements_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_pg_stat_statements_order_by!]",
        where: "extensions_pg_stat_statements_bool_exp",
      },
    },
    extensions_spatial_ref_sys: {
      __type: "[extensions_spatial_ref_sys!]!",
      __args: {
        distinct_on: "[extensions_spatial_ref_sys_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_spatial_ref_sys_order_by!]",
        where: "extensions_spatial_ref_sys_bool_exp",
      },
    },
    extensions_spatial_ref_sys_aggregate: {
      __type: "extensions_spatial_ref_sys_aggregate!",
      __args: {
        distinct_on: "[extensions_spatial_ref_sys_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_spatial_ref_sys_order_by!]",
        where: "extensions_spatial_ref_sys_bool_exp",
      },
    },
    extensions_spatial_ref_sys_by_pk: {
      __type: "extensions_spatial_ref_sys",
      __args: { srid: "Int!" },
    },
    floor_plan_grid: {
      __type: "[floor_plan_grid!]!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    floor_plan_grid_aggregate: {
      __type: "floor_plan_grid_aggregate!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    floor_plan_grid_by_pk: {
      __type: "floor_plan_grid",
      __args: { uuid: "uuid!" },
    },
    floor_plans: {
      __type: "[floor_plans!]!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_aggregate: {
      __type: "floor_plans_aggregate!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_by_pk: { __type: "floor_plans", __args: { uuid: "uuid!" } },
    guest_questionaires_answers: {
      __type: "[guest_questionaires_answers!]!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_by_pk: {
      __type: "guest_questionaires_answers",
      __args: { uuid: "uuid!" },
    },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_by_pk: { __type: "guests", __args: { uuid: "uuid!" } },
    guests_has_questionaires: {
      __type: "[guests_has_questionaires!]!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    guests_has_questionaires_aggregate: {
      __type: "guests_has_questionaires_aggregate!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    guests_has_questionaires_by_pk: {
      __type: "guests_has_questionaires",
      __args: { uuid: "uuid!" },
    },
    inboxes: {
      __type: "[inboxes!]!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_aggregate: {
      __type: "inboxes_aggregate!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_by_pk: { __type: "inboxes", __args: { uuid: "uuid!" } },
    invoice: {
      __type: "[invoice!]!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    invoice_aggregate: {
      __type: "invoice_aggregate!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    invoice_by_pk: { __type: "invoice", __args: { uuid: "uuid!" } },
    key_performance_snapshots: {
      __type: "[key_performance_snapshots!]!",
      __args: {
        distinct_on: "[key_performance_snapshots_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[key_performance_snapshots_order_by!]",
        where: "key_performance_snapshots_bool_exp",
      },
    },
    key_performance_snapshots_aggregate: {
      __type: "key_performance_snapshots_aggregate!",
      __args: {
        distinct_on: "[key_performance_snapshots_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[key_performance_snapshots_order_by!]",
        where: "key_performance_snapshots_bool_exp",
      },
    },
    key_performance_snapshots_by_pk: {
      __type: "key_performance_snapshots",
      __args: { uuid: "uuid!" },
    },
    listing_categories: {
      __type: "[listing_categories!]!",
      __args: {
        distinct_on: "[listing_categories_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_categories_order_by!]",
        where: "listing_categories_bool_exp",
      },
    },
    listing_categories_aggregate: {
      __type: "listing_categories_aggregate!",
      __args: {
        distinct_on: "[listing_categories_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_categories_order_by!]",
        where: "listing_categories_bool_exp",
      },
    },
    listing_categories_by_pk: {
      __type: "listing_categories",
      __args: { uuid: "uuid!" },
    },
    listing_collections: {
      __type: "[listing_collections!]!",
      __args: {
        distinct_on: "[listing_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_collections_order_by!]",
        where: "listing_collections_bool_exp",
      },
    },
    listing_collections_aggregate: {
      __type: "listing_collections_aggregate!",
      __args: {
        distinct_on: "[listing_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_collections_order_by!]",
        where: "listing_collections_bool_exp",
      },
    },
    listing_collections_by_pk: {
      __type: "listing_collections",
      __args: { uuid: "uuid!" },
    },
    listing_discussions: {
      __type: "[listing_discussions!]!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    listing_discussions_aggregate: {
      __type: "listing_discussions_aggregate!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    listing_in_collections: {
      __type: "[listing_in_collections!]!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_media: {
      __type: "[listing_media!]!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    listing_media_aggregate: {
      __type: "listing_media_aggregate!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    listing_tags: {
      __type: "[listing_tags!]!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    listing_tags_aggregate: {
      __type: "listing_tags_aggregate!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    listing_wishes: {
      __type: "[listing_wishes!]!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
    listing_wishes_aggregate: {
      __type: "listing_wishes_aggregate!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
    listings: {
      __type: "[listings!]!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_aggregate: {
      __type: "listings_aggregate!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_by_pk: { __type: "listings", __args: { uuid: "uuid!" } },
    logs: {
      __type: "[logs!]!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    logs_aggregate: {
      __type: "logs_aggregate!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    logs_by_pk: { __type: "logs", __args: { uuid: "uuid!" } },
    media: {
      __type: "[media!]!",
      __args: {
        distinct_on: "[media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[media_order_by!]",
        where: "media_bool_exp",
      },
    },
    media_aggregate: {
      __type: "media_aggregate!",
      __args: {
        distinct_on: "[media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[media_order_by!]",
        where: "media_bool_exp",
      },
    },
    media_by_pk: { __type: "media", __args: { uuid: "uuid!" } },
    messages: {
      __type: "[messages!]!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    messages_aggregate: {
      __type: "messages_aggregate!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    messages_by_pk: { __type: "messages", __args: { uuid: "uuid!" } },
    model_has_comments: {
      __type: "[model_has_comments!]!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_comments_aggregate: {
      __type: "model_has_comments_aggregate!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_comments_by_pk: {
      __type: "model_has_comments",
      __args: { uuid: "uuid!" },
    },
    model_has_likes: {
      __type: "[model_has_likes!]!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    model_has_likes_aggregate: {
      __type: "model_has_likes_aggregate!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    model_has_permissions: {
      __type: "[model_has_permissions!]!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    model_has_permissions_aggregate: {
      __type: "model_has_permissions_aggregate!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    model_has_roles: {
      __type: "[model_has_roles!]!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    model_has_roles_aggregate: {
      __type: "model_has_roles_aggregate!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    model_has_tags: {
      __type: "[model_has_tags!]!",
      __args: {
        distinct_on: "[model_has_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_tags_order_by!]",
        where: "model_has_tags_bool_exp",
      },
    },
    model_has_tags_aggregate: {
      __type: "model_has_tags_aggregate!",
      __args: {
        distinct_on: "[model_has_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_tags_order_by!]",
        where: "model_has_tags_bool_exp",
      },
    },
    model_has_tags_by_pk: {
      __type: "model_has_tags",
      __args: { tag_uuid: "uuid!" },
    },
    notifications: {
      __type: "[notifications!]!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    notifications_aggregate: {
      __type: "notifications_aggregate!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    notifications_by_pk: { __type: "notifications", __args: { uuid: "uuid!" } },
    outlet_has_addons: {
      __type: "[outlet_has_addons!]!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    outlet_has_addons_aggregate: {
      __type: "outlet_has_addons_aggregate!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    outlet_has_addons_by_pk: {
      __type: "outlet_has_addons",
      __args: { outlet_uuid: "uuid!" },
    },
    outlets: {
      __type: "[outlets!]!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    outlets_aggregate: {
      __type: "outlets_aggregate!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    outlets_by_pk: { __type: "outlets", __args: { uuid: "uuid!" } },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_activity_logs: {
      __type: "[passes_activity_logs!]!",
      __args: {
        distinct_on: "[passes_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_activity_logs_order_by!]",
        where: "passes_activity_logs_bool_exp",
      },
    },
    passes_activity_logs_aggregate: {
      __type: "passes_activity_logs_aggregate!",
      __args: {
        distinct_on: "[passes_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_activity_logs_order_by!]",
        where: "passes_activity_logs_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_by_pk: { __type: "passes", __args: { uuid: "uuid!" } },
    payments: {
      __type: "[payments!]!",
      __args: {
        distinct_on: "[payments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[payments_order_by!]",
        where: "payments_bool_exp",
      },
    },
    payments_aggregate: {
      __type: "payments_aggregate!",
      __args: {
        distinct_on: "[payments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[payments_order_by!]",
        where: "payments_bool_exp",
      },
    },
    payments_by_pk: { __type: "payments", __args: { id: "uuid!" } },
    permissions: {
      __type: "[permissions!]!",
      __args: {
        distinct_on: "[permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[permissions_order_by!]",
        where: "permissions_bool_exp",
      },
    },
    permissions_aggregate: {
      __type: "permissions_aggregate!",
      __args: {
        distinct_on: "[permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[permissions_order_by!]",
        where: "permissions_bool_exp",
      },
    },
    permissions_by_pk: { __type: "permissions", __args: { uuid: "uuid!" } },
    post_comments: {
      __type: "[post_comments!]!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    post_comments_aggregate: {
      __type: "post_comments_aggregate!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    post_likes: {
      __type: "[post_likes!]!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    post_likes_aggregate: {
      __type: "post_likes_aggregate!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    posts: {
      __type: "[posts!]!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_aggregate: {
      __type: "posts_aggregate!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_by_pk: { __type: "posts", __args: { uuid: "uuid!" } },
    questionaires: {
      __type: "[questionaires!]!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    questionaires_aggregate: {
      __type: "questionaires_aggregate!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    questionaires_by_pk: { __type: "questionaires", __args: { uuid: "uuid!" } },
    questions: {
      __type: "[questions!]!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    questions_aggregate: {
      __type: "questions_aggregate!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    questions_by_pk: { __type: "questions", __args: { uuid: "uuid!" } },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_by_pk: { __type: "requests", __args: { uuid: "uuid!" } },
    reservations: {
      __type: "[reservations!]!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_activity_logs: {
      __type: "[reservations_activity_logs!]!",
      __args: {
        distinct_on: "[reservations_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_activity_logs_order_by!]",
        where: "reservations_activity_logs_bool_exp",
      },
    },
    reservations_activity_logs_aggregate: {
      __type: "reservations_activity_logs_aggregate!",
      __args: {
        distinct_on: "[reservations_activity_logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_activity_logs_order_by!]",
        where: "reservations_activity_logs_bool_exp",
      },
    },
    reservations_aggregate: {
      __type: "reservations_aggregate!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_by_pk: { __type: "reservations", __args: { uuid: "uuid!" } },
    review_comments: {
      __type: "[review_comments!]!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    review_comments_aggregate: {
      __type: "review_comments_aggregate!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    review_likes: {
      __type: "[review_likes!]!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    review_likes_aggregate: {
      __type: "review_likes_aggregate!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    review_media: {
      __type: "[review_media!]!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    review_media_aggregate: {
      __type: "review_media_aggregate!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_by_pk: { __type: "reviews", __args: { uuid: "uuid!" } },
    role_has_permissions: {
      __type: "[role_has_permissions!]!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    roles: {
      __type: "[roles!]!",
      __args: {
        distinct_on: "[roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[roles_order_by!]",
        where: "roles_bool_exp",
      },
    },
    roles_aggregate: {
      __type: "roles_aggregate!",
      __args: {
        distinct_on: "[roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[roles_order_by!]",
        where: "roles_bool_exp",
      },
    },
    roles_by_pk: { __type: "roles", __args: { uuid: "uuid!" } },
    social_relationships: {
      __type: "[social_relationships!]!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships_aggregate: {
      __type: "social_relationships_aggregate!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships_by_pk: {
      __type: "social_relationships",
      __args: { uuid: "uuid!" },
    },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_by_pk: { __type: "spaces", __args: { uuid: "uuid!" } },
    spaces_guests: {
      __type: "[spaces_guests!]!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    spaces_guests_aggregate: {
      __type: "spaces_guests_aggregate!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    spaces_guests_by_pk: { __type: "spaces_guests", __args: { uuid: "uuid!" } },
    spaces_usage: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usage_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usage_by_pk: { __type: "spaces_usage", __args: { uuid: "uuid!" } },
    storage_buckets: {
      __type: "[storage_buckets!]!",
      __args: {
        distinct_on: "[storage_buckets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[storage_buckets_order_by!]",
        where: "storage_buckets_bool_exp",
      },
    },
    storage_buckets_aggregate: {
      __type: "storage_buckets_aggregate!",
      __args: {
        distinct_on: "[storage_buckets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[storage_buckets_order_by!]",
        where: "storage_buckets_bool_exp",
      },
    },
    storage_buckets_by_pk: {
      __type: "storage_buckets",
      __args: { id: "String!" },
    },
    stripe_transfers: {
      __type: "[stripe_transfers!]!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    stripe_transfers_aggregate: {
      __type: "stripe_transfers_aggregate!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    stripe_transfers_by_pk: {
      __type: "stripe_transfers",
      __args: { uuid: "uuid!" },
    },
    subscriptions: {
      __type: "[subscriptions!]!",
      __args: {
        distinct_on: "[subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[subscriptions_order_by!]",
        where: "subscriptions_bool_exp",
      },
    },
    subscriptions_aggregate: {
      __type: "subscriptions_aggregate!",
      __args: {
        distinct_on: "[subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[subscriptions_order_by!]",
        where: "subscriptions_bool_exp",
      },
    },
    subscriptions_by_pk: { __type: "subscriptions", __args: { uuid: "uuid!" } },
    supabase_functions_hooks: {
      __type: "[supabase_functions_hooks!]!",
      __args: {
        distinct_on: "[supabase_functions_hooks_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[supabase_functions_hooks_order_by!]",
        where: "supabase_functions_hooks_bool_exp",
      },
    },
    supabase_functions_hooks_aggregate: {
      __type: "supabase_functions_hooks_aggregate!",
      __args: {
        distinct_on: "[supabase_functions_hooks_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[supabase_functions_hooks_order_by!]",
        where: "supabase_functions_hooks_bool_exp",
      },
    },
    supabase_functions_hooks_by_pk: {
      __type: "supabase_functions_hooks",
      __args: { id: "bigint!" },
    },
    tags: {
      __type: "[tags!]!",
      __args: {
        distinct_on: "[tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[tags_order_by!]",
        where: "tags_bool_exp",
      },
    },
    tags_aggregate: {
      __type: "tags_aggregate!",
      __args: {
        distinct_on: "[tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[tags_order_by!]",
        where: "tags_bool_exp",
      },
    },
    tags_by_pk: { __type: "tags", __args: { uuid: "uuid!" } },
    team_memberships: {
      __type: "[team_memberships!]!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_by_pk: {
      __type: "team_memberships",
      __args: { uuid: "uuid!" },
    },
    team_roles: {
      __type: "[team_roles!]!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    team_roles_aggregate: {
      __type: "team_roles_aggregate!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    team_schedules: {
      __type: "[team_schedules!]!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_aggregate: {
      __type: "team_schedules_aggregate!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_by_pk: {
      __type: "team_schedules",
      __args: { uuid: "uuid!" },
    },
    team_subscriptions: {
      __type: "[team_subscriptions!]!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    team_subscriptions_aggregate: {
      __type: "team_subscriptions_aggregate!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    teams: {
      __type: "[teams!]!",
      __args: {
        distinct_on: "[teams_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[teams_order_by!]",
        where: "teams_bool_exp",
      },
    },
    teams_aggregate: {
      __type: "teams_aggregate!",
      __args: {
        distinct_on: "[teams_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[teams_order_by!]",
        where: "teams_bool_exp",
      },
    },
    teams_by_pk: { __type: "teams", __args: { uuid: "uuid!" } },
    user_has_reservations: {
      __type: "[user_has_reservations!]!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    user_has_reservations_aggregate: {
      __type: "user_has_reservations_aggregate!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    user_has_reservations_by_pk: {
      __type: "user_has_reservations",
      __args: { reservation_uuid: "uuid!" },
    },
    user_inbox: {
      __type: "[user_inbox!]!",
      __args: {
        distinct_on: "[user_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_inbox_order_by!]",
        where: "user_inbox_bool_exp",
      },
    },
    user_inbox_aggregate: {
      __type: "user_inbox_aggregate!",
      __args: {
        distinct_on: "[user_inbox_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_inbox_order_by!]",
        where: "user_inbox_bool_exp",
      },
    },
    user_media: {
      __type: "[user_media!]!",
      __args: {
        distinct_on: "[user_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_media_order_by!]",
        where: "user_media_bool_exp",
      },
    },
    user_media_aggregate: {
      __type: "user_media_aggregate!",
      __args: {
        distinct_on: "[user_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_media_order_by!]",
        where: "user_media_bool_exp",
      },
    },
    user_roles: {
      __type: "[user_roles!]!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    user_roles_aggregate: {
      __type: "user_roles_aggregate!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    user_sessions: {
      __type: "[user_sessions!]!",
      __args: {
        distinct_on: "[user_sessions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_sessions_order_by!]",
        where: "user_sessions_bool_exp",
      },
    },
    user_sessions_aggregate: {
      __type: "user_sessions_aggregate!",
      __args: {
        distinct_on: "[user_sessions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_sessions_order_by!]",
        where: "user_sessions_bool_exp",
      },
    },
    user_sessions_by_pk: { __type: "user_sessions", __args: { uuid: "uuid!" } },
    user_subscriptions: {
      __type: "[user_subscriptions!]!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    user_subscriptions_aggregate: {
      __type: "user_subscriptions_aggregate!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    users: {
      __type: "[users!]!",
      __args: {
        distinct_on: "[users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[users_order_by!]",
        where: "users_bool_exp",
      },
    },
    users_aggregate: {
      __type: "users_aggregate!",
      __args: {
        distinct_on: "[users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[users_order_by!]",
        where: "users_bool_exp",
      },
    },
    users_by_pk: { __type: "users", __args: { uuid: "uuid!" } },
    wishlist: {
      __type: "[wishlist!]!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
    wishlist_aggregate: {
      __type: "wishlist_aggregate!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
    wishlist_by_pk: { __type: "wishlist", __args: { uuid: "uuid!" } },
  },
  Boolean_comparison_exp: {
    _eq: { __type: "Boolean" },
    _gt: { __type: "Boolean" },
    _gte: { __type: "Boolean" },
    _in: { __type: "[Boolean!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "Boolean" },
    _lte: { __type: "Boolean" },
    _neq: { __type: "Boolean" },
    _nin: { __type: "[Boolean!]" },
  },
  Int_comparison_exp: {
    _eq: { __type: "Int" },
    _gt: { __type: "Int" },
    _gte: { __type: "Int" },
    _in: { __type: "[Int!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "Int" },
    _lte: { __type: "Int" },
    _neq: { __type: "Int" },
    _nin: { __type: "[Int!]" },
  },
  String_comparison_exp: {
    _eq: { __type: "String" },
    _gt: { __type: "String" },
    _gte: { __type: "String" },
    _ilike: { __type: "String" },
    _in: { __type: "[String!]" },
    _iregex: { __type: "String" },
    _is_null: { __type: "Boolean" },
    _like: { __type: "String" },
    _lt: { __type: "String" },
    _lte: { __type: "String" },
    _neq: { __type: "String" },
    _nilike: { __type: "String" },
    _nin: { __type: "[String!]" },
    _niregex: { __type: "String" },
    _nlike: { __type: "String" },
    _nregex: { __type: "String" },
    _nsimilar: { __type: "String" },
    _regex: { __type: "String" },
    _similar: { __type: "String" },
  },
  activity_logs: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String" },
    event_type: { __type: "String!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  activity_logs_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "activity_logs_aggregate_fields" },
    nodes: { __type: "[activity_logs!]!" },
  },
  activity_logs_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[activity_logs_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "activity_logs_max_fields" },
    min: { __type: "activity_logs_min_fields" },
  },
  activity_logs_bool_exp: {
    _and: { __type: "[activity_logs_bool_exp!]" },
    _not: { __type: "activity_logs_bool_exp" },
    _or: { __type: "[activity_logs_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    event_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  activity_logs_insert_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  activity_logs_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  activity_logs_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  activity_logs_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[activity_logs!]!" },
  },
  activity_logs_on_conflict: {
    constraint: { __type: "activity_logs_constraint!" },
    update_columns: { __type: "[activity_logs_update_column!]!" },
    where: { __type: "activity_logs_bool_exp" },
  },
  activity_logs_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  activity_logs_pk_columns_input: { uuid: { __type: "uuid!" } },
  activity_logs_set_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  aruba_wifi_access: {
    __typename: { __type: "String!" },
    access_end: { __type: "timestamptz!" },
    access_start: { __type: "timestamptz!" },
    created_at: { __type: "timestamptz!" },
    guest: { __type: "guests!" },
    guest_uuid: { __type: "uuid!" },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    password: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    wifi_ssid: { __type: "String!" },
  },
  aruba_wifi_access_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "aruba_wifi_access_aggregate_fields" },
    nodes: { __type: "[aruba_wifi_access!]!" },
  },
  aruba_wifi_access_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[aruba_wifi_access_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "aruba_wifi_access_max_fields" },
    min: { __type: "aruba_wifi_access_min_fields" },
  },
  aruba_wifi_access_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "aruba_wifi_access_max_order_by" },
    min: { __type: "aruba_wifi_access_min_order_by" },
  },
  aruba_wifi_access_arr_rel_insert_input: {
    data: { __type: "[aruba_wifi_access_insert_input!]!" },
    on_conflict: { __type: "aruba_wifi_access_on_conflict" },
  },
  aruba_wifi_access_bool_exp: {
    _and: { __type: "[aruba_wifi_access_bool_exp!]" },
    _not: { __type: "aruba_wifi_access_bool_exp" },
    _or: { __type: "[aruba_wifi_access_bool_exp!]" },
    access_end: { __type: "timestamptz_comparison_exp" },
    access_start: { __type: "timestamptz_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    guest: { __type: "guests_bool_exp" },
    guest_uuid: { __type: "uuid_comparison_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    password: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    wifi_ssid: { __type: "String_comparison_exp" },
  },
  aruba_wifi_access_insert_input: {
    access_end: { __type: "timestamptz" },
    access_start: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    guest: { __type: "guests_obj_rel_insert_input" },
    guest_uuid: { __type: "uuid" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    password: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wifi_ssid: { __type: "String" },
  },
  aruba_wifi_access_max_fields: {
    __typename: { __type: "String!" },
    access_end: { __type: "timestamptz" },
    access_start: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    password: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wifi_ssid: { __type: "String" },
  },
  aruba_wifi_access_max_order_by: {
    access_end: { __type: "order_by" },
    access_start: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    password: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wifi_ssid: { __type: "order_by" },
  },
  aruba_wifi_access_min_fields: {
    __typename: { __type: "String!" },
    access_end: { __type: "timestamptz" },
    access_start: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    password: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wifi_ssid: { __type: "String" },
  },
  aruba_wifi_access_min_order_by: {
    access_end: { __type: "order_by" },
    access_start: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    password: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wifi_ssid: { __type: "order_by" },
  },
  aruba_wifi_access_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[aruba_wifi_access!]!" },
  },
  aruba_wifi_access_on_conflict: {
    constraint: { __type: "aruba_wifi_access_constraint!" },
    update_columns: { __type: "[aruba_wifi_access_update_column!]!" },
    where: { __type: "aruba_wifi_access_bool_exp" },
  },
  aruba_wifi_access_order_by: {
    access_end: { __type: "order_by" },
    access_start: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest: { __type: "guests_order_by" },
    guest_uuid: { __type: "order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    password: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wifi_ssid: { __type: "order_by" },
  },
  aruba_wifi_access_pk_columns_input: { uuid: { __type: "uuid!" } },
  aruba_wifi_access_set_input: {
    access_end: { __type: "timestamptz" },
    access_start: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    password: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wifi_ssid: { __type: "String" },
  },
  auth_audit_log_entries: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid!" },
    instance_id: { __type: "uuid" },
    payload: { __type: "json", __args: { path: "String" } },
  },
  auth_audit_log_entries_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "auth_audit_log_entries_aggregate_fields" },
    nodes: { __type: "[auth_audit_log_entries!]!" },
  },
  auth_audit_log_entries_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[auth_audit_log_entries_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "auth_audit_log_entries_max_fields" },
    min: { __type: "auth_audit_log_entries_min_fields" },
  },
  auth_audit_log_entries_bool_exp: {
    _and: { __type: "[auth_audit_log_entries_bool_exp!]" },
    _not: { __type: "auth_audit_log_entries_bool_exp" },
    _or: { __type: "[auth_audit_log_entries_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    id: { __type: "uuid_comparison_exp" },
    instance_id: { __type: "uuid_comparison_exp" },
    payload: { __type: "json_comparison_exp" },
  },
  auth_audit_log_entries_insert_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    payload: { __type: "json" },
  },
  auth_audit_log_entries_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
  },
  auth_audit_log_entries_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
  },
  auth_audit_log_entries_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[auth_audit_log_entries!]!" },
  },
  auth_audit_log_entries_on_conflict: {
    constraint: { __type: "auth_audit_log_entries_constraint!" },
    update_columns: { __type: "[auth_audit_log_entries_update_column!]!" },
    where: { __type: "auth_audit_log_entries_bool_exp" },
  },
  auth_audit_log_entries_order_by: {
    created_at: { __type: "order_by" },
    id: { __type: "order_by" },
    instance_id: { __type: "order_by" },
    payload: { __type: "order_by" },
  },
  auth_audit_log_entries_pk_columns_input: { id: { __type: "uuid!" } },
  auth_audit_log_entries_set_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    payload: { __type: "json" },
  },
  auth_instances: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid!" },
    raw_base_config: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  auth_instances_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "auth_instances_aggregate_fields" },
    nodes: { __type: "[auth_instances!]!" },
  },
  auth_instances_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[auth_instances_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "auth_instances_max_fields" },
    min: { __type: "auth_instances_min_fields" },
  },
  auth_instances_bool_exp: {
    _and: { __type: "[auth_instances_bool_exp!]" },
    _not: { __type: "auth_instances_bool_exp" },
    _or: { __type: "[auth_instances_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    id: { __type: "uuid_comparison_exp" },
    raw_base_config: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  auth_instances_insert_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    raw_base_config: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  auth_instances_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    raw_base_config: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  auth_instances_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    raw_base_config: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  auth_instances_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[auth_instances!]!" },
  },
  auth_instances_on_conflict: {
    constraint: { __type: "auth_instances_constraint!" },
    update_columns: { __type: "[auth_instances_update_column!]!" },
    where: { __type: "auth_instances_bool_exp" },
  },
  auth_instances_order_by: {
    created_at: { __type: "order_by" },
    id: { __type: "order_by" },
    raw_base_config: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  auth_instances_pk_columns_input: { id: { __type: "uuid!" } },
  auth_instances_set_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "uuid" },
    raw_base_config: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  auth_refresh_tokens: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "bigint!" },
    instance_id: { __type: "uuid" },
    revoked: { __type: "Boolean" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_id: { __type: "String" },
  },
  auth_refresh_tokens_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "auth_refresh_tokens_aggregate_fields" },
    nodes: { __type: "[auth_refresh_tokens!]!" },
  },
  auth_refresh_tokens_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "auth_refresh_tokens_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[auth_refresh_tokens_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "auth_refresh_tokens_max_fields" },
    min: { __type: "auth_refresh_tokens_min_fields" },
    stddev: { __type: "auth_refresh_tokens_stddev_fields" },
    stddev_pop: { __type: "auth_refresh_tokens_stddev_pop_fields" },
    stddev_samp: { __type: "auth_refresh_tokens_stddev_samp_fields" },
    sum: { __type: "auth_refresh_tokens_sum_fields" },
    var_pop: { __type: "auth_refresh_tokens_var_pop_fields" },
    var_samp: { __type: "auth_refresh_tokens_var_samp_fields" },
    variance: { __type: "auth_refresh_tokens_variance_fields" },
  },
  auth_refresh_tokens_avg_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_bool_exp: {
    _and: { __type: "[auth_refresh_tokens_bool_exp!]" },
    _not: { __type: "auth_refresh_tokens_bool_exp" },
    _or: { __type: "[auth_refresh_tokens_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    id: { __type: "bigint_comparison_exp" },
    instance_id: { __type: "uuid_comparison_exp" },
    revoked: { __type: "Boolean_comparison_exp" },
    token: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_id: { __type: "String_comparison_exp" },
  },
  auth_refresh_tokens_inc_input: { id: { __type: "bigint" } },
  auth_refresh_tokens_insert_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "bigint" },
    instance_id: { __type: "uuid" },
    revoked: { __type: "Boolean" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_id: { __type: "String" },
  },
  auth_refresh_tokens_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "bigint" },
    instance_id: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_id: { __type: "String" },
  },
  auth_refresh_tokens_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "bigint" },
    instance_id: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_id: { __type: "String" },
  },
  auth_refresh_tokens_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[auth_refresh_tokens!]!" },
  },
  auth_refresh_tokens_on_conflict: {
    constraint: { __type: "auth_refresh_tokens_constraint!" },
    update_columns: { __type: "[auth_refresh_tokens_update_column!]!" },
    where: { __type: "auth_refresh_tokens_bool_exp" },
  },
  auth_refresh_tokens_order_by: {
    created_at: { __type: "order_by" },
    id: { __type: "order_by" },
    instance_id: { __type: "order_by" },
    revoked: { __type: "order_by" },
    token: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_id: { __type: "order_by" },
  },
  auth_refresh_tokens_pk_columns_input: { id: { __type: "bigint!" } },
  auth_refresh_tokens_set_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "bigint" },
    instance_id: { __type: "uuid" },
    revoked: { __type: "Boolean" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_id: { __type: "String" },
  },
  auth_refresh_tokens_stddev_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_stddev_pop_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_stddev_samp_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_sum_fields: {
    __typename: { __type: "String!" },
    id: { __type: "bigint" },
  },
  auth_refresh_tokens_var_pop_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_var_samp_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_refresh_tokens_variance_fields: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
  },
  auth_schema_migrations: {
    __typename: { __type: "String!" },
    version: { __type: "String!" },
  },
  auth_schema_migrations_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "auth_schema_migrations_aggregate_fields" },
    nodes: { __type: "[auth_schema_migrations!]!" },
  },
  auth_schema_migrations_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[auth_schema_migrations_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "auth_schema_migrations_max_fields" },
    min: { __type: "auth_schema_migrations_min_fields" },
  },
  auth_schema_migrations_bool_exp: {
    _and: { __type: "[auth_schema_migrations_bool_exp!]" },
    _not: { __type: "auth_schema_migrations_bool_exp" },
    _or: { __type: "[auth_schema_migrations_bool_exp!]" },
    version: { __type: "String_comparison_exp" },
  },
  auth_schema_migrations_insert_input: { version: { __type: "String" } },
  auth_schema_migrations_max_fields: {
    __typename: { __type: "String!" },
    version: { __type: "String" },
  },
  auth_schema_migrations_min_fields: {
    __typename: { __type: "String!" },
    version: { __type: "String" },
  },
  auth_schema_migrations_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[auth_schema_migrations!]!" },
  },
  auth_schema_migrations_on_conflict: {
    constraint: { __type: "auth_schema_migrations_constraint!" },
    update_columns: { __type: "[auth_schema_migrations_update_column!]!" },
    where: { __type: "auth_schema_migrations_bool_exp" },
  },
  auth_schema_migrations_order_by: { version: { __type: "order_by" } },
  auth_schema_migrations_pk_columns_input: { version: { __type: "String!" } },
  auth_schema_migrations_set_input: { version: { __type: "String" } },
  auth_users: {
    __typename: { __type: "String!" },
    aud: { __type: "String" },
    confirmation_sent_at: { __type: "timestamptz" },
    confirmation_token: { __type: "String" },
    confirmed_at: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    email_change: { __type: "String" },
    email_change_confirm_status: { __type: "smallint" },
    email_change_sent_at: { __type: "timestamptz" },
    email_change_token_current: { __type: "String" },
    email_change_token_new: { __type: "String" },
    email_confirmed_at: { __type: "timestamptz" },
    encrypted_password: { __type: "String" },
    id: { __type: "uuid!" },
    instance_id: { __type: "uuid" },
    invited_at: { __type: "timestamptz" },
    is_super_admin: { __type: "Boolean" },
    last_sign_in_at: { __type: "timestamptz" },
    phone: { __type: "String" },
    phone_change: { __type: "String" },
    phone_change_sent_at: { __type: "timestamptz" },
    phone_change_token: { __type: "String" },
    phone_confirmed_at: { __type: "timestamptz" },
    raw_app_meta_data: { __type: "jsonb", __args: { path: "String" } },
    raw_user_meta_data: { __type: "jsonb", __args: { path: "String" } },
    recovery_sent_at: { __type: "timestamptz" },
    recovery_token: { __type: "String" },
    role: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  auth_users_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "auth_users_aggregate_fields" },
    nodes: { __type: "[auth_users!]!" },
  },
  auth_users_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "auth_users_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[auth_users_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "auth_users_max_fields" },
    min: { __type: "auth_users_min_fields" },
    stddev: { __type: "auth_users_stddev_fields" },
    stddev_pop: { __type: "auth_users_stddev_pop_fields" },
    stddev_samp: { __type: "auth_users_stddev_samp_fields" },
    sum: { __type: "auth_users_sum_fields" },
    var_pop: { __type: "auth_users_var_pop_fields" },
    var_samp: { __type: "auth_users_var_samp_fields" },
    variance: { __type: "auth_users_variance_fields" },
  },
  auth_users_append_input: {
    raw_app_meta_data: { __type: "jsonb" },
    raw_user_meta_data: { __type: "jsonb" },
  },
  auth_users_avg_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_bool_exp: {
    _and: { __type: "[auth_users_bool_exp!]" },
    _not: { __type: "auth_users_bool_exp" },
    _or: { __type: "[auth_users_bool_exp!]" },
    aud: { __type: "String_comparison_exp" },
    confirmation_sent_at: { __type: "timestamptz_comparison_exp" },
    confirmation_token: { __type: "String_comparison_exp" },
    confirmed_at: { __type: "timestamptz_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    email: { __type: "String_comparison_exp" },
    email_change: { __type: "String_comparison_exp" },
    email_change_confirm_status: { __type: "smallint_comparison_exp" },
    email_change_sent_at: { __type: "timestamptz_comparison_exp" },
    email_change_token_current: { __type: "String_comparison_exp" },
    email_change_token_new: { __type: "String_comparison_exp" },
    email_confirmed_at: { __type: "timestamptz_comparison_exp" },
    encrypted_password: { __type: "String_comparison_exp" },
    id: { __type: "uuid_comparison_exp" },
    instance_id: { __type: "uuid_comparison_exp" },
    invited_at: { __type: "timestamptz_comparison_exp" },
    is_super_admin: { __type: "Boolean_comparison_exp" },
    last_sign_in_at: { __type: "timestamptz_comparison_exp" },
    phone: { __type: "String_comparison_exp" },
    phone_change: { __type: "String_comparison_exp" },
    phone_change_sent_at: { __type: "timestamptz_comparison_exp" },
    phone_change_token: { __type: "String_comparison_exp" },
    phone_confirmed_at: { __type: "timestamptz_comparison_exp" },
    raw_app_meta_data: { __type: "jsonb_comparison_exp" },
    raw_user_meta_data: { __type: "jsonb_comparison_exp" },
    recovery_sent_at: { __type: "timestamptz_comparison_exp" },
    recovery_token: { __type: "String_comparison_exp" },
    role: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
  },
  auth_users_delete_at_path_input: {
    raw_app_meta_data: { __type: "[String!]" },
    raw_user_meta_data: { __type: "[String!]" },
  },
  auth_users_delete_elem_input: {
    raw_app_meta_data: { __type: "Int" },
    raw_user_meta_data: { __type: "Int" },
  },
  auth_users_delete_key_input: {
    raw_app_meta_data: { __type: "String" },
    raw_user_meta_data: { __type: "String" },
  },
  auth_users_inc_input: { email_change_confirm_status: { __type: "smallint" } },
  auth_users_insert_input: {
    aud: { __type: "String" },
    confirmation_sent_at: { __type: "timestamptz" },
    confirmation_token: { __type: "String" },
    confirmed_at: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    email_change: { __type: "String" },
    email_change_confirm_status: { __type: "smallint" },
    email_change_sent_at: { __type: "timestamptz" },
    email_change_token_current: { __type: "String" },
    email_change_token_new: { __type: "String" },
    email_confirmed_at: { __type: "timestamptz" },
    encrypted_password: { __type: "String" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    invited_at: { __type: "timestamptz" },
    is_super_admin: { __type: "Boolean" },
    last_sign_in_at: { __type: "timestamptz" },
    phone: { __type: "String" },
    phone_change: { __type: "String" },
    phone_change_sent_at: { __type: "timestamptz" },
    phone_change_token: { __type: "String" },
    phone_confirmed_at: { __type: "timestamptz" },
    raw_app_meta_data: { __type: "jsonb" },
    raw_user_meta_data: { __type: "jsonb" },
    recovery_sent_at: { __type: "timestamptz" },
    recovery_token: { __type: "String" },
    role: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  auth_users_max_fields: {
    __typename: { __type: "String!" },
    aud: { __type: "String" },
    confirmation_sent_at: { __type: "timestamptz" },
    confirmation_token: { __type: "String" },
    confirmed_at: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    email_change: { __type: "String" },
    email_change_confirm_status: { __type: "smallint" },
    email_change_sent_at: { __type: "timestamptz" },
    email_change_token_current: { __type: "String" },
    email_change_token_new: { __type: "String" },
    email_confirmed_at: { __type: "timestamptz" },
    encrypted_password: { __type: "String" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    invited_at: { __type: "timestamptz" },
    last_sign_in_at: { __type: "timestamptz" },
    phone: { __type: "String" },
    phone_change: { __type: "String" },
    phone_change_sent_at: { __type: "timestamptz" },
    phone_change_token: { __type: "String" },
    phone_confirmed_at: { __type: "timestamptz" },
    recovery_sent_at: { __type: "timestamptz" },
    recovery_token: { __type: "String" },
    role: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  auth_users_min_fields: {
    __typename: { __type: "String!" },
    aud: { __type: "String" },
    confirmation_sent_at: { __type: "timestamptz" },
    confirmation_token: { __type: "String" },
    confirmed_at: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    email_change: { __type: "String" },
    email_change_confirm_status: { __type: "smallint" },
    email_change_sent_at: { __type: "timestamptz" },
    email_change_token_current: { __type: "String" },
    email_change_token_new: { __type: "String" },
    email_confirmed_at: { __type: "timestamptz" },
    encrypted_password: { __type: "String" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    invited_at: { __type: "timestamptz" },
    last_sign_in_at: { __type: "timestamptz" },
    phone: { __type: "String" },
    phone_change: { __type: "String" },
    phone_change_sent_at: { __type: "timestamptz" },
    phone_change_token: { __type: "String" },
    phone_confirmed_at: { __type: "timestamptz" },
    recovery_sent_at: { __type: "timestamptz" },
    recovery_token: { __type: "String" },
    role: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  auth_users_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[auth_users!]!" },
  },
  auth_users_on_conflict: {
    constraint: { __type: "auth_users_constraint!" },
    update_columns: { __type: "[auth_users_update_column!]!" },
    where: { __type: "auth_users_bool_exp" },
  },
  auth_users_order_by: {
    aud: { __type: "order_by" },
    confirmation_sent_at: { __type: "order_by" },
    confirmation_token: { __type: "order_by" },
    confirmed_at: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    email_change: { __type: "order_by" },
    email_change_confirm_status: { __type: "order_by" },
    email_change_sent_at: { __type: "order_by" },
    email_change_token_current: { __type: "order_by" },
    email_change_token_new: { __type: "order_by" },
    email_confirmed_at: { __type: "order_by" },
    encrypted_password: { __type: "order_by" },
    id: { __type: "order_by" },
    instance_id: { __type: "order_by" },
    invited_at: { __type: "order_by" },
    is_super_admin: { __type: "order_by" },
    last_sign_in_at: { __type: "order_by" },
    phone: { __type: "order_by" },
    phone_change: { __type: "order_by" },
    phone_change_sent_at: { __type: "order_by" },
    phone_change_token: { __type: "order_by" },
    phone_confirmed_at: { __type: "order_by" },
    raw_app_meta_data: { __type: "order_by" },
    raw_user_meta_data: { __type: "order_by" },
    recovery_sent_at: { __type: "order_by" },
    recovery_token: { __type: "order_by" },
    role: { __type: "order_by" },
    updated_at: { __type: "order_by" },
  },
  auth_users_pk_columns_input: { id: { __type: "uuid!" } },
  auth_users_prepend_input: {
    raw_app_meta_data: { __type: "jsonb" },
    raw_user_meta_data: { __type: "jsonb" },
  },
  auth_users_set_input: {
    aud: { __type: "String" },
    confirmation_sent_at: { __type: "timestamptz" },
    confirmation_token: { __type: "String" },
    confirmed_at: { __type: "timestamptz" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    email_change: { __type: "String" },
    email_change_confirm_status: { __type: "smallint" },
    email_change_sent_at: { __type: "timestamptz" },
    email_change_token_current: { __type: "String" },
    email_change_token_new: { __type: "String" },
    email_confirmed_at: { __type: "timestamptz" },
    encrypted_password: { __type: "String" },
    id: { __type: "uuid" },
    instance_id: { __type: "uuid" },
    invited_at: { __type: "timestamptz" },
    is_super_admin: { __type: "Boolean" },
    last_sign_in_at: { __type: "timestamptz" },
    phone: { __type: "String" },
    phone_change: { __type: "String" },
    phone_change_sent_at: { __type: "timestamptz" },
    phone_change_token: { __type: "String" },
    phone_confirmed_at: { __type: "timestamptz" },
    raw_app_meta_data: { __type: "jsonb" },
    raw_user_meta_data: { __type: "jsonb" },
    recovery_sent_at: { __type: "timestamptz" },
    recovery_token: { __type: "String" },
    role: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  auth_users_stddev_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_stddev_pop_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_stddev_samp_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_sum_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "smallint" },
  },
  auth_users_var_pop_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_var_samp_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  auth_users_variance_fields: {
    __typename: { __type: "String!" },
    email_change_confirm_status: { __type: "Float" },
  },
  bigint_comparison_exp: {
    _eq: { __type: "bigint" },
    _gt: { __type: "bigint" },
    _gte: { __type: "bigint" },
    _in: { __type: "[bigint!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "bigint" },
    _lte: { __type: "bigint" },
    _neq: { __type: "bigint" },
    _nin: { __type: "[bigint!]" },
  },
  bpchar_comparison_exp: {
    _eq: { __type: "bpchar" },
    _gt: { __type: "bpchar" },
    _gte: { __type: "bpchar" },
    _ilike: { __type: "bpchar" },
    _in: { __type: "[bpchar!]" },
    _iregex: { __type: "bpchar" },
    _is_null: { __type: "Boolean" },
    _like: { __type: "bpchar" },
    _lt: { __type: "bpchar" },
    _lte: { __type: "bpchar" },
    _neq: { __type: "bpchar" },
    _nilike: { __type: "bpchar" },
    _nin: { __type: "[bpchar!]" },
    _niregex: { __type: "bpchar" },
    _nlike: { __type: "bpchar" },
    _nregex: { __type: "bpchar" },
    _nsimilar: { __type: "bpchar" },
    _regex: { __type: "bpchar" },
    _similar: { __type: "bpchar" },
  },
  brand_campaigns: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    campaign: { __type: "campaigns!" },
    campaign_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  brand_campaigns_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_campaigns_aggregate_fields" },
    nodes: { __type: "[brand_campaigns!]!" },
  },
  brand_campaigns_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[brand_campaigns_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "brand_campaigns_max_fields" },
    min: { __type: "brand_campaigns_min_fields" },
  },
  brand_campaigns_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "brand_campaigns_max_order_by" },
    min: { __type: "brand_campaigns_min_order_by" },
  },
  brand_campaigns_arr_rel_insert_input: {
    data: { __type: "[brand_campaigns_insert_input!]!" },
    on_conflict: { __type: "brand_campaigns_on_conflict" },
  },
  brand_campaigns_bool_exp: {
    _and: { __type: "[brand_campaigns_bool_exp!]" },
    _not: { __type: "brand_campaigns_bool_exp" },
    _or: { __type: "[brand_campaigns_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    campaign: { __type: "campaigns_bool_exp" },
    campaign_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_campaigns_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    campaign: { __type: "campaigns_obj_rel_insert_input" },
    campaign_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_campaigns_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    campaign_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_campaigns_max_order_by: {
    brand_uuid: { __type: "order_by" },
    campaign_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_campaigns_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    campaign_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_campaigns_min_order_by: {
    brand_uuid: { __type: "order_by" },
    campaign_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_campaigns_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_campaigns!]!" },
  },
  brand_campaigns_on_conflict: {
    constraint: { __type: "brand_campaigns_constraint!" },
    update_columns: { __type: "[brand_campaigns_update_column!]!" },
    where: { __type: "brand_campaigns_bool_exp" },
  },
  brand_campaigns_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    campaign: { __type: "campaigns_order_by" },
    campaign_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_campaigns_pk_columns_input: { uuid: { __type: "uuid!" } },
  brand_campaigns_set_input: {
    brand_uuid: { __type: "uuid" },
    campaign_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_discussions_aggregate_fields" },
    nodes: { __type: "[brand_discussions!]!" },
  },
  brand_discussions_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "brand_discussions_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[brand_discussions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "brand_discussions_max_fields" },
    min: { __type: "brand_discussions_min_fields" },
    stddev: { __type: "brand_discussions_stddev_fields" },
    stddev_pop: { __type: "brand_discussions_stddev_pop_fields" },
    stddev_samp: { __type: "brand_discussions_stddev_samp_fields" },
    sum: { __type: "brand_discussions_sum_fields" },
    var_pop: { __type: "brand_discussions_var_pop_fields" },
    var_samp: { __type: "brand_discussions_var_samp_fields" },
    variance: { __type: "brand_discussions_variance_fields" },
  },
  brand_discussions_aggregate_order_by: {
    avg: { __type: "brand_discussions_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "brand_discussions_max_order_by" },
    min: { __type: "brand_discussions_min_order_by" },
    stddev: { __type: "brand_discussions_stddev_order_by" },
    stddev_pop: { __type: "brand_discussions_stddev_pop_order_by" },
    stddev_samp: { __type: "brand_discussions_stddev_samp_order_by" },
    sum: { __type: "brand_discussions_sum_order_by" },
    var_pop: { __type: "brand_discussions_var_pop_order_by" },
    var_samp: { __type: "brand_discussions_var_samp_order_by" },
    variance: { __type: "brand_discussions_variance_order_by" },
  },
  brand_discussions_arr_rel_insert_input: {
    data: { __type: "[brand_discussions_insert_input!]!" },
  },
  brand_discussions_avg_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_avg_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_bool_exp: {
    _and: { __type: "[brand_discussions_bool_exp!]" },
    _not: { __type: "brand_discussions_bool_exp" },
    _or: { __type: "[brand_discussions_bool_exp!]" },
    comment_count: { __type: "Int_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    first_post_timestamp: { __type: "timestamptz_comparison_exp" },
    first_post_uuid: { __type: "uuid_comparison_exp" },
    last_post_timestamp: { __type: "timestamptz_comparison_exp" },
    last_post_uuid: { __type: "uuid_comparison_exp" },
    locked: { __type: "Boolean_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    participant_count: { __type: "Int_comparison_exp" },
    private: { __type: "Boolean_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_discussions_inc_input: {
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  brand_discussions_insert_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions_max_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions_max_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_discussions_min_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions_min_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_discussions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_discussions!]!" },
  },
  brand_discussions_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    locked: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    private: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_discussions_set_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_discussions_stddev_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_stddev_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_stddev_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_stddev_pop_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_stddev_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_stddev_samp_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_sum_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  brand_discussions_sum_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_var_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_var_pop_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_var_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_var_samp_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_discussions_variance_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  brand_discussions_variance_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  brand_inbox: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_inbox_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_inbox_aggregate_fields" },
    nodes: { __type: "[brand_inbox!]!" },
  },
  brand_inbox_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[brand_inbox_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brand_inbox_max_fields" },
    min: { __type: "brand_inbox_min_fields" },
  },
  brand_inbox_bool_exp: {
    _and: { __type: "[brand_inbox_bool_exp!]" },
    _not: { __type: "brand_inbox_bool_exp" },
    _or: { __type: "[brand_inbox_bool_exp!]" },
    conversation_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    pubsub_token: { __type: "String_comparison_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_inbox_insert_input: {
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_inbox_max_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_inbox_min_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_inbox_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_inbox!]!" },
  },
  brand_inbox_obj_rel_insert_input: {
    data: { __type: "brand_inbox_insert_input!" },
  },
  brand_inbox_order_by: {
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    pubsub_token: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_inbox_set_input: {
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json", __args: { path: "String" } },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_media_aggregate_fields" },
    nodes: { __type: "[brand_media!]!" },
  },
  brand_media_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "brand_media_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[brand_media_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brand_media_max_fields" },
    min: { __type: "brand_media_min_fields" },
    stddev: { __type: "brand_media_stddev_fields" },
    stddev_pop: { __type: "brand_media_stddev_pop_fields" },
    stddev_samp: { __type: "brand_media_stddev_samp_fields" },
    sum: { __type: "brand_media_sum_fields" },
    var_pop: { __type: "brand_media_var_pop_fields" },
    var_samp: { __type: "brand_media_var_samp_fields" },
    variance: { __type: "brand_media_variance_fields" },
  },
  brand_media_aggregate_order_by: {
    avg: { __type: "brand_media_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "brand_media_max_order_by" },
    min: { __type: "brand_media_min_order_by" },
    stddev: { __type: "brand_media_stddev_order_by" },
    stddev_pop: { __type: "brand_media_stddev_pop_order_by" },
    stddev_samp: { __type: "brand_media_stddev_samp_order_by" },
    sum: { __type: "brand_media_sum_order_by" },
    var_pop: { __type: "brand_media_var_pop_order_by" },
    var_samp: { __type: "brand_media_var_samp_order_by" },
    variance: { __type: "brand_media_variance_order_by" },
  },
  brand_media_arr_rel_insert_input: {
    data: { __type: "[brand_media_insert_input!]!" },
  },
  brand_media_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_avg_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_bool_exp: {
    _and: { __type: "[brand_media_bool_exp!]" },
    _not: { __type: "brand_media_bool_exp" },
    _or: { __type: "[brand_media_bool_exp!]" },
    collection_name: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    file_name: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    mime_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    s3_bucket_name: { __type: "String_comparison_exp" },
    s3_key: { __type: "String_comparison_exp" },
    size: { __type: "bigint_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_media_inc_input: {
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  brand_media_insert_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media_max_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media_max_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_media_min_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media_min_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_media_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_media!]!" },
  },
  brand_media_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    properties: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_media_set_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brand_media_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_stddev_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_stddev_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_stddev_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  brand_media_sum_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_var_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_var_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_media_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  brand_media_variance_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  brand_tags: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  brand_tags_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_tags_aggregate_fields" },
    nodes: { __type: "[brand_tags!]!" },
  },
  brand_tags_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[brand_tags_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brand_tags_max_fields" },
    min: { __type: "brand_tags_min_fields" },
  },
  brand_tags_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "brand_tags_max_order_by" },
    min: { __type: "brand_tags_min_order_by" },
  },
  brand_tags_arr_rel_insert_input: {
    data: { __type: "[brand_tags_insert_input!]!" },
  },
  brand_tags_bool_exp: {
    _and: { __type: "[brand_tags_bool_exp!]" },
    _not: { __type: "brand_tags_bool_exp" },
    _or: { __type: "[brand_tags_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    tag_uuid: { __type: "uuid_comparison_exp" },
  },
  brand_tags_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  brand_tags_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  brand_tags_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  brand_tags_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  brand_tags_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  brand_tags_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_tags!]!" },
  },
  brand_tags_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  brand_tags_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  brand_users: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    job_title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  brand_users_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_users_aggregate_fields" },
    nodes: { __type: "[brand_users!]!" },
  },
  brand_users_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[brand_users_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brand_users_max_fields" },
    min: { __type: "brand_users_min_fields" },
  },
  brand_users_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "brand_users_max_order_by" },
    min: { __type: "brand_users_min_order_by" },
  },
  brand_users_arr_rel_insert_input: {
    data: { __type: "[brand_users_insert_input!]!" },
    on_conflict: { __type: "brand_users_on_conflict" },
  },
  brand_users_bool_exp: {
    _and: { __type: "[brand_users_bool_exp!]" },
    _not: { __type: "brand_users_bool_exp" },
    _or: { __type: "[brand_users_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    guests: { __type: "guests_bool_exp" },
    job_title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_users_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    guests: { __type: "guests_arr_rel_insert_input" },
    job_title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_users_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    job_title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_users_max_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    job_title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_users_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    job_title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_users_min_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    job_title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_users_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_users!]!" },
  },
  brand_users_obj_rel_insert_input: {
    data: { __type: "brand_users_insert_input!" },
    on_conflict: { __type: "brand_users_on_conflict" },
  },
  brand_users_on_conflict: {
    constraint: { __type: "brand_users_constraint!" },
    update_columns: { __type: "[brand_users_update_column!]!" },
    where: { __type: "brand_users_bool_exp" },
  },
  brand_users_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guests_aggregate: { __type: "guests_aggregate_order_by" },
    job_title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_users_pk_columns_input: { uuid: { __type: "uuid!" } },
  brand_users_set_input: {
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    job_title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_wishes: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_wishes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brand_wishes_aggregate_fields" },
    nodes: { __type: "[brand_wishes!]!" },
  },
  brand_wishes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[brand_wishes_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brand_wishes_max_fields" },
    min: { __type: "brand_wishes_min_fields" },
  },
  brand_wishes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "brand_wishes_max_order_by" },
    min: { __type: "brand_wishes_min_order_by" },
  },
  brand_wishes_arr_rel_insert_input: {
    data: { __type: "[brand_wishes_insert_input!]!" },
  },
  brand_wishes_bool_exp: {
    _and: { __type: "[brand_wishes_bool_exp!]" },
    _not: { __type: "brand_wishes_bool_exp" },
    _or: { __type: "[brand_wishes_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  brand_wishes_insert_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_wishes_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_wishes_max_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_wishes_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brand_wishes_min_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_wishes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brand_wishes!]!" },
  },
  brand_wishes_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  brand_wishes_set_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  brands: {
    __typename: { __type: "String!" },
    available: { __type: "Boolean!" },
    brand_campaigns: {
      __type: "[brand_campaigns!]!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_aggregate: {
      __type: "brand_campaigns_aggregate!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_users: {
      __type: "[brand_users!]!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_aggregate: {
      __type: "brand_users_aggregate!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    default_addons: {
      __type: "[default_addons!]!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    default_addons_aggregate: {
      __type: "default_addons_aggregate!",
      __args: {
        distinct_on: "[default_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[default_addons_order_by!]",
        where: "default_addons_bool_exp",
      },
    },
    description: { __type: "String!" },
    discount_codes: {
      __type: "[discount_codes!]!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_aggregate: {
      __type: "discount_codes_aggregate!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discussions: {
      __type: "[brand_discussions!]!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    discussions_aggregate: {
      __type: "brand_discussions_aggregate!",
      __args: {
        distinct_on: "[brand_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_discussions_order_by!]",
        where: "brand_discussions_bool_exp",
      },
    },
    fine_print: { __type: "String!" },
    floor_plans: {
      __type: "[floor_plans!]!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_aggregate: {
      __type: "floor_plans_aggregate!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    inbox: { __type: "brand_inbox" },
    invoices: {
      __type: "[invoice!]!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    invoices_aggregate: {
      __type: "invoice_aggregate!",
      __args: {
        distinct_on: "[invoice_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[invoice_order_by!]",
        where: "invoice_bool_exp",
      },
    },
    listings: {
      __type: "[listings!]!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_aggregate: {
      __type: "listings_aggregate!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    media: {
      __type: "[brand_media!]!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    media_aggregate: {
      __type: "brand_media_aggregate!",
      __args: {
        distinct_on: "[brand_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_media_order_by!]",
        where: "brand_media_bool_exp",
      },
    },
    name: { __type: "String!" },
    online: { __type: "Boolean!" },
    outlets: {
      __type: "[outlets!]!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    outlets_aggregate: {
      __type: "outlets_aggregate!",
      __args: {
        distinct_on: "[outlets_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlets_order_by!]",
        where: "outlets_bool_exp",
      },
    },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    questionaires: {
      __type: "[questionaires!]!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    questionaires_aggregate: {
      __type: "questionaires_aggregate!",
      __args: {
        distinct_on: "[questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questionaires_order_by!]",
        where: "questionaires_bool_exp",
      },
    },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    reservations: {
      __type: "[reservations!]!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_aggregate: {
      __type: "reservations_aggregate!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    slug: { __type: "String!" },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    stripe_id: { __type: "String" },
    tags: {
      __type: "[brand_tags!]!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    tags_aggregate: {
      __type: "brand_tags_aggregate!",
      __args: {
        distinct_on: "[brand_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_tags_order_by!]",
        where: "brand_tags_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    wishes: {
      __type: "[brand_wishes!]!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
    wishes_aggregate: {
      __type: "brand_wishes_aggregate!",
      __args: {
        distinct_on: "[brand_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_wishes_order_by!]",
        where: "brand_wishes_bool_exp",
      },
    },
  },
  brands_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "brands_aggregate_fields" },
    nodes: { __type: "[brands!]!" },
  },
  brands_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[brands_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "brands_max_fields" },
    min: { __type: "brands_min_fields" },
  },
  brands_bool_exp: {
    _and: { __type: "[brands_bool_exp!]" },
    _not: { __type: "brands_bool_exp" },
    _or: { __type: "[brands_bool_exp!]" },
    available: { __type: "Boolean_comparison_exp" },
    brand_campaigns: { __type: "brand_campaigns_bool_exp" },
    brand_users: { __type: "brand_users_bool_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    default_addons: { __type: "default_addons_bool_exp" },
    description: { __type: "String_comparison_exp" },
    discount_codes: { __type: "discount_codes_bool_exp" },
    discussions: { __type: "brand_discussions_bool_exp" },
    fine_print: { __type: "String_comparison_exp" },
    floor_plans: { __type: "floor_plans_bool_exp" },
    guests: { __type: "guests_bool_exp" },
    inbox: { __type: "brand_inbox_bool_exp" },
    invoices: { __type: "invoice_bool_exp" },
    listings: { __type: "listings_bool_exp" },
    media: { __type: "brand_media_bool_exp" },
    name: { __type: "String_comparison_exp" },
    online: { __type: "Boolean_comparison_exp" },
    outlets: { __type: "outlets_bool_exp" },
    passes: { __type: "passes_bool_exp" },
    questionaires: { __type: "questionaires_bool_exp" },
    requests: { __type: "requests_bool_exp" },
    reservations: { __type: "reservations_bool_exp" },
    reviews: { __type: "reviews_bool_exp" },
    slug: { __type: "String_comparison_exp" },
    spaces: { __type: "spaces_bool_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    tags: { __type: "brand_tags_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    wishes: { __type: "brand_wishes_bool_exp" },
  },
  brands_insert_input: {
    available: { __type: "Boolean" },
    brand_campaigns: { __type: "brand_campaigns_arr_rel_insert_input" },
    brand_users: { __type: "brand_users_arr_rel_insert_input" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    default_addons: { __type: "default_addons_arr_rel_insert_input" },
    description: { __type: "String" },
    discount_codes: { __type: "discount_codes_arr_rel_insert_input" },
    discussions: { __type: "brand_discussions_arr_rel_insert_input" },
    fine_print: { __type: "String" },
    floor_plans: { __type: "floor_plans_arr_rel_insert_input" },
    guests: { __type: "guests_arr_rel_insert_input" },
    inbox: { __type: "brand_inbox_obj_rel_insert_input" },
    invoices: { __type: "invoice_arr_rel_insert_input" },
    listings: { __type: "listings_arr_rel_insert_input" },
    media: { __type: "brand_media_arr_rel_insert_input" },
    name: { __type: "String" },
    online: { __type: "Boolean" },
    outlets: { __type: "outlets_arr_rel_insert_input" },
    passes: { __type: "passes_arr_rel_insert_input" },
    questionaires: { __type: "questionaires_arr_rel_insert_input" },
    requests: { __type: "requests_arr_rel_insert_input" },
    reservations: { __type: "reservations_arr_rel_insert_input" },
    reviews: { __type: "reviews_arr_rel_insert_input" },
    slug: { __type: "String" },
    spaces: { __type: "spaces_arr_rel_insert_input" },
    stripe_id: { __type: "String" },
    tags: { __type: "brand_tags_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wishes: { __type: "brand_wishes_arr_rel_insert_input" },
  },
  brands_max_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    fine_print: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brands_min_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    fine_print: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  brands_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[brands!]!" },
  },
  brands_obj_rel_insert_input: {
    data: { __type: "brands_insert_input!" },
    on_conflict: { __type: "brands_on_conflict" },
  },
  brands_on_conflict: {
    constraint: { __type: "brands_constraint!" },
    update_columns: { __type: "[brands_update_column!]!" },
    where: { __type: "brands_bool_exp" },
  },
  brands_order_by: {
    available: { __type: "order_by" },
    brand_campaigns_aggregate: { __type: "brand_campaigns_aggregate_order_by" },
    brand_users_aggregate: { __type: "brand_users_aggregate_order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    default_addons_aggregate: { __type: "default_addons_aggregate_order_by" },
    description: { __type: "order_by" },
    discount_codes_aggregate: { __type: "discount_codes_aggregate_order_by" },
    discussions_aggregate: { __type: "brand_discussions_aggregate_order_by" },
    fine_print: { __type: "order_by" },
    floor_plans_aggregate: { __type: "floor_plans_aggregate_order_by" },
    guests_aggregate: { __type: "guests_aggregate_order_by" },
    inbox: { __type: "brand_inbox_order_by" },
    invoices_aggregate: { __type: "invoice_aggregate_order_by" },
    listings_aggregate: { __type: "listings_aggregate_order_by" },
    media_aggregate: { __type: "brand_media_aggregate_order_by" },
    name: { __type: "order_by" },
    online: { __type: "order_by" },
    outlets_aggregate: { __type: "outlets_aggregate_order_by" },
    passes_aggregate: { __type: "passes_aggregate_order_by" },
    questionaires_aggregate: { __type: "questionaires_aggregate_order_by" },
    requests_aggregate: { __type: "requests_aggregate_order_by" },
    reservations_aggregate: { __type: "reservations_aggregate_order_by" },
    reviews_aggregate: { __type: "reviews_aggregate_order_by" },
    slug: { __type: "order_by" },
    spaces_aggregate: { __type: "spaces_aggregate_order_by" },
    stripe_id: { __type: "order_by" },
    tags_aggregate: { __type: "brand_tags_aggregate_order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wishes_aggregate: { __type: "brand_wishes_aggregate_order_by" },
  },
  brands_pk_columns_input: { uuid: { __type: "uuid!" } },
  brands_set_input: {
    available: { __type: "Boolean" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    fine_print: { __type: "String" },
    name: { __type: "String" },
    online: { __type: "Boolean" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  campaigns: {
    __typename: { __type: "String!" },
    authentication: { __type: "String!" },
    brand_campaigns: {
      __type: "[brand_campaigns!]!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    brand_campaigns_aggregate: {
      __type: "brand_campaigns_aggregate!",
      __args: {
        distinct_on: "[brand_campaigns_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_campaigns_order_by!]",
        where: "brand_campaigns_bool_exp",
      },
    },
    currency_code: { __type: "bpchar!" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    discount_codes: {
      __type: "[discount_codes!]!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_aggregate: {
      __type: "discount_codes_aggregate!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    name: { __type: "String!" },
    type: { __type: "String!" },
    uuid: { __type: "uuid!" },
  },
  campaigns_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "campaigns_aggregate_fields" },
    nodes: { __type: "[campaigns!]!" },
  },
  campaigns_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[campaigns_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "campaigns_max_fields" },
    min: { __type: "campaigns_min_fields" },
  },
  campaigns_bool_exp: {
    _and: { __type: "[campaigns_bool_exp!]" },
    _not: { __type: "campaigns_bool_exp" },
    _or: { __type: "[campaigns_bool_exp!]" },
    authentication: { __type: "String_comparison_exp" },
    brand_campaigns: { __type: "brand_campaigns_bool_exp" },
    currency_code: { __type: "bpchar_comparison_exp" },
    date_end: { __type: "date_comparison_exp" },
    date_start: { __type: "date_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    discount_codes: { __type: "discount_codes_bool_exp" },
    name: { __type: "String_comparison_exp" },
    type: { __type: "String_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  campaigns_insert_input: {
    authentication: { __type: "String" },
    brand_campaigns: { __type: "brand_campaigns_arr_rel_insert_input" },
    currency_code: { __type: "bpchar" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    discount_codes: { __type: "discount_codes_arr_rel_insert_input" },
    name: { __type: "String" },
    type: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  campaigns_max_fields: {
    __typename: { __type: "String!" },
    authentication: { __type: "String" },
    currency_code: { __type: "bpchar" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    name: { __type: "String" },
    type: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  campaigns_min_fields: {
    __typename: { __type: "String!" },
    authentication: { __type: "String" },
    currency_code: { __type: "bpchar" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    name: { __type: "String" },
    type: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  campaigns_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[campaigns!]!" },
  },
  campaigns_obj_rel_insert_input: {
    data: { __type: "campaigns_insert_input!" },
    on_conflict: { __type: "campaigns_on_conflict" },
  },
  campaigns_on_conflict: {
    constraint: { __type: "campaigns_constraint!" },
    update_columns: { __type: "[campaigns_update_column!]!" },
    where: { __type: "campaigns_bool_exp" },
  },
  campaigns_order_by: {
    authentication: { __type: "order_by" },
    brand_campaigns_aggregate: { __type: "brand_campaigns_aggregate_order_by" },
    currency_code: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    description: { __type: "order_by" },
    discount_codes_aggregate: { __type: "discount_codes_aggregate_order_by" },
    name: { __type: "order_by" },
    type: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  campaigns_pk_columns_input: { uuid: { __type: "uuid!" } },
  campaigns_set_input: {
    authentication: { __type: "String" },
    currency_code: { __type: "bpchar" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    name: { __type: "String" },
    type: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  card: {
    __typename: { __type: "String!" },
    brand: { __type: "String!" },
    country: { __type: "String!" },
    last_4: { __type: "String!" },
    token: { __type: "String!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  card_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "card_aggregate_fields" },
    nodes: { __type: "[card!]!" },
  },
  card_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[card_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "card_max_fields" },
    min: { __type: "card_min_fields" },
  },
  card_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "card_max_order_by" },
    min: { __type: "card_min_order_by" },
  },
  card_arr_rel_insert_input: {
    data: { __type: "[card_insert_input!]!" },
    on_conflict: { __type: "card_on_conflict" },
  },
  card_bool_exp: {
    _and: { __type: "[card_bool_exp!]" },
    _not: { __type: "card_bool_exp" },
    _or: { __type: "[card_bool_exp!]" },
    brand: { __type: "String_comparison_exp" },
    country: { __type: "String_comparison_exp" },
    last_4: { __type: "String_comparison_exp" },
    token: { __type: "String_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  card_insert_input: {
    brand: { __type: "String" },
    country: { __type: "String" },
    last_4: { __type: "String" },
    token: { __type: "String" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  card_max_fields: {
    __typename: { __type: "String!" },
    brand: { __type: "String" },
    country: { __type: "String" },
    last_4: { __type: "String" },
    token: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  card_max_order_by: {
    brand: { __type: "order_by" },
    country: { __type: "order_by" },
    last_4: { __type: "order_by" },
    token: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  card_min_fields: {
    __typename: { __type: "String!" },
    brand: { __type: "String" },
    country: { __type: "String" },
    last_4: { __type: "String" },
    token: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  card_min_order_by: {
    brand: { __type: "order_by" },
    country: { __type: "order_by" },
    last_4: { __type: "order_by" },
    token: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  card_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[card!]!" },
  },
  card_on_conflict: {
    constraint: { __type: "card_constraint!" },
    update_columns: { __type: "[card_update_column!]!" },
    where: { __type: "card_bool_exp" },
  },
  card_order_by: {
    brand: { __type: "order_by" },
    country: { __type: "order_by" },
    last_4: { __type: "order_by" },
    token: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  card_pk_columns_input: { uuid: { __type: "uuid!" } },
  card_set_input: {
    brand: { __type: "String" },
    country: { __type: "String" },
    last_4: { __type: "String" },
    token: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_comments: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_comments_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "comment_comments_aggregate_fields" },
    nodes: { __type: "[comment_comments!]!" },
  },
  comment_comments_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[comment_comments_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "comment_comments_max_fields" },
    min: { __type: "comment_comments_min_fields" },
  },
  comment_comments_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "comment_comments_max_order_by" },
    min: { __type: "comment_comments_min_order_by" },
  },
  comment_comments_arr_rel_insert_input: {
    data: { __type: "[comment_comments_insert_input!]!" },
  },
  comment_comments_bool_exp: {
    _and: { __type: "[comment_comments_bool_exp!]" },
    _not: { __type: "comment_comments_bool_exp" },
    _or: { __type: "[comment_comments_bool_exp!]" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  comment_comments_insert_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_comments_max_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_comments_max_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  comment_comments_min_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_comments_min_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  comment_comments_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[comment_comments!]!" },
  },
  comment_comments_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  comment_comments_set_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  comment_likes: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  comment_likes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "comment_likes_aggregate_fields" },
    nodes: { __type: "[comment_likes!]!" },
  },
  comment_likes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[comment_likes_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "comment_likes_max_fields" },
    min: { __type: "comment_likes_min_fields" },
  },
  comment_likes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "comment_likes_max_order_by" },
    min: { __type: "comment_likes_min_order_by" },
  },
  comment_likes_arr_rel_insert_input: {
    data: { __type: "[comment_likes_insert_input!]!" },
  },
  comment_likes_bool_exp: {
    _and: { __type: "[comment_likes_bool_exp!]" },
    _not: { __type: "comment_likes_bool_exp" },
    _or: { __type: "[comment_likes_bool_exp!]" },
    liked_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  comment_likes_insert_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  comment_likes_max_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  comment_likes_max_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  comment_likes_min_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  comment_likes_min_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  comment_likes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[comment_likes!]!" },
  },
  comment_likes_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  comment_likes_set_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  conversations: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    created_at: { __type: "timestamptz!" },
    inboxes: {
      __type: "[inboxes!]!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_aggregate: {
      __type: "inboxes_aggregate!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    messages: {
      __type: "[messages!]!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    messages_aggregate: {
      __type: "messages_aggregate!",
      __args: {
        distinct_on: "[messages_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[messages_order_by!]",
        where: "messages_bool_exp",
      },
    },
    owner_uuid: { __type: "uuid!" },
    private: { __type: "Boolean!" },
    type: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    uuid: { __type: "uuid!" },
  },
  conversations_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "conversations_aggregate_fields" },
    nodes: { __type: "[conversations!]!" },
  },
  conversations_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[conversations_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "conversations_max_fields" },
    min: { __type: "conversations_min_fields" },
  },
  conversations_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "conversations_max_order_by" },
    min: { __type: "conversations_min_order_by" },
  },
  conversations_arr_rel_insert_input: {
    data: { __type: "[conversations_insert_input!]!" },
    on_conflict: { __type: "conversations_on_conflict" },
  },
  conversations_bool_exp: {
    _and: { __type: "[conversations_bool_exp!]" },
    _not: { __type: "conversations_bool_exp" },
    _or: { __type: "[conversations_bool_exp!]" },
    avatar_url: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    inboxes: { __type: "inboxes_bool_exp" },
    messages: { __type: "messages_bool_exp" },
    owner_uuid: { __type: "uuid_comparison_exp" },
    private: { __type: "Boolean_comparison_exp" },
    type: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  conversations_insert_input: {
    avatar_url: { __type: "String" },
    created_at: { __type: "timestamptz" },
    inboxes: { __type: "inboxes_arr_rel_insert_input" },
    messages: { __type: "messages_arr_rel_insert_input" },
    owner_uuid: { __type: "uuid" },
    private: { __type: "Boolean" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    uuid: { __type: "uuid" },
  },
  conversations_max_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    created_at: { __type: "timestamptz" },
    owner_uuid: { __type: "uuid" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  conversations_max_order_by: {
    avatar_url: { __type: "order_by" },
    created_at: { __type: "order_by" },
    owner_uuid: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  conversations_min_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    created_at: { __type: "timestamptz" },
    owner_uuid: { __type: "uuid" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  conversations_min_order_by: {
    avatar_url: { __type: "order_by" },
    created_at: { __type: "order_by" },
    owner_uuid: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  conversations_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[conversations!]!" },
  },
  conversations_obj_rel_insert_input: {
    data: { __type: "conversations_insert_input!" },
    on_conflict: { __type: "conversations_on_conflict" },
  },
  conversations_on_conflict: {
    constraint: { __type: "conversations_constraint!" },
    update_columns: { __type: "[conversations_update_column!]!" },
    where: { __type: "conversations_bool_exp" },
  },
  conversations_order_by: {
    avatar_url: { __type: "order_by" },
    created_at: { __type: "order_by" },
    inboxes_aggregate: { __type: "inboxes_aggregate_order_by" },
    messages_aggregate: { __type: "messages_aggregate_order_by" },
    owner_uuid: { __type: "order_by" },
    private: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    uuid: { __type: "order_by" },
  },
  conversations_pk_columns_input: { uuid: { __type: "uuid!" } },
  conversations_set_input: {
    avatar_url: { __type: "String" },
    created_at: { __type: "timestamptz" },
    owner_uuid: { __type: "uuid" },
    private: { __type: "Boolean" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  currencies: {
    __typename: { __type: "String!" },
    activated: { __type: "Boolean!" },
    code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    decimal_mark: { __type: "String!" },
    name: { __type: "String!" },
    symbol: { __type: "String!" },
    thousands_separator: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  currencies_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "currencies_aggregate_fields" },
    nodes: { __type: "[currencies!]!" },
  },
  currencies_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[currencies_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "currencies_max_fields" },
    min: { __type: "currencies_min_fields" },
  },
  currencies_bool_exp: {
    _and: { __type: "[currencies_bool_exp!]" },
    _not: { __type: "currencies_bool_exp" },
    _or: { __type: "[currencies_bool_exp!]" },
    activated: { __type: "Boolean_comparison_exp" },
    code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    decimal_mark: { __type: "String_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    symbol: { __type: "String_comparison_exp" },
    thousands_separator: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  currencies_insert_input: {
    activated: { __type: "Boolean" },
    code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    decimal_mark: { __type: "String" },
    name: { __type: "String" },
    symbol: { __type: "String" },
    thousands_separator: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  currencies_max_fields: {
    __typename: { __type: "String!" },
    code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    decimal_mark: { __type: "String" },
    name: { __type: "String" },
    symbol: { __type: "String" },
    thousands_separator: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  currencies_min_fields: {
    __typename: { __type: "String!" },
    code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    decimal_mark: { __type: "String" },
    name: { __type: "String" },
    symbol: { __type: "String" },
    thousands_separator: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  currencies_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[currencies!]!" },
  },
  currencies_on_conflict: {
    constraint: { __type: "currencies_constraint!" },
    update_columns: { __type: "[currencies_update_column!]!" },
    where: { __type: "currencies_bool_exp" },
  },
  currencies_order_by: {
    activated: { __type: "order_by" },
    code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    decimal_mark: { __type: "order_by" },
    name: { __type: "order_by" },
    symbol: { __type: "order_by" },
    thousands_separator: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  currencies_pk_columns_input: { uuid: { __type: "uuid!" } },
  currencies_set_input: {
    activated: { __type: "Boolean" },
    code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    decimal_mark: { __type: "String" },
    name: { __type: "String" },
    symbol: { __type: "String" },
    thousands_separator: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  daily_rates: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    currency_code: { __type: "bpchar!" },
    rate: { __type: "float8!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  daily_rates_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "daily_rates_aggregate_fields" },
    nodes: { __type: "[daily_rates!]!" },
  },
  daily_rates_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "daily_rates_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[daily_rates_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "daily_rates_max_fields" },
    min: { __type: "daily_rates_min_fields" },
    stddev: { __type: "daily_rates_stddev_fields" },
    stddev_pop: { __type: "daily_rates_stddev_pop_fields" },
    stddev_samp: { __type: "daily_rates_stddev_samp_fields" },
    sum: { __type: "daily_rates_sum_fields" },
    var_pop: { __type: "daily_rates_var_pop_fields" },
    var_samp: { __type: "daily_rates_var_samp_fields" },
    variance: { __type: "daily_rates_variance_fields" },
  },
  daily_rates_avg_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_bool_exp: {
    _and: { __type: "[daily_rates_bool_exp!]" },
    _not: { __type: "daily_rates_bool_exp" },
    _or: { __type: "[daily_rates_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    currency_code: { __type: "bpchar_comparison_exp" },
    rate: { __type: "float8_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  daily_rates_inc_input: { rate: { __type: "float8" } },
  daily_rates_insert_input: {
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    rate: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  daily_rates_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    rate: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  daily_rates_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    rate: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  daily_rates_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[daily_rates!]!" },
  },
  daily_rates_on_conflict: {
    constraint: { __type: "daily_rates_constraint!" },
    update_columns: { __type: "[daily_rates_update_column!]!" },
    where: { __type: "daily_rates_bool_exp" },
  },
  daily_rates_order_by: {
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    rate: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  daily_rates_pk_columns_input: { uuid: { __type: "uuid!" } },
  daily_rates_set_input: {
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    rate: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  daily_rates_stddev_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_stddev_pop_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_stddev_samp_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_sum_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "float8" },
  },
  daily_rates_var_pop_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_var_samp_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  daily_rates_variance_fields: {
    __typename: { __type: "String!" },
    rate: { __type: "Float" },
  },
  date_comparison_exp: {
    _eq: { __type: "date" },
    _gt: { __type: "date" },
    _gte: { __type: "date" },
    _in: { __type: "[date!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "date" },
    _lte: { __type: "date" },
    _neq: { __type: "date" },
    _nin: { __type: "[date!]" },
  },
  default_addons: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    outlet_has_addons: {
      __type: "[outlet_has_addons!]!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    outlet_has_addons_aggregate: {
      __type: "outlet_has_addons_aggregate!",
      __args: {
        distinct_on: "[outlet_has_addons_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[outlet_has_addons_order_by!]",
        where: "outlet_has_addons_bool_exp",
      },
    },
    price: { __type: "float8!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  default_addons_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "default_addons_aggregate_fields" },
    nodes: { __type: "[default_addons!]!" },
  },
  default_addons_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "default_addons_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[default_addons_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "default_addons_max_fields" },
    min: { __type: "default_addons_min_fields" },
    stddev: { __type: "default_addons_stddev_fields" },
    stddev_pop: { __type: "default_addons_stddev_pop_fields" },
    stddev_samp: { __type: "default_addons_stddev_samp_fields" },
    sum: { __type: "default_addons_sum_fields" },
    var_pop: { __type: "default_addons_var_pop_fields" },
    var_samp: { __type: "default_addons_var_samp_fields" },
    variance: { __type: "default_addons_variance_fields" },
  },
  default_addons_aggregate_order_by: {
    avg: { __type: "default_addons_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "default_addons_max_order_by" },
    min: { __type: "default_addons_min_order_by" },
    stddev: { __type: "default_addons_stddev_order_by" },
    stddev_pop: { __type: "default_addons_stddev_pop_order_by" },
    stddev_samp: { __type: "default_addons_stddev_samp_order_by" },
    sum: { __type: "default_addons_sum_order_by" },
    var_pop: { __type: "default_addons_var_pop_order_by" },
    var_samp: { __type: "default_addons_var_samp_order_by" },
    variance: { __type: "default_addons_variance_order_by" },
  },
  default_addons_arr_rel_insert_input: {
    data: { __type: "[default_addons_insert_input!]!" },
    on_conflict: { __type: "default_addons_on_conflict" },
  },
  default_addons_avg_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_avg_order_by: { price: { __type: "order_by" } },
  default_addons_bool_exp: {
    _and: { __type: "[default_addons_bool_exp!]" },
    _not: { __type: "default_addons_bool_exp" },
    _or: { __type: "[default_addons_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    outlet_has_addons: { __type: "outlet_has_addons_bool_exp" },
    price: { __type: "float8_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  default_addons_inc_input: { price: { __type: "float8" } },
  default_addons_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_has_addons: { __type: "outlet_has_addons_arr_rel_insert_input" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  default_addons_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  default_addons_max_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  default_addons_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  default_addons_min_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  default_addons_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[default_addons!]!" },
  },
  default_addons_obj_rel_insert_input: {
    data: { __type: "default_addons_insert_input!" },
    on_conflict: { __type: "default_addons_on_conflict" },
  },
  default_addons_on_conflict: {
    constraint: { __type: "default_addons_constraint!" },
    update_columns: { __type: "[default_addons_update_column!]!" },
    where: { __type: "default_addons_bool_exp" },
  },
  default_addons_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    outlet_has_addons_aggregate: {
      __type: "outlet_has_addons_aggregate_order_by",
    },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  default_addons_pk_columns_input: { uuid: { __type: "uuid!" } },
  default_addons_set_input: {
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  default_addons_stddev_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_stddev_order_by: { price: { __type: "order_by" } },
  default_addons_stddev_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_stddev_pop_order_by: { price: { __type: "order_by" } },
  default_addons_stddev_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_stddev_samp_order_by: { price: { __type: "order_by" } },
  default_addons_sum_fields: {
    __typename: { __type: "String!" },
    price: { __type: "float8" },
  },
  default_addons_sum_order_by: { price: { __type: "order_by" } },
  default_addons_var_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_var_pop_order_by: { price: { __type: "order_by" } },
  default_addons_var_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_var_samp_order_by: { price: { __type: "order_by" } },
  default_addons_variance_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  default_addons_variance_order_by: { price: { __type: "order_by" } },
  discount_codes: {
    __typename: { __type: "String!" },
    brand: { __type: "brands" },
    campaign: { __type: "campaigns!" },
    campaign_uuid: { __type: "uuid!" },
    code: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    currency_code: { __type: "bpchar!" },
    description: { __type: "String!" },
    eligible_brand_uuid: { __type: "uuid" },
    eligible_country_code: { __type: "bpchar" },
    eligible_listing_uuid: { __type: "uuid" },
    fine_print: { __type: "String!" },
    listing: { __type: "listings" },
    sponsor: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    value: { __type: "float8!" },
  },
  discount_codes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "discount_codes_aggregate_fields" },
    nodes: { __type: "[discount_codes!]!" },
  },
  discount_codes_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "discount_codes_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[discount_codes_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "discount_codes_max_fields" },
    min: { __type: "discount_codes_min_fields" },
    stddev: { __type: "discount_codes_stddev_fields" },
    stddev_pop: { __type: "discount_codes_stddev_pop_fields" },
    stddev_samp: { __type: "discount_codes_stddev_samp_fields" },
    sum: { __type: "discount_codes_sum_fields" },
    var_pop: { __type: "discount_codes_var_pop_fields" },
    var_samp: { __type: "discount_codes_var_samp_fields" },
    variance: { __type: "discount_codes_variance_fields" },
  },
  discount_codes_aggregate_order_by: {
    avg: { __type: "discount_codes_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "discount_codes_max_order_by" },
    min: { __type: "discount_codes_min_order_by" },
    stddev: { __type: "discount_codes_stddev_order_by" },
    stddev_pop: { __type: "discount_codes_stddev_pop_order_by" },
    stddev_samp: { __type: "discount_codes_stddev_samp_order_by" },
    sum: { __type: "discount_codes_sum_order_by" },
    var_pop: { __type: "discount_codes_var_pop_order_by" },
    var_samp: { __type: "discount_codes_var_samp_order_by" },
    variance: { __type: "discount_codes_variance_order_by" },
  },
  discount_codes_arr_rel_insert_input: {
    data: { __type: "[discount_codes_insert_input!]!" },
    on_conflict: { __type: "discount_codes_on_conflict" },
  },
  discount_codes_avg_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_avg_order_by: { value: { __type: "order_by" } },
  discount_codes_bool_exp: {
    _and: { __type: "[discount_codes_bool_exp!]" },
    _not: { __type: "discount_codes_bool_exp" },
    _or: { __type: "[discount_codes_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    campaign: { __type: "campaigns_bool_exp" },
    campaign_uuid: { __type: "uuid_comparison_exp" },
    code: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    currency_code: { __type: "bpchar_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    eligible_brand_uuid: { __type: "uuid_comparison_exp" },
    eligible_country_code: { __type: "bpchar_comparison_exp" },
    eligible_listing_uuid: { __type: "uuid_comparison_exp" },
    fine_print: { __type: "String_comparison_exp" },
    listing: { __type: "listings_bool_exp" },
    sponsor: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    value: { __type: "float8_comparison_exp" },
  },
  discount_codes_inc_input: { value: { __type: "float8" } },
  discount_codes_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    campaign: { __type: "campaigns_obj_rel_insert_input" },
    campaign_uuid: { __type: "uuid" },
    code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    description: { __type: "String" },
    eligible_brand_uuid: { __type: "uuid" },
    eligible_country_code: { __type: "bpchar" },
    eligible_listing_uuid: { __type: "uuid" },
    fine_print: { __type: "String" },
    listing: { __type: "listings_obj_rel_insert_input" },
    sponsor: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "float8" },
  },
  discount_codes_max_fields: {
    __typename: { __type: "String!" },
    campaign_uuid: { __type: "uuid" },
    code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    description: { __type: "String" },
    eligible_brand_uuid: { __type: "uuid" },
    eligible_country_code: { __type: "bpchar" },
    eligible_listing_uuid: { __type: "uuid" },
    fine_print: { __type: "String" },
    sponsor: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "float8" },
  },
  discount_codes_max_order_by: {
    campaign_uuid: { __type: "order_by" },
    code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    description: { __type: "order_by" },
    eligible_brand_uuid: { __type: "order_by" },
    eligible_country_code: { __type: "order_by" },
    eligible_listing_uuid: { __type: "order_by" },
    fine_print: { __type: "order_by" },
    sponsor: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  discount_codes_min_fields: {
    __typename: { __type: "String!" },
    campaign_uuid: { __type: "uuid" },
    code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    description: { __type: "String" },
    eligible_brand_uuid: { __type: "uuid" },
    eligible_country_code: { __type: "bpchar" },
    eligible_listing_uuid: { __type: "uuid" },
    fine_print: { __type: "String" },
    sponsor: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "float8" },
  },
  discount_codes_min_order_by: {
    campaign_uuid: { __type: "order_by" },
    code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    description: { __type: "order_by" },
    eligible_brand_uuid: { __type: "order_by" },
    eligible_country_code: { __type: "order_by" },
    eligible_listing_uuid: { __type: "order_by" },
    fine_print: { __type: "order_by" },
    sponsor: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  discount_codes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[discount_codes!]!" },
  },
  discount_codes_on_conflict: {
    constraint: { __type: "discount_codes_constraint!" },
    update_columns: { __type: "[discount_codes_update_column!]!" },
    where: { __type: "discount_codes_bool_exp" },
  },
  discount_codes_order_by: {
    brand: { __type: "brands_order_by" },
    campaign: { __type: "campaigns_order_by" },
    campaign_uuid: { __type: "order_by" },
    code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    description: { __type: "order_by" },
    eligible_brand_uuid: { __type: "order_by" },
    eligible_country_code: { __type: "order_by" },
    eligible_listing_uuid: { __type: "order_by" },
    fine_print: { __type: "order_by" },
    listing: { __type: "listings_order_by" },
    sponsor: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  discount_codes_pk_columns_input: { uuid: { __type: "uuid!" } },
  discount_codes_set_input: {
    campaign_uuid: { __type: "uuid" },
    code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    description: { __type: "String" },
    eligible_brand_uuid: { __type: "uuid" },
    eligible_country_code: { __type: "bpchar" },
    eligible_listing_uuid: { __type: "uuid" },
    fine_print: { __type: "String" },
    sponsor: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "float8" },
  },
  discount_codes_stddev_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_stddev_order_by: { value: { __type: "order_by" } },
  discount_codes_stddev_pop_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_stddev_pop_order_by: { value: { __type: "order_by" } },
  discount_codes_stddev_samp_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_stddev_samp_order_by: { value: { __type: "order_by" } },
  discount_codes_sum_fields: {
    __typename: { __type: "String!" },
    value: { __type: "float8" },
  },
  discount_codes_sum_order_by: { value: { __type: "order_by" } },
  discount_codes_var_pop_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_var_pop_order_by: { value: { __type: "order_by" } },
  discount_codes_var_samp_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_var_samp_order_by: { value: { __type: "order_by" } },
  discount_codes_variance_fields: {
    __typename: { __type: "String!" },
    value: { __type: "Float" },
  },
  discount_codes_variance_order_by: { value: { __type: "order_by" } },
  discussion_user: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    discussion: { __type: "discussions!" },
    discussion_uuid: { __type: "uuid!" },
    last_read_at: { __type: "timestamptz!" },
    last_read_post_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
  },
  discussion_user_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "discussion_user_aggregate_fields" },
    nodes: { __type: "[discussion_user!]!" },
  },
  discussion_user_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[discussion_user_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "discussion_user_max_fields" },
    min: { __type: "discussion_user_min_fields" },
  },
  discussion_user_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "discussion_user_max_order_by" },
    min: { __type: "discussion_user_min_order_by" },
  },
  discussion_user_arr_rel_insert_input: {
    data: { __type: "[discussion_user_insert_input!]!" },
  },
  discussion_user_bool_exp: {
    _and: { __type: "[discussion_user_bool_exp!]" },
    _not: { __type: "discussion_user_bool_exp" },
    _or: { __type: "[discussion_user_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    discussion: { __type: "discussions_bool_exp" },
    discussion_uuid: { __type: "uuid_comparison_exp" },
    last_read_at: { __type: "timestamptz_comparison_exp" },
    last_read_post_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  discussion_user_insert_input: {
    created_at: { __type: "timestamptz" },
    discussion: { __type: "discussions_obj_rel_insert_input" },
    discussion_uuid: { __type: "uuid" },
    last_read_at: { __type: "timestamptz" },
    last_read_post_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
  },
  discussion_user_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    last_read_at: { __type: "timestamptz" },
    last_read_post_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
  },
  discussion_user_max_order_by: {
    created_at: { __type: "order_by" },
    discussion_uuid: { __type: "order_by" },
    last_read_at: { __type: "order_by" },
    last_read_post_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  discussion_user_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    last_read_at: { __type: "timestamptz" },
    last_read_post_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
  },
  discussion_user_min_order_by: {
    created_at: { __type: "order_by" },
    discussion_uuid: { __type: "order_by" },
    last_read_at: { __type: "order_by" },
    last_read_post_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  discussion_user_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[discussion_user!]!" },
  },
  discussion_user_order_by: {
    created_at: { __type: "order_by" },
    discussion: { __type: "discussions_order_by" },
    discussion_uuid: { __type: "order_by" },
    last_read_at: { __type: "order_by" },
    last_read_post_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
  },
  discussion_user_set_input: {
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    last_read_at: { __type: "timestamptz" },
    last_read_post_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
  },
  discussions: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int!" },
    created_at: { __type: "timestamptz!" },
    discussion_users: {
      __type: "[discussion_user!]!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussion_users_aggregate: {
      __type: "discussion_user_aggregate!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int!" },
    posts: {
      __type: "[posts!]!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_aggregate: {
      __type: "posts_aggregate!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    private: { __type: "Boolean!" },
    slug: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  discussions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "discussions_aggregate_fields" },
    nodes: { __type: "[discussions!]!" },
  },
  discussions_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "discussions_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[discussions_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "discussions_max_fields" },
    min: { __type: "discussions_min_fields" },
    stddev: { __type: "discussions_stddev_fields" },
    stddev_pop: { __type: "discussions_stddev_pop_fields" },
    stddev_samp: { __type: "discussions_stddev_samp_fields" },
    sum: { __type: "discussions_sum_fields" },
    var_pop: { __type: "discussions_var_pop_fields" },
    var_samp: { __type: "discussions_var_samp_fields" },
    variance: { __type: "discussions_variance_fields" },
  },
  discussions_avg_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_bool_exp: {
    _and: { __type: "[discussions_bool_exp!]" },
    _not: { __type: "discussions_bool_exp" },
    _or: { __type: "[discussions_bool_exp!]" },
    comment_count: { __type: "Int_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    discussion_users: { __type: "discussion_user_bool_exp" },
    first_post_timestamp: { __type: "timestamptz_comparison_exp" },
    first_post_uuid: { __type: "uuid_comparison_exp" },
    last_post_timestamp: { __type: "timestamptz_comparison_exp" },
    last_post_uuid: { __type: "uuid_comparison_exp" },
    locked: { __type: "Boolean_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    participant_count: { __type: "Int_comparison_exp" },
    posts: { __type: "posts_bool_exp" },
    private: { __type: "Boolean_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  discussions_inc_input: {
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  discussions_insert_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    discussion_users: { __type: "discussion_user_arr_rel_insert_input" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    posts: { __type: "posts_arr_rel_insert_input" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  discussions_max_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  discussions_min_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  discussions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[discussions!]!" },
  },
  discussions_obj_rel_insert_input: {
    data: { __type: "discussions_insert_input!" },
    on_conflict: { __type: "discussions_on_conflict" },
  },
  discussions_on_conflict: {
    constraint: { __type: "discussions_constraint!" },
    update_columns: { __type: "[discussions_update_column!]!" },
    where: { __type: "discussions_bool_exp" },
  },
  discussions_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    discussion_users_aggregate: {
      __type: "discussion_user_aggregate_order_by",
    },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    locked: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    posts_aggregate: { __type: "posts_aggregate_order_by" },
    private: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  discussions_pk_columns_input: { uuid: { __type: "uuid!" } },
  discussions_set_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  discussions_stddev_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_stddev_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_stddev_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_sum_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  discussions_var_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_var_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  discussions_variance_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  extensions: {
    __typename: { __type: "String!" },
    id: { __type: "String!" },
    minutes: { __type: "Int!" },
    request: { __type: "requests!" },
    request_uuid: { __type: "uuid!" },
  },
  extensions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "extensions_aggregate_fields" },
    nodes: { __type: "[extensions!]!" },
  },
  extensions_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "extensions_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[extensions_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "extensions_max_fields" },
    min: { __type: "extensions_min_fields" },
    stddev: { __type: "extensions_stddev_fields" },
    stddev_pop: { __type: "extensions_stddev_pop_fields" },
    stddev_samp: { __type: "extensions_stddev_samp_fields" },
    sum: { __type: "extensions_sum_fields" },
    var_pop: { __type: "extensions_var_pop_fields" },
    var_samp: { __type: "extensions_var_samp_fields" },
    variance: { __type: "extensions_variance_fields" },
  },
  extensions_aggregate_order_by: {
    avg: { __type: "extensions_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "extensions_max_order_by" },
    min: { __type: "extensions_min_order_by" },
    stddev: { __type: "extensions_stddev_order_by" },
    stddev_pop: { __type: "extensions_stddev_pop_order_by" },
    stddev_samp: { __type: "extensions_stddev_samp_order_by" },
    sum: { __type: "extensions_sum_order_by" },
    var_pop: { __type: "extensions_var_pop_order_by" },
    var_samp: { __type: "extensions_var_samp_order_by" },
    variance: { __type: "extensions_variance_order_by" },
  },
  extensions_arr_rel_insert_input: {
    data: { __type: "[extensions_insert_input!]!" },
    on_conflict: { __type: "extensions_on_conflict" },
  },
  extensions_avg_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_avg_order_by: { minutes: { __type: "order_by" } },
  extensions_bool_exp: {
    _and: { __type: "[extensions_bool_exp!]" },
    _not: { __type: "extensions_bool_exp" },
    _or: { __type: "[extensions_bool_exp!]" },
    id: { __type: "String_comparison_exp" },
    minutes: { __type: "Int_comparison_exp" },
    request: { __type: "requests_bool_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
  },
  extensions_geography_columns: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    f_geography_column: { __type: "name" },
    f_table_catalog: { __type: "name" },
    f_table_name: { __type: "name" },
    f_table_schema: { __type: "name" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geography_columns_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "extensions_geography_columns_aggregate_fields" },
    nodes: { __type: "[extensions_geography_columns!]!" },
  },
  extensions_geography_columns_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "extensions_geography_columns_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[extensions_geography_columns_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "extensions_geography_columns_max_fields" },
    min: { __type: "extensions_geography_columns_min_fields" },
    stddev: { __type: "extensions_geography_columns_stddev_fields" },
    stddev_pop: { __type: "extensions_geography_columns_stddev_pop_fields" },
    stddev_samp: { __type: "extensions_geography_columns_stddev_samp_fields" },
    sum: { __type: "extensions_geography_columns_sum_fields" },
    var_pop: { __type: "extensions_geography_columns_var_pop_fields" },
    var_samp: { __type: "extensions_geography_columns_var_samp_fields" },
    variance: { __type: "extensions_geography_columns_variance_fields" },
  },
  extensions_geography_columns_avg_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_bool_exp: {
    _and: { __type: "[extensions_geography_columns_bool_exp!]" },
    _not: { __type: "extensions_geography_columns_bool_exp" },
    _or: { __type: "[extensions_geography_columns_bool_exp!]" },
    coord_dimension: { __type: "Int_comparison_exp" },
    f_geography_column: { __type: "name_comparison_exp" },
    f_table_catalog: { __type: "name_comparison_exp" },
    f_table_name: { __type: "name_comparison_exp" },
    f_table_schema: { __type: "name_comparison_exp" },
    srid: { __type: "Int_comparison_exp" },
    type: { __type: "String_comparison_exp" },
  },
  extensions_geography_columns_max_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geography_columns_min_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geography_columns_order_by: {
    coord_dimension: { __type: "order_by" },
    f_geography_column: { __type: "order_by" },
    f_table_catalog: { __type: "order_by" },
    f_table_name: { __type: "order_by" },
    f_table_schema: { __type: "order_by" },
    srid: { __type: "order_by" },
    type: { __type: "order_by" },
  },
  extensions_geography_columns_stddev_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_stddev_pop_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_stddev_samp_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_sum_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    srid: { __type: "Int" },
  },
  extensions_geography_columns_var_pop_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_var_samp_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geography_columns_variance_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    f_geometry_column: { __type: "name" },
    f_table_catalog: { __type: "String" },
    f_table_name: { __type: "name" },
    f_table_schema: { __type: "name" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geometry_columns_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "extensions_geometry_columns_aggregate_fields" },
    nodes: { __type: "[extensions_geometry_columns!]!" },
  },
  extensions_geometry_columns_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "extensions_geometry_columns_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[extensions_geometry_columns_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "extensions_geometry_columns_max_fields" },
    min: { __type: "extensions_geometry_columns_min_fields" },
    stddev: { __type: "extensions_geometry_columns_stddev_fields" },
    stddev_pop: { __type: "extensions_geometry_columns_stddev_pop_fields" },
    stddev_samp: { __type: "extensions_geometry_columns_stddev_samp_fields" },
    sum: { __type: "extensions_geometry_columns_sum_fields" },
    var_pop: { __type: "extensions_geometry_columns_var_pop_fields" },
    var_samp: { __type: "extensions_geometry_columns_var_samp_fields" },
    variance: { __type: "extensions_geometry_columns_variance_fields" },
  },
  extensions_geometry_columns_avg_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_bool_exp: {
    _and: { __type: "[extensions_geometry_columns_bool_exp!]" },
    _not: { __type: "extensions_geometry_columns_bool_exp" },
    _or: { __type: "[extensions_geometry_columns_bool_exp!]" },
    coord_dimension: { __type: "Int_comparison_exp" },
    f_geometry_column: { __type: "name_comparison_exp" },
    f_table_catalog: { __type: "String_comparison_exp" },
    f_table_name: { __type: "name_comparison_exp" },
    f_table_schema: { __type: "name_comparison_exp" },
    srid: { __type: "Int_comparison_exp" },
    type: { __type: "String_comparison_exp" },
  },
  extensions_geometry_columns_inc_input: {
    coord_dimension: { __type: "Int" },
    srid: { __type: "Int" },
  },
  extensions_geometry_columns_insert_input: {
    coord_dimension: { __type: "Int" },
    f_geometry_column: { __type: "name" },
    f_table_catalog: { __type: "String" },
    f_table_name: { __type: "name" },
    f_table_schema: { __type: "name" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geometry_columns_max_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    f_table_catalog: { __type: "String" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geometry_columns_min_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    f_table_catalog: { __type: "String" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geometry_columns_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[extensions_geometry_columns!]!" },
  },
  extensions_geometry_columns_order_by: {
    coord_dimension: { __type: "order_by" },
    f_geometry_column: { __type: "order_by" },
    f_table_catalog: { __type: "order_by" },
    f_table_name: { __type: "order_by" },
    f_table_schema: { __type: "order_by" },
    srid: { __type: "order_by" },
    type: { __type: "order_by" },
  },
  extensions_geometry_columns_set_input: {
    coord_dimension: { __type: "Int" },
    f_geometry_column: { __type: "name" },
    f_table_catalog: { __type: "String" },
    f_table_name: { __type: "name" },
    f_table_schema: { __type: "name" },
    srid: { __type: "Int" },
    type: { __type: "String" },
  },
  extensions_geometry_columns_stddev_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_stddev_pop_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_stddev_samp_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_sum_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Int" },
    srid: { __type: "Int" },
  },
  extensions_geometry_columns_var_pop_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_var_samp_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_geometry_columns_variance_fields: {
    __typename: { __type: "String!" },
    coord_dimension: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_inc_input: { minutes: { __type: "Int" } },
  extensions_insert_input: {
    id: { __type: "String" },
    minutes: { __type: "Int" },
    request: { __type: "requests_obj_rel_insert_input" },
    request_uuid: { __type: "uuid" },
  },
  extensions_max_fields: {
    __typename: { __type: "String!" },
    id: { __type: "String" },
    minutes: { __type: "Int" },
    request_uuid: { __type: "uuid" },
  },
  extensions_max_order_by: {
    id: { __type: "order_by" },
    minutes: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
  },
  extensions_min_fields: {
    __typename: { __type: "String!" },
    id: { __type: "String" },
    minutes: { __type: "Int" },
    request_uuid: { __type: "uuid" },
  },
  extensions_min_order_by: {
    id: { __type: "order_by" },
    minutes: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
  },
  extensions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[extensions!]!" },
  },
  extensions_on_conflict: {
    constraint: { __type: "extensions_constraint!" },
    update_columns: { __type: "[extensions_update_column!]!" },
    where: { __type: "extensions_bool_exp" },
  },
  extensions_order_by: {
    id: { __type: "order_by" },
    minutes: { __type: "order_by" },
    request: { __type: "requests_order_by" },
    request_uuid: { __type: "order_by" },
  },
  extensions_pg_stat_statements: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "float8" },
    blk_write_time: { __type: "float8" },
    calls: { __type: "bigint" },
    dbid: { __type: "oid" },
    local_blks_dirtied: { __type: "bigint" },
    local_blks_hit: { __type: "bigint" },
    local_blks_read: { __type: "bigint" },
    local_blks_written: { __type: "bigint" },
    max_exec_time: { __type: "float8" },
    max_plan_time: { __type: "float8" },
    mean_exec_time: { __type: "float8" },
    mean_plan_time: { __type: "float8" },
    min_exec_time: { __type: "float8" },
    min_plan_time: { __type: "float8" },
    plans: { __type: "bigint" },
    query: { __type: "String" },
    queryid: { __type: "bigint" },
    rows: { __type: "bigint" },
    shared_blks_dirtied: { __type: "bigint" },
    shared_blks_hit: { __type: "bigint" },
    shared_blks_read: { __type: "bigint" },
    shared_blks_written: { __type: "bigint" },
    stddev_exec_time: { __type: "float8" },
    stddev_plan_time: { __type: "float8" },
    temp_blks_read: { __type: "bigint" },
    temp_blks_written: { __type: "bigint" },
    total_exec_time: { __type: "float8" },
    total_plan_time: { __type: "float8" },
    userid: { __type: "oid" },
    wal_bytes: { __type: "numeric" },
    wal_fpi: { __type: "bigint" },
    wal_records: { __type: "bigint" },
  },
  extensions_pg_stat_statements_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "extensions_pg_stat_statements_aggregate_fields" },
    nodes: { __type: "[extensions_pg_stat_statements!]!" },
  },
  extensions_pg_stat_statements_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "extensions_pg_stat_statements_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[extensions_pg_stat_statements_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "extensions_pg_stat_statements_max_fields" },
    min: { __type: "extensions_pg_stat_statements_min_fields" },
    stddev: { __type: "extensions_pg_stat_statements_stddev_fields" },
    stddev_pop: { __type: "extensions_pg_stat_statements_stddev_pop_fields" },
    stddev_samp: { __type: "extensions_pg_stat_statements_stddev_samp_fields" },
    sum: { __type: "extensions_pg_stat_statements_sum_fields" },
    var_pop: { __type: "extensions_pg_stat_statements_var_pop_fields" },
    var_samp: { __type: "extensions_pg_stat_statements_var_samp_fields" },
    variance: { __type: "extensions_pg_stat_statements_variance_fields" },
  },
  extensions_pg_stat_statements_avg_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_bool_exp: {
    _and: { __type: "[extensions_pg_stat_statements_bool_exp!]" },
    _not: { __type: "extensions_pg_stat_statements_bool_exp" },
    _or: { __type: "[extensions_pg_stat_statements_bool_exp!]" },
    blk_read_time: { __type: "float8_comparison_exp" },
    blk_write_time: { __type: "float8_comparison_exp" },
    calls: { __type: "bigint_comparison_exp" },
    dbid: { __type: "oid_comparison_exp" },
    local_blks_dirtied: { __type: "bigint_comparison_exp" },
    local_blks_hit: { __type: "bigint_comparison_exp" },
    local_blks_read: { __type: "bigint_comparison_exp" },
    local_blks_written: { __type: "bigint_comparison_exp" },
    max_exec_time: { __type: "float8_comparison_exp" },
    max_plan_time: { __type: "float8_comparison_exp" },
    mean_exec_time: { __type: "float8_comparison_exp" },
    mean_plan_time: { __type: "float8_comparison_exp" },
    min_exec_time: { __type: "float8_comparison_exp" },
    min_plan_time: { __type: "float8_comparison_exp" },
    plans: { __type: "bigint_comparison_exp" },
    query: { __type: "String_comparison_exp" },
    queryid: { __type: "bigint_comparison_exp" },
    rows: { __type: "bigint_comparison_exp" },
    shared_blks_dirtied: { __type: "bigint_comparison_exp" },
    shared_blks_hit: { __type: "bigint_comparison_exp" },
    shared_blks_read: { __type: "bigint_comparison_exp" },
    shared_blks_written: { __type: "bigint_comparison_exp" },
    stddev_exec_time: { __type: "float8_comparison_exp" },
    stddev_plan_time: { __type: "float8_comparison_exp" },
    temp_blks_read: { __type: "bigint_comparison_exp" },
    temp_blks_written: { __type: "bigint_comparison_exp" },
    total_exec_time: { __type: "float8_comparison_exp" },
    total_plan_time: { __type: "float8_comparison_exp" },
    userid: { __type: "oid_comparison_exp" },
    wal_bytes: { __type: "numeric_comparison_exp" },
    wal_fpi: { __type: "bigint_comparison_exp" },
    wal_records: { __type: "bigint_comparison_exp" },
  },
  extensions_pg_stat_statements_max_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "float8" },
    blk_write_time: { __type: "float8" },
    calls: { __type: "bigint" },
    local_blks_dirtied: { __type: "bigint" },
    local_blks_hit: { __type: "bigint" },
    local_blks_read: { __type: "bigint" },
    local_blks_written: { __type: "bigint" },
    max_exec_time: { __type: "float8" },
    max_plan_time: { __type: "float8" },
    mean_exec_time: { __type: "float8" },
    mean_plan_time: { __type: "float8" },
    min_exec_time: { __type: "float8" },
    min_plan_time: { __type: "float8" },
    plans: { __type: "bigint" },
    query: { __type: "String" },
    queryid: { __type: "bigint" },
    rows: { __type: "bigint" },
    shared_blks_dirtied: { __type: "bigint" },
    shared_blks_hit: { __type: "bigint" },
    shared_blks_read: { __type: "bigint" },
    shared_blks_written: { __type: "bigint" },
    stddev_exec_time: { __type: "float8" },
    stddev_plan_time: { __type: "float8" },
    temp_blks_read: { __type: "bigint" },
    temp_blks_written: { __type: "bigint" },
    total_exec_time: { __type: "float8" },
    total_plan_time: { __type: "float8" },
    wal_bytes: { __type: "numeric" },
    wal_fpi: { __type: "bigint" },
    wal_records: { __type: "bigint" },
  },
  extensions_pg_stat_statements_min_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "float8" },
    blk_write_time: { __type: "float8" },
    calls: { __type: "bigint" },
    local_blks_dirtied: { __type: "bigint" },
    local_blks_hit: { __type: "bigint" },
    local_blks_read: { __type: "bigint" },
    local_blks_written: { __type: "bigint" },
    max_exec_time: { __type: "float8" },
    max_plan_time: { __type: "float8" },
    mean_exec_time: { __type: "float8" },
    mean_plan_time: { __type: "float8" },
    min_exec_time: { __type: "float8" },
    min_plan_time: { __type: "float8" },
    plans: { __type: "bigint" },
    query: { __type: "String" },
    queryid: { __type: "bigint" },
    rows: { __type: "bigint" },
    shared_blks_dirtied: { __type: "bigint" },
    shared_blks_hit: { __type: "bigint" },
    shared_blks_read: { __type: "bigint" },
    shared_blks_written: { __type: "bigint" },
    stddev_exec_time: { __type: "float8" },
    stddev_plan_time: { __type: "float8" },
    temp_blks_read: { __type: "bigint" },
    temp_blks_written: { __type: "bigint" },
    total_exec_time: { __type: "float8" },
    total_plan_time: { __type: "float8" },
    wal_bytes: { __type: "numeric" },
    wal_fpi: { __type: "bigint" },
    wal_records: { __type: "bigint" },
  },
  extensions_pg_stat_statements_order_by: {
    blk_read_time: { __type: "order_by" },
    blk_write_time: { __type: "order_by" },
    calls: { __type: "order_by" },
    dbid: { __type: "order_by" },
    local_blks_dirtied: { __type: "order_by" },
    local_blks_hit: { __type: "order_by" },
    local_blks_read: { __type: "order_by" },
    local_blks_written: { __type: "order_by" },
    max_exec_time: { __type: "order_by" },
    max_plan_time: { __type: "order_by" },
    mean_exec_time: { __type: "order_by" },
    mean_plan_time: { __type: "order_by" },
    min_exec_time: { __type: "order_by" },
    min_plan_time: { __type: "order_by" },
    plans: { __type: "order_by" },
    query: { __type: "order_by" },
    queryid: { __type: "order_by" },
    rows: { __type: "order_by" },
    shared_blks_dirtied: { __type: "order_by" },
    shared_blks_hit: { __type: "order_by" },
    shared_blks_read: { __type: "order_by" },
    shared_blks_written: { __type: "order_by" },
    stddev_exec_time: { __type: "order_by" },
    stddev_plan_time: { __type: "order_by" },
    temp_blks_read: { __type: "order_by" },
    temp_blks_written: { __type: "order_by" },
    total_exec_time: { __type: "order_by" },
    total_plan_time: { __type: "order_by" },
    userid: { __type: "order_by" },
    wal_bytes: { __type: "order_by" },
    wal_fpi: { __type: "order_by" },
    wal_records: { __type: "order_by" },
  },
  extensions_pg_stat_statements_stddev_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_stddev_pop_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_stddev_samp_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_sum_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "float8" },
    blk_write_time: { __type: "float8" },
    calls: { __type: "bigint" },
    local_blks_dirtied: { __type: "bigint" },
    local_blks_hit: { __type: "bigint" },
    local_blks_read: { __type: "bigint" },
    local_blks_written: { __type: "bigint" },
    max_exec_time: { __type: "float8" },
    max_plan_time: { __type: "float8" },
    mean_exec_time: { __type: "float8" },
    mean_plan_time: { __type: "float8" },
    min_exec_time: { __type: "float8" },
    min_plan_time: { __type: "float8" },
    plans: { __type: "bigint" },
    queryid: { __type: "bigint" },
    rows: { __type: "bigint" },
    shared_blks_dirtied: { __type: "bigint" },
    shared_blks_hit: { __type: "bigint" },
    shared_blks_read: { __type: "bigint" },
    shared_blks_written: { __type: "bigint" },
    stddev_exec_time: { __type: "float8" },
    stddev_plan_time: { __type: "float8" },
    temp_blks_read: { __type: "bigint" },
    temp_blks_written: { __type: "bigint" },
    total_exec_time: { __type: "float8" },
    total_plan_time: { __type: "float8" },
    wal_bytes: { __type: "numeric" },
    wal_fpi: { __type: "bigint" },
    wal_records: { __type: "bigint" },
  },
  extensions_pg_stat_statements_var_pop_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_var_samp_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pg_stat_statements_variance_fields: {
    __typename: { __type: "String!" },
    blk_read_time: { __type: "Float" },
    blk_write_time: { __type: "Float" },
    calls: { __type: "Float" },
    local_blks_dirtied: { __type: "Float" },
    local_blks_hit: { __type: "Float" },
    local_blks_read: { __type: "Float" },
    local_blks_written: { __type: "Float" },
    max_exec_time: { __type: "Float" },
    max_plan_time: { __type: "Float" },
    mean_exec_time: { __type: "Float" },
    mean_plan_time: { __type: "Float" },
    min_exec_time: { __type: "Float" },
    min_plan_time: { __type: "Float" },
    plans: { __type: "Float" },
    queryid: { __type: "Float" },
    rows: { __type: "Float" },
    shared_blks_dirtied: { __type: "Float" },
    shared_blks_hit: { __type: "Float" },
    shared_blks_read: { __type: "Float" },
    shared_blks_written: { __type: "Float" },
    stddev_exec_time: { __type: "Float" },
    stddev_plan_time: { __type: "Float" },
    temp_blks_read: { __type: "Float" },
    temp_blks_written: { __type: "Float" },
    total_exec_time: { __type: "Float" },
    total_plan_time: { __type: "Float" },
    wal_bytes: { __type: "Float" },
    wal_fpi: { __type: "Float" },
    wal_records: { __type: "Float" },
  },
  extensions_pk_columns_input: { id: { __type: "String!" } },
  extensions_set_input: {
    id: { __type: "String" },
    minutes: { __type: "Int" },
    request_uuid: { __type: "uuid" },
  },
  extensions_spatial_ref_sys: {
    __typename: { __type: "String!" },
    auth_name: { __type: "String" },
    auth_srid: { __type: "Int" },
    proj4text: { __type: "String" },
    srid: { __type: "Int!" },
    srtext: { __type: "String" },
  },
  extensions_spatial_ref_sys_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "extensions_spatial_ref_sys_aggregate_fields" },
    nodes: { __type: "[extensions_spatial_ref_sys!]!" },
  },
  extensions_spatial_ref_sys_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "extensions_spatial_ref_sys_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[extensions_spatial_ref_sys_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "extensions_spatial_ref_sys_max_fields" },
    min: { __type: "extensions_spatial_ref_sys_min_fields" },
    stddev: { __type: "extensions_spatial_ref_sys_stddev_fields" },
    stddev_pop: { __type: "extensions_spatial_ref_sys_stddev_pop_fields" },
    stddev_samp: { __type: "extensions_spatial_ref_sys_stddev_samp_fields" },
    sum: { __type: "extensions_spatial_ref_sys_sum_fields" },
    var_pop: { __type: "extensions_spatial_ref_sys_var_pop_fields" },
    var_samp: { __type: "extensions_spatial_ref_sys_var_samp_fields" },
    variance: { __type: "extensions_spatial_ref_sys_variance_fields" },
  },
  extensions_spatial_ref_sys_avg_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_bool_exp: {
    _and: { __type: "[extensions_spatial_ref_sys_bool_exp!]" },
    _not: { __type: "extensions_spatial_ref_sys_bool_exp" },
    _or: { __type: "[extensions_spatial_ref_sys_bool_exp!]" },
    auth_name: { __type: "String_comparison_exp" },
    auth_srid: { __type: "Int_comparison_exp" },
    proj4text: { __type: "String_comparison_exp" },
    srid: { __type: "Int_comparison_exp" },
    srtext: { __type: "String_comparison_exp" },
  },
  extensions_spatial_ref_sys_inc_input: {
    auth_srid: { __type: "Int" },
    srid: { __type: "Int" },
  },
  extensions_spatial_ref_sys_insert_input: {
    auth_name: { __type: "String" },
    auth_srid: { __type: "Int" },
    proj4text: { __type: "String" },
    srid: { __type: "Int" },
    srtext: { __type: "String" },
  },
  extensions_spatial_ref_sys_max_fields: {
    __typename: { __type: "String!" },
    auth_name: { __type: "String" },
    auth_srid: { __type: "Int" },
    proj4text: { __type: "String" },
    srid: { __type: "Int" },
    srtext: { __type: "String" },
  },
  extensions_spatial_ref_sys_min_fields: {
    __typename: { __type: "String!" },
    auth_name: { __type: "String" },
    auth_srid: { __type: "Int" },
    proj4text: { __type: "String" },
    srid: { __type: "Int" },
    srtext: { __type: "String" },
  },
  extensions_spatial_ref_sys_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[extensions_spatial_ref_sys!]!" },
  },
  extensions_spatial_ref_sys_on_conflict: {
    constraint: { __type: "extensions_spatial_ref_sys_constraint!" },
    update_columns: { __type: "[extensions_spatial_ref_sys_update_column!]!" },
    where: { __type: "extensions_spatial_ref_sys_bool_exp" },
  },
  extensions_spatial_ref_sys_order_by: {
    auth_name: { __type: "order_by" },
    auth_srid: { __type: "order_by" },
    proj4text: { __type: "order_by" },
    srid: { __type: "order_by" },
    srtext: { __type: "order_by" },
  },
  extensions_spatial_ref_sys_pk_columns_input: { srid: { __type: "Int!" } },
  extensions_spatial_ref_sys_set_input: {
    auth_name: { __type: "String" },
    auth_srid: { __type: "Int" },
    proj4text: { __type: "String" },
    srid: { __type: "Int" },
    srtext: { __type: "String" },
  },
  extensions_spatial_ref_sys_stddev_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_stddev_pop_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_stddev_samp_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_sum_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Int" },
    srid: { __type: "Int" },
  },
  extensions_spatial_ref_sys_var_pop_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_var_samp_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_spatial_ref_sys_variance_fields: {
    __typename: { __type: "String!" },
    auth_srid: { __type: "Float" },
    srid: { __type: "Float" },
  },
  extensions_stddev_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_stddev_order_by: { minutes: { __type: "order_by" } },
  extensions_stddev_pop_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_stddev_pop_order_by: { minutes: { __type: "order_by" } },
  extensions_stddev_samp_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_stddev_samp_order_by: { minutes: { __type: "order_by" } },
  extensions_sum_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Int" },
  },
  extensions_sum_order_by: { minutes: { __type: "order_by" } },
  extensions_var_pop_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_var_pop_order_by: { minutes: { __type: "order_by" } },
  extensions_var_samp_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_var_samp_order_by: { minutes: { __type: "order_by" } },
  extensions_variance_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
  },
  extensions_variance_order_by: { minutes: { __type: "order_by" } },
  float8_comparison_exp: {
    _eq: { __type: "float8" },
    _gt: { __type: "float8" },
    _gte: { __type: "float8" },
    _in: { __type: "[float8!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "float8" },
    _lte: { __type: "float8" },
    _neq: { __type: "float8" },
    _nin: { __type: "[float8!]" },
  },
  floor_plan_grid: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    floor_plan: { __type: "floor_plans!" },
    floor_plan_uuid: { __type: "uuid!" },
    height: { __type: "float8!" },
    is_overlay: { __type: "Boolean!" },
    path_blocking: { __type: "Boolean!" },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    width: { __type: "float8!" },
    x_axis: { __type: "float8!" },
    y_axis: { __type: "float8!" },
  },
  floor_plan_grid_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "floor_plan_grid_aggregate_fields" },
    nodes: { __type: "[floor_plan_grid!]!" },
  },
  floor_plan_grid_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "floor_plan_grid_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[floor_plan_grid_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "floor_plan_grid_max_fields" },
    min: { __type: "floor_plan_grid_min_fields" },
    stddev: { __type: "floor_plan_grid_stddev_fields" },
    stddev_pop: { __type: "floor_plan_grid_stddev_pop_fields" },
    stddev_samp: { __type: "floor_plan_grid_stddev_samp_fields" },
    sum: { __type: "floor_plan_grid_sum_fields" },
    var_pop: { __type: "floor_plan_grid_var_pop_fields" },
    var_samp: { __type: "floor_plan_grid_var_samp_fields" },
    variance: { __type: "floor_plan_grid_variance_fields" },
  },
  floor_plan_grid_aggregate_order_by: {
    avg: { __type: "floor_plan_grid_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "floor_plan_grid_max_order_by" },
    min: { __type: "floor_plan_grid_min_order_by" },
    stddev: { __type: "floor_plan_grid_stddev_order_by" },
    stddev_pop: { __type: "floor_plan_grid_stddev_pop_order_by" },
    stddev_samp: { __type: "floor_plan_grid_stddev_samp_order_by" },
    sum: { __type: "floor_plan_grid_sum_order_by" },
    var_pop: { __type: "floor_plan_grid_var_pop_order_by" },
    var_samp: { __type: "floor_plan_grid_var_samp_order_by" },
    variance: { __type: "floor_plan_grid_variance_order_by" },
  },
  floor_plan_grid_arr_rel_insert_input: {
    data: { __type: "[floor_plan_grid_insert_input!]!" },
    on_conflict: { __type: "floor_plan_grid_on_conflict" },
  },
  floor_plan_grid_avg_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_avg_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_bool_exp: {
    _and: { __type: "[floor_plan_grid_bool_exp!]" },
    _not: { __type: "floor_plan_grid_bool_exp" },
    _or: { __type: "[floor_plan_grid_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    floor_plan: { __type: "floor_plans_bool_exp" },
    floor_plan_uuid: { __type: "uuid_comparison_exp" },
    height: { __type: "float8_comparison_exp" },
    is_overlay: { __type: "Boolean_comparison_exp" },
    path_blocking: { __type: "Boolean_comparison_exp" },
    spaces: { __type: "spaces_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    width: { __type: "float8_comparison_exp" },
    x_axis: { __type: "float8_comparison_exp" },
    y_axis: { __type: "float8_comparison_exp" },
  },
  floor_plan_grid_inc_input: {
    height: { __type: "float8" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_insert_input: {
    created_at: { __type: "timestamptz" },
    floor_plan: { __type: "floor_plans_obj_rel_insert_input" },
    floor_plan_uuid: { __type: "uuid" },
    height: { __type: "float8" },
    is_overlay: { __type: "Boolean" },
    path_blocking: { __type: "Boolean" },
    spaces: { __type: "spaces_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    floor_plan_uuid: { __type: "uuid" },
    height: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_max_order_by: {
    created_at: { __type: "order_by" },
    floor_plan_uuid: { __type: "order_by" },
    height: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    floor_plan_uuid: { __type: "uuid" },
    height: { __type: "float8" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_min_order_by: {
    created_at: { __type: "order_by" },
    floor_plan_uuid: { __type: "order_by" },
    height: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[floor_plan_grid!]!" },
  },
  floor_plan_grid_obj_rel_insert_input: {
    data: { __type: "floor_plan_grid_insert_input!" },
    on_conflict: { __type: "floor_plan_grid_on_conflict" },
  },
  floor_plan_grid_on_conflict: {
    constraint: { __type: "floor_plan_grid_constraint!" },
    update_columns: { __type: "[floor_plan_grid_update_column!]!" },
    where: { __type: "floor_plan_grid_bool_exp" },
  },
  floor_plan_grid_order_by: {
    created_at: { __type: "order_by" },
    floor_plan: { __type: "floor_plans_order_by" },
    floor_plan_uuid: { __type: "order_by" },
    height: { __type: "order_by" },
    is_overlay: { __type: "order_by" },
    path_blocking: { __type: "order_by" },
    spaces_aggregate: { __type: "spaces_aggregate_order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_pk_columns_input: { uuid: { __type: "uuid!" } },
  floor_plan_grid_set_input: {
    created_at: { __type: "timestamptz" },
    floor_plan_uuid: { __type: "uuid" },
    height: { __type: "float8" },
    is_overlay: { __type: "Boolean" },
    path_blocking: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_stddev_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_stddev_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_stddev_pop_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_stddev_pop_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_stddev_samp_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_stddev_samp_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_sum_fields: {
    __typename: { __type: "String!" },
    height: { __type: "float8" },
    width: { __type: "float8" },
    x_axis: { __type: "float8" },
    y_axis: { __type: "float8" },
  },
  floor_plan_grid_sum_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_var_pop_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_var_pop_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_var_samp_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_var_samp_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plan_grid_variance_fields: {
    __typename: { __type: "String!" },
    height: { __type: "Float" },
    width: { __type: "Float" },
    x_axis: { __type: "Float" },
    y_axis: { __type: "Float" },
  },
  floor_plan_grid_variance_order_by: {
    height: { __type: "order_by" },
    width: { __type: "order_by" },
    x_axis: { __type: "order_by" },
    y_axis: { __type: "order_by" },
  },
  floor_plans: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    building: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    floor: { __type: "String!" },
    floor_plan_grids: {
      __type: "[floor_plan_grid!]!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    floor_plan_grids_aggregate: {
      __type: "floor_plan_grid_aggregate!",
      __args: {
        distinct_on: "[floor_plan_grid_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plan_grid_order_by!]",
        where: "floor_plan_grid_bool_exp",
      },
    },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  floor_plans_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "floor_plans_aggregate_fields" },
    nodes: { __type: "[floor_plans!]!" },
  },
  floor_plans_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[floor_plans_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "floor_plans_max_fields" },
    min: { __type: "floor_plans_min_fields" },
  },
  floor_plans_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "floor_plans_max_order_by" },
    min: { __type: "floor_plans_min_order_by" },
  },
  floor_plans_arr_rel_insert_input: {
    data: { __type: "[floor_plans_insert_input!]!" },
    on_conflict: { __type: "floor_plans_on_conflict" },
  },
  floor_plans_bool_exp: {
    _and: { __type: "[floor_plans_bool_exp!]" },
    _not: { __type: "floor_plans_bool_exp" },
    _or: { __type: "[floor_plans_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    building: { __type: "String_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    floor: { __type: "String_comparison_exp" },
    floor_plan_grids: { __type: "floor_plan_grid_bool_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    spaces: { __type: "spaces_bool_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  floor_plans_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    floor: { __type: "String" },
    floor_plan_grids: { __type: "floor_plan_grid_arr_rel_insert_input" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    spaces: { __type: "spaces_arr_rel_insert_input" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  floor_plans_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    floor: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  floor_plans_max_order_by: {
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    floor: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  floor_plans_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    floor: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  floor_plans_min_order_by: {
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    floor: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  floor_plans_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[floor_plans!]!" },
  },
  floor_plans_obj_rel_insert_input: {
    data: { __type: "floor_plans_insert_input!" },
    on_conflict: { __type: "floor_plans_on_conflict" },
  },
  floor_plans_on_conflict: {
    constraint: { __type: "floor_plans_constraint!" },
    update_columns: { __type: "[floor_plans_update_column!]!" },
    where: { __type: "floor_plans_bool_exp" },
  },
  floor_plans_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    floor: { __type: "order_by" },
    floor_plan_grids_aggregate: {
      __type: "floor_plan_grid_aggregate_order_by",
    },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    spaces_aggregate: { __type: "spaces_aggregate_order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  floor_plans_pk_columns_input: { uuid: { __type: "uuid!" } },
  floor_plans_set_input: {
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    floor: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  guest_questionaires_answers: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    guest_questionaire_uuid: { __type: "uuid!" },
    guests_has_questionaire: { __type: "guests_has_questionaires!" },
    question: { __type: "questions!" },
    question_uuid: { __type: "uuid!" },
    questionaire: { __type: "questionaires!" },
    questionaire_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    value: { __type: "String!" },
  },
  guest_questionaires_answers_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "guest_questionaires_answers_aggregate_fields" },
    nodes: { __type: "[guest_questionaires_answers!]!" },
  },
  guest_questionaires_answers_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[guest_questionaires_answers_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "guest_questionaires_answers_max_fields" },
    min: { __type: "guest_questionaires_answers_min_fields" },
  },
  guest_questionaires_answers_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "guest_questionaires_answers_max_order_by" },
    min: { __type: "guest_questionaires_answers_min_order_by" },
  },
  guest_questionaires_answers_arr_rel_insert_input: {
    data: { __type: "[guest_questionaires_answers_insert_input!]!" },
    on_conflict: { __type: "guest_questionaires_answers_on_conflict" },
  },
  guest_questionaires_answers_bool_exp: {
    _and: { __type: "[guest_questionaires_answers_bool_exp!]" },
    _not: { __type: "guest_questionaires_answers_bool_exp" },
    _or: { __type: "[guest_questionaires_answers_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    guest_questionaire_uuid: { __type: "uuid_comparison_exp" },
    guests_has_questionaire: { __type: "guests_has_questionaires_bool_exp" },
    question: { __type: "questions_bool_exp" },
    question_uuid: { __type: "uuid_comparison_exp" },
    questionaire: { __type: "questionaires_bool_exp" },
    questionaire_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    value: { __type: "String_comparison_exp" },
  },
  guest_questionaires_answers_insert_input: {
    created_at: { __type: "timestamptz" },
    guest_questionaire_uuid: { __type: "uuid" },
    guests_has_questionaire: {
      __type: "guests_has_questionaires_obj_rel_insert_input",
    },
    question: { __type: "questions_obj_rel_insert_input" },
    question_uuid: { __type: "uuid" },
    questionaire: { __type: "questionaires_obj_rel_insert_input" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "String" },
  },
  guest_questionaires_answers_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    guest_questionaire_uuid: { __type: "uuid" },
    question_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "String" },
  },
  guest_questionaires_answers_max_order_by: {
    created_at: { __type: "order_by" },
    guest_questionaire_uuid: { __type: "order_by" },
    question_uuid: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  guest_questionaires_answers_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    guest_questionaire_uuid: { __type: "uuid" },
    question_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "String" },
  },
  guest_questionaires_answers_min_order_by: {
    created_at: { __type: "order_by" },
    guest_questionaire_uuid: { __type: "order_by" },
    question_uuid: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  guest_questionaires_answers_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[guest_questionaires_answers!]!" },
  },
  guest_questionaires_answers_on_conflict: {
    constraint: { __type: "guest_questionaires_answers_constraint!" },
    update_columns: { __type: "[guest_questionaires_answers_update_column!]!" },
    where: { __type: "guest_questionaires_answers_bool_exp" },
  },
  guest_questionaires_answers_order_by: {
    created_at: { __type: "order_by" },
    guest_questionaire_uuid: { __type: "order_by" },
    guests_has_questionaire: { __type: "guests_has_questionaires_order_by" },
    question: { __type: "questions_order_by" },
    question_uuid: { __type: "order_by" },
    questionaire: { __type: "questionaires_order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    value: { __type: "order_by" },
  },
  guest_questionaires_answers_pk_columns_input: { uuid: { __type: "uuid!" } },
  guest_questionaires_answers_set_input: {
    created_at: { __type: "timestamptz" },
    guest_questionaire_uuid: { __type: "uuid" },
    question_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    value: { __type: "String" },
  },
  guests: {
    __typename: { __type: "String!" },
    aruba_wifi_accesses: {
      __type: "[aruba_wifi_access!]!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_accesses_aggregate: {
      __type: "aruba_wifi_access_aggregate!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    badge_printed: { __type: "Boolean!" },
    badge_printed_at: { __type: "timestamptz!" },
    brand: { __type: "brands!" },
    brand_user: { __type: "brand_users!" },
    brand_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    email: { __type: "String!" },
    expected_arrival: { __type: "timestamptz!" },
    host_name: { __type: "String!" },
    host_uuid: { __type: "uuid!" },
    name: { __type: "String!" },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    photo_taken_at: { __type: "timestamptz!" },
    photo_url: { __type: "String" },
    purpose_of_visit: { __type: "String!" },
    reservation_uuid: { __type: "uuid" },
    rsvp: { __type: "Boolean" },
    rsvp_at: { __type: "timestamptz" },
    signin_at: { __type: "timestamptz" },
    signout_at: { __type: "timestamptz" },
    spaces_usages: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usages_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid!" },
  },
  guests_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "guests_aggregate_fields" },
    nodes: { __type: "[guests!]!" },
  },
  guests_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[guests_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "guests_max_fields" },
    min: { __type: "guests_min_fields" },
  },
  guests_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "guests_max_order_by" },
    min: { __type: "guests_min_order_by" },
  },
  guests_arr_rel_insert_input: {
    data: { __type: "[guests_insert_input!]!" },
    on_conflict: { __type: "guests_on_conflict" },
  },
  guests_bool_exp: {
    _and: { __type: "[guests_bool_exp!]" },
    _not: { __type: "guests_bool_exp" },
    _or: { __type: "[guests_bool_exp!]" },
    aruba_wifi_accesses: { __type: "aruba_wifi_access_bool_exp" },
    badge_printed: { __type: "Boolean_comparison_exp" },
    badge_printed_at: { __type: "timestamptz_comparison_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_user: { __type: "brand_users_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    email: { __type: "String_comparison_exp" },
    expected_arrival: { __type: "timestamptz_comparison_exp" },
    host_name: { __type: "String_comparison_exp" },
    host_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    photo_taken_at: { __type: "timestamptz_comparison_exp" },
    photo_url: { __type: "String_comparison_exp" },
    purpose_of_visit: { __type: "String_comparison_exp" },
    reservation_uuid: { __type: "uuid_comparison_exp" },
    rsvp: { __type: "Boolean_comparison_exp" },
    rsvp_at: { __type: "timestamptz_comparison_exp" },
    signin_at: { __type: "timestamptz_comparison_exp" },
    signout_at: { __type: "timestamptz_comparison_exp" },
    spaces_usages: { __type: "spaces_usage_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  guests_has_questionaires: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    filled_at: { __type: "timestamptz" },
    guest_questionaires_answers: {
      __type: "[guest_questionaires_answers!]!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_uuid: { __type: "uuid!" },
    questionaire: { __type: "questionaires!" },
    questionaire_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  guests_has_questionaires_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "guests_has_questionaires_aggregate_fields" },
    nodes: { __type: "[guests_has_questionaires!]!" },
  },
  guests_has_questionaires_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[guests_has_questionaires_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "guests_has_questionaires_max_fields" },
    min: { __type: "guests_has_questionaires_min_fields" },
  },
  guests_has_questionaires_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "guests_has_questionaires_max_order_by" },
    min: { __type: "guests_has_questionaires_min_order_by" },
  },
  guests_has_questionaires_arr_rel_insert_input: {
    data: { __type: "[guests_has_questionaires_insert_input!]!" },
    on_conflict: { __type: "guests_has_questionaires_on_conflict" },
  },
  guests_has_questionaires_bool_exp: {
    _and: { __type: "[guests_has_questionaires_bool_exp!]" },
    _not: { __type: "guests_has_questionaires_bool_exp" },
    _or: { __type: "[guests_has_questionaires_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    filled_at: { __type: "timestamptz_comparison_exp" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_bool_exp",
    },
    guest_uuid: { __type: "uuid_comparison_exp" },
    questionaire: { __type: "questionaires_bool_exp" },
    questionaire_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  guests_has_questionaires_insert_input: {
    created_at: { __type: "timestamptz" },
    filled_at: { __type: "timestamptz" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_arr_rel_insert_input",
    },
    guest_uuid: { __type: "uuid" },
    questionaire: { __type: "questionaires_obj_rel_insert_input" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  guests_has_questionaires_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    filled_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  guests_has_questionaires_max_order_by: {
    created_at: { __type: "order_by" },
    filled_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_has_questionaires_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    filled_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  guests_has_questionaires_min_order_by: {
    created_at: { __type: "order_by" },
    filled_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_has_questionaires_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[guests_has_questionaires!]!" },
  },
  guests_has_questionaires_obj_rel_insert_input: {
    data: { __type: "guests_has_questionaires_insert_input!" },
    on_conflict: { __type: "guests_has_questionaires_on_conflict" },
  },
  guests_has_questionaires_on_conflict: {
    constraint: { __type: "guests_has_questionaires_constraint!" },
    update_columns: { __type: "[guests_has_questionaires_update_column!]!" },
    where: { __type: "guests_has_questionaires_bool_exp" },
  },
  guests_has_questionaires_order_by: {
    created_at: { __type: "order_by" },
    filled_at: { __type: "order_by" },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate_order_by",
    },
    guest_uuid: { __type: "order_by" },
    questionaire: { __type: "questionaires_order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_has_questionaires_pk_columns_input: { uuid: { __type: "uuid!" } },
  guests_has_questionaires_set_input: {
    created_at: { __type: "timestamptz" },
    filled_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  guests_insert_input: {
    aruba_wifi_accesses: { __type: "aruba_wifi_access_arr_rel_insert_input" },
    badge_printed: { __type: "Boolean" },
    badge_printed_at: { __type: "timestamptz" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_user: { __type: "brand_users_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    expected_arrival: { __type: "timestamptz" },
    host_name: { __type: "String" },
    host_uuid: { __type: "uuid" },
    name: { __type: "String" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    photo_taken_at: { __type: "timestamptz" },
    photo_url: { __type: "String" },
    purpose_of_visit: { __type: "String" },
    reservation_uuid: { __type: "uuid" },
    rsvp: { __type: "Boolean" },
    rsvp_at: { __type: "timestamptz" },
    signin_at: { __type: "timestamptz" },
    signout_at: { __type: "timestamptz" },
    spaces_usages: { __type: "spaces_usage_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  guests_max_fields: {
    __typename: { __type: "String!" },
    badge_printed_at: { __type: "timestamptz" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    expected_arrival: { __type: "timestamptz" },
    host_name: { __type: "String" },
    host_uuid: { __type: "uuid" },
    name: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    photo_taken_at: { __type: "timestamptz" },
    photo_url: { __type: "String" },
    purpose_of_visit: { __type: "String" },
    reservation_uuid: { __type: "uuid" },
    rsvp_at: { __type: "timestamptz" },
    signin_at: { __type: "timestamptz" },
    signout_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  guests_max_order_by: {
    badge_printed_at: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    expected_arrival: { __type: "order_by" },
    host_name: { __type: "order_by" },
    host_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    photo_taken_at: { __type: "order_by" },
    photo_url: { __type: "order_by" },
    purpose_of_visit: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    rsvp_at: { __type: "order_by" },
    signin_at: { __type: "order_by" },
    signout_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_min_fields: {
    __typename: { __type: "String!" },
    badge_printed_at: { __type: "timestamptz" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    expected_arrival: { __type: "timestamptz" },
    host_name: { __type: "String" },
    host_uuid: { __type: "uuid" },
    name: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    photo_taken_at: { __type: "timestamptz" },
    photo_url: { __type: "String" },
    purpose_of_visit: { __type: "String" },
    reservation_uuid: { __type: "uuid" },
    rsvp_at: { __type: "timestamptz" },
    signin_at: { __type: "timestamptz" },
    signout_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  guests_min_order_by: {
    badge_printed_at: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    expected_arrival: { __type: "order_by" },
    host_name: { __type: "order_by" },
    host_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    photo_taken_at: { __type: "order_by" },
    photo_url: { __type: "order_by" },
    purpose_of_visit: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    rsvp_at: { __type: "order_by" },
    signin_at: { __type: "order_by" },
    signout_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[guests!]!" },
  },
  guests_obj_rel_insert_input: {
    data: { __type: "guests_insert_input!" },
    on_conflict: { __type: "guests_on_conflict" },
  },
  guests_on_conflict: {
    constraint: { __type: "guests_constraint!" },
    update_columns: { __type: "[guests_update_column!]!" },
    where: { __type: "guests_bool_exp" },
  },
  guests_order_by: {
    aruba_wifi_accesses_aggregate: {
      __type: "aruba_wifi_access_aggregate_order_by",
    },
    badge_printed: { __type: "order_by" },
    badge_printed_at: { __type: "order_by" },
    brand: { __type: "brands_order_by" },
    brand_user: { __type: "brand_users_order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    expected_arrival: { __type: "order_by" },
    host_name: { __type: "order_by" },
    host_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    photo_taken_at: { __type: "order_by" },
    photo_url: { __type: "order_by" },
    purpose_of_visit: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    rsvp: { __type: "order_by" },
    rsvp_at: { __type: "order_by" },
    signin_at: { __type: "order_by" },
    signout_at: { __type: "order_by" },
    spaces_usages_aggregate: { __type: "spaces_usage_aggregate_order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  guests_pk_columns_input: { uuid: { __type: "uuid!" } },
  guests_set_input: {
    badge_printed: { __type: "Boolean" },
    badge_printed_at: { __type: "timestamptz" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    expected_arrival: { __type: "timestamptz" },
    host_name: { __type: "String" },
    host_uuid: { __type: "uuid" },
    name: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    photo_taken_at: { __type: "timestamptz" },
    photo_url: { __type: "String" },
    purpose_of_visit: { __type: "String" },
    reservation_uuid: { __type: "uuid" },
    rsvp: { __type: "Boolean" },
    rsvp_at: { __type: "timestamptz" },
    signin_at: { __type: "timestamptz" },
    signout_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  inboxes: {
    __typename: { __type: "String!" },
    conversation: { __type: "conversations!" },
    conversation_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    pubsub_token: { __type: "String!" },
    request: { __type: "requests" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  inboxes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "inboxes_aggregate_fields" },
    nodes: { __type: "[inboxes!]!" },
  },
  inboxes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[inboxes_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "inboxes_max_fields" },
    min: { __type: "inboxes_min_fields" },
  },
  inboxes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "inboxes_max_order_by" },
    min: { __type: "inboxes_min_order_by" },
  },
  inboxes_arr_rel_insert_input: {
    data: { __type: "[inboxes_insert_input!]!" },
    on_conflict: { __type: "inboxes_on_conflict" },
  },
  inboxes_bool_exp: {
    _and: { __type: "[inboxes_bool_exp!]" },
    _not: { __type: "inboxes_bool_exp" },
    _or: { __type: "[inboxes_bool_exp!]" },
    conversation: { __type: "conversations_bool_exp" },
    conversation_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    pubsub_token: { __type: "String_comparison_exp" },
    request: { __type: "requests_bool_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  inboxes_insert_input: {
    conversation: { __type: "conversations_obj_rel_insert_input" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request: { __type: "requests_obj_rel_insert_input" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  inboxes_max_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  inboxes_max_order_by: {
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    pubsub_token: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  inboxes_min_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  inboxes_min_order_by: {
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    pubsub_token: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  inboxes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[inboxes!]!" },
  },
  inboxes_on_conflict: {
    constraint: { __type: "inboxes_constraint!" },
    update_columns: { __type: "[inboxes_update_column!]!" },
    where: { __type: "inboxes_bool_exp" },
  },
  inboxes_order_by: {
    conversation: { __type: "conversations_order_by" },
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    pubsub_token: { __type: "order_by" },
    request: { __type: "requests_order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  inboxes_pk_columns_input: { uuid: { __type: "uuid!" } },
  inboxes_set_input: {
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  invoice: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8!" },
    base_brand_gross_revenue: { __type: "float8!" },
    base_cashback_by_brand: { __type: "float8!" },
    base_cashback_by_stayr: { __type: "float8!" },
    base_currency_code: { __type: "bpchar!" },
    base_discount_by_brand: { __type: "float8!" },
    base_discount_by_stayr: { __type: "float8!" },
    base_payment_by_card: { __type: "float8!" },
    base_payment_by_cash: { __type: "float8!" },
    base_payment_by_credits: { __type: "float8!" },
    base_pf_cc_fee: { __type: "float8!" },
    base_pf_platform_fixed_fee: { __type: "float8!" },
    base_pf_platform_type: { __type: "String!" },
    base_pf_platform_variable_fee: { __type: "float8!" },
    base_pf_platform_variable_rate: { __type: "float8!" },
    base_pf_transaction_fee: { __type: "float8!" },
    base_total_brand_collected: { __type: "float8!" },
    base_total_cashback: { __type: "float8!" },
    base_total_discount: { __type: "float8!" },
    base_total_due_to_brand: { __type: "float8!" },
    base_total_due_to_stayr: { __type: "float8!" },
    base_total_payment: { __type: "float8!" },
    base_total_price: { __type: "float8!" },
    base_total_stayr_collected: { __type: "float8!" },
    brand: { __type: "brands!" },
    brand_conversion_rate: { __type: "float8!" },
    brand_currency_code: { __type: "bpchar!" },
    brand_uuid: { __type: "uuid!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    email_invoice_data: { __type: "json!", __args: { path: "String" } },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    stripe_transfers: {
      __type: "[stripe_transfers!]!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    stripe_transfers_aggregate: {
      __type: "stripe_transfers_aggregate!",
      __args: {
        distinct_on: "[stripe_transfers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[stripe_transfers_order_by!]",
        where: "stripe_transfers_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    user_conversion_rate: { __type: "float8!" },
    user_currency_code: { __type: "bpchar!" },
    uuid: { __type: "uuid!" },
  },
  invoice_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "invoice_aggregate_fields" },
    nodes: { __type: "[invoice!]!" },
  },
  invoice_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "invoice_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[invoice_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "invoice_max_fields" },
    min: { __type: "invoice_min_fields" },
    stddev: { __type: "invoice_stddev_fields" },
    stddev_pop: { __type: "invoice_stddev_pop_fields" },
    stddev_samp: { __type: "invoice_stddev_samp_fields" },
    sum: { __type: "invoice_sum_fields" },
    var_pop: { __type: "invoice_var_pop_fields" },
    var_samp: { __type: "invoice_var_samp_fields" },
    variance: { __type: "invoice_variance_fields" },
  },
  invoice_aggregate_order_by: {
    avg: { __type: "invoice_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "invoice_max_order_by" },
    min: { __type: "invoice_min_order_by" },
    stddev: { __type: "invoice_stddev_order_by" },
    stddev_pop: { __type: "invoice_stddev_pop_order_by" },
    stddev_samp: { __type: "invoice_stddev_samp_order_by" },
    sum: { __type: "invoice_sum_order_by" },
    var_pop: { __type: "invoice_var_pop_order_by" },
    var_samp: { __type: "invoice_var_samp_order_by" },
    variance: { __type: "invoice_variance_order_by" },
  },
  invoice_arr_rel_insert_input: {
    data: { __type: "[invoice_insert_input!]!" },
    on_conflict: { __type: "invoice_on_conflict" },
  },
  invoice_avg_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_avg_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_bool_exp: {
    _and: { __type: "[invoice_bool_exp!]" },
    _not: { __type: "invoice_bool_exp" },
    _or: { __type: "[invoice_bool_exp!]" },
    base_3rd_party_platform: { __type: "String_comparison_exp" },
    base_3rd_party_platform_fee: { __type: "float8_comparison_exp" },
    base_brand_gross_revenue: { __type: "float8_comparison_exp" },
    base_cashback_by_brand: { __type: "float8_comparison_exp" },
    base_cashback_by_stayr: { __type: "float8_comparison_exp" },
    base_currency_code: { __type: "bpchar_comparison_exp" },
    base_discount_by_brand: { __type: "float8_comparison_exp" },
    base_discount_by_stayr: { __type: "float8_comparison_exp" },
    base_payment_by_card: { __type: "float8_comparison_exp" },
    base_payment_by_cash: { __type: "float8_comparison_exp" },
    base_payment_by_credits: { __type: "float8_comparison_exp" },
    base_pf_cc_fee: { __type: "float8_comparison_exp" },
    base_pf_platform_fixed_fee: { __type: "float8_comparison_exp" },
    base_pf_platform_type: { __type: "String_comparison_exp" },
    base_pf_platform_variable_fee: { __type: "float8_comparison_exp" },
    base_pf_platform_variable_rate: { __type: "float8_comparison_exp" },
    base_pf_transaction_fee: { __type: "float8_comparison_exp" },
    base_total_brand_collected: { __type: "float8_comparison_exp" },
    base_total_cashback: { __type: "float8_comparison_exp" },
    base_total_discount: { __type: "float8_comparison_exp" },
    base_total_due_to_brand: { __type: "float8_comparison_exp" },
    base_total_due_to_stayr: { __type: "float8_comparison_exp" },
    base_total_payment: { __type: "float8_comparison_exp" },
    base_total_price: { __type: "float8_comparison_exp" },
    base_total_stayr_collected: { __type: "float8_comparison_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_conversion_rate: { __type: "float8_comparison_exp" },
    brand_currency_code: { __type: "bpchar_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    email_invoice_data: { __type: "json_comparison_exp" },
    requests: { __type: "requests_bool_exp" },
    stripe_transfers: { __type: "stripe_transfers_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_conversion_rate: { __type: "float8_comparison_exp" },
    user_currency_code: { __type: "bpchar_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  invoice_inc_input: {
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    user_conversion_rate: { __type: "float8" },
  },
  invoice_insert_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_type: { __type: "String" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    email_invoice_data: { __type: "json" },
    requests: { __type: "requests_arr_rel_insert_input" },
    stripe_transfers: { __type: "stripe_transfers_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    user_conversion_rate: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    uuid: { __type: "uuid" },
  },
  invoice_max_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_type: { __type: "String" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    user_conversion_rate: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    uuid: { __type: "uuid" },
  },
  invoice_max_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_type: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  invoice_min_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_type: { __type: "String" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    user_conversion_rate: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    uuid: { __type: "uuid" },
  },
  invoice_min_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_type: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  invoice_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[invoice!]!" },
  },
  invoice_obj_rel_insert_input: {
    data: { __type: "invoice_insert_input!" },
    on_conflict: { __type: "invoice_on_conflict" },
  },
  invoice_on_conflict: {
    constraint: { __type: "invoice_constraint!" },
    update_columns: { __type: "[invoice_update_column!]!" },
    where: { __type: "invoice_bool_exp" },
  },
  invoice_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_type: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand: { __type: "brands_order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email_invoice_data: { __type: "order_by" },
    requests_aggregate: { __type: "requests_aggregate_order_by" },
    stripe_transfers_aggregate: {
      __type: "stripe_transfers_aggregate_order_by",
    },
    updated_at: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  invoice_pk_columns_input: { uuid: { __type: "uuid!" } },
  invoice_set_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_type: { __type: "String" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    email_invoice_data: { __type: "json" },
    updated_at: { __type: "timestamptz" },
    user_conversion_rate: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    uuid: { __type: "uuid" },
  },
  invoice_stddev_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_stddev_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_stddev_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_stddev_pop_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_stddev_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_stddev_samp_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_sum_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_platform_fixed_fee: { __type: "float8" },
    base_pf_platform_variable_fee: { __type: "float8" },
    base_pf_platform_variable_rate: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_brand_collected: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_due_to_brand: { __type: "float8" },
    base_total_due_to_stayr: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_total_stayr_collected: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    user_conversion_rate: { __type: "float8" },
  },
  invoice_sum_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_var_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_var_pop_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_var_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_var_samp_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  invoice_variance_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_platform_fixed_fee: { __type: "Float" },
    base_pf_platform_variable_fee: { __type: "Float" },
    base_pf_platform_variable_rate: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_brand_collected: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_due_to_brand: { __type: "Float" },
    base_total_due_to_stayr: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_total_stayr_collected: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    user_conversion_rate: { __type: "Float" },
  },
  invoice_variance_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_platform_fixed_fee: { __type: "order_by" },
    base_pf_platform_variable_fee: { __type: "order_by" },
    base_pf_platform_variable_rate: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_brand_collected: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_due_to_brand: { __type: "order_by" },
    base_total_due_to_stayr: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_total_stayr_collected: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    user_conversion_rate: { __type: "order_by" },
  },
  json_comparison_exp: {
    _eq: { __type: "json" },
    _gt: { __type: "json" },
    _gte: { __type: "json" },
    _in: { __type: "[json!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "json" },
    _lte: { __type: "json" },
    _neq: { __type: "json" },
    _nin: { __type: "[json!]" },
  },
  jsonb_comparison_exp: {
    _contained_in: { __type: "jsonb" },
    _contains: { __type: "jsonb" },
    _eq: { __type: "jsonb" },
    _gt: { __type: "jsonb" },
    _gte: { __type: "jsonb" },
    _has_key: { __type: "String" },
    _has_keys_all: { __type: "[String!]" },
    _has_keys_any: { __type: "[String!]" },
    _in: { __type: "[jsonb!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "jsonb" },
    _lte: { __type: "jsonb" },
    _neq: { __type: "jsonb" },
    _nin: { __type: "[jsonb!]" },
  },
  key_performance_snapshots: {
    __typename: { __type: "String!" },
    content: { __type: "json!", __args: { path: "String" } },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    date_report: { __type: "date!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  key_performance_snapshots_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "key_performance_snapshots_aggregate_fields" },
    nodes: { __type: "[key_performance_snapshots!]!" },
  },
  key_performance_snapshots_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[key_performance_snapshots_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "key_performance_snapshots_max_fields" },
    min: { __type: "key_performance_snapshots_min_fields" },
  },
  key_performance_snapshots_bool_exp: {
    _and: { __type: "[key_performance_snapshots_bool_exp!]" },
    _not: { __type: "key_performance_snapshots_bool_exp" },
    _or: { __type: "[key_performance_snapshots_bool_exp!]" },
    content: { __type: "json_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_report: { __type: "date_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  key_performance_snapshots_insert_input: {
    content: { __type: "json" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_report: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  key_performance_snapshots_max_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_report: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  key_performance_snapshots_min_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_report: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  key_performance_snapshots_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[key_performance_snapshots!]!" },
  },
  key_performance_snapshots_on_conflict: {
    constraint: { __type: "key_performance_snapshots_constraint!" },
    update_columns: { __type: "[key_performance_snapshots_update_column!]!" },
    where: { __type: "key_performance_snapshots_bool_exp" },
  },
  key_performance_snapshots_order_by: {
    content: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_report: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  key_performance_snapshots_pk_columns_input: { uuid: { __type: "uuid!" } },
  key_performance_snapshots_set_input: {
    content: { __type: "json" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_report: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_categories: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    index: { __type: "Int!" },
    slug: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  listing_categories_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_categories_aggregate_fields" },
    nodes: { __type: "[listing_categories!]!" },
  },
  listing_categories_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "listing_categories_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_categories_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_categories_max_fields" },
    min: { __type: "listing_categories_min_fields" },
    stddev: { __type: "listing_categories_stddev_fields" },
    stddev_pop: { __type: "listing_categories_stddev_pop_fields" },
    stddev_samp: { __type: "listing_categories_stddev_samp_fields" },
    sum: { __type: "listing_categories_sum_fields" },
    var_pop: { __type: "listing_categories_var_pop_fields" },
    var_samp: { __type: "listing_categories_var_samp_fields" },
    variance: { __type: "listing_categories_variance_fields" },
  },
  listing_categories_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_bool_exp: {
    _and: { __type: "[listing_categories_bool_exp!]" },
    _not: { __type: "listing_categories_bool_exp" },
    _or: { __type: "[listing_categories_bool_exp!]" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  listing_categories_inc_input: { index: { __type: "Int" } },
  listing_categories_insert_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_categories_max_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_categories_min_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_categories_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_categories!]!" },
  },
  listing_categories_on_conflict: {
    constraint: { __type: "listing_categories_constraint!" },
    update_columns: { __type: "[listing_categories_update_column!]!" },
    where: { __type: "listing_categories_bool_exp" },
  },
  listing_categories_order_by: {
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    index: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_categories_pk_columns_input: { uuid: { __type: "uuid!" } },
  listing_categories_set_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_categories_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
  },
  listing_categories_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_categories_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    index: { __type: "Int!" },
    listing_in_collections: {
      __type: "[listing_in_collections!]!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    slug: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  listing_collections_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_collections_aggregate_fields" },
    nodes: { __type: "[listing_collections!]!" },
  },
  listing_collections_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "listing_collections_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_collections_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_collections_max_fields" },
    min: { __type: "listing_collections_min_fields" },
    stddev: { __type: "listing_collections_stddev_fields" },
    stddev_pop: { __type: "listing_collections_stddev_pop_fields" },
    stddev_samp: { __type: "listing_collections_stddev_samp_fields" },
    sum: { __type: "listing_collections_sum_fields" },
    var_pop: { __type: "listing_collections_var_pop_fields" },
    var_samp: { __type: "listing_collections_var_samp_fields" },
    variance: { __type: "listing_collections_variance_fields" },
  },
  listing_collections_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_bool_exp: {
    _and: { __type: "[listing_collections_bool_exp!]" },
    _not: { __type: "listing_collections_bool_exp" },
    _or: { __type: "[listing_collections_bool_exp!]" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    listing_in_collections: { __type: "listing_in_collections_bool_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  listing_collections_inc_input: { index: { __type: "Int" } },
  listing_collections_insert_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    listing_in_collections: {
      __type: "listing_in_collections_arr_rel_insert_input",
    },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_collections_max_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_collections_min_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_collections_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_collections!]!" },
  },
  listing_collections_obj_rel_insert_input: {
    data: { __type: "listing_collections_insert_input!" },
    on_conflict: { __type: "listing_collections_on_conflict" },
  },
  listing_collections_on_conflict: {
    constraint: { __type: "listing_collections_constraint!" },
    update_columns: { __type: "[listing_collections_update_column!]!" },
    where: { __type: "listing_collections_bool_exp" },
  },
  listing_collections_order_by: {
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    index: { __type: "order_by" },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate_order_by",
    },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_collections_pk_columns_input: { uuid: { __type: "uuid!" } },
  listing_collections_set_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    index: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_collections_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
  },
  listing_collections_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_collections_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
  },
  listing_discussions: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_discussions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_discussions_aggregate_fields" },
    nodes: { __type: "[listing_discussions!]!" },
  },
  listing_discussions_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "listing_discussions_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_discussions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_discussions_max_fields" },
    min: { __type: "listing_discussions_min_fields" },
    stddev: { __type: "listing_discussions_stddev_fields" },
    stddev_pop: { __type: "listing_discussions_stddev_pop_fields" },
    stddev_samp: { __type: "listing_discussions_stddev_samp_fields" },
    sum: { __type: "listing_discussions_sum_fields" },
    var_pop: { __type: "listing_discussions_var_pop_fields" },
    var_samp: { __type: "listing_discussions_var_samp_fields" },
    variance: { __type: "listing_discussions_variance_fields" },
  },
  listing_discussions_aggregate_order_by: {
    avg: { __type: "listing_discussions_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "listing_discussions_max_order_by" },
    min: { __type: "listing_discussions_min_order_by" },
    stddev: { __type: "listing_discussions_stddev_order_by" },
    stddev_pop: { __type: "listing_discussions_stddev_pop_order_by" },
    stddev_samp: { __type: "listing_discussions_stddev_samp_order_by" },
    sum: { __type: "listing_discussions_sum_order_by" },
    var_pop: { __type: "listing_discussions_var_pop_order_by" },
    var_samp: { __type: "listing_discussions_var_samp_order_by" },
    variance: { __type: "listing_discussions_variance_order_by" },
  },
  listing_discussions_arr_rel_insert_input: {
    data: { __type: "[listing_discussions_insert_input!]!" },
  },
  listing_discussions_avg_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_avg_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_bool_exp: {
    _and: { __type: "[listing_discussions_bool_exp!]" },
    _not: { __type: "listing_discussions_bool_exp" },
    _or: { __type: "[listing_discussions_bool_exp!]" },
    comment_count: { __type: "Int_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    first_post_timestamp: { __type: "timestamptz_comparison_exp" },
    first_post_uuid: { __type: "uuid_comparison_exp" },
    last_post_timestamp: { __type: "timestamptz_comparison_exp" },
    last_post_uuid: { __type: "uuid_comparison_exp" },
    locked: { __type: "Boolean_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    participant_count: { __type: "Int_comparison_exp" },
    private: { __type: "Boolean_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  listing_discussions_inc_input: {
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  listing_discussions_insert_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_discussions_max_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_discussions_max_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_discussions_min_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_discussions_min_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_discussions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_discussions!]!" },
  },
  listing_discussions_order_by: {
    comment_count: { __type: "order_by" },
    created_at: { __type: "order_by" },
    first_post_timestamp: { __type: "order_by" },
    first_post_uuid: { __type: "order_by" },
    last_post_timestamp: { __type: "order_by" },
    last_post_uuid: { __type: "order_by" },
    locked: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    participant_count: { __type: "order_by" },
    private: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_discussions_set_input: {
    comment_count: { __type: "Int" },
    created_at: { __type: "timestamptz" },
    first_post_timestamp: { __type: "timestamptz" },
    first_post_uuid: { __type: "uuid" },
    last_post_timestamp: { __type: "timestamptz" },
    last_post_uuid: { __type: "uuid" },
    locked: { __type: "Boolean" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    participant_count: { __type: "Int" },
    private: { __type: "Boolean" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_discussions_stddev_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_stddev_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_stddev_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_stddev_pop_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_stddev_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_stddev_samp_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_sum_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Int" },
    participant_count: { __type: "Int" },
  },
  listing_discussions_sum_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_var_pop_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_var_pop_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_var_samp_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_var_samp_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_discussions_variance_fields: {
    __typename: { __type: "String!" },
    comment_count: { __type: "Float" },
    participant_count: { __type: "Float" },
  },
  listing_discussions_variance_order_by: {
    comment_count: { __type: "order_by" },
    participant_count: { __type: "order_by" },
  },
  listing_in_collections: {
    __typename: { __type: "String!" },
    collection_uuid: { __type: "uuid!" },
    listing: { __type: "listings!" },
    listing_collection: { __type: "listing_collections!" },
    listing_uuid: { __type: "uuid!" },
  },
  listing_in_collections_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_in_collections_aggregate_fields" },
    nodes: { __type: "[listing_in_collections!]!" },
  },
  listing_in_collections_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_in_collections_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_in_collections_max_fields" },
    min: { __type: "listing_in_collections_min_fields" },
  },
  listing_in_collections_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "listing_in_collections_max_order_by" },
    min: { __type: "listing_in_collections_min_order_by" },
  },
  listing_in_collections_arr_rel_insert_input: {
    data: { __type: "[listing_in_collections_insert_input!]!" },
  },
  listing_in_collections_bool_exp: {
    _and: { __type: "[listing_in_collections_bool_exp!]" },
    _not: { __type: "listing_in_collections_bool_exp" },
    _or: { __type: "[listing_in_collections_bool_exp!]" },
    collection_uuid: { __type: "uuid_comparison_exp" },
    listing: { __type: "listings_bool_exp" },
    listing_collection: { __type: "listing_collections_bool_exp" },
    listing_uuid: { __type: "uuid_comparison_exp" },
  },
  listing_in_collections_insert_input: {
    collection_uuid: { __type: "uuid" },
    listing: { __type: "listings_obj_rel_insert_input" },
    listing_collection: { __type: "listing_collections_obj_rel_insert_input" },
    listing_uuid: { __type: "uuid" },
  },
  listing_in_collections_max_fields: {
    __typename: { __type: "String!" },
    collection_uuid: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
  },
  listing_in_collections_max_order_by: {
    collection_uuid: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
  },
  listing_in_collections_min_fields: {
    __typename: { __type: "String!" },
    collection_uuid: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
  },
  listing_in_collections_min_order_by: {
    collection_uuid: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
  },
  listing_in_collections_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_in_collections!]!" },
  },
  listing_in_collections_order_by: {
    collection_uuid: { __type: "order_by" },
    listing: { __type: "listings_order_by" },
    listing_collection: { __type: "listing_collections_order_by" },
    listing_uuid: { __type: "order_by" },
  },
  listing_in_collections_set_input: {
    collection_uuid: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
  },
  listing_media: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json", __args: { path: "String" } },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_media_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_media_aggregate_fields" },
    nodes: { __type: "[listing_media!]!" },
  },
  listing_media_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "listing_media_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_media_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_media_max_fields" },
    min: { __type: "listing_media_min_fields" },
    stddev: { __type: "listing_media_stddev_fields" },
    stddev_pop: { __type: "listing_media_stddev_pop_fields" },
    stddev_samp: { __type: "listing_media_stddev_samp_fields" },
    sum: { __type: "listing_media_sum_fields" },
    var_pop: { __type: "listing_media_var_pop_fields" },
    var_samp: { __type: "listing_media_var_samp_fields" },
    variance: { __type: "listing_media_variance_fields" },
  },
  listing_media_aggregate_order_by: {
    avg: { __type: "listing_media_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "listing_media_max_order_by" },
    min: { __type: "listing_media_min_order_by" },
    stddev: { __type: "listing_media_stddev_order_by" },
    stddev_pop: { __type: "listing_media_stddev_pop_order_by" },
    stddev_samp: { __type: "listing_media_stddev_samp_order_by" },
    sum: { __type: "listing_media_sum_order_by" },
    var_pop: { __type: "listing_media_var_pop_order_by" },
    var_samp: { __type: "listing_media_var_samp_order_by" },
    variance: { __type: "listing_media_variance_order_by" },
  },
  listing_media_arr_rel_insert_input: {
    data: { __type: "[listing_media_insert_input!]!" },
  },
  listing_media_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_avg_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_bool_exp: {
    _and: { __type: "[listing_media_bool_exp!]" },
    _not: { __type: "listing_media_bool_exp" },
    _or: { __type: "[listing_media_bool_exp!]" },
    collection_name: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    file_name: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    mime_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    s3_bucket_name: { __type: "String_comparison_exp" },
    s3_key: { __type: "String_comparison_exp" },
    size: { __type: "bigint_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  listing_media_inc_input: {
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  listing_media_insert_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_media_max_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_media_max_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_media_min_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_media_min_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_media_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_media!]!" },
  },
  listing_media_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    properties: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_media_set_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listing_media_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_stddev_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_stddev_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_stddev_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  listing_media_sum_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_var_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_var_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_media_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  listing_media_variance_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  listing_tags: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  listing_tags_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_tags_aggregate_fields" },
    nodes: { __type: "[listing_tags!]!" },
  },
  listing_tags_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[listing_tags_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "listing_tags_max_fields" },
    min: { __type: "listing_tags_min_fields" },
  },
  listing_tags_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "listing_tags_max_order_by" },
    min: { __type: "listing_tags_min_order_by" },
  },
  listing_tags_arr_rel_insert_input: {
    data: { __type: "[listing_tags_insert_input!]!" },
  },
  listing_tags_bool_exp: {
    _and: { __type: "[listing_tags_bool_exp!]" },
    _not: { __type: "listing_tags_bool_exp" },
    _or: { __type: "[listing_tags_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    tag_uuid: { __type: "uuid_comparison_exp" },
  },
  listing_tags_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  listing_tags_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  listing_tags_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  listing_tags_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  listing_tags_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  listing_tags_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_tags!]!" },
  },
  listing_tags_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  listing_tags_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  listing_wishes: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  listing_wishes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listing_wishes_aggregate_fields" },
    nodes: { __type: "[listing_wishes!]!" },
  },
  listing_wishes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[listing_wishes_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "listing_wishes_max_fields" },
    min: { __type: "listing_wishes_min_fields" },
  },
  listing_wishes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "listing_wishes_max_order_by" },
    min: { __type: "listing_wishes_min_order_by" },
  },
  listing_wishes_arr_rel_insert_input: {
    data: { __type: "[listing_wishes_insert_input!]!" },
  },
  listing_wishes_bool_exp: {
    _and: { __type: "[listing_wishes_bool_exp!]" },
    _not: { __type: "listing_wishes_bool_exp" },
    _or: { __type: "[listing_wishes_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  listing_wishes_insert_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  listing_wishes_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  listing_wishes_max_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_wishes_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  listing_wishes_min_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_wishes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listing_wishes!]!" },
  },
  listing_wishes_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listing_wishes_set_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  listings: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    category_slug: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String" },
    discount_codes: {
      __type: "[discount_codes!]!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discount_codes_aggregate: {
      __type: "discount_codes_aggregate!",
      __args: {
        distinct_on: "[discount_codes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discount_codes_order_by!]",
        where: "discount_codes_bool_exp",
      },
    },
    discussions: {
      __type: "[listing_discussions!]!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    discussions_aggregate: {
      __type: "listing_discussions_aggregate!",
      __args: {
        distinct_on: "[listing_discussions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_discussions_order_by!]",
        where: "listing_discussions_bool_exp",
      },
    },
    listing_in_collections: {
      __type: "[listing_in_collections!]!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate!",
      __args: {
        distinct_on: "[listing_in_collections_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_in_collections_order_by!]",
        where: "listing_in_collections_bool_exp",
      },
    },
    media: {
      __type: "[listing_media!]!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    media_aggregate: {
      __type: "listing_media_aggregate!",
      __args: {
        distinct_on: "[listing_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_media_order_by!]",
        where: "listing_media_bool_exp",
      },
    },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    price: { __type: "float8!" },
    published: { __type: "Boolean!" },
    published_at: { __type: "timestamptz!" },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    reservations: {
      __type: "[reservations!]!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_aggregate: {
      __type: "reservations_aggregate!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    slug: { __type: "String!" },
    summary: { __type: "String!" },
    tags: {
      __type: "[listing_tags!]!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    tags_aggregate: {
      __type: "listing_tags_aggregate!",
      __args: {
        distinct_on: "[listing_tags_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_tags_order_by!]",
        where: "listing_tags_bool_exp",
      },
    },
    title: { __type: "String!" },
    total_bathrooms: { __type: "Int!" },
    total_bedrooms: { __type: "Int!" },
    total_occupancy: { __type: "Int!" },
    type: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
    wishes: {
      __type: "[listing_wishes!]!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
    wishes_aggregate: {
      __type: "listing_wishes_aggregate!",
      __args: {
        distinct_on: "[listing_wishes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listing_wishes_order_by!]",
        where: "listing_wishes_bool_exp",
      },
    },
  },
  listings_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "listings_aggregate_fields" },
    nodes: { __type: "[listings!]!" },
  },
  listings_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "listings_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[listings_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "listings_max_fields" },
    min: { __type: "listings_min_fields" },
    stddev: { __type: "listings_stddev_fields" },
    stddev_pop: { __type: "listings_stddev_pop_fields" },
    stddev_samp: { __type: "listings_stddev_samp_fields" },
    sum: { __type: "listings_sum_fields" },
    var_pop: { __type: "listings_var_pop_fields" },
    var_samp: { __type: "listings_var_samp_fields" },
    variance: { __type: "listings_variance_fields" },
  },
  listings_aggregate_order_by: {
    avg: { __type: "listings_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "listings_max_order_by" },
    min: { __type: "listings_min_order_by" },
    stddev: { __type: "listings_stddev_order_by" },
    stddev_pop: { __type: "listings_stddev_pop_order_by" },
    stddev_samp: { __type: "listings_stddev_samp_order_by" },
    sum: { __type: "listings_sum_order_by" },
    var_pop: { __type: "listings_var_pop_order_by" },
    var_samp: { __type: "listings_var_samp_order_by" },
    variance: { __type: "listings_variance_order_by" },
  },
  listings_arr_rel_insert_input: {
    data: { __type: "[listings_insert_input!]!" },
    on_conflict: { __type: "listings_on_conflict" },
  },
  listings_avg_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_avg_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_bool_exp: {
    _and: { __type: "[listings_bool_exp!]" },
    _not: { __type: "listings_bool_exp" },
    _or: { __type: "[listings_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    category_slug: { __type: "String_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    discount_codes: { __type: "discount_codes_bool_exp" },
    discussions: { __type: "listing_discussions_bool_exp" },
    listing_in_collections: { __type: "listing_in_collections_bool_exp" },
    media: { __type: "listing_media_bool_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    passes: { __type: "passes_bool_exp" },
    price: { __type: "float8_comparison_exp" },
    published: { __type: "Boolean_comparison_exp" },
    published_at: { __type: "timestamptz_comparison_exp" },
    requests: { __type: "requests_bool_exp" },
    reservations: { __type: "reservations_bool_exp" },
    reviews: { __type: "reviews_bool_exp" },
    slug: { __type: "String_comparison_exp" },
    summary: { __type: "String_comparison_exp" },
    tags: { __type: "listing_tags_bool_exp" },
    title: { __type: "String_comparison_exp" },
    total_bathrooms: { __type: "Int_comparison_exp" },
    total_bedrooms: { __type: "Int_comparison_exp" },
    total_occupancy: { __type: "Int_comparison_exp" },
    type: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    wishes: { __type: "listing_wishes_bool_exp" },
  },
  listings_inc_input: {
    price: { __type: "float8" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
  },
  listings_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    category_slug: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    discount_codes: { __type: "discount_codes_arr_rel_insert_input" },
    discussions: { __type: "listing_discussions_arr_rel_insert_input" },
    listing_in_collections: {
      __type: "listing_in_collections_arr_rel_insert_input",
    },
    media: { __type: "listing_media_arr_rel_insert_input" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    passes: { __type: "passes_arr_rel_insert_input" },
    price: { __type: "float8" },
    published: { __type: "Boolean" },
    published_at: { __type: "timestamptz" },
    requests: { __type: "requests_arr_rel_insert_input" },
    reservations: { __type: "reservations_arr_rel_insert_input" },
    reviews: { __type: "reviews_arr_rel_insert_input" },
    slug: { __type: "String" },
    summary: { __type: "String" },
    tags: { __type: "listing_tags_arr_rel_insert_input" },
    title: { __type: "String" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
    wishes: { __type: "listing_wishes_arr_rel_insert_input" },
  },
  listings_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    category_slug: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    published_at: { __type: "timestamptz" },
    slug: { __type: "String" },
    summary: { __type: "String" },
    title: { __type: "String" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listings_max_order_by: {
    brand_uuid: { __type: "order_by" },
    category_slug: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    price: { __type: "order_by" },
    published_at: { __type: "order_by" },
    slug: { __type: "order_by" },
    summary: { __type: "order_by" },
    title: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listings_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    category_slug: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    published_at: { __type: "timestamptz" },
    slug: { __type: "String" },
    summary: { __type: "String" },
    title: { __type: "String" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listings_min_order_by: {
    brand_uuid: { __type: "order_by" },
    category_slug: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    price: { __type: "order_by" },
    published_at: { __type: "order_by" },
    slug: { __type: "order_by" },
    summary: { __type: "order_by" },
    title: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  listings_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[listings!]!" },
  },
  listings_obj_rel_insert_input: {
    data: { __type: "listings_insert_input!" },
    on_conflict: { __type: "listings_on_conflict" },
  },
  listings_on_conflict: {
    constraint: { __type: "listings_constraint!" },
    update_columns: { __type: "[listings_update_column!]!" },
    where: { __type: "listings_bool_exp" },
  },
  listings_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    category_slug: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    discount_codes_aggregate: { __type: "discount_codes_aggregate_order_by" },
    discussions_aggregate: { __type: "listing_discussions_aggregate_order_by" },
    listing_in_collections_aggregate: {
      __type: "listing_in_collections_aggregate_order_by",
    },
    media_aggregate: { __type: "listing_media_aggregate_order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    passes_aggregate: { __type: "passes_aggregate_order_by" },
    price: { __type: "order_by" },
    published: { __type: "order_by" },
    published_at: { __type: "order_by" },
    requests_aggregate: { __type: "requests_aggregate_order_by" },
    reservations_aggregate: { __type: "reservations_aggregate_order_by" },
    reviews_aggregate: { __type: "reviews_aggregate_order_by" },
    slug: { __type: "order_by" },
    summary: { __type: "order_by" },
    tags_aggregate: { __type: "listing_tags_aggregate_order_by" },
    title: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wishes_aggregate: { __type: "listing_wishes_aggregate_order_by" },
  },
  listings_pk_columns_input: { uuid: { __type: "uuid!" } },
  listings_set_input: {
    brand_uuid: { __type: "uuid" },
    category_slug: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    published: { __type: "Boolean" },
    published_at: { __type: "timestamptz" },
    slug: { __type: "String" },
    summary: { __type: "String" },
    title: { __type: "String" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  listings_stddev_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_stddev_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_stddev_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_stddev_pop_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_stddev_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_stddev_samp_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_sum_fields: {
    __typename: { __type: "String!" },
    price: { __type: "float8" },
    total_bathrooms: { __type: "Int" },
    total_bedrooms: { __type: "Int" },
    total_occupancy: { __type: "Int" },
  },
  listings_sum_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_var_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_var_pop_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_var_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_var_samp_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  listings_variance_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
    total_bathrooms: { __type: "Float" },
    total_bedrooms: { __type: "Float" },
    total_occupancy: { __type: "Float" },
  },
  listings_variance_order_by: {
    price: { __type: "order_by" },
    total_bathrooms: { __type: "order_by" },
    total_bedrooms: { __type: "order_by" },
    total_occupancy: { __type: "order_by" },
  },
  logs: {
    __typename: { __type: "String!" },
    created_at: { __type: "uuid!" },
    description: { __type: "String!" },
    event_type: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "uuid!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  logs_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "logs_aggregate_fields" },
    nodes: { __type: "[logs!]!" },
  },
  logs_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[logs_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "logs_max_fields" },
    min: { __type: "logs_min_fields" },
  },
  logs_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "logs_max_order_by" },
    min: { __type: "logs_min_order_by" },
  },
  logs_arr_rel_insert_input: {
    data: { __type: "[logs_insert_input!]!" },
    on_conflict: { __type: "logs_on_conflict" },
  },
  logs_bool_exp: {
    _and: { __type: "[logs_bool_exp!]" },
    _not: { __type: "logs_bool_exp" },
    _or: { __type: "[logs_bool_exp!]" },
    created_at: { __type: "uuid_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    event_type: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "uuid_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  logs_insert_input: {
    created_at: { __type: "uuid" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "uuid" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  logs_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "uuid" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  logs_max_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  logs_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "uuid" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  logs_min_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  logs_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[logs!]!" },
  },
  logs_on_conflict: {
    constraint: { __type: "logs_constraint!" },
    update_columns: { __type: "[logs_update_column!]!" },
    where: { __type: "logs_bool_exp" },
  },
  logs_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  logs_pk_columns_input: { uuid: { __type: "uuid!" } },
  logs_set_input: {
    created_at: { __type: "uuid" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  media: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    file_name: { __type: "String!" },
    index: { __type: "Int!" },
    mime_type: { __type: "String!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    name: { __type: "String!" },
    properties: { __type: "json!", __args: { path: "String" } },
    s3_bucket_name: { __type: "String!" },
    s3_key: { __type: "String!" },
    size: { __type: "bigint!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  media_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "media_aggregate_fields" },
    nodes: { __type: "[media!]!" },
  },
  media_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "media_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[media_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "media_max_fields" },
    min: { __type: "media_min_fields" },
    stddev: { __type: "media_stddev_fields" },
    stddev_pop: { __type: "media_stddev_pop_fields" },
    stddev_samp: { __type: "media_stddev_samp_fields" },
    sum: { __type: "media_sum_fields" },
    var_pop: { __type: "media_var_pop_fields" },
    var_samp: { __type: "media_var_samp_fields" },
    variance: { __type: "media_variance_fields" },
  },
  media_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_bool_exp: {
    _and: { __type: "[media_bool_exp!]" },
    _not: { __type: "media_bool_exp" },
    _or: { __type: "[media_bool_exp!]" },
    collection_name: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    file_name: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    mime_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    s3_bucket_name: { __type: "String_comparison_exp" },
    s3_key: { __type: "String_comparison_exp" },
    size: { __type: "bigint_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  media_inc_input: { index: { __type: "Int" }, size: { __type: "bigint" } },
  media_insert_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  media_max_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  media_min_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  media_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[media!]!" },
  },
  media_on_conflict: {
    constraint: { __type: "media_constraint!" },
    update_columns: { __type: "[media_update_column!]!" },
    where: { __type: "media_bool_exp" },
  },
  media_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    properties: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  media_pk_columns_input: { uuid: { __type: "uuid!" } },
  media_set_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  media_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  media_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  media_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  messages: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid!" },
    content: { __type: "String!" },
    content_type: { __type: "String!" },
    conversation: { __type: "conversations!" },
    conversation_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    private: { __type: "Boolean!" },
    properties: { __type: "json", __args: { path: "String" } },
    read: { __type: "Boolean" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  messages_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "messages_aggregate_fields" },
    nodes: { __type: "[messages!]!" },
  },
  messages_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[messages_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "messages_max_fields" },
    min: { __type: "messages_min_fields" },
  },
  messages_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "messages_max_order_by" },
    min: { __type: "messages_min_order_by" },
  },
  messages_arr_rel_insert_input: {
    data: { __type: "[messages_insert_input!]!" },
    on_conflict: { __type: "messages_on_conflict" },
  },
  messages_bool_exp: {
    _and: { __type: "[messages_bool_exp!]" },
    _not: { __type: "messages_bool_exp" },
    _or: { __type: "[messages_bool_exp!]" },
    author_uuid: { __type: "uuid_comparison_exp" },
    content: { __type: "String_comparison_exp" },
    content_type: { __type: "String_comparison_exp" },
    conversation: { __type: "conversations_bool_exp" },
    conversation_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    private: { __type: "Boolean_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    read: { __type: "Boolean_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  messages_insert_input: {
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    content_type: { __type: "String" },
    conversation: { __type: "conversations_obj_rel_insert_input" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    private: { __type: "Boolean" },
    properties: { __type: "json" },
    read: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  messages_max_fields: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    content_type: { __type: "String" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  messages_max_order_by: {
    author_uuid: { __type: "order_by" },
    content: { __type: "order_by" },
    content_type: { __type: "order_by" },
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  messages_min_fields: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    content_type: { __type: "String" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  messages_min_order_by: {
    author_uuid: { __type: "order_by" },
    content: { __type: "order_by" },
    content_type: { __type: "order_by" },
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  messages_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[messages!]!" },
  },
  messages_on_conflict: {
    constraint: { __type: "messages_constraint!" },
    update_columns: { __type: "[messages_update_column!]!" },
    where: { __type: "messages_bool_exp" },
  },
  messages_order_by: {
    author_uuid: { __type: "order_by" },
    content: { __type: "order_by" },
    content_type: { __type: "order_by" },
    conversation: { __type: "conversations_order_by" },
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    private: { __type: "order_by" },
    properties: { __type: "order_by" },
    read: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  messages_pk_columns_input: { uuid: { __type: "uuid!" } },
  messages_set_input: {
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    content_type: { __type: "String" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    private: { __type: "Boolean" },
    properties: { __type: "json" },
    read: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  model_has_comments: {
    __typename: { __type: "String!" },
    comments: {
      __type: "[comment_comments!]!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    comments_aggregate: {
      __type: "comment_comments_aggregate!",
      __args: {
        distinct_on: "[comment_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_comments_order_by!]",
        where: "comment_comments_bool_exp",
      },
    },
    content: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    likes: {
      __type: "[comment_likes!]!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    likes_aggregate: {
      __type: "comment_likes_aggregate!",
      __args: {
        distinct_on: "[comment_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[comment_likes_order_by!]",
        where: "comment_likes_bool_exp",
      },
    },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  model_has_comments_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "model_has_comments_aggregate_fields" },
    nodes: { __type: "[model_has_comments!]!" },
  },
  model_has_comments_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[model_has_comments_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "model_has_comments_max_fields" },
    min: { __type: "model_has_comments_min_fields" },
  },
  model_has_comments_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "model_has_comments_max_order_by" },
    min: { __type: "model_has_comments_min_order_by" },
  },
  model_has_comments_arr_rel_insert_input: {
    data: { __type: "[model_has_comments_insert_input!]!" },
    on_conflict: { __type: "model_has_comments_on_conflict" },
  },
  model_has_comments_bool_exp: {
    _and: { __type: "[model_has_comments_bool_exp!]" },
    _not: { __type: "model_has_comments_bool_exp" },
    _or: { __type: "[model_has_comments_bool_exp!]" },
    comments: { __type: "comment_comments_bool_exp" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    likes: { __type: "comment_likes_bool_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  model_has_comments_insert_input: {
    comments: { __type: "comment_comments_arr_rel_insert_input" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    likes: { __type: "comment_likes_arr_rel_insert_input" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  model_has_comments_max_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  model_has_comments_max_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  model_has_comments_min_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  model_has_comments_min_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  model_has_comments_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[model_has_comments!]!" },
  },
  model_has_comments_on_conflict: {
    constraint: { __type: "model_has_comments_constraint!" },
    update_columns: { __type: "[model_has_comments_update_column!]!" },
    where: { __type: "model_has_comments_bool_exp" },
  },
  model_has_comments_order_by: {
    comments_aggregate: { __type: "comment_comments_aggregate_order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    likes_aggregate: { __type: "comment_likes_aggregate_order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  model_has_comments_pk_columns_input: { uuid: { __type: "uuid!" } },
  model_has_comments_set_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  model_has_likes: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
  },
  model_has_likes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "model_has_likes_aggregate_fields" },
    nodes: { __type: "[model_has_likes!]!" },
  },
  model_has_likes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[model_has_likes_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "model_has_likes_max_fields" },
    min: { __type: "model_has_likes_min_fields" },
  },
  model_has_likes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "model_has_likes_max_order_by" },
    min: { __type: "model_has_likes_min_order_by" },
  },
  model_has_likes_arr_rel_insert_input: {
    data: { __type: "[model_has_likes_insert_input!]!" },
  },
  model_has_likes_bool_exp: {
    _and: { __type: "[model_has_likes_bool_exp!]" },
    _not: { __type: "model_has_likes_bool_exp" },
    _or: { __type: "[model_has_likes_bool_exp!]" },
    liked_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  model_has_likes_insert_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
  },
  model_has_likes_max_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  model_has_likes_max_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  model_has_likes_min_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  model_has_likes_min_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  model_has_likes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[model_has_likes!]!" },
  },
  model_has_likes_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
  },
  model_has_likes_set_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  model_has_permissions: {
    __typename: { __type: "String!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    permission: { __type: "permissions!" },
    permission_uuid: { __type: "uuid!" },
  },
  model_has_permissions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "model_has_permissions_aggregate_fields" },
    nodes: { __type: "[model_has_permissions!]!" },
  },
  model_has_permissions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[model_has_permissions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "model_has_permissions_max_fields" },
    min: { __type: "model_has_permissions_min_fields" },
  },
  model_has_permissions_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "model_has_permissions_max_order_by" },
    min: { __type: "model_has_permissions_min_order_by" },
  },
  model_has_permissions_arr_rel_insert_input: {
    data: { __type: "[model_has_permissions_insert_input!]!" },
  },
  model_has_permissions_bool_exp: {
    _and: { __type: "[model_has_permissions_bool_exp!]" },
    _not: { __type: "model_has_permissions_bool_exp" },
    _or: { __type: "[model_has_permissions_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    permission: { __type: "permissions_bool_exp" },
    permission_uuid: { __type: "uuid_comparison_exp" },
  },
  model_has_permissions_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    permission: { __type: "permissions_obj_rel_insert_input" },
    permission_uuid: { __type: "uuid" },
  },
  model_has_permissions_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    permission_uuid: { __type: "uuid" },
  },
  model_has_permissions_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    permission_uuid: { __type: "order_by" },
  },
  model_has_permissions_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    permission_uuid: { __type: "uuid" },
  },
  model_has_permissions_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    permission_uuid: { __type: "order_by" },
  },
  model_has_permissions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[model_has_permissions!]!" },
  },
  model_has_permissions_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    permission: { __type: "permissions_order_by" },
    permission_uuid: { __type: "order_by" },
  },
  model_has_permissions_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    permission_uuid: { __type: "uuid" },
  },
  model_has_roles: {
    __typename: { __type: "String!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    role: { __type: "roles!" },
    role_uuid: { __type: "uuid!" },
  },
  model_has_roles_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "model_has_roles_aggregate_fields" },
    nodes: { __type: "[model_has_roles!]!" },
  },
  model_has_roles_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[model_has_roles_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "model_has_roles_max_fields" },
    min: { __type: "model_has_roles_min_fields" },
  },
  model_has_roles_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "model_has_roles_max_order_by" },
    min: { __type: "model_has_roles_min_order_by" },
  },
  model_has_roles_arr_rel_insert_input: {
    data: { __type: "[model_has_roles_insert_input!]!" },
  },
  model_has_roles_bool_exp: {
    _and: { __type: "[model_has_roles_bool_exp!]" },
    _not: { __type: "model_has_roles_bool_exp" },
    _or: { __type: "[model_has_roles_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    role: { __type: "roles_bool_exp" },
    role_uuid: { __type: "uuid_comparison_exp" },
  },
  model_has_roles_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role: { __type: "roles_obj_rel_insert_input" },
    role_uuid: { __type: "uuid" },
  },
  model_has_roles_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  model_has_roles_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  model_has_roles_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  model_has_roles_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  model_has_roles_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[model_has_roles!]!" },
  },
  model_has_roles_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role: { __type: "roles_order_by" },
    role_uuid: { __type: "order_by" },
  },
  model_has_roles_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  model_has_tags: {
    __typename: { __type: "String!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    tag_uuid: { __type: "uuid!" },
  },
  model_has_tags_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "model_has_tags_aggregate_fields" },
    nodes: { __type: "[model_has_tags!]!" },
  },
  model_has_tags_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[model_has_tags_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "model_has_tags_max_fields" },
    min: { __type: "model_has_tags_min_fields" },
  },
  model_has_tags_bool_exp: {
    _and: { __type: "[model_has_tags_bool_exp!]" },
    _not: { __type: "model_has_tags_bool_exp" },
    _or: { __type: "[model_has_tags_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    tag_uuid: { __type: "uuid_comparison_exp" },
  },
  model_has_tags_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  model_has_tags_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  model_has_tags_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  model_has_tags_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[model_has_tags!]!" },
  },
  model_has_tags_on_conflict: {
    constraint: { __type: "model_has_tags_constraint!" },
    update_columns: { __type: "[model_has_tags_update_column!]!" },
    where: { __type: "model_has_tags_bool_exp" },
  },
  model_has_tags_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    tag_uuid: { __type: "order_by" },
  },
  model_has_tags_pk_columns_input: { tag_uuid: { __type: "uuid!" } },
  model_has_tags_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    tag_uuid: { __type: "uuid" },
  },
  name_comparison_exp: {
    _eq: { __type: "name" },
    _gt: { __type: "name" },
    _gte: { __type: "name" },
    _in: { __type: "[name!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "name" },
    _lte: { __type: "name" },
    _neq: { __type: "name" },
    _nin: { __type: "[name!]" },
  },
  notifications: {
    __typename: { __type: "String!" },
    action_text: { __type: "String" },
    action_url: { __type: "String" },
    content: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    icon: { __type: "String" },
    read: { __type: "Boolean!" },
    read_at: { __type: "timestamptz" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  notifications_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "notifications_aggregate_fields" },
    nodes: { __type: "[notifications!]!" },
  },
  notifications_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[notifications_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "notifications_max_fields" },
    min: { __type: "notifications_min_fields" },
  },
  notifications_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "notifications_max_order_by" },
    min: { __type: "notifications_min_order_by" },
  },
  notifications_arr_rel_insert_input: {
    data: { __type: "[notifications_insert_input!]!" },
    on_conflict: { __type: "notifications_on_conflict" },
  },
  notifications_bool_exp: {
    _and: { __type: "[notifications_bool_exp!]" },
    _not: { __type: "notifications_bool_exp" },
    _or: { __type: "[notifications_bool_exp!]" },
    action_text: { __type: "String_comparison_exp" },
    action_url: { __type: "String_comparison_exp" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    icon: { __type: "String_comparison_exp" },
    read: { __type: "Boolean_comparison_exp" },
    read_at: { __type: "timestamptz_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  notifications_insert_input: {
    action_text: { __type: "String" },
    action_url: { __type: "String" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    icon: { __type: "String" },
    read: { __type: "Boolean" },
    read_at: { __type: "timestamptz" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  notifications_max_fields: {
    __typename: { __type: "String!" },
    action_text: { __type: "String" },
    action_url: { __type: "String" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    icon: { __type: "String" },
    read_at: { __type: "timestamptz" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  notifications_max_order_by: {
    action_text: { __type: "order_by" },
    action_url: { __type: "order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    icon: { __type: "order_by" },
    read_at: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  notifications_min_fields: {
    __typename: { __type: "String!" },
    action_text: { __type: "String" },
    action_url: { __type: "String" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    icon: { __type: "String" },
    read_at: { __type: "timestamptz" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  notifications_min_order_by: {
    action_text: { __type: "order_by" },
    action_url: { __type: "order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    icon: { __type: "order_by" },
    read_at: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  notifications_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[notifications!]!" },
  },
  notifications_on_conflict: {
    constraint: { __type: "notifications_constraint!" },
    update_columns: { __type: "[notifications_update_column!]!" },
    where: { __type: "notifications_bool_exp" },
  },
  notifications_order_by: {
    action_text: { __type: "order_by" },
    action_url: { __type: "order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    icon: { __type: "order_by" },
    read: { __type: "order_by" },
    read_at: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  notifications_pk_columns_input: { uuid: { __type: "uuid!" } },
  notifications_set_input: {
    action_text: { __type: "String" },
    action_url: { __type: "String" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    icon: { __type: "String" },
    read: { __type: "Boolean" },
    read_at: { __type: "timestamptz" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  numeric_comparison_exp: {
    _eq: { __type: "numeric" },
    _gt: { __type: "numeric" },
    _gte: { __type: "numeric" },
    _in: { __type: "[numeric!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "numeric" },
    _lte: { __type: "numeric" },
    _neq: { __type: "numeric" },
    _nin: { __type: "[numeric!]" },
  },
  oid_comparison_exp: {
    _eq: { __type: "oid" },
    _gt: { __type: "oid" },
    _gte: { __type: "oid" },
    _in: { __type: "[oid!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "oid" },
    _lte: { __type: "oid" },
    _neq: { __type: "oid" },
    _nin: { __type: "[oid!]" },
  },
  outlet_has_addons: {
    __typename: { __type: "String!" },
    addon_uuid: { __type: "uuid!" },
    available: { __type: "Boolean!" },
    created_at: { __type: "timestamptz!" },
    default_addon: { __type: "default_addons!" },
    description: { __type: "String!" },
    outlet_uuid: { __type: "uuid!" },
    price: { __type: "float8!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
  },
  outlet_has_addons_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "outlet_has_addons_aggregate_fields" },
    nodes: { __type: "[outlet_has_addons!]!" },
  },
  outlet_has_addons_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "outlet_has_addons_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[outlet_has_addons_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "outlet_has_addons_max_fields" },
    min: { __type: "outlet_has_addons_min_fields" },
    stddev: { __type: "outlet_has_addons_stddev_fields" },
    stddev_pop: { __type: "outlet_has_addons_stddev_pop_fields" },
    stddev_samp: { __type: "outlet_has_addons_stddev_samp_fields" },
    sum: { __type: "outlet_has_addons_sum_fields" },
    var_pop: { __type: "outlet_has_addons_var_pop_fields" },
    var_samp: { __type: "outlet_has_addons_var_samp_fields" },
    variance: { __type: "outlet_has_addons_variance_fields" },
  },
  outlet_has_addons_aggregate_order_by: {
    avg: { __type: "outlet_has_addons_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "outlet_has_addons_max_order_by" },
    min: { __type: "outlet_has_addons_min_order_by" },
    stddev: { __type: "outlet_has_addons_stddev_order_by" },
    stddev_pop: { __type: "outlet_has_addons_stddev_pop_order_by" },
    stddev_samp: { __type: "outlet_has_addons_stddev_samp_order_by" },
    sum: { __type: "outlet_has_addons_sum_order_by" },
    var_pop: { __type: "outlet_has_addons_var_pop_order_by" },
    var_samp: { __type: "outlet_has_addons_var_samp_order_by" },
    variance: { __type: "outlet_has_addons_variance_order_by" },
  },
  outlet_has_addons_arr_rel_insert_input: {
    data: { __type: "[outlet_has_addons_insert_input!]!" },
    on_conflict: { __type: "outlet_has_addons_on_conflict" },
  },
  outlet_has_addons_avg_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_avg_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_bool_exp: {
    _and: { __type: "[outlet_has_addons_bool_exp!]" },
    _not: { __type: "outlet_has_addons_bool_exp" },
    _or: { __type: "[outlet_has_addons_bool_exp!]" },
    addon_uuid: { __type: "uuid_comparison_exp" },
    available: { __type: "Boolean_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    default_addon: { __type: "default_addons_bool_exp" },
    description: { __type: "String_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    price: { __type: "float8_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
  },
  outlet_has_addons_inc_input: { price: { __type: "float8" } },
  outlet_has_addons_insert_input: {
    addon_uuid: { __type: "uuid" },
    available: { __type: "Boolean" },
    created_at: { __type: "timestamptz" },
    default_addon: { __type: "default_addons_obj_rel_insert_input" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  outlet_has_addons_max_fields: {
    __typename: { __type: "String!" },
    addon_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  outlet_has_addons_max_order_by: {
    addon_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
  },
  outlet_has_addons_min_fields: {
    __typename: { __type: "String!" },
    addon_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  outlet_has_addons_min_order_by: {
    addon_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
  },
  outlet_has_addons_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[outlet_has_addons!]!" },
  },
  outlet_has_addons_on_conflict: {
    constraint: { __type: "outlet_has_addons_constraint!" },
    update_columns: { __type: "[outlet_has_addons_update_column!]!" },
    where: { __type: "outlet_has_addons_bool_exp" },
  },
  outlet_has_addons_order_by: {
    addon_uuid: { __type: "order_by" },
    available: { __type: "order_by" },
    created_at: { __type: "order_by" },
    default_addon: { __type: "default_addons_order_by" },
    description: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    price: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
  },
  outlet_has_addons_pk_columns_input: { outlet_uuid: { __type: "uuid!" } },
  outlet_has_addons_set_input: {
    addon_uuid: { __type: "uuid" },
    available: { __type: "Boolean" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    outlet_uuid: { __type: "uuid" },
    price: { __type: "float8" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
  },
  outlet_has_addons_stddev_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_stddev_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_stddev_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_stddev_pop_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_stddev_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_stddev_samp_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_sum_fields: {
    __typename: { __type: "String!" },
    price: { __type: "float8" },
  },
  outlet_has_addons_sum_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_var_pop_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_var_pop_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_var_samp_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_var_samp_order_by: { price: { __type: "order_by" } },
  outlet_has_addons_variance_fields: {
    __typename: { __type: "String!" },
    price: { __type: "Float" },
  },
  outlet_has_addons_variance_order_by: { price: { __type: "order_by" } },
  outlets: {
    __typename: { __type: "String!" },
    area: { __type: "String!" },
    aruba_wifi_accesses: {
      __type: "[aruba_wifi_access!]!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    aruba_wifi_accesses_aggregate: {
      __type: "aruba_wifi_access_aggregate!",
      __args: {
        distinct_on: "[aruba_wifi_access_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[aruba_wifi_access_order_by!]",
        where: "aruba_wifi_access_bool_exp",
      },
    },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    floor_plans: {
      __type: "[floor_plans!]!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    floor_plans_aggregate: {
      __type: "floor_plans_aggregate!",
      __args: {
        distinct_on: "[floor_plans_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[floor_plans_order_by!]",
        where: "floor_plans_bool_exp",
      },
    },
    full_address: { __type: "String!" },
    geohash: { __type: "String!" },
    gm_badge_printing: { __type: "Boolean!" },
    gm_photo_taking: { __type: "Boolean!" },
    guest_management: { __type: "Boolean!" },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    latitude: { __type: "float8!" },
    listings: {
      __type: "[listings!]!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    listings_aggregate: {
      __type: "listings_aggregate!",
      __args: {
        distinct_on: "[listings_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[listings_order_by!]",
        where: "listings_bool_exp",
      },
    },
    locale: { __type: "bpchar!" },
    longitude: { __type: "float8!" },
    occupancy: { __type: "Int!" },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    spaces: {
      __type: "[spaces!]!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    spaces_aggregate: {
      __type: "spaces_aggregate!",
      __args: {
        distinct_on: "[spaces_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_order_by!]",
        where: "spaces_bool_exp",
      },
    },
    timezone: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  outlets_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "outlets_aggregate_fields" },
    nodes: { __type: "[outlets!]!" },
  },
  outlets_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "outlets_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[outlets_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "outlets_max_fields" },
    min: { __type: "outlets_min_fields" },
    stddev: { __type: "outlets_stddev_fields" },
    stddev_pop: { __type: "outlets_stddev_pop_fields" },
    stddev_samp: { __type: "outlets_stddev_samp_fields" },
    sum: { __type: "outlets_sum_fields" },
    var_pop: { __type: "outlets_var_pop_fields" },
    var_samp: { __type: "outlets_var_samp_fields" },
    variance: { __type: "outlets_variance_fields" },
  },
  outlets_aggregate_order_by: {
    avg: { __type: "outlets_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "outlets_max_order_by" },
    min: { __type: "outlets_min_order_by" },
    stddev: { __type: "outlets_stddev_order_by" },
    stddev_pop: { __type: "outlets_stddev_pop_order_by" },
    stddev_samp: { __type: "outlets_stddev_samp_order_by" },
    sum: { __type: "outlets_sum_order_by" },
    var_pop: { __type: "outlets_var_pop_order_by" },
    var_samp: { __type: "outlets_var_samp_order_by" },
    variance: { __type: "outlets_variance_order_by" },
  },
  outlets_arr_rel_insert_input: {
    data: { __type: "[outlets_insert_input!]!" },
    on_conflict: { __type: "outlets_on_conflict" },
  },
  outlets_avg_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_avg_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_bool_exp: {
    _and: { __type: "[outlets_bool_exp!]" },
    _not: { __type: "outlets_bool_exp" },
    _or: { __type: "[outlets_bool_exp!]" },
    area: { __type: "String_comparison_exp" },
    aruba_wifi_accesses: { __type: "aruba_wifi_access_bool_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    floor_plans: { __type: "floor_plans_bool_exp" },
    full_address: { __type: "String_comparison_exp" },
    geohash: { __type: "String_comparison_exp" },
    gm_badge_printing: { __type: "Boolean_comparison_exp" },
    gm_photo_taking: { __type: "Boolean_comparison_exp" },
    guest_management: { __type: "Boolean_comparison_exp" },
    guests: { __type: "guests_bool_exp" },
    latitude: { __type: "float8_comparison_exp" },
    listings: { __type: "listings_bool_exp" },
    locale: { __type: "bpchar_comparison_exp" },
    longitude: { __type: "float8_comparison_exp" },
    occupancy: { __type: "Int_comparison_exp" },
    passes: { __type: "passes_bool_exp" },
    requests: { __type: "requests_bool_exp" },
    reviews: { __type: "reviews_bool_exp" },
    spaces: { __type: "spaces_bool_exp" },
    timezone: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  outlets_inc_input: {
    latitude: { __type: "float8" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
  },
  outlets_insert_input: {
    area: { __type: "String" },
    aruba_wifi_accesses: { __type: "aruba_wifi_access_arr_rel_insert_input" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    floor_plans: { __type: "floor_plans_arr_rel_insert_input" },
    full_address: { __type: "String" },
    geohash: { __type: "String" },
    gm_badge_printing: { __type: "Boolean" },
    gm_photo_taking: { __type: "Boolean" },
    guest_management: { __type: "Boolean" },
    guests: { __type: "guests_arr_rel_insert_input" },
    latitude: { __type: "float8" },
    listings: { __type: "listings_arr_rel_insert_input" },
    locale: { __type: "bpchar" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
    passes: { __type: "passes_arr_rel_insert_input" },
    requests: { __type: "requests_arr_rel_insert_input" },
    reviews: { __type: "reviews_arr_rel_insert_input" },
    spaces: { __type: "spaces_arr_rel_insert_input" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  outlets_max_fields: {
    __typename: { __type: "String!" },
    area: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    full_address: { __type: "String" },
    geohash: { __type: "String" },
    latitude: { __type: "float8" },
    locale: { __type: "bpchar" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  outlets_max_order_by: {
    area: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    full_address: { __type: "order_by" },
    geohash: { __type: "order_by" },
    latitude: { __type: "order_by" },
    locale: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    timezone: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  outlets_min_fields: {
    __typename: { __type: "String!" },
    area: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    full_address: { __type: "String" },
    geohash: { __type: "String" },
    latitude: { __type: "float8" },
    locale: { __type: "bpchar" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  outlets_min_order_by: {
    area: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    full_address: { __type: "order_by" },
    geohash: { __type: "order_by" },
    latitude: { __type: "order_by" },
    locale: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    timezone: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  outlets_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[outlets!]!" },
  },
  outlets_obj_rel_insert_input: {
    data: { __type: "outlets_insert_input!" },
    on_conflict: { __type: "outlets_on_conflict" },
  },
  outlets_on_conflict: {
    constraint: { __type: "outlets_constraint!" },
    update_columns: { __type: "[outlets_update_column!]!" },
    where: { __type: "outlets_bool_exp" },
  },
  outlets_order_by: {
    area: { __type: "order_by" },
    aruba_wifi_accesses_aggregate: {
      __type: "aruba_wifi_access_aggregate_order_by",
    },
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    floor_plans_aggregate: { __type: "floor_plans_aggregate_order_by" },
    full_address: { __type: "order_by" },
    geohash: { __type: "order_by" },
    gm_badge_printing: { __type: "order_by" },
    gm_photo_taking: { __type: "order_by" },
    guest_management: { __type: "order_by" },
    guests_aggregate: { __type: "guests_aggregate_order_by" },
    latitude: { __type: "order_by" },
    listings_aggregate: { __type: "listings_aggregate_order_by" },
    locale: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    passes_aggregate: { __type: "passes_aggregate_order_by" },
    requests_aggregate: { __type: "requests_aggregate_order_by" },
    reviews_aggregate: { __type: "reviews_aggregate_order_by" },
    spaces_aggregate: { __type: "spaces_aggregate_order_by" },
    timezone: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  outlets_pk_columns_input: { uuid: { __type: "uuid!" } },
  outlets_set_input: {
    area: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    full_address: { __type: "String" },
    geohash: { __type: "String" },
    gm_badge_printing: { __type: "Boolean" },
    gm_photo_taking: { __type: "Boolean" },
    guest_management: { __type: "Boolean" },
    latitude: { __type: "float8" },
    locale: { __type: "bpchar" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  outlets_stddev_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_stddev_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_stddev_pop_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_stddev_pop_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_stddev_samp_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_stddev_samp_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_sum_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "float8" },
    longitude: { __type: "float8" },
    occupancy: { __type: "Int" },
  },
  outlets_sum_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_var_pop_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_var_pop_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_var_samp_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_var_samp_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  outlets_variance_fields: {
    __typename: { __type: "String!" },
    latitude: { __type: "Float" },
    longitude: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  outlets_variance_order_by: {
    latitude: { __type: "order_by" },
    longitude: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  passes: {
    __typename: { __type: "String!" },
    brand: { __type: "brands" },
    brand_snapshot: { __type: "json!", __args: { path: "String" } },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz!" },
    date_end: { __type: "date!" },
    date_start: { __type: "date!" },
    description: { __type: "String!" },
    listing: { __type: "listings" },
    listing_snapshot: { __type: "json!", __args: { path: "String" } },
    listing_type: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
    outlet: { __type: "outlets!" },
    outlet_snapshot: { __type: "json!", __args: { path: "String" } },
    outlet_uuid: { __type: "uuid!" },
    request: { __type: "requests!" },
    request_uuid: { __type: "uuid!" },
    spaces_usages: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usages_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    title: { __type: "String!" },
    type: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_snapshot: { __type: "json!", __args: { path: "String" } },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  passes_activity_logs: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  passes_activity_logs_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "passes_activity_logs_aggregate_fields" },
    nodes: { __type: "[passes_activity_logs!]!" },
  },
  passes_activity_logs_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[passes_activity_logs_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "passes_activity_logs_max_fields" },
    min: { __type: "passes_activity_logs_min_fields" },
  },
  passes_activity_logs_bool_exp: {
    _and: { __type: "[passes_activity_logs_bool_exp!]" },
    _not: { __type: "passes_activity_logs_bool_exp" },
    _or: { __type: "[passes_activity_logs_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    event_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  passes_activity_logs_insert_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  passes_activity_logs_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  passes_activity_logs_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  passes_activity_logs_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[passes_activity_logs!]!" },
  },
  passes_activity_logs_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  passes_activity_logs_set_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  passes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "passes_aggregate_fields" },
    nodes: { __type: "[passes!]!" },
  },
  passes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[passes_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "passes_max_fields" },
    min: { __type: "passes_min_fields" },
  },
  passes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "passes_max_order_by" },
    min: { __type: "passes_min_order_by" },
  },
  passes_arr_rel_insert_input: {
    data: { __type: "[passes_insert_input!]!" },
    on_conflict: { __type: "passes_on_conflict" },
  },
  passes_bool_exp: {
    _and: { __type: "[passes_bool_exp!]" },
    _not: { __type: "passes_bool_exp" },
    _or: { __type: "[passes_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_snapshot: { __type: "json_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_end: { __type: "date_comparison_exp" },
    date_start: { __type: "date_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    listing: { __type: "listings_bool_exp" },
    listing_snapshot: { __type: "json_comparison_exp" },
    listing_type: { __type: "uuid_comparison_exp" },
    listing_uuid: { __type: "uuid_comparison_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_snapshot: { __type: "json_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    request: { __type: "requests_bool_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
    spaces_usages: { __type: "spaces_usage_bool_exp" },
    title: { __type: "String_comparison_exp" },
    type: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_snapshot: { __type: "json_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  passes_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    listing: { __type: "listings_obj_rel_insert_input" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    request: { __type: "requests_obj_rel_insert_input" },
    request_uuid: { __type: "uuid" },
    spaces_usages: { __type: "spaces_usage_arr_rel_insert_input" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_snapshot: { __type: "json" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  passes_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    listing_type: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    request_uuid: { __type: "uuid" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  passes_max_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    description: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  passes_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    listing_type: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    request_uuid: { __type: "uuid" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  passes_min_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    description: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  passes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[passes!]!" },
  },
  passes_obj_rel_insert_input: {
    data: { __type: "passes_insert_input!" },
    on_conflict: { __type: "passes_on_conflict" },
  },
  passes_on_conflict: {
    constraint: { __type: "passes_constraint!" },
    update_columns: { __type: "[passes_update_column!]!" },
    where: { __type: "passes_bool_exp" },
  },
  passes_order_by: {
    brand: { __type: "brands_order_by" },
    brand_snapshot: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    description: { __type: "order_by" },
    listing: { __type: "listings_order_by" },
    listing_snapshot: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_snapshot: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    request: { __type: "requests_order_by" },
    request_uuid: { __type: "order_by" },
    spaces_usages_aggregate: { __type: "spaces_usage_aggregate_order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_snapshot: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  passes_pk_columns_input: { uuid: { __type: "uuid!" } },
  passes_set_input: {
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    description: { __type: "String" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "uuid" },
    listing_uuid: { __type: "uuid" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    request_uuid: { __type: "uuid" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_snapshot: { __type: "json" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  payments: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8!" },
    base_brand_conversion_code: { __type: "float8!" },
    base_brand_currency_code: { __type: "bpchar!" },
    base_brand_gross_revenue: { __type: "float8!" },
    base_cashback_by_brand: { __type: "float8!" },
    base_cashback_by_stayr: { __type: "float8!" },
    base_currency_code: { __type: "bpchar!" },
    base_discount_by_brand: { __type: "float8!" },
    base_discount_by_stayr: { __type: "float8!" },
    base_payment_by_card: { __type: "float8!" },
    base_payment_by_cash: { __type: "float8!" },
    base_payment_by_credits: { __type: "float8!" },
    base_pf_cc_fee: { __type: "float8!" },
    base_pf_transaction_fee: { __type: "float8!" },
    base_total_cashback: { __type: "float8!" },
    base_total_discount: { __type: "float8!" },
    base_total_payment: { __type: "float8!" },
    base_total_price: { __type: "float8!" },
    base_user_conversion_rate: { __type: "float8!" },
    base_user_currency_code: { __type: "bpchar!" },
    column_23: { __type: "String!" },
    id: { __type: "uuid!" },
  },
  payments_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "payments_aggregate_fields" },
    nodes: { __type: "[payments!]!" },
  },
  payments_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "payments_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[payments_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "payments_max_fields" },
    min: { __type: "payments_min_fields" },
    stddev: { __type: "payments_stddev_fields" },
    stddev_pop: { __type: "payments_stddev_pop_fields" },
    stddev_samp: { __type: "payments_stddev_samp_fields" },
    sum: { __type: "payments_sum_fields" },
    var_pop: { __type: "payments_var_pop_fields" },
    var_samp: { __type: "payments_var_samp_fields" },
    variance: { __type: "payments_variance_fields" },
  },
  payments_avg_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_bool_exp: {
    _and: { __type: "[payments_bool_exp!]" },
    _not: { __type: "payments_bool_exp" },
    _or: { __type: "[payments_bool_exp!]" },
    base_3rd_party_platform: { __type: "String_comparison_exp" },
    base_3rd_party_platform_fee: { __type: "float8_comparison_exp" },
    base_brand_conversion_code: { __type: "float8_comparison_exp" },
    base_brand_currency_code: { __type: "bpchar_comparison_exp" },
    base_brand_gross_revenue: { __type: "float8_comparison_exp" },
    base_cashback_by_brand: { __type: "float8_comparison_exp" },
    base_cashback_by_stayr: { __type: "float8_comparison_exp" },
    base_currency_code: { __type: "bpchar_comparison_exp" },
    base_discount_by_brand: { __type: "float8_comparison_exp" },
    base_discount_by_stayr: { __type: "float8_comparison_exp" },
    base_payment_by_card: { __type: "float8_comparison_exp" },
    base_payment_by_cash: { __type: "float8_comparison_exp" },
    base_payment_by_credits: { __type: "float8_comparison_exp" },
    base_pf_cc_fee: { __type: "float8_comparison_exp" },
    base_pf_transaction_fee: { __type: "float8_comparison_exp" },
    base_total_cashback: { __type: "float8_comparison_exp" },
    base_total_discount: { __type: "float8_comparison_exp" },
    base_total_payment: { __type: "float8_comparison_exp" },
    base_total_price: { __type: "float8_comparison_exp" },
    base_user_conversion_rate: { __type: "float8_comparison_exp" },
    base_user_currency_code: { __type: "bpchar_comparison_exp" },
    column_23: { __type: "String_comparison_exp" },
    id: { __type: "uuid_comparison_exp" },
  },
  payments_inc_input: {
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
  },
  payments_insert_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_currency_code: { __type: "bpchar" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
    base_user_currency_code: { __type: "bpchar" },
    column_23: { __type: "String" },
    id: { __type: "uuid" },
  },
  payments_max_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_currency_code: { __type: "bpchar" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
    base_user_currency_code: { __type: "bpchar" },
    column_23: { __type: "String" },
    id: { __type: "uuid" },
  },
  payments_min_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_currency_code: { __type: "bpchar" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
    base_user_currency_code: { __type: "bpchar" },
    column_23: { __type: "String" },
    id: { __type: "uuid" },
  },
  payments_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[payments!]!" },
  },
  payments_on_conflict: {
    constraint: { __type: "payments_constraint!" },
    update_columns: { __type: "[payments_update_column!]!" },
    where: { __type: "payments_bool_exp" },
  },
  payments_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_brand_conversion_code: { __type: "order_by" },
    base_brand_currency_code: { __type: "order_by" },
    base_brand_gross_revenue: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_pf_cc_fee: { __type: "order_by" },
    base_pf_transaction_fee: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_user_conversion_rate: { __type: "order_by" },
    base_user_currency_code: { __type: "order_by" },
    column_23: { __type: "order_by" },
    id: { __type: "order_by" },
  },
  payments_pk_columns_input: { id: { __type: "uuid!" } },
  payments_set_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_currency_code: { __type: "bpchar" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
    base_user_currency_code: { __type: "bpchar" },
    column_23: { __type: "String" },
    id: { __type: "uuid" },
  },
  payments_stddev_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_stddev_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_stddev_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_sum_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_brand_conversion_code: { __type: "float8" },
    base_brand_gross_revenue: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_pf_cc_fee: { __type: "float8" },
    base_pf_transaction_fee: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_user_conversion_rate: { __type: "float8" },
  },
  payments_var_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_var_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  payments_variance_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_brand_conversion_code: { __type: "Float" },
    base_brand_gross_revenue: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_pf_cc_fee: { __type: "Float" },
    base_pf_transaction_fee: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_user_conversion_rate: { __type: "Float" },
  },
  permissions: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    model_has_permissions: {
      __type: "[model_has_permissions!]!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    model_has_permissions_aggregate: {
      __type: "model_has_permissions_aggregate!",
      __args: {
        distinct_on: "[model_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_permissions_order_by!]",
        where: "model_has_permissions_bool_exp",
      },
    },
    name: { __type: "String!" },
    role_has_permissions: {
      __type: "[role_has_permissions!]!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  permissions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "permissions_aggregate_fields" },
    nodes: { __type: "[permissions!]!" },
  },
  permissions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[permissions_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "permissions_max_fields" },
    min: { __type: "permissions_min_fields" },
  },
  permissions_bool_exp: {
    _and: { __type: "[permissions_bool_exp!]" },
    _not: { __type: "permissions_bool_exp" },
    _or: { __type: "[permissions_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_has_permissions: { __type: "model_has_permissions_bool_exp" },
    name: { __type: "String_comparison_exp" },
    role_has_permissions: { __type: "role_has_permissions_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  permissions_insert_input: {
    created_at: { __type: "timestamptz" },
    model_has_permissions: {
      __type: "model_has_permissions_arr_rel_insert_input",
    },
    name: { __type: "String" },
    role_has_permissions: {
      __type: "role_has_permissions_arr_rel_insert_input",
    },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  permissions_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  permissions_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  permissions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[permissions!]!" },
  },
  permissions_obj_rel_insert_input: {
    data: { __type: "permissions_insert_input!" },
    on_conflict: { __type: "permissions_on_conflict" },
  },
  permissions_on_conflict: {
    constraint: { __type: "permissions_constraint!" },
    update_columns: { __type: "[permissions_update_column!]!" },
    where: { __type: "permissions_bool_exp" },
  },
  permissions_order_by: {
    created_at: { __type: "order_by" },
    model_has_permissions_aggregate: {
      __type: "model_has_permissions_aggregate_order_by",
    },
    name: { __type: "order_by" },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate_order_by",
    },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  permissions_pk_columns_input: { uuid: { __type: "uuid!" } },
  permissions_set_input: {
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  post_comments: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  post_comments_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "post_comments_aggregate_fields" },
    nodes: { __type: "[post_comments!]!" },
  },
  post_comments_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[post_comments_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "post_comments_max_fields" },
    min: { __type: "post_comments_min_fields" },
  },
  post_comments_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "post_comments_max_order_by" },
    min: { __type: "post_comments_min_order_by" },
  },
  post_comments_arr_rel_insert_input: {
    data: { __type: "[post_comments_insert_input!]!" },
  },
  post_comments_bool_exp: {
    _and: { __type: "[post_comments_bool_exp!]" },
    _not: { __type: "post_comments_bool_exp" },
    _or: { __type: "[post_comments_bool_exp!]" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  post_comments_insert_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  post_comments_max_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  post_comments_max_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  post_comments_min_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  post_comments_min_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  post_comments_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[post_comments!]!" },
  },
  post_comments_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  post_comments_set_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  post_likes: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  post_likes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "post_likes_aggregate_fields" },
    nodes: { __type: "[post_likes!]!" },
  },
  post_likes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[post_likes_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "post_likes_max_fields" },
    min: { __type: "post_likes_min_fields" },
  },
  post_likes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "post_likes_max_order_by" },
    min: { __type: "post_likes_min_order_by" },
  },
  post_likes_arr_rel_insert_input: {
    data: { __type: "[post_likes_insert_input!]!" },
  },
  post_likes_bool_exp: {
    _and: { __type: "[post_likes_bool_exp!]" },
    _not: { __type: "post_likes_bool_exp" },
    _or: { __type: "[post_likes_bool_exp!]" },
    liked_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  post_likes_insert_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  post_likes_max_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  post_likes_max_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  post_likes_min_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  post_likes_min_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  post_likes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[post_likes!]!" },
  },
  post_likes_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  post_likes_set_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  posts: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid!" },
    comments: {
      __type: "[post_comments!]!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    comments_aggregate: {
      __type: "post_comments_aggregate!",
      __args: {
        distinct_on: "[post_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_comments_order_by!]",
        where: "post_comments_bool_exp",
      },
    },
    content: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    discussion: { __type: "discussions!" },
    discussion_uuid: { __type: "uuid!" },
    likes: {
      __type: "[post_likes!]!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    likes_aggregate: {
      __type: "post_likes_aggregate!",
      __args: {
        distinct_on: "[post_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[post_likes_order_by!]",
        where: "post_likes_bool_exp",
      },
    },
    type: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    uuid: { __type: "uuid!" },
  },
  posts_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "posts_aggregate_fields" },
    nodes: { __type: "[posts!]!" },
  },
  posts_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[posts_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "posts_max_fields" },
    min: { __type: "posts_min_fields" },
  },
  posts_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "posts_max_order_by" },
    min: { __type: "posts_min_order_by" },
  },
  posts_arr_rel_insert_input: {
    data: { __type: "[posts_insert_input!]!" },
    on_conflict: { __type: "posts_on_conflict" },
  },
  posts_bool_exp: {
    _and: { __type: "[posts_bool_exp!]" },
    _not: { __type: "posts_bool_exp" },
    _or: { __type: "[posts_bool_exp!]" },
    author_uuid: { __type: "uuid_comparison_exp" },
    comments: { __type: "post_comments_bool_exp" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    discussion: { __type: "discussions_bool_exp" },
    discussion_uuid: { __type: "uuid_comparison_exp" },
    likes: { __type: "post_likes_bool_exp" },
    type: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  posts_insert_input: {
    author_uuid: { __type: "uuid" },
    comments: { __type: "post_comments_arr_rel_insert_input" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    discussion: { __type: "discussions_obj_rel_insert_input" },
    discussion_uuid: { __type: "uuid" },
    likes: { __type: "post_likes_arr_rel_insert_input" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    uuid: { __type: "uuid" },
  },
  posts_max_fields: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  posts_max_order_by: {
    author_uuid: { __type: "order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    discussion_uuid: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  posts_min_fields: {
    __typename: { __type: "String!" },
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  posts_min_order_by: {
    author_uuid: { __type: "order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    discussion_uuid: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  posts_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[posts!]!" },
  },
  posts_on_conflict: {
    constraint: { __type: "posts_constraint!" },
    update_columns: { __type: "[posts_update_column!]!" },
    where: { __type: "posts_bool_exp" },
  },
  posts_order_by: {
    author_uuid: { __type: "order_by" },
    comments_aggregate: { __type: "post_comments_aggregate_order_by" },
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    discussion: { __type: "discussions_order_by" },
    discussion_uuid: { __type: "order_by" },
    likes_aggregate: { __type: "post_likes_aggregate_order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    uuid: { __type: "order_by" },
  },
  posts_pk_columns_input: { uuid: { __type: "uuid!" } },
  posts_set_input: {
    author_uuid: { __type: "uuid" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    discussion_uuid: { __type: "uuid" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questionaires: {
    __typename: { __type: "String!" },
    brand: { __type: "brands" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    guest_questionaires_answers: {
      __type: "[guest_questionaires_answers!]!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guests_has_questionaires: {
      __type: "[guests_has_questionaires!]!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    guests_has_questionaires_aggregate: {
      __type: "guests_has_questionaires_aggregate!",
      __args: {
        distinct_on: "[guests_has_questionaires_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_has_questionaires_order_by!]",
        where: "guests_has_questionaires_bool_exp",
      },
    },
    questions: {
      __type: "[questions!]!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    questions_aggregate: {
      __type: "questions_aggregate!",
      __args: {
        distinct_on: "[questions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[questions_order_by!]",
        where: "questions_bool_exp",
      },
    },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  questionaires_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "questionaires_aggregate_fields" },
    nodes: { __type: "[questionaires!]!" },
  },
  questionaires_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[questionaires_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "questionaires_max_fields" },
    min: { __type: "questionaires_min_fields" },
  },
  questionaires_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "questionaires_max_order_by" },
    min: { __type: "questionaires_min_order_by" },
  },
  questionaires_arr_rel_insert_input: {
    data: { __type: "[questionaires_insert_input!]!" },
    on_conflict: { __type: "questionaires_on_conflict" },
  },
  questionaires_bool_exp: {
    _and: { __type: "[questionaires_bool_exp!]" },
    _not: { __type: "questionaires_bool_exp" },
    _or: { __type: "[questionaires_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_bool_exp",
    },
    guests_has_questionaires: { __type: "guests_has_questionaires_bool_exp" },
    questions: { __type: "questions_bool_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  questionaires_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_arr_rel_insert_input",
    },
    guests_has_questionaires: {
      __type: "guests_has_questionaires_arr_rel_insert_input",
    },
    questions: { __type: "questions_arr_rel_insert_input" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questionaires_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questionaires_max_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questionaires_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questionaires_min_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questionaires_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[questionaires!]!" },
  },
  questionaires_obj_rel_insert_input: {
    data: { __type: "questionaires_insert_input!" },
    on_conflict: { __type: "questionaires_on_conflict" },
  },
  questionaires_on_conflict: {
    constraint: { __type: "questionaires_constraint!" },
    update_columns: { __type: "[questionaires_update_column!]!" },
    where: { __type: "questionaires_bool_exp" },
  },
  questionaires_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate_order_by",
    },
    guests_has_questionaires_aggregate: {
      __type: "guests_has_questionaires_aggregate_order_by",
    },
    questions_aggregate: { __type: "questions_aggregate_order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questionaires_pk_columns_input: { uuid: { __type: "uuid!" } },
  questionaires_set_input: {
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questions: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    field_type: { __type: "String!" },
    guest_questionaires_answers: {
      __type: "[guest_questionaires_answers!]!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate!",
      __args: {
        distinct_on: "[guest_questionaires_answers_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guest_questionaires_answers_order_by!]",
        where: "guest_questionaires_answers_bool_exp",
      },
    },
    question: { __type: "String!" },
    questionaire: { __type: "questionaires!" },
    questionaire_uuid: { __type: "uuid!" },
    required: { __type: "Boolean!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  questions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "questions_aggregate_fields" },
    nodes: { __type: "[questions!]!" },
  },
  questions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[questions_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "questions_max_fields" },
    min: { __type: "questions_min_fields" },
  },
  questions_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "questions_max_order_by" },
    min: { __type: "questions_min_order_by" },
  },
  questions_arr_rel_insert_input: {
    data: { __type: "[questions_insert_input!]!" },
    on_conflict: { __type: "questions_on_conflict" },
  },
  questions_bool_exp: {
    _and: { __type: "[questions_bool_exp!]" },
    _not: { __type: "questions_bool_exp" },
    _or: { __type: "[questions_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    field_type: { __type: "String_comparison_exp" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_bool_exp",
    },
    question: { __type: "String_comparison_exp" },
    questionaire: { __type: "questionaires_bool_exp" },
    questionaire_uuid: { __type: "uuid_comparison_exp" },
    required: { __type: "Boolean_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  questions_insert_input: {
    created_at: { __type: "timestamptz" },
    field_type: { __type: "String" },
    guest_questionaires_answers: {
      __type: "guest_questionaires_answers_arr_rel_insert_input",
    },
    question: { __type: "String" },
    questionaire: { __type: "questionaires_obj_rel_insert_input" },
    questionaire_uuid: { __type: "uuid" },
    required: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questions_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    field_type: { __type: "String" },
    question: { __type: "String" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questions_max_order_by: {
    created_at: { __type: "order_by" },
    field_type: { __type: "order_by" },
    question: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questions_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    field_type: { __type: "String" },
    question: { __type: "String" },
    questionaire_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  questions_min_order_by: {
    created_at: { __type: "order_by" },
    field_type: { __type: "order_by" },
    question: { __type: "order_by" },
    questionaire_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[questions!]!" },
  },
  questions_obj_rel_insert_input: {
    data: { __type: "questions_insert_input!" },
    on_conflict: { __type: "questions_on_conflict" },
  },
  questions_on_conflict: {
    constraint: { __type: "questions_constraint!" },
    update_columns: { __type: "[questions_update_column!]!" },
    where: { __type: "questions_bool_exp" },
  },
  questions_order_by: {
    created_at: { __type: "order_by" },
    field_type: { __type: "order_by" },
    guest_questionaires_answers_aggregate: {
      __type: "guest_questionaires_answers_aggregate_order_by",
    },
    question: { __type: "order_by" },
    questionaire: { __type: "questionaires_order_by" },
    questionaire_uuid: { __type: "order_by" },
    required: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  questions_pk_columns_input: { uuid: { __type: "uuid!" } },
  questions_set_input: {
    created_at: { __type: "timestamptz" },
    field_type: { __type: "String" },
    question: { __type: "String" },
    questionaire_uuid: { __type: "uuid" },
    required: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  requests: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8!" },
    base_cashback_by_brand: { __type: "float8!" },
    base_cashback_by_stayr: { __type: "float8!" },
    base_currency_code: { __type: "bpchar!" },
    base_discount_by_brand: { __type: "float8!" },
    base_discount_by_stayr: { __type: "float8!" },
    base_payment_by_card: { __type: "float8!" },
    base_payment_by_cash: { __type: "float8!" },
    base_payment_by_credits: { __type: "float8!" },
    base_total_cashback: { __type: "float8!" },
    base_total_discount: { __type: "float8!" },
    base_total_payment: { __type: "float8!" },
    base_total_price: { __type: "float8!" },
    base_unit_price: { __type: "float8!" },
    booking_type: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_conversion_rate: { __type: "float8!" },
    brand_currency_code: { __type: "bpchar!" },
    brand_snapshot: { __type: "json!", __args: { path: "String" } },
    brand_uuid: { __type: "uuid!" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    email_receipt_data: { __type: "json!", __args: { path: "String" } },
    extensions: {
      __type: "[extensions!]!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    extensions_aggregate: {
      __type: "extensions_aggregate!",
      __args: {
        distinct_on: "[extensions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[extensions_order_by!]",
        where: "extensions_bool_exp",
      },
    },
    inboxes: {
      __type: "[inboxes!]!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    inboxes_aggregate: {
      __type: "inboxes_aggregate!",
      __args: {
        distinct_on: "[inboxes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[inboxes_order_by!]",
        where: "inboxes_bool_exp",
      },
    },
    invoice: { __type: "invoice!" },
    invoice_uuid: { __type: "uuid!" },
    listing: { __type: "listings!" },
    listing_snapshot: { __type: "json!", __args: { path: "String" } },
    listing_type: { __type: "String!" },
    listing_uuid: { __type: "uuid!" },
    minutes: { __type: "Int" },
    outlet: { __type: "outlets!" },
    outlet_snapshot: { __type: "json!", __args: { path: "String" } },
    outlet_uuid: { __type: "uuid!" },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    payment_intent_snapshot: { __type: "json!", __args: { path: "String" } },
    quantity: { __type: "Int!" },
    reservations: {
      __type: "[reservations!]!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    reservations_aggregate: {
      __type: "reservations_aggregate!",
      __args: {
        distinct_on: "[reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reservations_order_by!]",
        where: "reservations_bool_exp",
      },
    },
    short_id: { __type: "String!" },
    source_snapshot: { __type: "json!", __args: { path: "String" } },
    status: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_conversion_code: { __type: "float8!" },
    user_currency_code: { __type: "bpchar!" },
    user_snapshot: { __type: "json!", __args: { path: "String" } },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  requests_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "requests_aggregate_fields" },
    nodes: { __type: "[requests!]!" },
  },
  requests_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "requests_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[requests_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "requests_max_fields" },
    min: { __type: "requests_min_fields" },
    stddev: { __type: "requests_stddev_fields" },
    stddev_pop: { __type: "requests_stddev_pop_fields" },
    stddev_samp: { __type: "requests_stddev_samp_fields" },
    sum: { __type: "requests_sum_fields" },
    var_pop: { __type: "requests_var_pop_fields" },
    var_samp: { __type: "requests_var_samp_fields" },
    variance: { __type: "requests_variance_fields" },
  },
  requests_aggregate_order_by: {
    avg: { __type: "requests_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "requests_max_order_by" },
    min: { __type: "requests_min_order_by" },
    stddev: { __type: "requests_stddev_order_by" },
    stddev_pop: { __type: "requests_stddev_pop_order_by" },
    stddev_samp: { __type: "requests_stddev_samp_order_by" },
    sum: { __type: "requests_sum_order_by" },
    var_pop: { __type: "requests_var_pop_order_by" },
    var_samp: { __type: "requests_var_samp_order_by" },
    variance: { __type: "requests_variance_order_by" },
  },
  requests_arr_rel_insert_input: {
    data: { __type: "[requests_insert_input!]!" },
    on_conflict: { __type: "requests_on_conflict" },
  },
  requests_avg_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_avg_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_bool_exp: {
    _and: { __type: "[requests_bool_exp!]" },
    _not: { __type: "requests_bool_exp" },
    _or: { __type: "[requests_bool_exp!]" },
    base_3rd_party_platform: { __type: "String_comparison_exp" },
    base_3rd_party_platform_fee: { __type: "float8_comparison_exp" },
    base_cashback_by_brand: { __type: "float8_comparison_exp" },
    base_cashback_by_stayr: { __type: "float8_comparison_exp" },
    base_currency_code: { __type: "bpchar_comparison_exp" },
    base_discount_by_brand: { __type: "float8_comparison_exp" },
    base_discount_by_stayr: { __type: "float8_comparison_exp" },
    base_payment_by_card: { __type: "float8_comparison_exp" },
    base_payment_by_cash: { __type: "float8_comparison_exp" },
    base_payment_by_credits: { __type: "float8_comparison_exp" },
    base_total_cashback: { __type: "float8_comparison_exp" },
    base_total_discount: { __type: "float8_comparison_exp" },
    base_total_payment: { __type: "float8_comparison_exp" },
    base_total_price: { __type: "float8_comparison_exp" },
    base_unit_price: { __type: "float8_comparison_exp" },
    booking_type: { __type: "String_comparison_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_conversion_rate: { __type: "float8_comparison_exp" },
    brand_currency_code: { __type: "bpchar_comparison_exp" },
    brand_snapshot: { __type: "json_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    checkin_at: { __type: "timestamptz_comparison_exp" },
    checkout_at: { __type: "timestamptz_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    email_receipt_data: { __type: "json_comparison_exp" },
    extensions: { __type: "extensions_bool_exp" },
    inboxes: { __type: "inboxes_bool_exp" },
    invoice: { __type: "invoice_bool_exp" },
    invoice_uuid: { __type: "uuid_comparison_exp" },
    listing: { __type: "listings_bool_exp" },
    listing_snapshot: { __type: "json_comparison_exp" },
    listing_type: { __type: "String_comparison_exp" },
    listing_uuid: { __type: "uuid_comparison_exp" },
    minutes: { __type: "Int_comparison_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_snapshot: { __type: "json_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    passes: { __type: "passes_bool_exp" },
    payment_intent_snapshot: { __type: "json_comparison_exp" },
    quantity: { __type: "Int_comparison_exp" },
    reservations: { __type: "reservations_bool_exp" },
    short_id: { __type: "String_comparison_exp" },
    source_snapshot: { __type: "json_comparison_exp" },
    status: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_conversion_code: { __type: "float8_comparison_exp" },
    user_currency_code: { __type: "bpchar_comparison_exp" },
    user_snapshot: { __type: "json_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  requests_inc_input: {
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    minutes: { __type: "Int" },
    quantity: { __type: "Int" },
    user_conversion_code: { __type: "float8" },
  },
  requests_insert_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    booking_type: { __type: "String" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    email_receipt_data: { __type: "json" },
    extensions: { __type: "extensions_arr_rel_insert_input" },
    inboxes: { __type: "inboxes_arr_rel_insert_input" },
    invoice: { __type: "invoice_obj_rel_insert_input" },
    invoice_uuid: { __type: "uuid" },
    listing: { __type: "listings_obj_rel_insert_input" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    passes: { __type: "passes_arr_rel_insert_input" },
    payment_intent_snapshot: { __type: "json" },
    quantity: { __type: "Int" },
    reservations: { __type: "reservations_arr_rel_insert_input" },
    short_id: { __type: "String" },
    source_snapshot: { __type: "json" },
    status: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_conversion_code: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    user_snapshot: { __type: "json" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  requests_max_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    booking_type: { __type: "String" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    invoice_uuid: { __type: "uuid" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    short_id: { __type: "String" },
    status: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_conversion_code: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  requests_max_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    booking_type: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    invoice_uuid: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    quantity: { __type: "order_by" },
    short_id: { __type: "order_by" },
    status: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  requests_min_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    booking_type: { __type: "String" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    invoice_uuid: { __type: "uuid" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    short_id: { __type: "String" },
    status: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_conversion_code: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  requests_min_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    booking_type: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    invoice_uuid: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    quantity: { __type: "order_by" },
    short_id: { __type: "order_by" },
    status: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  requests_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[requests!]!" },
  },
  requests_obj_rel_insert_input: {
    data: { __type: "requests_insert_input!" },
    on_conflict: { __type: "requests_on_conflict" },
  },
  requests_on_conflict: {
    constraint: { __type: "requests_constraint!" },
    update_columns: { __type: "[requests_update_column!]!" },
    where: { __type: "requests_bool_exp" },
  },
  requests_order_by: {
    base_3rd_party_platform: { __type: "order_by" },
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_currency_code: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    booking_type: { __type: "order_by" },
    brand: { __type: "brands_order_by" },
    brand_conversion_rate: { __type: "order_by" },
    brand_currency_code: { __type: "order_by" },
    brand_snapshot: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email_receipt_data: { __type: "order_by" },
    extensions_aggregate: { __type: "extensions_aggregate_order_by" },
    inboxes_aggregate: { __type: "inboxes_aggregate_order_by" },
    invoice: { __type: "invoice_order_by" },
    invoice_uuid: { __type: "order_by" },
    listing: { __type: "listings_order_by" },
    listing_snapshot: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_snapshot: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    passes_aggregate: { __type: "passes_aggregate_order_by" },
    payment_intent_snapshot: { __type: "order_by" },
    quantity: { __type: "order_by" },
    reservations_aggregate: { __type: "reservations_aggregate_order_by" },
    short_id: { __type: "order_by" },
    source_snapshot: { __type: "order_by" },
    status: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_conversion_code: { __type: "order_by" },
    user_currency_code: { __type: "order_by" },
    user_snapshot: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  requests_pk_columns_input: { uuid: { __type: "uuid!" } },
  requests_set_input: {
    base_3rd_party_platform: { __type: "String" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_currency_code: { __type: "bpchar" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    booking_type: { __type: "String" },
    brand_conversion_rate: { __type: "float8" },
    brand_currency_code: { __type: "bpchar" },
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    email_receipt_data: { __type: "json" },
    invoice_uuid: { __type: "uuid" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    payment_intent_snapshot: { __type: "json" },
    quantity: { __type: "Int" },
    short_id: { __type: "String" },
    source_snapshot: { __type: "json" },
    status: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_conversion_code: { __type: "float8" },
    user_currency_code: { __type: "bpchar" },
    user_snapshot: { __type: "json" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  requests_stddev_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_stddev_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_stddev_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_stddev_pop_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_stddev_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_stddev_samp_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_sum_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "float8" },
    base_cashback_by_brand: { __type: "float8" },
    base_cashback_by_stayr: { __type: "float8" },
    base_discount_by_brand: { __type: "float8" },
    base_discount_by_stayr: { __type: "float8" },
    base_payment_by_card: { __type: "float8" },
    base_payment_by_cash: { __type: "float8" },
    base_payment_by_credits: { __type: "float8" },
    base_total_cashback: { __type: "float8" },
    base_total_discount: { __type: "float8" },
    base_total_payment: { __type: "float8" },
    base_total_price: { __type: "float8" },
    base_unit_price: { __type: "float8" },
    brand_conversion_rate: { __type: "float8" },
    minutes: { __type: "Int" },
    quantity: { __type: "Int" },
    user_conversion_code: { __type: "float8" },
  },
  requests_sum_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_var_pop_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_var_pop_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_var_samp_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_var_samp_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  requests_variance_fields: {
    __typename: { __type: "String!" },
    base_3rd_party_platform_fee: { __type: "Float" },
    base_cashback_by_brand: { __type: "Float" },
    base_cashback_by_stayr: { __type: "Float" },
    base_discount_by_brand: { __type: "Float" },
    base_discount_by_stayr: { __type: "Float" },
    base_payment_by_card: { __type: "Float" },
    base_payment_by_cash: { __type: "Float" },
    base_payment_by_credits: { __type: "Float" },
    base_total_cashback: { __type: "Float" },
    base_total_discount: { __type: "Float" },
    base_total_payment: { __type: "Float" },
    base_total_price: { __type: "Float" },
    base_unit_price: { __type: "Float" },
    brand_conversion_rate: { __type: "Float" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
    user_conversion_code: { __type: "Float" },
  },
  requests_variance_order_by: {
    base_3rd_party_platform_fee: { __type: "order_by" },
    base_cashback_by_brand: { __type: "order_by" },
    base_cashback_by_stayr: { __type: "order_by" },
    base_discount_by_brand: { __type: "order_by" },
    base_discount_by_stayr: { __type: "order_by" },
    base_payment_by_card: { __type: "order_by" },
    base_payment_by_cash: { __type: "order_by" },
    base_payment_by_credits: { __type: "order_by" },
    base_total_cashback: { __type: "order_by" },
    base_total_discount: { __type: "order_by" },
    base_total_payment: { __type: "order_by" },
    base_total_price: { __type: "order_by" },
    base_unit_price: { __type: "order_by" },
    brand_conversion_rate: { __type: "order_by" },
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
    user_conversion_code: { __type: "order_by" },
  },
  reservations: {
    __typename: { __type: "String!" },
    booking_type: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_snapshot: { __type: "json!", __args: { path: "String" } },
    brand_uuid: { __type: "uuid!" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    listing: { __type: "listings!" },
    listing_snapshot: { __type: "json!", __args: { path: "String" } },
    listing_type: { __type: "String!" },
    listing_uuid: { __type: "uuid!" },
    minutes: { __type: "Int!" },
    outlet_snapshot: { __type: "json!", __args: { path: "String" } },
    outlet_uuid: { __type: "uuid!" },
    quantity: { __type: "Int!" },
    request: { __type: "requests!" },
    request_uuid: { __type: "uuid!" },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    spaces_usages: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usages_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    user_snapshot: { __type: "json!", __args: { path: "String" } },
    uuid: { __type: "uuid!" },
  },
  reservations_activity_logs: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_activity_logs_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "reservations_activity_logs_aggregate_fields" },
    nodes: { __type: "[reservations_activity_logs!]!" },
  },
  reservations_activity_logs_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[reservations_activity_logs_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "reservations_activity_logs_max_fields" },
    min: { __type: "reservations_activity_logs_min_fields" },
  },
  reservations_activity_logs_bool_exp: {
    _and: { __type: "[reservations_activity_logs_bool_exp!]" },
    _not: { __type: "reservations_activity_logs_bool_exp" },
    _or: { __type: "[reservations_activity_logs_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    event_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  reservations_activity_logs_insert_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_activity_logs_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_activity_logs_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_activity_logs_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[reservations_activity_logs!]!" },
  },
  reservations_activity_logs_order_by: {
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    event_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reservations_activity_logs_set_input: {
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    event_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "reservations_aggregate_fields" },
    nodes: { __type: "[reservations!]!" },
  },
  reservations_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "reservations_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[reservations_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "reservations_max_fields" },
    min: { __type: "reservations_min_fields" },
    stddev: { __type: "reservations_stddev_fields" },
    stddev_pop: { __type: "reservations_stddev_pop_fields" },
    stddev_samp: { __type: "reservations_stddev_samp_fields" },
    sum: { __type: "reservations_sum_fields" },
    var_pop: { __type: "reservations_var_pop_fields" },
    var_samp: { __type: "reservations_var_samp_fields" },
    variance: { __type: "reservations_variance_fields" },
  },
  reservations_aggregate_order_by: {
    avg: { __type: "reservations_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "reservations_max_order_by" },
    min: { __type: "reservations_min_order_by" },
    stddev: { __type: "reservations_stddev_order_by" },
    stddev_pop: { __type: "reservations_stddev_pop_order_by" },
    stddev_samp: { __type: "reservations_stddev_samp_order_by" },
    sum: { __type: "reservations_sum_order_by" },
    var_pop: { __type: "reservations_var_pop_order_by" },
    var_samp: { __type: "reservations_var_samp_order_by" },
    variance: { __type: "reservations_variance_order_by" },
  },
  reservations_arr_rel_insert_input: {
    data: { __type: "[reservations_insert_input!]!" },
    on_conflict: { __type: "reservations_on_conflict" },
  },
  reservations_avg_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_avg_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_bool_exp: {
    _and: { __type: "[reservations_bool_exp!]" },
    _not: { __type: "reservations_bool_exp" },
    _or: { __type: "[reservations_bool_exp!]" },
    booking_type: { __type: "String_comparison_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_snapshot: { __type: "json_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    checkin_at: { __type: "timestamptz_comparison_exp" },
    checkout_at: { __type: "timestamptz_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    listing: { __type: "listings_bool_exp" },
    listing_snapshot: { __type: "json_comparison_exp" },
    listing_type: { __type: "String_comparison_exp" },
    listing_uuid: { __type: "uuid_comparison_exp" },
    minutes: { __type: "Int_comparison_exp" },
    outlet_snapshot: { __type: "json_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    quantity: { __type: "Int_comparison_exp" },
    request: { __type: "requests_bool_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
    reviews: { __type: "reviews_bool_exp" },
    spaces_usages: { __type: "spaces_usage_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_snapshot: { __type: "json_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  reservations_inc_input: {
    minutes: { __type: "Int" },
    quantity: { __type: "Int" },
  },
  reservations_insert_input: {
    booking_type: { __type: "String" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing: { __type: "listings_obj_rel_insert_input" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    request: { __type: "requests_obj_rel_insert_input" },
    request_uuid: { __type: "uuid" },
    reviews: { __type: "reviews_arr_rel_insert_input" },
    spaces_usages: { __type: "spaces_usage_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    user_snapshot: { __type: "json" },
    uuid: { __type: "uuid" },
  },
  reservations_max_fields: {
    __typename: { __type: "String!" },
    booking_type: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_max_order_by: {
    booking_type: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    quantity: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reservations_min_fields: {
    __typename: { __type: "String!" },
    booking_type: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  reservations_min_order_by: {
    booking_type: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    quantity: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reservations_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[reservations!]!" },
  },
  reservations_obj_rel_insert_input: {
    data: { __type: "reservations_insert_input!" },
    on_conflict: { __type: "reservations_on_conflict" },
  },
  reservations_on_conflict: {
    constraint: { __type: "reservations_constraint!" },
    update_columns: { __type: "[reservations_update_column!]!" },
    where: { __type: "reservations_bool_exp" },
  },
  reservations_order_by: {
    booking_type: { __type: "order_by" },
    brand: { __type: "brands_order_by" },
    brand_snapshot: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    checkin_at: { __type: "order_by" },
    checkout_at: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    listing: { __type: "listings_order_by" },
    listing_snapshot: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    minutes: { __type: "order_by" },
    outlet_snapshot: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    quantity: { __type: "order_by" },
    request: { __type: "requests_order_by" },
    request_uuid: { __type: "order_by" },
    reviews_aggregate: { __type: "reviews_aggregate_order_by" },
    spaces_usages_aggregate: { __type: "spaces_usage_aggregate_order_by" },
    updated_at: { __type: "order_by" },
    user_snapshot: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reservations_pk_columns_input: { uuid: { __type: "uuid!" } },
  reservations_set_input: {
    booking_type: { __type: "String" },
    brand_snapshot: { __type: "json" },
    brand_uuid: { __type: "uuid" },
    checkin_at: { __type: "timestamptz" },
    checkout_at: { __type: "timestamptz" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_snapshot: { __type: "json" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    minutes: { __type: "Int" },
    outlet_snapshot: { __type: "json" },
    outlet_uuid: { __type: "uuid" },
    quantity: { __type: "Int" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_snapshot: { __type: "json" },
    uuid: { __type: "uuid" },
  },
  reservations_stddev_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_stddev_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_stddev_pop_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_stddev_pop_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_stddev_samp_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_stddev_samp_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_sum_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Int" },
    quantity: { __type: "Int" },
  },
  reservations_sum_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_var_pop_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_var_pop_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_var_samp_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_var_samp_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  reservations_variance_fields: {
    __typename: { __type: "String!" },
    minutes: { __type: "Float" },
    quantity: { __type: "Float" },
  },
  reservations_variance_order_by: {
    minutes: { __type: "order_by" },
    quantity: { __type: "order_by" },
  },
  review_comments: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  review_comments_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "review_comments_aggregate_fields" },
    nodes: { __type: "[review_comments!]!" },
  },
  review_comments_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[review_comments_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "review_comments_max_fields" },
    min: { __type: "review_comments_min_fields" },
  },
  review_comments_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "review_comments_max_order_by" },
    min: { __type: "review_comments_min_order_by" },
  },
  review_comments_arr_rel_insert_input: {
    data: { __type: "[review_comments_insert_input!]!" },
  },
  review_comments_bool_exp: {
    _and: { __type: "[review_comments_bool_exp!]" },
    _not: { __type: "review_comments_bool_exp" },
    _or: { __type: "[review_comments_bool_exp!]" },
    content: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  review_comments_insert_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  review_comments_max_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  review_comments_max_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_comments_min_fields: {
    __typename: { __type: "String!" },
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  review_comments_min_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_comments_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[review_comments!]!" },
  },
  review_comments_order_by: {
    content: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_comments_set_input: {
    content: { __type: "String" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  review_likes: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  review_likes_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "review_likes_aggregate_fields" },
    nodes: { __type: "[review_likes!]!" },
  },
  review_likes_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[review_likes_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "review_likes_max_fields" },
    min: { __type: "review_likes_min_fields" },
  },
  review_likes_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "review_likes_max_order_by" },
    min: { __type: "review_likes_min_order_by" },
  },
  review_likes_arr_rel_insert_input: {
    data: { __type: "[review_likes_insert_input!]!" },
  },
  review_likes_bool_exp: {
    _and: { __type: "[review_likes_bool_exp!]" },
    _not: { __type: "review_likes_bool_exp" },
    _or: { __type: "[review_likes_bool_exp!]" },
    liked_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  review_likes_insert_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  review_likes_max_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  review_likes_max_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  review_likes_min_fields: {
    __typename: { __type: "String!" },
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  review_likes_min_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  review_likes_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[review_likes!]!" },
  },
  review_likes_order_by: {
    liked_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  review_likes_set_input: {
    liked_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  review_media: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json", __args: { path: "String" } },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  review_media_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "review_media_aggregate_fields" },
    nodes: { __type: "[review_media!]!" },
  },
  review_media_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "review_media_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[review_media_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "review_media_max_fields" },
    min: { __type: "review_media_min_fields" },
    stddev: { __type: "review_media_stddev_fields" },
    stddev_pop: { __type: "review_media_stddev_pop_fields" },
    stddev_samp: { __type: "review_media_stddev_samp_fields" },
    sum: { __type: "review_media_sum_fields" },
    var_pop: { __type: "review_media_var_pop_fields" },
    var_samp: { __type: "review_media_var_samp_fields" },
    variance: { __type: "review_media_variance_fields" },
  },
  review_media_aggregate_order_by: {
    avg: { __type: "review_media_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "review_media_max_order_by" },
    min: { __type: "review_media_min_order_by" },
    stddev: { __type: "review_media_stddev_order_by" },
    stddev_pop: { __type: "review_media_stddev_pop_order_by" },
    stddev_samp: { __type: "review_media_stddev_samp_order_by" },
    sum: { __type: "review_media_sum_order_by" },
    var_pop: { __type: "review_media_var_pop_order_by" },
    var_samp: { __type: "review_media_var_samp_order_by" },
    variance: { __type: "review_media_variance_order_by" },
  },
  review_media_arr_rel_insert_input: {
    data: { __type: "[review_media_insert_input!]!" },
  },
  review_media_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_avg_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_bool_exp: {
    _and: { __type: "[review_media_bool_exp!]" },
    _not: { __type: "review_media_bool_exp" },
    _or: { __type: "[review_media_bool_exp!]" },
    collection_name: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    file_name: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    mime_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    s3_bucket_name: { __type: "String_comparison_exp" },
    s3_key: { __type: "String_comparison_exp" },
    size: { __type: "bigint_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  review_media_inc_input: {
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  review_media_insert_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  review_media_max_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  review_media_max_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_media_min_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  review_media_min_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_media_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[review_media!]!" },
  },
  review_media_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    properties: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  review_media_set_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  review_media_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_stddev_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_stddev_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_stddev_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  review_media_sum_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_var_pop_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_var_samp_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  review_media_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  review_media_variance_order_by: {
    index: { __type: "order_by" },
    size: { __type: "order_by" },
  },
  reviews: {
    __typename: { __type: "String!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    comment: { __type: "String!" },
    comments: {
      __type: "[review_comments!]!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    comments_aggregate: {
      __type: "review_comments_aggregate!",
      __args: {
        distinct_on: "[review_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_comments_order_by!]",
        where: "review_comments_bool_exp",
      },
    },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    likes: {
      __type: "[review_likes!]!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    likes_aggregate: {
      __type: "review_likes_aggregate!",
      __args: {
        distinct_on: "[review_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_likes_order_by!]",
        where: "review_likes_bool_exp",
      },
    },
    listing: { __type: "listings!" },
    listing_type: { __type: "String!" },
    listing_uuid: { __type: "uuid!" },
    media: {
      __type: "[review_media!]!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    media_aggregate: {
      __type: "review_media_aggregate!",
      __args: {
        distinct_on: "[review_media_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[review_media_order_by!]",
        where: "review_media_bool_exp",
      },
    },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    rating: { __type: "Int!" },
    reservation: { __type: "reservations!" },
    reservation_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  reviews_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "reviews_aggregate_fields" },
    nodes: { __type: "[reviews!]!" },
  },
  reviews_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "reviews_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[reviews_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "reviews_max_fields" },
    min: { __type: "reviews_min_fields" },
    stddev: { __type: "reviews_stddev_fields" },
    stddev_pop: { __type: "reviews_stddev_pop_fields" },
    stddev_samp: { __type: "reviews_stddev_samp_fields" },
    sum: { __type: "reviews_sum_fields" },
    var_pop: { __type: "reviews_var_pop_fields" },
    var_samp: { __type: "reviews_var_samp_fields" },
    variance: { __type: "reviews_variance_fields" },
  },
  reviews_aggregate_order_by: {
    avg: { __type: "reviews_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "reviews_max_order_by" },
    min: { __type: "reviews_min_order_by" },
    stddev: { __type: "reviews_stddev_order_by" },
    stddev_pop: { __type: "reviews_stddev_pop_order_by" },
    stddev_samp: { __type: "reviews_stddev_samp_order_by" },
    sum: { __type: "reviews_sum_order_by" },
    var_pop: { __type: "reviews_var_pop_order_by" },
    var_samp: { __type: "reviews_var_samp_order_by" },
    variance: { __type: "reviews_variance_order_by" },
  },
  reviews_arr_rel_insert_input: {
    data: { __type: "[reviews_insert_input!]!" },
    on_conflict: { __type: "reviews_on_conflict" },
  },
  reviews_avg_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_avg_order_by: { rating: { __type: "order_by" } },
  reviews_bool_exp: {
    _and: { __type: "[reviews_bool_exp!]" },
    _not: { __type: "reviews_bool_exp" },
    _or: { __type: "[reviews_bool_exp!]" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    comment: { __type: "String_comparison_exp" },
    comments: { __type: "review_comments_bool_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    likes: { __type: "review_likes_bool_exp" },
    listing: { __type: "listings_bool_exp" },
    listing_type: { __type: "String_comparison_exp" },
    listing_uuid: { __type: "uuid_comparison_exp" },
    media: { __type: "review_media_bool_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    rating: { __type: "Int_comparison_exp" },
    reservation: { __type: "reservations_bool_exp" },
    reservation_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  reviews_inc_input: { rating: { __type: "Int" } },
  reviews_insert_input: {
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    comment: { __type: "String" },
    comments: { __type: "review_comments_arr_rel_insert_input" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    likes: { __type: "review_likes_arr_rel_insert_input" },
    listing: { __type: "listings_obj_rel_insert_input" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    media: { __type: "review_media_arr_rel_insert_input" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    rating: { __type: "Int" },
    reservation: { __type: "reservations_obj_rel_insert_input" },
    reservation_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  reviews_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    comment: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    rating: { __type: "Int" },
    reservation_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  reviews_max_order_by: {
    brand_uuid: { __type: "order_by" },
    comment: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    rating: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reviews_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    comment: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    rating: { __type: "Int" },
    reservation_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  reviews_min_order_by: {
    brand_uuid: { __type: "order_by" },
    comment: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    rating: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reviews_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[reviews!]!" },
  },
  reviews_on_conflict: {
    constraint: { __type: "reviews_constraint!" },
    update_columns: { __type: "[reviews_update_column!]!" },
    where: { __type: "reviews_bool_exp" },
  },
  reviews_order_by: {
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    comment: { __type: "order_by" },
    comments_aggregate: { __type: "review_comments_aggregate_order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    likes_aggregate: { __type: "review_likes_aggregate_order_by" },
    listing: { __type: "listings_order_by" },
    listing_type: { __type: "order_by" },
    listing_uuid: { __type: "order_by" },
    media_aggregate: { __type: "review_media_aggregate_order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    rating: { __type: "order_by" },
    reservation: { __type: "reservations_order_by" },
    reservation_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  reviews_pk_columns_input: { uuid: { __type: "uuid!" } },
  reviews_set_input: {
    brand_uuid: { __type: "uuid" },
    comment: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    listing_type: { __type: "String" },
    listing_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    rating: { __type: "Int" },
    reservation_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  reviews_stddev_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_stddev_order_by: { rating: { __type: "order_by" } },
  reviews_stddev_pop_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_stddev_pop_order_by: { rating: { __type: "order_by" } },
  reviews_stddev_samp_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_stddev_samp_order_by: { rating: { __type: "order_by" } },
  reviews_sum_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Int" },
  },
  reviews_sum_order_by: { rating: { __type: "order_by" } },
  reviews_var_pop_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_var_pop_order_by: { rating: { __type: "order_by" } },
  reviews_var_samp_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_var_samp_order_by: { rating: { __type: "order_by" } },
  reviews_variance_fields: {
    __typename: { __type: "String!" },
    rating: { __type: "Float" },
  },
  reviews_variance_order_by: { rating: { __type: "order_by" } },
  role_has_permissions: {
    __typename: { __type: "String!" },
    permission: { __type: "permissions!" },
    permission_uuid: { __type: "uuid!" },
    role: { __type: "roles!" },
    role_uuid: { __type: "uuid!" },
  },
  role_has_permissions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "role_has_permissions_aggregate_fields" },
    nodes: { __type: "[role_has_permissions!]!" },
  },
  role_has_permissions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[role_has_permissions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "role_has_permissions_max_fields" },
    min: { __type: "role_has_permissions_min_fields" },
  },
  role_has_permissions_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "role_has_permissions_max_order_by" },
    min: { __type: "role_has_permissions_min_order_by" },
  },
  role_has_permissions_arr_rel_insert_input: {
    data: { __type: "[role_has_permissions_insert_input!]!" },
  },
  role_has_permissions_bool_exp: {
    _and: { __type: "[role_has_permissions_bool_exp!]" },
    _not: { __type: "role_has_permissions_bool_exp" },
    _or: { __type: "[role_has_permissions_bool_exp!]" },
    permission: { __type: "permissions_bool_exp" },
    permission_uuid: { __type: "uuid_comparison_exp" },
    role: { __type: "roles_bool_exp" },
    role_uuid: { __type: "uuid_comparison_exp" },
  },
  role_has_permissions_insert_input: {
    permission: { __type: "permissions_obj_rel_insert_input" },
    permission_uuid: { __type: "uuid" },
    role: { __type: "roles_obj_rel_insert_input" },
    role_uuid: { __type: "uuid" },
  },
  role_has_permissions_max_fields: {
    __typename: { __type: "String!" },
    permission_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  role_has_permissions_max_order_by: {
    permission_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  role_has_permissions_min_fields: {
    __typename: { __type: "String!" },
    permission_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  role_has_permissions_min_order_by: {
    permission_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  role_has_permissions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[role_has_permissions!]!" },
  },
  role_has_permissions_order_by: {
    permission: { __type: "permissions_order_by" },
    permission_uuid: { __type: "order_by" },
    role: { __type: "roles_order_by" },
    role_uuid: { __type: "order_by" },
  },
  role_has_permissions_set_input: {
    permission_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  roles: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    model_has_roles: {
      __type: "[model_has_roles!]!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    model_has_roles_aggregate: {
      __type: "model_has_roles_aggregate!",
      __args: {
        distinct_on: "[model_has_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_roles_order_by!]",
        where: "model_has_roles_bool_exp",
      },
    },
    name: { __type: "String!" },
    role_has_permissions: {
      __type: "[role_has_permissions!]!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate!",
      __args: {
        distinct_on: "[role_has_permissions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[role_has_permissions_order_by!]",
        where: "role_has_permissions_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  roles_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "roles_aggregate_fields" },
    nodes: { __type: "[roles!]!" },
  },
  roles_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[roles_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "roles_max_fields" },
    min: { __type: "roles_min_fields" },
  },
  roles_bool_exp: {
    _and: { __type: "[roles_bool_exp!]" },
    _not: { __type: "roles_bool_exp" },
    _or: { __type: "[roles_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_has_roles: { __type: "model_has_roles_bool_exp" },
    name: { __type: "String_comparison_exp" },
    role_has_permissions: { __type: "role_has_permissions_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  roles_insert_input: {
    created_at: { __type: "timestamptz" },
    model_has_roles: { __type: "model_has_roles_arr_rel_insert_input" },
    name: { __type: "String" },
    role_has_permissions: {
      __type: "role_has_permissions_arr_rel_insert_input",
    },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  roles_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  roles_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  roles_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[roles!]!" },
  },
  roles_obj_rel_insert_input: {
    data: { __type: "roles_insert_input!" },
    on_conflict: { __type: "roles_on_conflict" },
  },
  roles_on_conflict: {
    constraint: { __type: "roles_constraint!" },
    update_columns: { __type: "[roles_update_column!]!" },
    where: { __type: "roles_bool_exp" },
  },
  roles_order_by: {
    created_at: { __type: "order_by" },
    model_has_roles_aggregate: { __type: "model_has_roles_aggregate_order_by" },
    name: { __type: "order_by" },
    role_has_permissions_aggregate: {
      __type: "role_has_permissions_aggregate_order_by",
    },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  roles_pk_columns_input: { uuid: { __type: "uuid!" } },
  roles_set_input: {
    created_at: { __type: "timestamptz" },
    name: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  smallint_comparison_exp: {
    _eq: { __type: "smallint" },
    _gt: { __type: "smallint" },
    _gte: { __type: "smallint" },
    _in: { __type: "[smallint!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "smallint" },
    _lte: { __type: "smallint" },
    _neq: { __type: "smallint" },
    _nin: { __type: "[smallint!]" },
  },
  social_relationships: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    followed_uuid: { __type: "uuid!" },
    follower_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    userByFollowerUuid: { __type: "users!" },
    uuid: { __type: "uuid!" },
  },
  social_relationships_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "social_relationships_aggregate_fields" },
    nodes: { __type: "[social_relationships!]!" },
  },
  social_relationships_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[social_relationships_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "social_relationships_max_fields" },
    min: { __type: "social_relationships_min_fields" },
  },
  social_relationships_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "social_relationships_max_order_by" },
    min: { __type: "social_relationships_min_order_by" },
  },
  social_relationships_arr_rel_insert_input: {
    data: { __type: "[social_relationships_insert_input!]!" },
    on_conflict: { __type: "social_relationships_on_conflict" },
  },
  social_relationships_bool_exp: {
    _and: { __type: "[social_relationships_bool_exp!]" },
    _not: { __type: "social_relationships_bool_exp" },
    _or: { __type: "[social_relationships_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    followed_uuid: { __type: "uuid_comparison_exp" },
    follower_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    userByFollowerUuid: { __type: "users_bool_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  social_relationships_insert_input: {
    created_at: { __type: "timestamptz" },
    followed_uuid: { __type: "uuid" },
    follower_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    userByFollowerUuid: { __type: "users_obj_rel_insert_input" },
    uuid: { __type: "uuid" },
  },
  social_relationships_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    followed_uuid: { __type: "uuid" },
    follower_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  social_relationships_max_order_by: {
    created_at: { __type: "order_by" },
    followed_uuid: { __type: "order_by" },
    follower_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  social_relationships_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    followed_uuid: { __type: "uuid" },
    follower_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  social_relationships_min_order_by: {
    created_at: { __type: "order_by" },
    followed_uuid: { __type: "order_by" },
    follower_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  social_relationships_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[social_relationships!]!" },
  },
  social_relationships_on_conflict: {
    constraint: { __type: "social_relationships_constraint!" },
    update_columns: { __type: "[social_relationships_update_column!]!" },
    where: { __type: "social_relationships_bool_exp" },
  },
  social_relationships_order_by: {
    created_at: { __type: "order_by" },
    followed_uuid: { __type: "order_by" },
    follower_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    userByFollowerUuid: { __type: "users_order_by" },
    uuid: { __type: "order_by" },
  },
  social_relationships_pk_columns_input: { uuid: { __type: "uuid!" } },
  social_relationships_set_input: {
    created_at: { __type: "timestamptz" },
    followed_uuid: { __type: "uuid" },
    follower_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  spaces: {
    __typename: { __type: "String!" },
    available: { __type: "Boolean!" },
    brand: { __type: "brands!" },
    brand_uuid: { __type: "uuid!" },
    building: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    floor: { __type: "Int!" },
    floor_plan: { __type: "floor_plans!" },
    floor_plan_grid: { __type: "floor_plan_grid!" },
    floor_plan_uuid: { __type: "uuid!" },
    grid_uuid: { __type: "uuid!" },
    occupancy: { __type: "Int!" },
    outlet: { __type: "outlets!" },
    outlet_uuid: { __type: "uuid!" },
    pathing: { __type: "json!", __args: { path: "String" } },
    section: { __type: "String!" },
    slug: { __type: "String!" },
    spaces_usages: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usages_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    title: { __type: "String!" },
    type: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  spaces_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "spaces_aggregate_fields" },
    nodes: { __type: "[spaces!]!" },
  },
  spaces_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "spaces_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[spaces_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "spaces_max_fields" },
    min: { __type: "spaces_min_fields" },
    stddev: { __type: "spaces_stddev_fields" },
    stddev_pop: { __type: "spaces_stddev_pop_fields" },
    stddev_samp: { __type: "spaces_stddev_samp_fields" },
    sum: { __type: "spaces_sum_fields" },
    var_pop: { __type: "spaces_var_pop_fields" },
    var_samp: { __type: "spaces_var_samp_fields" },
    variance: { __type: "spaces_variance_fields" },
  },
  spaces_aggregate_order_by: {
    avg: { __type: "spaces_avg_order_by" },
    count: { __type: "order_by" },
    max: { __type: "spaces_max_order_by" },
    min: { __type: "spaces_min_order_by" },
    stddev: { __type: "spaces_stddev_order_by" },
    stddev_pop: { __type: "spaces_stddev_pop_order_by" },
    stddev_samp: { __type: "spaces_stddev_samp_order_by" },
    sum: { __type: "spaces_sum_order_by" },
    var_pop: { __type: "spaces_var_pop_order_by" },
    var_samp: { __type: "spaces_var_samp_order_by" },
    variance: { __type: "spaces_variance_order_by" },
  },
  spaces_arr_rel_insert_input: {
    data: { __type: "[spaces_insert_input!]!" },
    on_conflict: { __type: "spaces_on_conflict" },
  },
  spaces_avg_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_avg_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_bool_exp: {
    _and: { __type: "[spaces_bool_exp!]" },
    _not: { __type: "spaces_bool_exp" },
    _or: { __type: "[spaces_bool_exp!]" },
    available: { __type: "Boolean_comparison_exp" },
    brand: { __type: "brands_bool_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    building: { __type: "String_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    floor: { __type: "Int_comparison_exp" },
    floor_plan: { __type: "floor_plans_bool_exp" },
    floor_plan_grid: { __type: "floor_plan_grid_bool_exp" },
    floor_plan_uuid: { __type: "uuid_comparison_exp" },
    grid_uuid: { __type: "uuid_comparison_exp" },
    occupancy: { __type: "Int_comparison_exp" },
    outlet: { __type: "outlets_bool_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    pathing: { __type: "json_comparison_exp" },
    section: { __type: "String_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    spaces_usages: { __type: "spaces_usage_bool_exp" },
    title: { __type: "String_comparison_exp" },
    type: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  spaces_guests: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    guest_uuid: { __type: "uuid!" },
    invited_by_uuid: { __type: "uuid!" },
    outlet_uuid: { __type: "uuid!" },
    space_usage_uuid: { __type: "uuid!" },
    space_uuid: { __type: "uuid!" },
    spaces_usage: { __type: "spaces_usage!" },
    updated_at: { __type: "timestamptz!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  spaces_guests_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "spaces_guests_aggregate_fields" },
    nodes: { __type: "[spaces_guests!]!" },
  },
  spaces_guests_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[spaces_guests_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "spaces_guests_max_fields" },
    min: { __type: "spaces_guests_min_fields" },
  },
  spaces_guests_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "spaces_guests_max_order_by" },
    min: { __type: "spaces_guests_min_order_by" },
  },
  spaces_guests_arr_rel_insert_input: {
    data: { __type: "[spaces_guests_insert_input!]!" },
    on_conflict: { __type: "spaces_guests_on_conflict" },
  },
  spaces_guests_bool_exp: {
    _and: { __type: "[spaces_guests_bool_exp!]" },
    _not: { __type: "spaces_guests_bool_exp" },
    _or: { __type: "[spaces_guests_bool_exp!]" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    guest_uuid: { __type: "uuid_comparison_exp" },
    invited_by_uuid: { __type: "uuid_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    space_usage_uuid: { __type: "uuid_comparison_exp" },
    space_uuid: { __type: "uuid_comparison_exp" },
    spaces_usage: { __type: "spaces_usage_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  spaces_guests_insert_input: {
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    invited_by_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    spaces_usage: { __type: "spaces_usage_obj_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_guests_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    invited_by_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_guests_max_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_guests_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    invited_by_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_guests_min_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_guests_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[spaces_guests!]!" },
  },
  spaces_guests_on_conflict: {
    constraint: { __type: "spaces_guests_constraint!" },
    update_columns: { __type: "[spaces_guests_update_column!]!" },
    where: { __type: "spaces_guests_bool_exp" },
  },
  spaces_guests_order_by: {
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    spaces_usage: { __type: "spaces_usage_order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_guests_pk_columns_input: { uuid: { __type: "uuid!" } },
  spaces_guests_set_input: {
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    invited_by_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_inc_input: { floor: { __type: "Int" }, occupancy: { __type: "Int" } },
  spaces_insert_input: {
    available: { __type: "Boolean" },
    brand: { __type: "brands_obj_rel_insert_input" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    floor: { __type: "Int" },
    floor_plan: { __type: "floor_plans_obj_rel_insert_input" },
    floor_plan_grid: { __type: "floor_plan_grid_obj_rel_insert_input" },
    floor_plan_uuid: { __type: "uuid" },
    grid_uuid: { __type: "uuid" },
    occupancy: { __type: "Int" },
    outlet: { __type: "outlets_obj_rel_insert_input" },
    outlet_uuid: { __type: "uuid" },
    pathing: { __type: "json" },
    section: { __type: "String" },
    slug: { __type: "String" },
    spaces_usages: { __type: "spaces_usage_arr_rel_insert_input" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  spaces_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    floor: { __type: "Int" },
    floor_plan_uuid: { __type: "uuid" },
    grid_uuid: { __type: "uuid" },
    occupancy: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    section: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  spaces_max_order_by: {
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    floor: { __type: "order_by" },
    floor_plan_uuid: { __type: "order_by" },
    grid_uuid: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    section: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    floor: { __type: "Int" },
    floor_plan_uuid: { __type: "uuid" },
    grid_uuid: { __type: "uuid" },
    occupancy: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    section: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  spaces_min_order_by: {
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    floor: { __type: "order_by" },
    floor_plan_uuid: { __type: "order_by" },
    grid_uuid: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    section: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[spaces!]!" },
  },
  spaces_obj_rel_insert_input: {
    data: { __type: "spaces_insert_input!" },
    on_conflict: { __type: "spaces_on_conflict" },
  },
  spaces_on_conflict: {
    constraint: { __type: "spaces_constraint!" },
    update_columns: { __type: "[spaces_update_column!]!" },
    where: { __type: "spaces_bool_exp" },
  },
  spaces_order_by: {
    available: { __type: "order_by" },
    brand: { __type: "brands_order_by" },
    brand_uuid: { __type: "order_by" },
    building: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    floor: { __type: "order_by" },
    floor_plan: { __type: "floor_plans_order_by" },
    floor_plan_grid: { __type: "floor_plan_grid_order_by" },
    floor_plan_uuid: { __type: "order_by" },
    grid_uuid: { __type: "order_by" },
    occupancy: { __type: "order_by" },
    outlet: { __type: "outlets_order_by" },
    outlet_uuid: { __type: "order_by" },
    pathing: { __type: "order_by" },
    section: { __type: "order_by" },
    slug: { __type: "order_by" },
    spaces_usages_aggregate: { __type: "spaces_usage_aggregate_order_by" },
    title: { __type: "order_by" },
    type: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_pk_columns_input: { uuid: { __type: "uuid!" } },
  spaces_set_input: {
    available: { __type: "Boolean" },
    brand_uuid: { __type: "uuid" },
    building: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    floor: { __type: "Int" },
    floor_plan_uuid: { __type: "uuid" },
    grid_uuid: { __type: "uuid" },
    occupancy: { __type: "Int" },
    outlet_uuid: { __type: "uuid" },
    pathing: { __type: "json" },
    section: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    type: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  spaces_stddev_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_stddev_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_stddev_pop_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_stddev_pop_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_stddev_samp_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_stddev_samp_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_sum_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Int" },
    occupancy: { __type: "Int" },
  },
  spaces_sum_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_usage: {
    __typename: { __type: "String!" },
    active: { __type: "Boolean!" },
    brand_uuid: { __type: "uuid!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    guest: { __type: "guests!" },
    guest_uuid: { __type: "uuid!" },
    outlet_uuid: { __type: "uuid!" },
    pass: { __type: "passes!" },
    pass_uuid: { __type: "uuid!" },
    permanent: { __type: "Boolean!" },
    releasable: { __type: "Boolean!" },
    released: { __type: "Boolean!" },
    released_at: { __type: "timestamptz!" },
    reservation: { __type: "reservations!" },
    reservation_end: { __type: "timestamptz!" },
    reservation_start: { __type: "timestamptz!" },
    reservation_uuid: { __type: "uuid!" },
    space: { __type: "spaces!" },
    space_uuid: { __type: "uuid!" },
    spaces_guests: {
      __type: "[spaces_guests!]!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    spaces_guests_aggregate: {
      __type: "spaces_guests_aggregate!",
      __args: {
        distinct_on: "[spaces_guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_guests_order_by!]",
        where: "spaces_guests_bool_exp",
      },
    },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  spaces_usage_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "spaces_usage_aggregate_fields" },
    nodes: { __type: "[spaces_usage!]!" },
  },
  spaces_usage_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[spaces_usage_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "spaces_usage_max_fields" },
    min: { __type: "spaces_usage_min_fields" },
  },
  spaces_usage_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "spaces_usage_max_order_by" },
    min: { __type: "spaces_usage_min_order_by" },
  },
  spaces_usage_arr_rel_insert_input: {
    data: { __type: "[spaces_usage_insert_input!]!" },
    on_conflict: { __type: "spaces_usage_on_conflict" },
  },
  spaces_usage_bool_exp: {
    _and: { __type: "[spaces_usage_bool_exp!]" },
    _not: { __type: "spaces_usage_bool_exp" },
    _or: { __type: "[spaces_usage_bool_exp!]" },
    active: { __type: "Boolean_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    guest: { __type: "guests_bool_exp" },
    guest_uuid: { __type: "uuid_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    pass: { __type: "passes_bool_exp" },
    pass_uuid: { __type: "uuid_comparison_exp" },
    permanent: { __type: "Boolean_comparison_exp" },
    releasable: { __type: "Boolean_comparison_exp" },
    released: { __type: "Boolean_comparison_exp" },
    released_at: { __type: "timestamptz_comparison_exp" },
    reservation: { __type: "reservations_bool_exp" },
    reservation_end: { __type: "timestamptz_comparison_exp" },
    reservation_start: { __type: "timestamptz_comparison_exp" },
    reservation_uuid: { __type: "uuid_comparison_exp" },
    space: { __type: "spaces_bool_exp" },
    space_uuid: { __type: "uuid_comparison_exp" },
    spaces_guests: { __type: "spaces_guests_bool_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  spaces_usage_insert_input: {
    active: { __type: "Boolean" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    guest: { __type: "guests_obj_rel_insert_input" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    pass: { __type: "passes_obj_rel_insert_input" },
    pass_uuid: { __type: "uuid" },
    permanent: { __type: "Boolean" },
    releasable: { __type: "Boolean" },
    released: { __type: "Boolean" },
    released_at: { __type: "timestamptz" },
    reservation: { __type: "reservations_obj_rel_insert_input" },
    reservation_end: { __type: "timestamptz" },
    reservation_start: { __type: "timestamptz" },
    reservation_uuid: { __type: "uuid" },
    space: { __type: "spaces_obj_rel_insert_input" },
    space_uuid: { __type: "uuid" },
    spaces_guests: { __type: "spaces_guests_arr_rel_insert_input" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_usage_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    pass_uuid: { __type: "uuid" },
    released_at: { __type: "timestamptz" },
    reservation_end: { __type: "timestamptz" },
    reservation_start: { __type: "timestamptz" },
    reservation_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_usage_max_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    pass_uuid: { __type: "order_by" },
    released_at: { __type: "order_by" },
    reservation_end: { __type: "order_by" },
    reservation_start: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_usage_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    pass_uuid: { __type: "uuid" },
    released_at: { __type: "timestamptz" },
    reservation_end: { __type: "timestamptz" },
    reservation_start: { __type: "timestamptz" },
    reservation_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_usage_min_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    pass_uuid: { __type: "order_by" },
    released_at: { __type: "order_by" },
    reservation_end: { __type: "order_by" },
    reservation_start: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_usage_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[spaces_usage!]!" },
  },
  spaces_usage_obj_rel_insert_input: {
    data: { __type: "spaces_usage_insert_input!" },
    on_conflict: { __type: "spaces_usage_on_conflict" },
  },
  spaces_usage_on_conflict: {
    constraint: { __type: "spaces_usage_constraint!" },
    update_columns: { __type: "[spaces_usage_update_column!]!" },
    where: { __type: "spaces_usage_bool_exp" },
  },
  spaces_usage_order_by: {
    active: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    guest: { __type: "guests_order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    pass: { __type: "passes_order_by" },
    pass_uuid: { __type: "order_by" },
    permanent: { __type: "order_by" },
    releasable: { __type: "order_by" },
    released: { __type: "order_by" },
    released_at: { __type: "order_by" },
    reservation: { __type: "reservations_order_by" },
    reservation_end: { __type: "order_by" },
    reservation_start: { __type: "order_by" },
    reservation_uuid: { __type: "order_by" },
    space: { __type: "spaces_order_by" },
    space_uuid: { __type: "order_by" },
    spaces_guests_aggregate: { __type: "spaces_guests_aggregate_order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  spaces_usage_pk_columns_input: { uuid: { __type: "uuid!" } },
  spaces_usage_set_input: {
    active: { __type: "Boolean" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    pass_uuid: { __type: "uuid" },
    permanent: { __type: "Boolean" },
    releasable: { __type: "Boolean" },
    released: { __type: "Boolean" },
    released_at: { __type: "timestamptz" },
    reservation_end: { __type: "timestamptz" },
    reservation_start: { __type: "timestamptz" },
    reservation_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  spaces_var_pop_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_var_pop_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_var_samp_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_var_samp_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  spaces_variance_fields: {
    __typename: { __type: "String!" },
    floor: { __type: "Float" },
    occupancy: { __type: "Float" },
  },
  spaces_variance_order_by: {
    floor: { __type: "order_by" },
    occupancy: { __type: "order_by" },
  },
  storage_buckets: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "String!" },
    name: { __type: "String!" },
    owner: { __type: "uuid" },
    public: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
  },
  storage_buckets_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "storage_buckets_aggregate_fields" },
    nodes: { __type: "[storage_buckets!]!" },
  },
  storage_buckets_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[storage_buckets_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "storage_buckets_max_fields" },
    min: { __type: "storage_buckets_min_fields" },
  },
  storage_buckets_bool_exp: {
    _and: { __type: "[storage_buckets_bool_exp!]" },
    _not: { __type: "storage_buckets_bool_exp" },
    _or: { __type: "[storage_buckets_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    id: { __type: "String_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    owner: { __type: "uuid_comparison_exp" },
    public: { __type: "Boolean_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
  },
  storage_buckets_insert_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "String" },
    name: { __type: "String" },
    owner: { __type: "uuid" },
    public: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
  },
  storage_buckets_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "String" },
    name: { __type: "String" },
    owner: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
  },
  storage_buckets_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    id: { __type: "String" },
    name: { __type: "String" },
    owner: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
  },
  storage_buckets_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[storage_buckets!]!" },
  },
  storage_buckets_on_conflict: {
    constraint: { __type: "storage_buckets_constraint!" },
    update_columns: { __type: "[storage_buckets_update_column!]!" },
    where: { __type: "storage_buckets_bool_exp" },
  },
  storage_buckets_order_by: {
    created_at: { __type: "order_by" },
    id: { __type: "order_by" },
    name: { __type: "order_by" },
    owner: { __type: "order_by" },
    public: { __type: "order_by" },
    updated_at: { __type: "order_by" },
  },
  storage_buckets_pk_columns_input: { id: { __type: "String!" } },
  storage_buckets_set_input: {
    created_at: { __type: "timestamptz" },
    id: { __type: "String" },
    name: { __type: "String" },
    owner: { __type: "uuid" },
    public: { __type: "Boolean" },
    updated_at: { __type: "timestamptz" },
  },
  stripe_transfers: {
    __typename: { __type: "String!" },
    amount: { __type: "String!" },
    brand_currency: { __type: "String!" },
    brand_stripe_id: { __type: "String!" },
    brand_uuid: { __type: "uuid!" },
    created_at: { __type: "timestamptz!" },
    invoice: { __type: "invoice!" },
    invoice_uuid: { __type: "uuid!" },
    stripe_transfer_id: { __type: "String!" },
    transfer_snapshot: { __type: "json!", __args: { path: "String" } },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  stripe_transfers_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "stripe_transfers_aggregate_fields" },
    nodes: { __type: "[stripe_transfers!]!" },
  },
  stripe_transfers_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[stripe_transfers_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "stripe_transfers_max_fields" },
    min: { __type: "stripe_transfers_min_fields" },
  },
  stripe_transfers_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "stripe_transfers_max_order_by" },
    min: { __type: "stripe_transfers_min_order_by" },
  },
  stripe_transfers_arr_rel_insert_input: {
    data: { __type: "[stripe_transfers_insert_input!]!" },
    on_conflict: { __type: "stripe_transfers_on_conflict" },
  },
  stripe_transfers_bool_exp: {
    _and: { __type: "[stripe_transfers_bool_exp!]" },
    _not: { __type: "stripe_transfers_bool_exp" },
    _or: { __type: "[stripe_transfers_bool_exp!]" },
    amount: { __type: "String_comparison_exp" },
    brand_currency: { __type: "String_comparison_exp" },
    brand_stripe_id: { __type: "String_comparison_exp" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    invoice: { __type: "invoice_bool_exp" },
    invoice_uuid: { __type: "uuid_comparison_exp" },
    stripe_transfer_id: { __type: "String_comparison_exp" },
    transfer_snapshot: { __type: "json_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  stripe_transfers_insert_input: {
    amount: { __type: "String" },
    brand_currency: { __type: "String" },
    brand_stripe_id: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    invoice: { __type: "invoice_obj_rel_insert_input" },
    invoice_uuid: { __type: "uuid" },
    stripe_transfer_id: { __type: "String" },
    transfer_snapshot: { __type: "json" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  stripe_transfers_max_fields: {
    __typename: { __type: "String!" },
    amount: { __type: "String" },
    brand_currency: { __type: "String" },
    brand_stripe_id: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    invoice_uuid: { __type: "uuid" },
    stripe_transfer_id: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  stripe_transfers_max_order_by: {
    amount: { __type: "order_by" },
    brand_currency: { __type: "order_by" },
    brand_stripe_id: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    invoice_uuid: { __type: "order_by" },
    stripe_transfer_id: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  stripe_transfers_min_fields: {
    __typename: { __type: "String!" },
    amount: { __type: "String" },
    brand_currency: { __type: "String" },
    brand_stripe_id: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    invoice_uuid: { __type: "uuid" },
    stripe_transfer_id: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  stripe_transfers_min_order_by: {
    amount: { __type: "order_by" },
    brand_currency: { __type: "order_by" },
    brand_stripe_id: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    invoice_uuid: { __type: "order_by" },
    stripe_transfer_id: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  stripe_transfers_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[stripe_transfers!]!" },
  },
  stripe_transfers_on_conflict: {
    constraint: { __type: "stripe_transfers_constraint!" },
    update_columns: { __type: "[stripe_transfers_update_column!]!" },
    where: { __type: "stripe_transfers_bool_exp" },
  },
  stripe_transfers_order_by: {
    amount: { __type: "order_by" },
    brand_currency: { __type: "order_by" },
    brand_stripe_id: { __type: "order_by" },
    brand_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    invoice: { __type: "invoice_order_by" },
    invoice_uuid: { __type: "order_by" },
    stripe_transfer_id: { __type: "order_by" },
    transfer_snapshot: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  stripe_transfers_pk_columns_input: { uuid: { __type: "uuid!" } },
  stripe_transfers_set_input: {
    amount: { __type: "String" },
    brand_currency: { __type: "String" },
    brand_stripe_id: { __type: "String" },
    brand_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    invoice_uuid: { __type: "uuid" },
    stripe_transfer_id: { __type: "String" },
    transfer_snapshot: { __type: "json" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  subscriptions: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    date_end: { __type: "date!" },
    date_start: { __type: "date!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    name: { __type: "String!" },
    quantity: { __type: "String!" },
    stripe_id: { __type: "String!" },
    stripe_status: { __type: "String!" },
    trial_ends_at: { __type: "date!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  subscriptions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "subscriptions_aggregate_fields" },
    nodes: { __type: "[subscriptions!]!" },
  },
  subscriptions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[subscriptions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "subscriptions_max_fields" },
    min: { __type: "subscriptions_min_fields" },
  },
  subscriptions_bool_exp: {
    _and: { __type: "[subscriptions_bool_exp!]" },
    _not: { __type: "subscriptions_bool_exp" },
    _or: { __type: "[subscriptions_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_end: { __type: "date_comparison_exp" },
    date_start: { __type: "date_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    quantity: { __type: "String_comparison_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    stripe_status: { __type: "String_comparison_exp" },
    trial_ends_at: { __type: "date_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  subscriptions_insert_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  subscriptions_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  subscriptions_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  subscriptions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[subscriptions!]!" },
  },
  subscriptions_on_conflict: {
    constraint: { __type: "subscriptions_constraint!" },
    update_columns: { __type: "[subscriptions_update_column!]!" },
    where: { __type: "subscriptions_bool_exp" },
  },
  subscriptions_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  subscriptions_pk_columns_input: { uuid: { __type: "uuid!" } },
  subscriptions_set_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  supabase_functions_hooks: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    hook_name: { __type: "String!" },
    hook_table_id: { __type: "Int!" },
    id: { __type: "bigint!" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "supabase_functions_hooks_aggregate_fields" },
    nodes: { __type: "[supabase_functions_hooks!]!" },
  },
  supabase_functions_hooks_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "supabase_functions_hooks_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[supabase_functions_hooks_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "supabase_functions_hooks_max_fields" },
    min: { __type: "supabase_functions_hooks_min_fields" },
    stddev: { __type: "supabase_functions_hooks_stddev_fields" },
    stddev_pop: { __type: "supabase_functions_hooks_stddev_pop_fields" },
    stddev_samp: { __type: "supabase_functions_hooks_stddev_samp_fields" },
    sum: { __type: "supabase_functions_hooks_sum_fields" },
    var_pop: { __type: "supabase_functions_hooks_var_pop_fields" },
    var_samp: { __type: "supabase_functions_hooks_var_samp_fields" },
    variance: { __type: "supabase_functions_hooks_variance_fields" },
  },
  supabase_functions_hooks_avg_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_bool_exp: {
    _and: { __type: "[supabase_functions_hooks_bool_exp!]" },
    _not: { __type: "supabase_functions_hooks_bool_exp" },
    _or: { __type: "[supabase_functions_hooks_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    hook_name: { __type: "String_comparison_exp" },
    hook_table_id: { __type: "Int_comparison_exp" },
    id: { __type: "bigint_comparison_exp" },
    request_id: { __type: "bigint_comparison_exp" },
  },
  supabase_functions_hooks_inc_input: {
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_insert_input: {
    created_at: { __type: "timestamptz" },
    hook_name: { __type: "String" },
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    hook_name: { __type: "String" },
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    hook_name: { __type: "String" },
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[supabase_functions_hooks!]!" },
  },
  supabase_functions_hooks_on_conflict: {
    constraint: { __type: "supabase_functions_hooks_constraint!" },
    update_columns: { __type: "[supabase_functions_hooks_update_column!]!" },
    where: { __type: "supabase_functions_hooks_bool_exp" },
  },
  supabase_functions_hooks_order_by: {
    created_at: { __type: "order_by" },
    hook_name: { __type: "order_by" },
    hook_table_id: { __type: "order_by" },
    id: { __type: "order_by" },
    request_id: { __type: "order_by" },
  },
  supabase_functions_hooks_pk_columns_input: { id: { __type: "bigint!" } },
  supabase_functions_hooks_set_input: {
    created_at: { __type: "timestamptz" },
    hook_name: { __type: "String" },
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_stddev_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_stddev_pop_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_stddev_samp_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_sum_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Int" },
    id: { __type: "bigint" },
    request_id: { __type: "bigint" },
  },
  supabase_functions_hooks_var_pop_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_var_samp_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  supabase_functions_hooks_variance_fields: {
    __typename: { __type: "String!" },
    hook_table_id: { __type: "Float" },
    id: { __type: "Float" },
    request_id: { __type: "Float" },
  },
  tags: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    description: { __type: "String!" },
    slug: { __type: "String!" },
    title: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  tags_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "tags_aggregate_fields" },
    nodes: { __type: "[tags!]!" },
  },
  tags_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[tags_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "tags_max_fields" },
    min: { __type: "tags_min_fields" },
  },
  tags_bool_exp: {
    _and: { __type: "[tags_bool_exp!]" },
    _not: { __type: "tags_bool_exp" },
    _or: { __type: "[tags_bool_exp!]" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    description: { __type: "String_comparison_exp" },
    slug: { __type: "String_comparison_exp" },
    title: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  tags_insert_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  tags_max_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  tags_min_fields: {
    __typename: { __type: "String!" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  tags_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[tags!]!" },
  },
  tags_on_conflict: {
    constraint: { __type: "tags_constraint!" },
    update_columns: { __type: "[tags_update_column!]!" },
    where: { __type: "tags_bool_exp" },
  },
  tags_order_by: {
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    description: { __type: "order_by" },
    slug: { __type: "order_by" },
    title: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  tags_pk_columns_input: { uuid: { __type: "uuid!" } },
  tags_set_input: {
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    description: { __type: "String" },
    slug: { __type: "String" },
    title: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_memberships: {
    __typename: { __type: "String!" },
    accepted: { __type: "Boolean!" },
    created_at: { __type: "timestamptz!" },
    email: { __type: "String!" },
    invited_by_uuid: { __type: "uuid" },
    team: { __type: "teams!" },
    team_schedules: {
      __type: "[team_schedules!]!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_aggregate: {
      __type: "team_schedules_aggregate!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_uuid: { __type: "uuid!" },
    token: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users" },
    userByUserUuid: { __type: "users" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid!" },
  },
  team_memberships_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "team_memberships_aggregate_fields" },
    nodes: { __type: "[team_memberships!]!" },
  },
  team_memberships_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[team_memberships_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "team_memberships_max_fields" },
    min: { __type: "team_memberships_min_fields" },
  },
  team_memberships_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "team_memberships_max_order_by" },
    min: { __type: "team_memberships_min_order_by" },
  },
  team_memberships_arr_rel_insert_input: {
    data: { __type: "[team_memberships_insert_input!]!" },
    on_conflict: { __type: "team_memberships_on_conflict" },
  },
  team_memberships_bool_exp: {
    _and: { __type: "[team_memberships_bool_exp!]" },
    _not: { __type: "team_memberships_bool_exp" },
    _or: { __type: "[team_memberships_bool_exp!]" },
    accepted: { __type: "Boolean_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    email: { __type: "String_comparison_exp" },
    invited_by_uuid: { __type: "uuid_comparison_exp" },
    team: { __type: "teams_bool_exp" },
    team_schedules: { __type: "team_schedules_bool_exp" },
    team_uuid: { __type: "uuid_comparison_exp" },
    token: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    userByUserUuid: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  team_memberships_insert_input: {
    accepted: { __type: "Boolean" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    invited_by_uuid: { __type: "uuid" },
    team: { __type: "teams_obj_rel_insert_input" },
    team_schedules: { __type: "team_schedules_arr_rel_insert_input" },
    team_uuid: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    userByUserUuid: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  team_memberships_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    invited_by_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  team_memberships_max_order_by: {
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    team_uuid: { __type: "order_by" },
    token: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_memberships_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    invited_by_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  team_memberships_min_order_by: {
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    team_uuid: { __type: "order_by" },
    token: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_memberships_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[team_memberships!]!" },
  },
  team_memberships_obj_rel_insert_input: {
    data: { __type: "team_memberships_insert_input!" },
    on_conflict: { __type: "team_memberships_on_conflict" },
  },
  team_memberships_on_conflict: {
    constraint: { __type: "team_memberships_constraint!" },
    update_columns: { __type: "[team_memberships_update_column!]!" },
    where: { __type: "team_memberships_bool_exp" },
  },
  team_memberships_order_by: {
    accepted: { __type: "order_by" },
    created_at: { __type: "order_by" },
    email: { __type: "order_by" },
    invited_by_uuid: { __type: "order_by" },
    team: { __type: "teams_order_by" },
    team_schedules_aggregate: { __type: "team_schedules_aggregate_order_by" },
    team_uuid: { __type: "order_by" },
    token: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    userByUserUuid: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_memberships_pk_columns_input: { uuid: { __type: "uuid!" } },
  team_memberships_set_input: {
    accepted: { __type: "Boolean" },
    created_at: { __type: "timestamptz" },
    email: { __type: "String" },
    invited_by_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    token: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  team_roles: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  team_roles_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "team_roles_aggregate_fields" },
    nodes: { __type: "[team_roles!]!" },
  },
  team_roles_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[team_roles_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "team_roles_max_fields" },
    min: { __type: "team_roles_min_fields" },
  },
  team_roles_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "team_roles_max_order_by" },
    min: { __type: "team_roles_min_order_by" },
  },
  team_roles_arr_rel_insert_input: {
    data: { __type: "[team_roles_insert_input!]!" },
  },
  team_roles_bool_exp: {
    _and: { __type: "[team_roles_bool_exp!]" },
    _not: { __type: "team_roles_bool_exp" },
    _or: { __type: "[team_roles_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    role_uuid: { __type: "uuid_comparison_exp" },
  },
  team_roles_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  team_roles_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  team_roles_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  team_roles_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  team_roles_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  team_roles_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[team_roles!]!" },
  },
  team_roles_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  team_roles_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  team_schedules: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    date_schedule: { __type: "date!" },
    guest_uuid: { __type: "uuid!" },
    outlet_uuid: { __type: "uuid!" },
    space_usage_uuid: { __type: "uuid!" },
    space_uuid: { __type: "uuid!" },
    team: { __type: "teams!" },
    team_member_uuid: { __type: "uuid!" },
    team_membership: { __type: "team_memberships!" },
    team_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  team_schedules_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "team_schedules_aggregate_fields" },
    nodes: { __type: "[team_schedules!]!" },
  },
  team_schedules_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[team_schedules_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "team_schedules_max_fields" },
    min: { __type: "team_schedules_min_fields" },
  },
  team_schedules_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "team_schedules_max_order_by" },
    min: { __type: "team_schedules_min_order_by" },
  },
  team_schedules_arr_rel_insert_input: {
    data: { __type: "[team_schedules_insert_input!]!" },
    on_conflict: { __type: "team_schedules_on_conflict" },
  },
  team_schedules_bool_exp: {
    _and: { __type: "[team_schedules_bool_exp!]" },
    _not: { __type: "team_schedules_bool_exp" },
    _or: { __type: "[team_schedules_bool_exp!]" },
    brand_uuid: { __type: "uuid_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_schedule: { __type: "date_comparison_exp" },
    guest_uuid: { __type: "uuid_comparison_exp" },
    outlet_uuid: { __type: "uuid_comparison_exp" },
    space_usage_uuid: { __type: "uuid_comparison_exp" },
    space_uuid: { __type: "uuid_comparison_exp" },
    team: { __type: "teams_bool_exp" },
    team_member_uuid: { __type: "uuid_comparison_exp" },
    team_membership: { __type: "team_memberships_bool_exp" },
    team_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  team_schedules_insert_input: {
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_schedule: { __type: "date" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    team: { __type: "teams_obj_rel_insert_input" },
    team_member_uuid: { __type: "uuid" },
    team_membership: { __type: "team_memberships_obj_rel_insert_input" },
    team_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_schedules_max_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_schedule: { __type: "date" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    team_member_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_schedules_max_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_schedule: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    team_member_uuid: { __type: "order_by" },
    team_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_schedules_min_fields: {
    __typename: { __type: "String!" },
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_schedule: { __type: "date" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    team_member_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_schedules_min_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_schedule: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    team_member_uuid: { __type: "order_by" },
    team_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_schedules_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[team_schedules!]!" },
  },
  team_schedules_on_conflict: {
    constraint: { __type: "team_schedules_constraint!" },
    update_columns: { __type: "[team_schedules_update_column!]!" },
    where: { __type: "team_schedules_bool_exp" },
  },
  team_schedules_order_by: {
    brand_uuid: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    date_schedule: { __type: "order_by" },
    guest_uuid: { __type: "order_by" },
    outlet_uuid: { __type: "order_by" },
    space_usage_uuid: { __type: "order_by" },
    space_uuid: { __type: "order_by" },
    team: { __type: "teams_order_by" },
    team_member_uuid: { __type: "order_by" },
    team_membership: { __type: "team_memberships_order_by" },
    team_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_schedules_pk_columns_input: { uuid: { __type: "uuid!" } },
  team_schedules_set_input: {
    brand_uuid: { __type: "uuid" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    date_schedule: { __type: "date" },
    guest_uuid: { __type: "uuid" },
    outlet_uuid: { __type: "uuid" },
    space_usage_uuid: { __type: "uuid" },
    space_uuid: { __type: "uuid" },
    team_member_uuid: { __type: "uuid" },
    team_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_subscriptions: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_subscriptions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "team_subscriptions_aggregate_fields" },
    nodes: { __type: "[team_subscriptions!]!" },
  },
  team_subscriptions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[team_subscriptions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "team_subscriptions_max_fields" },
    min: { __type: "team_subscriptions_min_fields" },
  },
  team_subscriptions_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "team_subscriptions_max_order_by" },
    min: { __type: "team_subscriptions_min_order_by" },
  },
  team_subscriptions_arr_rel_insert_input: {
    data: { __type: "[team_subscriptions_insert_input!]!" },
  },
  team_subscriptions_bool_exp: {
    _and: { __type: "[team_subscriptions_bool_exp!]" },
    _not: { __type: "team_subscriptions_bool_exp" },
    _or: { __type: "[team_subscriptions_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_end: { __type: "date_comparison_exp" },
    date_start: { __type: "date_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    quantity: { __type: "String_comparison_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    stripe_status: { __type: "String_comparison_exp" },
    trial_ends_at: { __type: "date_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  team_subscriptions_insert_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_subscriptions_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_subscriptions_max_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_subscriptions_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  team_subscriptions_min_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_subscriptions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[team_subscriptions!]!" },
  },
  team_subscriptions_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  team_subscriptions_set_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  teams: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    business_id: { __type: "String" },
    card_brand: { __type: "String" },
    card_country: { __type: "String" },
    card_last_4: { __type: "String" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    currency_code: { __type: "bpchar!" },
    current_billing_plan: { __type: "String" },
    locale: { __type: "String!" },
    name: { __type: "String!" },
    roles: {
      __type: "[team_roles!]!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    roles_aggregate: {
      __type: "team_roles_aggregate!",
      __args: {
        distinct_on: "[team_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_roles_order_by!]",
        where: "team_roles_bool_exp",
      },
    },
    slug: { __type: "String!" },
    stripe_id: { __type: "String" },
    subscriptions: {
      __type: "[team_subscriptions!]!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    subscriptions_aggregate: {
      __type: "team_subscriptions_aggregate!",
      __args: {
        distinct_on: "[team_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_subscriptions_order_by!]",
        where: "team_subscriptions_bool_exp",
      },
    },
    team_memberships: {
      __type: "[team_memberships!]!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_schedules: {
      __type: "[team_schedules!]!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    team_schedules_aggregate: {
      __type: "team_schedules_aggregate!",
      __args: {
        distinct_on: "[team_schedules_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_schedules_order_by!]",
        where: "team_schedules_bool_exp",
      },
    },
    timezone: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    uuid: { __type: "uuid!" },
  },
  teams_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "teams_aggregate_fields" },
    nodes: { __type: "[teams!]!" },
  },
  teams_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[teams_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "teams_max_fields" },
    min: { __type: "teams_min_fields" },
  },
  teams_bool_exp: {
    _and: { __type: "[teams_bool_exp!]" },
    _not: { __type: "teams_bool_exp" },
    _or: { __type: "[teams_bool_exp!]" },
    avatar_url: { __type: "String_comparison_exp" },
    billing_address: { __type: "String_comparison_exp" },
    billing_address_2: { __type: "String_comparison_exp" },
    billing_city: { __type: "String_comparison_exp" },
    billing_country_code: { __type: "String_comparison_exp" },
    billing_state: { __type: "String_comparison_exp" },
    billing_zip: { __type: "String_comparison_exp" },
    bio: { __type: "String_comparison_exp" },
    business_id: { __type: "String_comparison_exp" },
    card_brand: { __type: "String_comparison_exp" },
    card_country: { __type: "String_comparison_exp" },
    card_last_4: { __type: "String_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    currency_code: { __type: "bpchar_comparison_exp" },
    current_billing_plan: { __type: "String_comparison_exp" },
    locale: { __type: "String_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    roles: { __type: "team_roles_bool_exp" },
    slug: { __type: "String_comparison_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    subscriptions: { __type: "team_subscriptions_bool_exp" },
    team_memberships: { __type: "team_memberships_bool_exp" },
    team_schedules: { __type: "team_schedules_bool_exp" },
    timezone: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  teams_insert_input: {
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    business_id: { __type: "String" },
    card_brand: { __type: "String" },
    card_country: { __type: "String" },
    card_last_4: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    current_billing_plan: { __type: "String" },
    locale: { __type: "String" },
    name: { __type: "String" },
    roles: { __type: "team_roles_arr_rel_insert_input" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    subscriptions: { __type: "team_subscriptions_arr_rel_insert_input" },
    team_memberships: { __type: "team_memberships_arr_rel_insert_input" },
    team_schedules: { __type: "team_schedules_arr_rel_insert_input" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  teams_max_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    business_id: { __type: "String" },
    card_brand: { __type: "String" },
    card_country: { __type: "String" },
    card_last_4: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    current_billing_plan: { __type: "String" },
    locale: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  teams_min_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    business_id: { __type: "String" },
    card_brand: { __type: "String" },
    card_country: { __type: "String" },
    card_last_4: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    current_billing_plan: { __type: "String" },
    locale: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  teams_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[teams!]!" },
  },
  teams_obj_rel_insert_input: {
    data: { __type: "teams_insert_input!" },
    on_conflict: { __type: "teams_on_conflict" },
  },
  teams_on_conflict: {
    constraint: { __type: "teams_constraint!" },
    update_columns: { __type: "[teams_update_column!]!" },
    where: { __type: "teams_bool_exp" },
  },
  teams_order_by: {
    avatar_url: { __type: "order_by" },
    billing_address: { __type: "order_by" },
    billing_address_2: { __type: "order_by" },
    billing_city: { __type: "order_by" },
    billing_country_code: { __type: "order_by" },
    billing_state: { __type: "order_by" },
    billing_zip: { __type: "order_by" },
    bio: { __type: "order_by" },
    business_id: { __type: "order_by" },
    card_brand: { __type: "order_by" },
    card_country: { __type: "order_by" },
    card_last_4: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    current_billing_plan: { __type: "order_by" },
    locale: { __type: "order_by" },
    name: { __type: "order_by" },
    roles_aggregate: { __type: "team_roles_aggregate_order_by" },
    slug: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    subscriptions_aggregate: {
      __type: "team_subscriptions_aggregate_order_by",
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate_order_by",
    },
    team_schedules_aggregate: { __type: "team_schedules_aggregate_order_by" },
    timezone: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  teams_pk_columns_input: { uuid: { __type: "uuid!" } },
  teams_set_input: {
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    business_id: { __type: "String" },
    card_brand: { __type: "String" },
    card_country: { __type: "String" },
    card_last_4: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    current_billing_plan: { __type: "String" },
    locale: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  timestamptz_comparison_exp: {
    _eq: { __type: "timestamptz" },
    _gt: { __type: "timestamptz" },
    _gte: { __type: "timestamptz" },
    _in: { __type: "[timestamptz!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "timestamptz" },
    _lte: { __type: "timestamptz" },
    _neq: { __type: "timestamptz" },
    _nin: { __type: "[timestamptz!]" },
  },
  user_has_reservations: {
    __typename: { __type: "String!" },
    reservation_uuid: { __type: "uuid!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
  },
  user_has_reservations_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_has_reservations_aggregate_fields" },
    nodes: { __type: "[user_has_reservations!]!" },
  },
  user_has_reservations_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[user_has_reservations_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "user_has_reservations_max_fields" },
    min: { __type: "user_has_reservations_min_fields" },
  },
  user_has_reservations_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "user_has_reservations_max_order_by" },
    min: { __type: "user_has_reservations_min_order_by" },
  },
  user_has_reservations_arr_rel_insert_input: {
    data: { __type: "[user_has_reservations_insert_input!]!" },
    on_conflict: { __type: "user_has_reservations_on_conflict" },
  },
  user_has_reservations_bool_exp: {
    _and: { __type: "[user_has_reservations_bool_exp!]" },
    _not: { __type: "user_has_reservations_bool_exp" },
    _or: { __type: "[user_has_reservations_bool_exp!]" },
    reservation_uuid: { __type: "uuid_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
  },
  user_has_reservations_insert_input: {
    reservation_uuid: { __type: "uuid" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
  },
  user_has_reservations_max_fields: {
    __typename: { __type: "String!" },
    reservation_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  user_has_reservations_max_order_by: {
    reservation_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  user_has_reservations_min_fields: {
    __typename: { __type: "String!" },
    reservation_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  user_has_reservations_min_order_by: {
    reservation_uuid: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
  },
  user_has_reservations_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_has_reservations!]!" },
  },
  user_has_reservations_on_conflict: {
    constraint: { __type: "user_has_reservations_constraint!" },
    update_columns: { __type: "[user_has_reservations_update_column!]!" },
    where: { __type: "user_has_reservations_bool_exp" },
  },
  user_has_reservations_order_by: {
    reservation_uuid: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
  },
  user_has_reservations_pk_columns_input: {
    reservation_uuid: { __type: "uuid!" },
  },
  user_has_reservations_set_input: {
    reservation_uuid: { __type: "uuid" },
    user_uuid: { __type: "uuid" },
  },
  user_inbox: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_inbox_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_inbox_aggregate_fields" },
    nodes: { __type: "[user_inbox!]!" },
  },
  user_inbox_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[user_inbox_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "user_inbox_max_fields" },
    min: { __type: "user_inbox_min_fields" },
  },
  user_inbox_bool_exp: {
    _and: { __type: "[user_inbox_bool_exp!]" },
    _not: { __type: "user_inbox_bool_exp" },
    _or: { __type: "[user_inbox_bool_exp!]" },
    conversation_uuid: { __type: "uuid_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    pubsub_token: { __type: "String_comparison_exp" },
    request_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  user_inbox_insert_input: {
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_inbox_max_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_inbox_min_fields: {
    __typename: { __type: "String!" },
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_inbox_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_inbox!]!" },
  },
  user_inbox_obj_rel_insert_input: {
    data: { __type: "user_inbox_insert_input!" },
  },
  user_inbox_order_by: {
    conversation_uuid: { __type: "order_by" },
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    pubsub_token: { __type: "order_by" },
    request_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_inbox_set_input: {
    conversation_uuid: { __type: "uuid" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    pubsub_token: { __type: "String" },
    request_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json", __args: { path: "String" } },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_media_aggregate_fields" },
    nodes: { __type: "[user_media!]!" },
  },
  user_media_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "user_media_avg_fields" },
    count: {
      __type: "Int!",
      __args: { columns: "[user_media_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "user_media_max_fields" },
    min: { __type: "user_media_min_fields" },
    stddev: { __type: "user_media_stddev_fields" },
    stddev_pop: { __type: "user_media_stddev_pop_fields" },
    stddev_samp: { __type: "user_media_stddev_samp_fields" },
    sum: { __type: "user_media_sum_fields" },
    var_pop: { __type: "user_media_var_pop_fields" },
    var_samp: { __type: "user_media_var_samp_fields" },
    variance: { __type: "user_media_variance_fields" },
  },
  user_media_avg_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_bool_exp: {
    _and: { __type: "[user_media_bool_exp!]" },
    _not: { __type: "user_media_bool_exp" },
    _or: { __type: "[user_media_bool_exp!]" },
    collection_name: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    file_name: { __type: "String_comparison_exp" },
    index: { __type: "Int_comparison_exp" },
    mime_type: { __type: "String_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    properties: { __type: "json_comparison_exp" },
    s3_bucket_name: { __type: "String_comparison_exp" },
    s3_key: { __type: "String_comparison_exp" },
    size: { __type: "bigint_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  user_media_inc_input: {
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  user_media_insert_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media_max_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media_min_fields: {
    __typename: { __type: "String!" },
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_media!]!" },
  },
  user_media_obj_rel_insert_input: {
    data: { __type: "user_media_insert_input!" },
  },
  user_media_order_by: {
    collection_name: { __type: "order_by" },
    created_at: { __type: "order_by" },
    file_name: { __type: "order_by" },
    index: { __type: "order_by" },
    mime_type: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    properties: { __type: "order_by" },
    s3_bucket_name: { __type: "order_by" },
    s3_key: { __type: "order_by" },
    size: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_media_set_input: {
    collection_name: { __type: "String" },
    created_at: { __type: "timestamptz" },
    file_name: { __type: "String" },
    index: { __type: "Int" },
    mime_type: { __type: "String" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    properties: { __type: "json" },
    s3_bucket_name: { __type: "String" },
    s3_key: { __type: "String" },
    size: { __type: "bigint" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_media_stddev_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_stddev_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_stddev_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_sum_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Int" },
    size: { __type: "bigint" },
  },
  user_media_var_pop_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_var_samp_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_media_variance_fields: {
    __typename: { __type: "String!" },
    index: { __type: "Float" },
    size: { __type: "Float" },
  },
  user_roles: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  user_roles_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_roles_aggregate_fields" },
    nodes: { __type: "[user_roles!]!" },
  },
  user_roles_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[user_roles_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "user_roles_max_fields" },
    min: { __type: "user_roles_min_fields" },
  },
  user_roles_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "user_roles_max_order_by" },
    min: { __type: "user_roles_min_order_by" },
  },
  user_roles_arr_rel_insert_input: {
    data: { __type: "[user_roles_insert_input!]!" },
  },
  user_roles_bool_exp: {
    _and: { __type: "[user_roles_bool_exp!]" },
    _not: { __type: "user_roles_bool_exp" },
    _or: { __type: "[user_roles_bool_exp!]" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    role_uuid: { __type: "uuid_comparison_exp" },
  },
  user_roles_insert_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  user_roles_max_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  user_roles_max_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  user_roles_min_fields: {
    __typename: { __type: "String!" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  user_roles_min_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  user_roles_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_roles!]!" },
  },
  user_roles_order_by: {
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    role_uuid: { __type: "order_by" },
  },
  user_roles_set_input: {
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    role_uuid: { __type: "uuid" },
  },
  user_sessions: {
    __typename: { __type: "String!" },
    brand: { __type: "String!" },
    country_code: { __type: "bpchar!" },
    created_at: { __type: "timestamptz!" },
    device_name: { __type: "String!" },
    device_year_class: { __type: "String!" },
    duration: { __type: "bigint!" },
    hostname: { __type: "String!" },
    ip_address: { __type: "String!" },
    manufacturer: { __type: "String!" },
    model_id: { __type: "String!" },
    model_name: { __type: "String!" },
    native_app_version: { __type: "String!" },
    native_build_version: { __type: "String!" },
    os_build_fingerprint: { __type: "String!" },
    os_build_id: { __type: "String!" },
    os_internal_build_id: { __type: "String!" },
    os_name: { __type: "String!" },
    os_version: { __type: "String!" },
    platform: { __type: "String!" },
    platform_api_level: { __type: "String!" },
    product_name: { __type: "String!" },
    status_bar_height: { __type: "String!" },
    total_memory: { __type: "String!" },
    updated_at: { __type: "timestamptz!" },
    user_agent: { __type: "String!" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid!" },
  },
  user_sessions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_sessions_aggregate_fields" },
    nodes: { __type: "[user_sessions!]!" },
  },
  user_sessions_aggregate_fields: {
    __typename: { __type: "String!" },
    avg: { __type: "user_sessions_avg_fields" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[user_sessions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "user_sessions_max_fields" },
    min: { __type: "user_sessions_min_fields" },
    stddev: { __type: "user_sessions_stddev_fields" },
    stddev_pop: { __type: "user_sessions_stddev_pop_fields" },
    stddev_samp: { __type: "user_sessions_stddev_samp_fields" },
    sum: { __type: "user_sessions_sum_fields" },
    var_pop: { __type: "user_sessions_var_pop_fields" },
    var_samp: { __type: "user_sessions_var_samp_fields" },
    variance: { __type: "user_sessions_variance_fields" },
  },
  user_sessions_avg_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_bool_exp: {
    _and: { __type: "[user_sessions_bool_exp!]" },
    _not: { __type: "user_sessions_bool_exp" },
    _or: { __type: "[user_sessions_bool_exp!]" },
    brand: { __type: "String_comparison_exp" },
    country_code: { __type: "bpchar_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    device_name: { __type: "String_comparison_exp" },
    device_year_class: { __type: "String_comparison_exp" },
    duration: { __type: "bigint_comparison_exp" },
    hostname: { __type: "String_comparison_exp" },
    ip_address: { __type: "String_comparison_exp" },
    manufacturer: { __type: "String_comparison_exp" },
    model_id: { __type: "String_comparison_exp" },
    model_name: { __type: "String_comparison_exp" },
    native_app_version: { __type: "String_comparison_exp" },
    native_build_version: { __type: "String_comparison_exp" },
    os_build_fingerprint: { __type: "String_comparison_exp" },
    os_build_id: { __type: "String_comparison_exp" },
    os_internal_build_id: { __type: "String_comparison_exp" },
    os_name: { __type: "String_comparison_exp" },
    os_version: { __type: "String_comparison_exp" },
    platform: { __type: "String_comparison_exp" },
    platform_api_level: { __type: "String_comparison_exp" },
    product_name: { __type: "String_comparison_exp" },
    status_bar_height: { __type: "String_comparison_exp" },
    total_memory: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_agent: { __type: "String_comparison_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  user_sessions_inc_input: { duration: { __type: "bigint" } },
  user_sessions_insert_input: {
    brand: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    device_name: { __type: "String" },
    device_year_class: { __type: "String" },
    duration: { __type: "bigint" },
    hostname: { __type: "String" },
    ip_address: { __type: "String" },
    manufacturer: { __type: "String" },
    model_id: { __type: "String" },
    model_name: { __type: "String" },
    native_app_version: { __type: "String" },
    native_build_version: { __type: "String" },
    os_build_fingerprint: { __type: "String" },
    os_build_id: { __type: "String" },
    os_internal_build_id: { __type: "String" },
    os_name: { __type: "String" },
    os_version: { __type: "String" },
    platform: { __type: "String" },
    platform_api_level: { __type: "String" },
    product_name: { __type: "String" },
    status_bar_height: { __type: "String" },
    total_memory: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_agent: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  user_sessions_max_fields: {
    __typename: { __type: "String!" },
    brand: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    device_name: { __type: "String" },
    device_year_class: { __type: "String" },
    duration: { __type: "bigint" },
    hostname: { __type: "String" },
    ip_address: { __type: "String" },
    manufacturer: { __type: "String" },
    model_id: { __type: "String" },
    model_name: { __type: "String" },
    native_app_version: { __type: "String" },
    native_build_version: { __type: "String" },
    os_build_fingerprint: { __type: "String" },
    os_build_id: { __type: "String" },
    os_internal_build_id: { __type: "String" },
    os_name: { __type: "String" },
    os_version: { __type: "String" },
    platform: { __type: "String" },
    platform_api_level: { __type: "String" },
    product_name: { __type: "String" },
    status_bar_height: { __type: "String" },
    total_memory: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_agent: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  user_sessions_min_fields: {
    __typename: { __type: "String!" },
    brand: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    device_name: { __type: "String" },
    device_year_class: { __type: "String" },
    duration: { __type: "bigint" },
    hostname: { __type: "String" },
    ip_address: { __type: "String" },
    manufacturer: { __type: "String" },
    model_id: { __type: "String" },
    model_name: { __type: "String" },
    native_app_version: { __type: "String" },
    native_build_version: { __type: "String" },
    os_build_fingerprint: { __type: "String" },
    os_build_id: { __type: "String" },
    os_internal_build_id: { __type: "String" },
    os_name: { __type: "String" },
    os_version: { __type: "String" },
    platform: { __type: "String" },
    platform_api_level: { __type: "String" },
    product_name: { __type: "String" },
    status_bar_height: { __type: "String" },
    total_memory: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_agent: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  user_sessions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_sessions!]!" },
  },
  user_sessions_on_conflict: {
    constraint: { __type: "user_sessions_constraint!" },
    update_columns: { __type: "[user_sessions_update_column!]!" },
    where: { __type: "user_sessions_bool_exp" },
  },
  user_sessions_order_by: {
    brand: { __type: "order_by" },
    country_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    device_name: { __type: "order_by" },
    device_year_class: { __type: "order_by" },
    duration: { __type: "order_by" },
    hostname: { __type: "order_by" },
    ip_address: { __type: "order_by" },
    manufacturer: { __type: "order_by" },
    model_id: { __type: "order_by" },
    model_name: { __type: "order_by" },
    native_app_version: { __type: "order_by" },
    native_build_version: { __type: "order_by" },
    os_build_fingerprint: { __type: "order_by" },
    os_build_id: { __type: "order_by" },
    os_internal_build_id: { __type: "order_by" },
    os_name: { __type: "order_by" },
    os_version: { __type: "order_by" },
    platform: { __type: "order_by" },
    platform_api_level: { __type: "order_by" },
    product_name: { __type: "order_by" },
    status_bar_height: { __type: "order_by" },
    total_memory: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_agent: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_sessions_pk_columns_input: { uuid: { __type: "uuid!" } },
  user_sessions_set_input: {
    brand: { __type: "String" },
    country_code: { __type: "bpchar" },
    created_at: { __type: "timestamptz" },
    device_name: { __type: "String" },
    device_year_class: { __type: "String" },
    duration: { __type: "bigint" },
    hostname: { __type: "String" },
    ip_address: { __type: "String" },
    manufacturer: { __type: "String" },
    model_id: { __type: "String" },
    model_name: { __type: "String" },
    native_app_version: { __type: "String" },
    native_build_version: { __type: "String" },
    os_build_fingerprint: { __type: "String" },
    os_build_id: { __type: "String" },
    os_internal_build_id: { __type: "String" },
    os_name: { __type: "String" },
    os_version: { __type: "String" },
    platform: { __type: "String" },
    platform_api_level: { __type: "String" },
    product_name: { __type: "String" },
    status_bar_height: { __type: "String" },
    total_memory: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_agent: { __type: "String" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  user_sessions_stddev_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_stddev_pop_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_stddev_samp_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_sum_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "bigint" },
  },
  user_sessions_var_pop_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_var_samp_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_sessions_variance_fields: {
    __typename: { __type: "String!" },
    duration: { __type: "Float" },
  },
  user_subscriptions: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_subscriptions_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "user_subscriptions_aggregate_fields" },
    nodes: { __type: "[user_subscriptions!]!" },
  },
  user_subscriptions_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: {
        columns: "[user_subscriptions_select_column!]",
        distinct: "Boolean",
      },
    },
    max: { __type: "user_subscriptions_max_fields" },
    min: { __type: "user_subscriptions_min_fields" },
  },
  user_subscriptions_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "user_subscriptions_max_order_by" },
    min: { __type: "user_subscriptions_min_order_by" },
  },
  user_subscriptions_arr_rel_insert_input: {
    data: { __type: "[user_subscriptions_insert_input!]!" },
  },
  user_subscriptions_bool_exp: {
    _and: { __type: "[user_subscriptions_bool_exp!]" },
    _not: { __type: "user_subscriptions_bool_exp" },
    _or: { __type: "[user_subscriptions_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    date_end: { __type: "date_comparison_exp" },
    date_start: { __type: "date_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    name: { __type: "String_comparison_exp" },
    quantity: { __type: "String_comparison_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    stripe_status: { __type: "String_comparison_exp" },
    trial_ends_at: { __type: "date_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  user_subscriptions_insert_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_subscriptions_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_subscriptions_max_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_subscriptions_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  user_subscriptions_min_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_subscriptions_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[user_subscriptions!]!" },
  },
  user_subscriptions_order_by: {
    created_at: { __type: "order_by" },
    date_end: { __type: "order_by" },
    date_start: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    name: { __type: "order_by" },
    quantity: { __type: "order_by" },
    stripe_id: { __type: "order_by" },
    stripe_status: { __type: "order_by" },
    trial_ends_at: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  user_subscriptions_set_input: {
    created_at: { __type: "timestamptz" },
    date_end: { __type: "date" },
    date_start: { __type: "date" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    name: { __type: "String" },
    quantity: { __type: "String" },
    stripe_id: { __type: "String" },
    stripe_status: { __type: "String" },
    trial_ends_at: { __type: "date" },
    updated_at: { __type: "timestamptz" },
    uuid: { __type: "uuid" },
  },
  users: {
    __typename: { __type: "String!" },
    avatar: { __type: "user_media" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    brand_users: {
      __type: "[brand_users!]!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    brand_users_aggregate: {
      __type: "brand_users_aggregate!",
      __args: {
        distinct_on: "[brand_users_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[brand_users_order_by!]",
        where: "brand_users_bool_exp",
      },
    },
    cards: {
      __type: "[card!]!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    cards_aggregate: {
      __type: "card_aggregate!",
      __args: {
        distinct_on: "[card_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[card_order_by!]",
        where: "card_bool_exp",
      },
    },
    conversations: {
      __type: "[conversations!]!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    conversations_aggregate: {
      __type: "conversations_aggregate!",
      __args: {
        distinct_on: "[conversations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[conversations_order_by!]",
        where: "conversations_bool_exp",
      },
    },
    country_birth_code: { __type: "String" },
    created_at: { __type: "timestamptz!" },
    currency_code: { __type: "bpchar" },
    date_birth: { __type: "date" },
    discussion_users: {
      __type: "[discussion_user!]!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    discussion_users_aggregate: {
      __type: "discussion_user_aggregate!",
      __args: {
        distinct_on: "[discussion_user_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[discussion_user_order_by!]",
        where: "discussion_user_bool_exp",
      },
    },
    display_name: { __type: "String" },
    email: { __type: "String!" },
    email_verified_at: { __type: "timestamptz" },
    full_name: { __type: "String" },
    gender: { __type: "String" },
    guests: {
      __type: "[guests!]!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    guests_aggregate: {
      __type: "guests_aggregate!",
      __args: {
        distinct_on: "[guests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[guests_order_by!]",
        where: "guests_bool_exp",
      },
    },
    inbox: { __type: "user_inbox" },
    last_read_announcement_at: { __type: "timestamptz" },
    last_seen_at: { __type: "timestamptz" },
    locale: { __type: "bpchar" },
    logs: {
      __type: "[logs!]!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    logs_aggregate: {
      __type: "logs_aggregate!",
      __args: {
        distinct_on: "[logs_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[logs_order_by!]",
        where: "logs_bool_exp",
      },
    },
    mobile_no: { __type: "String" },
    mobile_verified_at: { __type: "timestamptz" },
    model_has_comments: {
      __type: "[model_has_comments!]!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_comments_aggregate: {
      __type: "model_has_comments_aggregate!",
      __args: {
        distinct_on: "[model_has_comments_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_comments_order_by!]",
        where: "model_has_comments_bool_exp",
      },
    },
    model_has_likes: {
      __type: "[model_has_likes!]!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    model_has_likes_aggregate: {
      __type: "model_has_likes_aggregate!",
      __args: {
        distinct_on: "[model_has_likes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[model_has_likes_order_by!]",
        where: "model_has_likes_bool_exp",
      },
    },
    nationality: { __type: "String" },
    notifications: {
      __type: "[notifications!]!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    notifications_aggregate: {
      __type: "notifications_aggregate!",
      __args: {
        distinct_on: "[notifications_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[notifications_order_by!]",
        where: "notifications_bool_exp",
      },
    },
    passes: {
      __type: "[passes!]!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    passes_aggregate: {
      __type: "passes_aggregate!",
      __args: {
        distinct_on: "[passes_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[passes_order_by!]",
        where: "passes_bool_exp",
      },
    },
    password: { __type: "String" },
    posts: {
      __type: "[posts!]!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    posts_aggregate: {
      __type: "posts_aggregate!",
      __args: {
        distinct_on: "[posts_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[posts_order_by!]",
        where: "posts_bool_exp",
      },
    },
    requests: {
      __type: "[requests!]!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    requests_aggregate: {
      __type: "requests_aggregate!",
      __args: {
        distinct_on: "[requests_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[requests_order_by!]",
        where: "requests_bool_exp",
      },
    },
    reviews: {
      __type: "[reviews!]!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    reviews_aggregate: {
      __type: "reviews_aggregate!",
      __args: {
        distinct_on: "[reviews_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[reviews_order_by!]",
        where: "reviews_bool_exp",
      },
    },
    roles: {
      __type: "[user_roles!]!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    roles_aggregate: {
      __type: "user_roles_aggregate!",
      __args: {
        distinct_on: "[user_roles_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_roles_order_by!]",
        where: "user_roles_bool_exp",
      },
    },
    socialRelationshipsByFollowerUuid: {
      __type: "[social_relationships!]!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    socialRelationshipsByFollowerUuid_aggregate: {
      __type: "social_relationships_aggregate!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships: {
      __type: "[social_relationships!]!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    social_relationships_aggregate: {
      __type: "social_relationships_aggregate!",
      __args: {
        distinct_on: "[social_relationships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[social_relationships_order_by!]",
        where: "social_relationships_bool_exp",
      },
    },
    spaces_usages: {
      __type: "[spaces_usage!]!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    spaces_usages_aggregate: {
      __type: "spaces_usage_aggregate!",
      __args: {
        distinct_on: "[spaces_usage_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[spaces_usage_order_by!]",
        where: "spaces_usage_bool_exp",
      },
    },
    stripe_id: { __type: "String" },
    subscriptions: {
      __type: "[user_subscriptions!]!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    subscriptions_aggregate: {
      __type: "user_subscriptions_aggregate!",
      __args: {
        distinct_on: "[user_subscriptions_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_subscriptions_order_by!]",
        where: "user_subscriptions_bool_exp",
      },
    },
    teamMembershipsByUserUuid: {
      __type: "[team_memberships!]!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    teamMembershipsByUserUuid_aggregate: {
      __type: "team_memberships_aggregate!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships: {
      __type: "[team_memberships!]!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate!",
      __args: {
        distinct_on: "[team_memberships_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[team_memberships_order_by!]",
        where: "team_memberships_bool_exp",
      },
    },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz!" },
    user_has_reservations: {
      __type: "[user_has_reservations!]!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    user_has_reservations_aggregate: {
      __type: "user_has_reservations_aggregate!",
      __args: {
        distinct_on: "[user_has_reservations_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[user_has_reservations_order_by!]",
        where: "user_has_reservations_bool_exp",
      },
    },
    username: { __type: "String" },
    uuid: { __type: "uuid!" },
    wishlists: {
      __type: "[wishlist!]!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
    wishlists_aggregate: {
      __type: "wishlist_aggregate!",
      __args: {
        distinct_on: "[wishlist_select_column!]",
        limit: "Int",
        offset: "Int",
        order_by: "[wishlist_order_by!]",
        where: "wishlist_bool_exp",
      },
    },
  },
  users_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "users_aggregate_fields" },
    nodes: { __type: "[users!]!" },
  },
  users_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[users_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "users_max_fields" },
    min: { __type: "users_min_fields" },
  },
  users_bool_exp: {
    _and: { __type: "[users_bool_exp!]" },
    _not: { __type: "users_bool_exp" },
    _or: { __type: "[users_bool_exp!]" },
    avatar: { __type: "user_media_bool_exp" },
    avatar_url: { __type: "String_comparison_exp" },
    billing_address: { __type: "String_comparison_exp" },
    billing_address_2: { __type: "String_comparison_exp" },
    billing_city: { __type: "String_comparison_exp" },
    billing_country_code: { __type: "String_comparison_exp" },
    billing_state: { __type: "String_comparison_exp" },
    billing_zip: { __type: "String_comparison_exp" },
    bio: { __type: "String_comparison_exp" },
    brand_users: { __type: "brand_users_bool_exp" },
    cards: { __type: "card_bool_exp" },
    conversations: { __type: "conversations_bool_exp" },
    country_birth_code: { __type: "String_comparison_exp" },
    created_at: { __type: "timestamptz_comparison_exp" },
    currency_code: { __type: "bpchar_comparison_exp" },
    date_birth: { __type: "date_comparison_exp" },
    discussion_users: { __type: "discussion_user_bool_exp" },
    display_name: { __type: "String_comparison_exp" },
    email: { __type: "String_comparison_exp" },
    email_verified_at: { __type: "timestamptz_comparison_exp" },
    full_name: { __type: "String_comparison_exp" },
    gender: { __type: "String_comparison_exp" },
    guests: { __type: "guests_bool_exp" },
    inbox: { __type: "user_inbox_bool_exp" },
    last_read_announcement_at: { __type: "timestamptz_comparison_exp" },
    last_seen_at: { __type: "timestamptz_comparison_exp" },
    locale: { __type: "bpchar_comparison_exp" },
    logs: { __type: "logs_bool_exp" },
    mobile_no: { __type: "String_comparison_exp" },
    mobile_verified_at: { __type: "timestamptz_comparison_exp" },
    model_has_comments: { __type: "model_has_comments_bool_exp" },
    model_has_likes: { __type: "model_has_likes_bool_exp" },
    nationality: { __type: "String_comparison_exp" },
    notifications: { __type: "notifications_bool_exp" },
    passes: { __type: "passes_bool_exp" },
    password: { __type: "String_comparison_exp" },
    posts: { __type: "posts_bool_exp" },
    requests: { __type: "requests_bool_exp" },
    reviews: { __type: "reviews_bool_exp" },
    roles: { __type: "user_roles_bool_exp" },
    socialRelationshipsByFollowerUuid: {
      __type: "social_relationships_bool_exp",
    },
    social_relationships: { __type: "social_relationships_bool_exp" },
    spaces_usages: { __type: "spaces_usage_bool_exp" },
    stripe_id: { __type: "String_comparison_exp" },
    subscriptions: { __type: "user_subscriptions_bool_exp" },
    teamMembershipsByUserUuid: { __type: "team_memberships_bool_exp" },
    team_memberships: { __type: "team_memberships_bool_exp" },
    timezone: { __type: "String_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user_has_reservations: { __type: "user_has_reservations_bool_exp" },
    username: { __type: "String_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
    wishlists: { __type: "wishlist_bool_exp" },
  },
  users_insert_input: {
    avatar: { __type: "user_media_obj_rel_insert_input" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    brand_users: { __type: "brand_users_arr_rel_insert_input" },
    cards: { __type: "card_arr_rel_insert_input" },
    conversations: { __type: "conversations_arr_rel_insert_input" },
    country_birth_code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    date_birth: { __type: "date" },
    discussion_users: { __type: "discussion_user_arr_rel_insert_input" },
    display_name: { __type: "String" },
    email: { __type: "String" },
    email_verified_at: { __type: "timestamptz" },
    full_name: { __type: "String" },
    gender: { __type: "String" },
    guests: { __type: "guests_arr_rel_insert_input" },
    inbox: { __type: "user_inbox_obj_rel_insert_input" },
    last_read_announcement_at: { __type: "timestamptz" },
    last_seen_at: { __type: "timestamptz" },
    locale: { __type: "bpchar" },
    logs: { __type: "logs_arr_rel_insert_input" },
    mobile_no: { __type: "String" },
    mobile_verified_at: { __type: "timestamptz" },
    model_has_comments: { __type: "model_has_comments_arr_rel_insert_input" },
    model_has_likes: { __type: "model_has_likes_arr_rel_insert_input" },
    nationality: { __type: "String" },
    notifications: { __type: "notifications_arr_rel_insert_input" },
    passes: { __type: "passes_arr_rel_insert_input" },
    password: { __type: "String" },
    posts: { __type: "posts_arr_rel_insert_input" },
    requests: { __type: "requests_arr_rel_insert_input" },
    reviews: { __type: "reviews_arr_rel_insert_input" },
    roles: { __type: "user_roles_arr_rel_insert_input" },
    socialRelationshipsByFollowerUuid: {
      __type: "social_relationships_arr_rel_insert_input",
    },
    social_relationships: {
      __type: "social_relationships_arr_rel_insert_input",
    },
    spaces_usages: { __type: "spaces_usage_arr_rel_insert_input" },
    stripe_id: { __type: "String" },
    subscriptions: { __type: "user_subscriptions_arr_rel_insert_input" },
    teamMembershipsByUserUuid: {
      __type: "team_memberships_arr_rel_insert_input",
    },
    team_memberships: { __type: "team_memberships_arr_rel_insert_input" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    user_has_reservations: {
      __type: "user_has_reservations_arr_rel_insert_input",
    },
    username: { __type: "String" },
    uuid: { __type: "uuid" },
    wishlists: { __type: "wishlist_arr_rel_insert_input" },
  },
  users_max_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    country_birth_code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    date_birth: { __type: "date" },
    display_name: { __type: "String" },
    email: { __type: "String" },
    email_verified_at: { __type: "timestamptz" },
    full_name: { __type: "String" },
    gender: { __type: "String" },
    last_read_announcement_at: { __type: "timestamptz" },
    last_seen_at: { __type: "timestamptz" },
    locale: { __type: "bpchar" },
    mobile_no: { __type: "String" },
    mobile_verified_at: { __type: "timestamptz" },
    nationality: { __type: "String" },
    password: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    username: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  users_min_fields: {
    __typename: { __type: "String!" },
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    country_birth_code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    date_birth: { __type: "date" },
    display_name: { __type: "String" },
    email: { __type: "String" },
    email_verified_at: { __type: "timestamptz" },
    full_name: { __type: "String" },
    gender: { __type: "String" },
    last_read_announcement_at: { __type: "timestamptz" },
    last_seen_at: { __type: "timestamptz" },
    locale: { __type: "bpchar" },
    mobile_no: { __type: "String" },
    mobile_verified_at: { __type: "timestamptz" },
    nationality: { __type: "String" },
    password: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    username: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  users_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[users!]!" },
  },
  users_obj_rel_insert_input: {
    data: { __type: "users_insert_input!" },
    on_conflict: { __type: "users_on_conflict" },
  },
  users_on_conflict: {
    constraint: { __type: "users_constraint!" },
    update_columns: { __type: "[users_update_column!]!" },
    where: { __type: "users_bool_exp" },
  },
  users_order_by: {
    avatar: { __type: "user_media_order_by" },
    avatar_url: { __type: "order_by" },
    billing_address: { __type: "order_by" },
    billing_address_2: { __type: "order_by" },
    billing_city: { __type: "order_by" },
    billing_country_code: { __type: "order_by" },
    billing_state: { __type: "order_by" },
    billing_zip: { __type: "order_by" },
    bio: { __type: "order_by" },
    brand_users_aggregate: { __type: "brand_users_aggregate_order_by" },
    cards_aggregate: { __type: "card_aggregate_order_by" },
    conversations_aggregate: { __type: "conversations_aggregate_order_by" },
    country_birth_code: { __type: "order_by" },
    created_at: { __type: "order_by" },
    currency_code: { __type: "order_by" },
    date_birth: { __type: "order_by" },
    discussion_users_aggregate: {
      __type: "discussion_user_aggregate_order_by",
    },
    display_name: { __type: "order_by" },
    email: { __type: "order_by" },
    email_verified_at: { __type: "order_by" },
    full_name: { __type: "order_by" },
    gender: { __type: "order_by" },
    guests_aggregate: { __type: "guests_aggregate_order_by" },
    inbox: { __type: "user_inbox_order_by" },
    last_read_announcement_at: { __type: "order_by" },
    last_seen_at: { __type: "order_by" },
    locale: { __type: "order_by" },
    logs_aggregate: { __type: "logs_aggregate_order_by" },
    mobile_no: { __type: "order_by" },
    mobile_verified_at: { __type: "order_by" },
    model_has_comments_aggregate: {
      __type: "model_has_comments_aggregate_order_by",
    },
    model_has_likes_aggregate: { __type: "model_has_likes_aggregate_order_by" },
    nationality: { __type: "order_by" },
    notifications_aggregate: { __type: "notifications_aggregate_order_by" },
    passes_aggregate: { __type: "passes_aggregate_order_by" },
    password: { __type: "order_by" },
    posts_aggregate: { __type: "posts_aggregate_order_by" },
    requests_aggregate: { __type: "requests_aggregate_order_by" },
    reviews_aggregate: { __type: "reviews_aggregate_order_by" },
    roles_aggregate: { __type: "user_roles_aggregate_order_by" },
    socialRelationshipsByFollowerUuid_aggregate: {
      __type: "social_relationships_aggregate_order_by",
    },
    social_relationships_aggregate: {
      __type: "social_relationships_aggregate_order_by",
    },
    spaces_usages_aggregate: { __type: "spaces_usage_aggregate_order_by" },
    stripe_id: { __type: "order_by" },
    subscriptions_aggregate: {
      __type: "user_subscriptions_aggregate_order_by",
    },
    teamMembershipsByUserUuid_aggregate: {
      __type: "team_memberships_aggregate_order_by",
    },
    team_memberships_aggregate: {
      __type: "team_memberships_aggregate_order_by",
    },
    timezone: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_has_reservations_aggregate: {
      __type: "user_has_reservations_aggregate_order_by",
    },
    username: { __type: "order_by" },
    uuid: { __type: "order_by" },
    wishlists_aggregate: { __type: "wishlist_aggregate_order_by" },
  },
  users_pk_columns_input: { uuid: { __type: "uuid!" } },
  users_set_input: {
    avatar_url: { __type: "String" },
    billing_address: { __type: "String" },
    billing_address_2: { __type: "String" },
    billing_city: { __type: "String" },
    billing_country_code: { __type: "String" },
    billing_state: { __type: "String" },
    billing_zip: { __type: "String" },
    bio: { __type: "String" },
    country_birth_code: { __type: "String" },
    created_at: { __type: "timestamptz" },
    currency_code: { __type: "bpchar" },
    date_birth: { __type: "date" },
    display_name: { __type: "String" },
    email: { __type: "String" },
    email_verified_at: { __type: "timestamptz" },
    full_name: { __type: "String" },
    gender: { __type: "String" },
    last_read_announcement_at: { __type: "timestamptz" },
    last_seen_at: { __type: "timestamptz" },
    locale: { __type: "bpchar" },
    mobile_no: { __type: "String" },
    mobile_verified_at: { __type: "timestamptz" },
    nationality: { __type: "String" },
    password: { __type: "String" },
    stripe_id: { __type: "String" },
    timezone: { __type: "String" },
    updated_at: { __type: "timestamptz" },
    username: { __type: "String" },
    uuid: { __type: "uuid" },
  },
  uuid_comparison_exp: {
    _eq: { __type: "uuid" },
    _gt: { __type: "uuid" },
    _gte: { __type: "uuid" },
    _in: { __type: "[uuid!]" },
    _is_null: { __type: "Boolean" },
    _lt: { __type: "uuid" },
    _lte: { __type: "uuid" },
    _neq: { __type: "uuid" },
    _nin: { __type: "[uuid!]" },
  },
  wishlist: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz!" },
    model_type: { __type: "String!" },
    model_uuid: { __type: "uuid!" },
    updated_at: { __type: "timestamptz!" },
    user: { __type: "users!" },
    user_uuid: { __type: "uuid!" },
    uuid: { __type: "uuid!" },
  },
  wishlist_aggregate: {
    __typename: { __type: "String!" },
    aggregate: { __type: "wishlist_aggregate_fields" },
    nodes: { __type: "[wishlist!]!" },
  },
  wishlist_aggregate_fields: {
    __typename: { __type: "String!" },
    count: {
      __type: "Int!",
      __args: { columns: "[wishlist_select_column!]", distinct: "Boolean" },
    },
    max: { __type: "wishlist_max_fields" },
    min: { __type: "wishlist_min_fields" },
  },
  wishlist_aggregate_order_by: {
    count: { __type: "order_by" },
    max: { __type: "wishlist_max_order_by" },
    min: { __type: "wishlist_min_order_by" },
  },
  wishlist_arr_rel_insert_input: {
    data: { __type: "[wishlist_insert_input!]!" },
    on_conflict: { __type: "wishlist_on_conflict" },
  },
  wishlist_bool_exp: {
    _and: { __type: "[wishlist_bool_exp!]" },
    _not: { __type: "wishlist_bool_exp" },
    _or: { __type: "[wishlist_bool_exp!]" },
    created_at: { __type: "timestamptz_comparison_exp" },
    model_type: { __type: "String_comparison_exp" },
    model_uuid: { __type: "uuid_comparison_exp" },
    updated_at: { __type: "timestamptz_comparison_exp" },
    user: { __type: "users_bool_exp" },
    user_uuid: { __type: "uuid_comparison_exp" },
    uuid: { __type: "uuid_comparison_exp" },
  },
  wishlist_insert_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user: { __type: "users_obj_rel_insert_input" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  wishlist_max_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  wishlist_max_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  wishlist_min_fields: {
    __typename: { __type: "String!" },
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
  wishlist_min_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  wishlist_mutation_response: {
    __typename: { __type: "String!" },
    affected_rows: { __type: "Int!" },
    returning: { __type: "[wishlist!]!" },
  },
  wishlist_on_conflict: {
    constraint: { __type: "wishlist_constraint!" },
    update_columns: { __type: "[wishlist_update_column!]!" },
    where: { __type: "wishlist_bool_exp" },
  },
  wishlist_order_by: {
    created_at: { __type: "order_by" },
    model_type: { __type: "order_by" },
    model_uuid: { __type: "order_by" },
    updated_at: { __type: "order_by" },
    user: { __type: "users_order_by" },
    user_uuid: { __type: "order_by" },
    uuid: { __type: "order_by" },
  },
  wishlist_pk_columns_input: { uuid: { __type: "uuid!" } },
  wishlist_set_input: {
    created_at: { __type: "timestamptz" },
    model_type: { __type: "String" },
    model_uuid: { __type: "uuid" },
    updated_at: { __type: "timestamptz" },
    user_uuid: { __type: "uuid" },
    uuid: { __type: "uuid" },
  },
} as const;

export interface Query {
  __typename: "Query" | undefined;
  activity_logs: (args?: {
    distinct_on?: Maybe<Array<activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<activity_logs_order_by>>;
    where?: Maybe<activity_logs_bool_exp>;
  }) => Array<activity_logs>;
  activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<activity_logs_order_by>>;
    where?: Maybe<activity_logs_bool_exp>;
  }) => activity_logs_aggregate;
  activity_logs_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<activity_logs>;
  aruba_wifi_access: (args?: {
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => Array<aruba_wifi_access>;
  aruba_wifi_access_aggregate: (args?: {
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => aruba_wifi_access_aggregate;
  aruba_wifi_access_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<aruba_wifi_access>;
  auth_audit_log_entries: (args?: {
    distinct_on?: Maybe<Array<auth_audit_log_entries_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_audit_log_entries_order_by>>;
    where?: Maybe<auth_audit_log_entries_bool_exp>;
  }) => Array<auth_audit_log_entries>;
  auth_audit_log_entries_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_audit_log_entries_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_audit_log_entries_order_by>>;
    where?: Maybe<auth_audit_log_entries_bool_exp>;
  }) => auth_audit_log_entries_aggregate;
  auth_audit_log_entries_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_audit_log_entries>;
  auth_instances: (args?: {
    distinct_on?: Maybe<Array<auth_instances_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_instances_order_by>>;
    where?: Maybe<auth_instances_bool_exp>;
  }) => Array<auth_instances>;
  auth_instances_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_instances_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_instances_order_by>>;
    where?: Maybe<auth_instances_bool_exp>;
  }) => auth_instances_aggregate;
  auth_instances_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_instances>;
  auth_refresh_tokens: (args?: {
    distinct_on?: Maybe<Array<auth_refresh_tokens_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_refresh_tokens_order_by>>;
    where?: Maybe<auth_refresh_tokens_bool_exp>;
  }) => Array<auth_refresh_tokens>;
  auth_refresh_tokens_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_refresh_tokens_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_refresh_tokens_order_by>>;
    where?: Maybe<auth_refresh_tokens_bool_exp>;
  }) => auth_refresh_tokens_aggregate;
  auth_refresh_tokens_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<auth_refresh_tokens>;
  auth_schema_migrations: (args?: {
    distinct_on?: Maybe<Array<auth_schema_migrations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_schema_migrations_order_by>>;
    where?: Maybe<auth_schema_migrations_bool_exp>;
  }) => Array<auth_schema_migrations>;
  auth_schema_migrations_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_schema_migrations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_schema_migrations_order_by>>;
    where?: Maybe<auth_schema_migrations_bool_exp>;
  }) => auth_schema_migrations_aggregate;
  auth_schema_migrations_by_pk: (args: {
    version: Scalars["String"];
  }) => Maybe<auth_schema_migrations>;
  auth_users: (args?: {
    distinct_on?: Maybe<Array<auth_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_users_order_by>>;
    where?: Maybe<auth_users_bool_exp>;
  }) => Array<auth_users>;
  auth_users_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_users_order_by>>;
    where?: Maybe<auth_users_bool_exp>;
  }) => auth_users_aggregate;
  auth_users_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<auth_users>;
  brand_campaigns: (args?: {
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_campaigns_order_by>>;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => Array<brand_campaigns>;
  brand_campaigns_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_campaigns_order_by>>;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => brand_campaigns_aggregate;
  brand_campaigns_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<brand_campaigns>;
  brand_discussions: (args?: {
    distinct_on?: Maybe<Array<brand_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_discussions_order_by>>;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => Array<brand_discussions>;
  brand_discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_discussions_order_by>>;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => brand_discussions_aggregate;
  brand_inbox: (args?: {
    distinct_on?: Maybe<Array<brand_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_inbox_order_by>>;
    where?: Maybe<brand_inbox_bool_exp>;
  }) => Array<brand_inbox>;
  brand_inbox_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_inbox_order_by>>;
    where?: Maybe<brand_inbox_bool_exp>;
  }) => brand_inbox_aggregate;
  brand_media: (args?: {
    distinct_on?: Maybe<Array<brand_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_media_order_by>>;
    where?: Maybe<brand_media_bool_exp>;
  }) => Array<brand_media>;
  brand_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_media_order_by>>;
    where?: Maybe<brand_media_bool_exp>;
  }) => brand_media_aggregate;
  brand_tags: (args?: {
    distinct_on?: Maybe<Array<brand_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_tags_order_by>>;
    where?: Maybe<brand_tags_bool_exp>;
  }) => Array<brand_tags>;
  brand_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_tags_order_by>>;
    where?: Maybe<brand_tags_bool_exp>;
  }) => brand_tags_aggregate;
  brand_users: (args?: {
    distinct_on?: Maybe<Array<brand_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_users_order_by>>;
    where?: Maybe<brand_users_bool_exp>;
  }) => Array<brand_users>;
  brand_users_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_users_order_by>>;
    where?: Maybe<brand_users_bool_exp>;
  }) => brand_users_aggregate;
  brand_users_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<brand_users>;
  brand_wishes: (args?: {
    distinct_on?: Maybe<Array<brand_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_wishes_order_by>>;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => Array<brand_wishes>;
  brand_wishes_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_wishes_order_by>>;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => brand_wishes_aggregate;
  brands: (args?: {
    distinct_on?: Maybe<Array<brands_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brands_order_by>>;
    where?: Maybe<brands_bool_exp>;
  }) => Array<brands>;
  brands_aggregate: (args?: {
    distinct_on?: Maybe<Array<brands_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brands_order_by>>;
    where?: Maybe<brands_bool_exp>;
  }) => brands_aggregate;
  brands_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<brands>;
  campaigns: (args?: {
    distinct_on?: Maybe<Array<campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<campaigns_order_by>>;
    where?: Maybe<campaigns_bool_exp>;
  }) => Array<campaigns>;
  campaigns_aggregate: (args?: {
    distinct_on?: Maybe<Array<campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<campaigns_order_by>>;
    where?: Maybe<campaigns_bool_exp>;
  }) => campaigns_aggregate;
  campaigns_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<campaigns>;
  card: (args?: {
    distinct_on?: Maybe<Array<card_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<card_order_by>>;
    where?: Maybe<card_bool_exp>;
  }) => Array<card>;
  card_aggregate: (args?: {
    distinct_on?: Maybe<Array<card_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<card_order_by>>;
    where?: Maybe<card_bool_exp>;
  }) => card_aggregate;
  card_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<card>;
  comment_comments: (args?: {
    distinct_on?: Maybe<Array<comment_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_comments_order_by>>;
    where?: Maybe<comment_comments_bool_exp>;
  }) => Array<comment_comments>;
  comment_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<comment_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_comments_order_by>>;
    where?: Maybe<comment_comments_bool_exp>;
  }) => comment_comments_aggregate;
  comment_likes: (args?: {
    distinct_on?: Maybe<Array<comment_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_likes_order_by>>;
    where?: Maybe<comment_likes_bool_exp>;
  }) => Array<comment_likes>;
  comment_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<comment_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_likes_order_by>>;
    where?: Maybe<comment_likes_bool_exp>;
  }) => comment_likes_aggregate;
  conversations: (args?: {
    distinct_on?: Maybe<Array<conversations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<conversations_order_by>>;
    where?: Maybe<conversations_bool_exp>;
  }) => Array<conversations>;
  conversations_aggregate: (args?: {
    distinct_on?: Maybe<Array<conversations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<conversations_order_by>>;
    where?: Maybe<conversations_bool_exp>;
  }) => conversations_aggregate;
  conversations_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<conversations>;
  currencies: (args?: {
    distinct_on?: Maybe<Array<currencies_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<currencies_order_by>>;
    where?: Maybe<currencies_bool_exp>;
  }) => Array<currencies>;
  currencies_aggregate: (args?: {
    distinct_on?: Maybe<Array<currencies_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<currencies_order_by>>;
    where?: Maybe<currencies_bool_exp>;
  }) => currencies_aggregate;
  currencies_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<currencies>;
  daily_rates: (args?: {
    distinct_on?: Maybe<Array<daily_rates_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<daily_rates_order_by>>;
    where?: Maybe<daily_rates_bool_exp>;
  }) => Array<daily_rates>;
  daily_rates_aggregate: (args?: {
    distinct_on?: Maybe<Array<daily_rates_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<daily_rates_order_by>>;
    where?: Maybe<daily_rates_bool_exp>;
  }) => daily_rates_aggregate;
  daily_rates_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<daily_rates>;
  default_addons: (args?: {
    distinct_on?: Maybe<Array<default_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<default_addons_order_by>>;
    where?: Maybe<default_addons_bool_exp>;
  }) => Array<default_addons>;
  default_addons_aggregate: (args?: {
    distinct_on?: Maybe<Array<default_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<default_addons_order_by>>;
    where?: Maybe<default_addons_bool_exp>;
  }) => default_addons_aggregate;
  default_addons_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<default_addons>;
  discount_codes: (args?: {
    distinct_on?: Maybe<Array<discount_codes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discount_codes_order_by>>;
    where?: Maybe<discount_codes_bool_exp>;
  }) => Array<discount_codes>;
  discount_codes_aggregate: (args?: {
    distinct_on?: Maybe<Array<discount_codes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discount_codes_order_by>>;
    where?: Maybe<discount_codes_bool_exp>;
  }) => discount_codes_aggregate;
  discount_codes_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<discount_codes>;
  discussion_user: (args?: {
    distinct_on?: Maybe<Array<discussion_user_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussion_user_order_by>>;
    where?: Maybe<discussion_user_bool_exp>;
  }) => Array<discussion_user>;
  discussion_user_aggregate: (args?: {
    distinct_on?: Maybe<Array<discussion_user_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussion_user_order_by>>;
    where?: Maybe<discussion_user_bool_exp>;
  }) => discussion_user_aggregate;
  discussions: (args?: {
    distinct_on?: Maybe<Array<discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussions_order_by>>;
    where?: Maybe<discussions_bool_exp>;
  }) => Array<discussions>;
  discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussions_order_by>>;
    where?: Maybe<discussions_bool_exp>;
  }) => discussions_aggregate;
  discussions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<discussions>;
  extensions: (args?: {
    distinct_on?: Maybe<Array<extensions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_order_by>>;
    where?: Maybe<extensions_bool_exp>;
  }) => Array<extensions>;
  extensions_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_order_by>>;
    where?: Maybe<extensions_bool_exp>;
  }) => extensions_aggregate;
  extensions_by_pk: (args: { id: Scalars["String"] }) => Maybe<extensions>;
  extensions_geography_columns: (args?: {
    distinct_on?: Maybe<Array<extensions_geography_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geography_columns_order_by>>;
    where?: Maybe<extensions_geography_columns_bool_exp>;
  }) => Array<extensions_geography_columns>;
  extensions_geography_columns_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_geography_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geography_columns_order_by>>;
    where?: Maybe<extensions_geography_columns_bool_exp>;
  }) => extensions_geography_columns_aggregate;
  extensions_geometry_columns: (args?: {
    distinct_on?: Maybe<Array<extensions_geometry_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geometry_columns_order_by>>;
    where?: Maybe<extensions_geometry_columns_bool_exp>;
  }) => Array<extensions_geometry_columns>;
  extensions_geometry_columns_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_geometry_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geometry_columns_order_by>>;
    where?: Maybe<extensions_geometry_columns_bool_exp>;
  }) => extensions_geometry_columns_aggregate;
  extensions_pg_stat_statements: (args?: {
    distinct_on?: Maybe<Array<extensions_pg_stat_statements_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_pg_stat_statements_order_by>>;
    where?: Maybe<extensions_pg_stat_statements_bool_exp>;
  }) => Array<extensions_pg_stat_statements>;
  extensions_pg_stat_statements_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_pg_stat_statements_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_pg_stat_statements_order_by>>;
    where?: Maybe<extensions_pg_stat_statements_bool_exp>;
  }) => extensions_pg_stat_statements_aggregate;
  extensions_spatial_ref_sys: (args?: {
    distinct_on?: Maybe<Array<extensions_spatial_ref_sys_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_spatial_ref_sys_order_by>>;
    where?: Maybe<extensions_spatial_ref_sys_bool_exp>;
  }) => Array<extensions_spatial_ref_sys>;
  extensions_spatial_ref_sys_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_spatial_ref_sys_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_spatial_ref_sys_order_by>>;
    where?: Maybe<extensions_spatial_ref_sys_bool_exp>;
  }) => extensions_spatial_ref_sys_aggregate;
  extensions_spatial_ref_sys_by_pk: (args: {
    srid: Scalars["Int"];
  }) => Maybe<extensions_spatial_ref_sys>;
  floor_plan_grid: (args?: {
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => Array<floor_plan_grid>;
  floor_plan_grid_aggregate: (args?: {
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => floor_plan_grid_aggregate;
  floor_plan_grid_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<floor_plan_grid>;
  floor_plans: (args?: {
    distinct_on?: Maybe<Array<floor_plans_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plans_order_by>>;
    where?: Maybe<floor_plans_bool_exp>;
  }) => Array<floor_plans>;
  floor_plans_aggregate: (args?: {
    distinct_on?: Maybe<Array<floor_plans_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plans_order_by>>;
    where?: Maybe<floor_plans_bool_exp>;
  }) => floor_plans_aggregate;
  floor_plans_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<floor_plans>;
  guest_questionaires_answers: (args?: {
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => Array<guest_questionaires_answers>;
  guest_questionaires_answers_aggregate: (args?: {
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => guest_questionaires_answers_aggregate;
  guest_questionaires_answers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guest_questionaires_answers>;
  guests: (args?: {
    distinct_on?: Maybe<Array<guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_order_by>>;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  guests_aggregate: (args?: {
    distinct_on?: Maybe<Array<guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_order_by>>;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  guests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<guests>;
  guests_has_questionaires: (args?: {
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => Array<guests_has_questionaires>;
  guests_has_questionaires_aggregate: (args?: {
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => guests_has_questionaires_aggregate;
  guests_has_questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guests_has_questionaires>;
  inboxes: (args?: {
    distinct_on?: Maybe<Array<inboxes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<inboxes_order_by>>;
    where?: Maybe<inboxes_bool_exp>;
  }) => Array<inboxes>;
  inboxes_aggregate: (args?: {
    distinct_on?: Maybe<Array<inboxes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<inboxes_order_by>>;
    where?: Maybe<inboxes_bool_exp>;
  }) => inboxes_aggregate;
  inboxes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<inboxes>;
  invoice: (args?: {
    distinct_on?: Maybe<Array<invoice_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<invoice_order_by>>;
    where?: Maybe<invoice_bool_exp>;
  }) => Array<invoice>;
  invoice_aggregate: (args?: {
    distinct_on?: Maybe<Array<invoice_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<invoice_order_by>>;
    where?: Maybe<invoice_bool_exp>;
  }) => invoice_aggregate;
  invoice_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<invoice>;
  key_performance_snapshots: (args?: {
    distinct_on?: Maybe<Array<key_performance_snapshots_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<key_performance_snapshots_order_by>>;
    where?: Maybe<key_performance_snapshots_bool_exp>;
  }) => Array<key_performance_snapshots>;
  key_performance_snapshots_aggregate: (args?: {
    distinct_on?: Maybe<Array<key_performance_snapshots_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<key_performance_snapshots_order_by>>;
    where?: Maybe<key_performance_snapshots_bool_exp>;
  }) => key_performance_snapshots_aggregate;
  key_performance_snapshots_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<key_performance_snapshots>;
  listing_categories: (args?: {
    distinct_on?: Maybe<Array<listing_categories_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_categories_order_by>>;
    where?: Maybe<listing_categories_bool_exp>;
  }) => Array<listing_categories>;
  listing_categories_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_categories_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_categories_order_by>>;
    where?: Maybe<listing_categories_bool_exp>;
  }) => listing_categories_aggregate;
  listing_categories_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_categories>;
  listing_collections: (args?: {
    distinct_on?: Maybe<Array<listing_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_collections_order_by>>;
    where?: Maybe<listing_collections_bool_exp>;
  }) => Array<listing_collections>;
  listing_collections_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_collections_order_by>>;
    where?: Maybe<listing_collections_bool_exp>;
  }) => listing_collections_aggregate;
  listing_collections_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_collections>;
  listing_discussions: (args?: {
    distinct_on?: Maybe<Array<listing_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_discussions_order_by>>;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => Array<listing_discussions>;
  listing_discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_discussions_order_by>>;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => listing_discussions_aggregate;
  listing_in_collections: (args?: {
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_in_collections_order_by>>;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => Array<listing_in_collections>;
  listing_in_collections_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_in_collections_order_by>>;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => listing_in_collections_aggregate;
  listing_media: (args?: {
    distinct_on?: Maybe<Array<listing_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_media_order_by>>;
    where?: Maybe<listing_media_bool_exp>;
  }) => Array<listing_media>;
  listing_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_media_order_by>>;
    where?: Maybe<listing_media_bool_exp>;
  }) => listing_media_aggregate;
  listing_tags: (args?: {
    distinct_on?: Maybe<Array<listing_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_tags_order_by>>;
    where?: Maybe<listing_tags_bool_exp>;
  }) => Array<listing_tags>;
  listing_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_tags_order_by>>;
    where?: Maybe<listing_tags_bool_exp>;
  }) => listing_tags_aggregate;
  listing_wishes: (args?: {
    distinct_on?: Maybe<Array<listing_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_wishes_order_by>>;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => Array<listing_wishes>;
  listing_wishes_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_wishes_order_by>>;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => listing_wishes_aggregate;
  listings: (args?: {
    distinct_on?: Maybe<Array<listings_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listings_order_by>>;
    where?: Maybe<listings_bool_exp>;
  }) => Array<listings>;
  listings_aggregate: (args?: {
    distinct_on?: Maybe<Array<listings_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listings_order_by>>;
    where?: Maybe<listings_bool_exp>;
  }) => listings_aggregate;
  listings_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<listings>;
  logs: (args?: {
    distinct_on?: Maybe<Array<logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<logs_order_by>>;
    where?: Maybe<logs_bool_exp>;
  }) => Array<logs>;
  logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<logs_order_by>>;
    where?: Maybe<logs_bool_exp>;
  }) => logs_aggregate;
  logs_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<logs>;
  media: (args?: {
    distinct_on?: Maybe<Array<media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<media_order_by>>;
    where?: Maybe<media_bool_exp>;
  }) => Array<media>;
  media_aggregate: (args?: {
    distinct_on?: Maybe<Array<media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<media_order_by>>;
    where?: Maybe<media_bool_exp>;
  }) => media_aggregate;
  media_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<media>;
  messages: (args?: {
    distinct_on?: Maybe<Array<messages_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<messages_order_by>>;
    where?: Maybe<messages_bool_exp>;
  }) => Array<messages>;
  messages_aggregate: (args?: {
    distinct_on?: Maybe<Array<messages_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<messages_order_by>>;
    where?: Maybe<messages_bool_exp>;
  }) => messages_aggregate;
  messages_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<messages>;
  model_has_comments: (args?: {
    distinct_on?: Maybe<Array<model_has_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_comments_order_by>>;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => Array<model_has_comments>;
  model_has_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_comments_order_by>>;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => model_has_comments_aggregate;
  model_has_comments_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<model_has_comments>;
  model_has_likes: (args?: {
    distinct_on?: Maybe<Array<model_has_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_likes_order_by>>;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => Array<model_has_likes>;
  model_has_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_likes_order_by>>;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => model_has_likes_aggregate;
  model_has_permissions: (args?: {
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_permissions_order_by>>;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => Array<model_has_permissions>;
  model_has_permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_permissions_order_by>>;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => model_has_permissions_aggregate;
  model_has_roles: (args?: {
    distinct_on?: Maybe<Array<model_has_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_roles_order_by>>;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => Array<model_has_roles>;
  model_has_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_roles_order_by>>;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => model_has_roles_aggregate;
  model_has_tags: (args?: {
    distinct_on?: Maybe<Array<model_has_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_tags_order_by>>;
    where?: Maybe<model_has_tags_bool_exp>;
  }) => Array<model_has_tags>;
  model_has_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_tags_order_by>>;
    where?: Maybe<model_has_tags_bool_exp>;
  }) => model_has_tags_aggregate;
  model_has_tags_by_pk: (args: {
    tag_uuid: Scalars["uuid"];
  }) => Maybe<model_has_tags>;
  notifications: (args?: {
    distinct_on?: Maybe<Array<notifications_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<notifications_order_by>>;
    where?: Maybe<notifications_bool_exp>;
  }) => Array<notifications>;
  notifications_aggregate: (args?: {
    distinct_on?: Maybe<Array<notifications_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<notifications_order_by>>;
    where?: Maybe<notifications_bool_exp>;
  }) => notifications_aggregate;
  notifications_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<notifications>;
  outlet_has_addons: (args?: {
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => Array<outlet_has_addons>;
  outlet_has_addons_aggregate: (args?: {
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => outlet_has_addons_aggregate;
  outlet_has_addons_by_pk: (args: {
    outlet_uuid: Scalars["uuid"];
  }) => Maybe<outlet_has_addons>;
  outlets: (args?: {
    distinct_on?: Maybe<Array<outlets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlets_order_by>>;
    where?: Maybe<outlets_bool_exp>;
  }) => Array<outlets>;
  outlets_aggregate: (args?: {
    distinct_on?: Maybe<Array<outlets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlets_order_by>>;
    where?: Maybe<outlets_bool_exp>;
  }) => outlets_aggregate;
  outlets_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<outlets>;
  passes: (args?: {
    distinct_on?: Maybe<Array<passes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_order_by>>;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  passes_activity_logs: (args?: {
    distinct_on?: Maybe<Array<passes_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_activity_logs_order_by>>;
    where?: Maybe<passes_activity_logs_bool_exp>;
  }) => Array<passes_activity_logs>;
  passes_activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<passes_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_activity_logs_order_by>>;
    where?: Maybe<passes_activity_logs_bool_exp>;
  }) => passes_activity_logs_aggregate;
  passes_aggregate: (args?: {
    distinct_on?: Maybe<Array<passes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_order_by>>;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  passes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<passes>;
  payments: (args?: {
    distinct_on?: Maybe<Array<payments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<payments_order_by>>;
    where?: Maybe<payments_bool_exp>;
  }) => Array<payments>;
  payments_aggregate: (args?: {
    distinct_on?: Maybe<Array<payments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<payments_order_by>>;
    where?: Maybe<payments_bool_exp>;
  }) => payments_aggregate;
  payments_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<payments>;
  permissions: (args?: {
    distinct_on?: Maybe<Array<permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<permissions_order_by>>;
    where?: Maybe<permissions_bool_exp>;
  }) => Array<permissions>;
  permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<permissions_order_by>>;
    where?: Maybe<permissions_bool_exp>;
  }) => permissions_aggregate;
  permissions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<permissions>;
  post_comments: (args?: {
    distinct_on?: Maybe<Array<post_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_comments_order_by>>;
    where?: Maybe<post_comments_bool_exp>;
  }) => Array<post_comments>;
  post_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<post_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_comments_order_by>>;
    where?: Maybe<post_comments_bool_exp>;
  }) => post_comments_aggregate;
  post_likes: (args?: {
    distinct_on?: Maybe<Array<post_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_likes_order_by>>;
    where?: Maybe<post_likes_bool_exp>;
  }) => Array<post_likes>;
  post_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<post_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_likes_order_by>>;
    where?: Maybe<post_likes_bool_exp>;
  }) => post_likes_aggregate;
  posts: (args?: {
    distinct_on?: Maybe<Array<posts_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<posts_order_by>>;
    where?: Maybe<posts_bool_exp>;
  }) => Array<posts>;
  posts_aggregate: (args?: {
    distinct_on?: Maybe<Array<posts_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<posts_order_by>>;
    where?: Maybe<posts_bool_exp>;
  }) => posts_aggregate;
  posts_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<posts>;
  questionaires: (args?: {
    distinct_on?: Maybe<Array<questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questionaires_order_by>>;
    where?: Maybe<questionaires_bool_exp>;
  }) => Array<questionaires>;
  questionaires_aggregate: (args?: {
    distinct_on?: Maybe<Array<questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questionaires_order_by>>;
    where?: Maybe<questionaires_bool_exp>;
  }) => questionaires_aggregate;
  questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<questionaires>;
  questions: (args?: {
    distinct_on?: Maybe<Array<questions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questions_order_by>>;
    where?: Maybe<questions_bool_exp>;
  }) => Array<questions>;
  questions_aggregate: (args?: {
    distinct_on?: Maybe<Array<questions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questions_order_by>>;
    where?: Maybe<questions_bool_exp>;
  }) => questions_aggregate;
  questions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<questions>;
  requests: (args?: {
    distinct_on?: Maybe<Array<requests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<requests_order_by>>;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  requests_aggregate: (args?: {
    distinct_on?: Maybe<Array<requests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<requests_order_by>>;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  requests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<requests>;
  reservations: (args?: {
    distinct_on?: Maybe<Array<reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_order_by>>;
    where?: Maybe<reservations_bool_exp>;
  }) => Array<reservations>;
  reservations_activity_logs: (args?: {
    distinct_on?: Maybe<Array<reservations_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_activity_logs_order_by>>;
    where?: Maybe<reservations_activity_logs_bool_exp>;
  }) => Array<reservations_activity_logs>;
  reservations_activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<reservations_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_activity_logs_order_by>>;
    where?: Maybe<reservations_activity_logs_bool_exp>;
  }) => reservations_activity_logs_aggregate;
  reservations_aggregate: (args?: {
    distinct_on?: Maybe<Array<reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_order_by>>;
    where?: Maybe<reservations_bool_exp>;
  }) => reservations_aggregate;
  reservations_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<reservations>;
  review_comments: (args?: {
    distinct_on?: Maybe<Array<review_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_comments_order_by>>;
    where?: Maybe<review_comments_bool_exp>;
  }) => Array<review_comments>;
  review_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_comments_order_by>>;
    where?: Maybe<review_comments_bool_exp>;
  }) => review_comments_aggregate;
  review_likes: (args?: {
    distinct_on?: Maybe<Array<review_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_likes_order_by>>;
    where?: Maybe<review_likes_bool_exp>;
  }) => Array<review_likes>;
  review_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_likes_order_by>>;
    where?: Maybe<review_likes_bool_exp>;
  }) => review_likes_aggregate;
  review_media: (args?: {
    distinct_on?: Maybe<Array<review_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_media_order_by>>;
    where?: Maybe<review_media_bool_exp>;
  }) => Array<review_media>;
  review_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_media_order_by>>;
    where?: Maybe<review_media_bool_exp>;
  }) => review_media_aggregate;
  reviews: (args?: {
    distinct_on?: Maybe<Array<reviews_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reviews_order_by>>;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  reviews_aggregate: (args?: {
    distinct_on?: Maybe<Array<reviews_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reviews_order_by>>;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  reviews_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<reviews>;
  role_has_permissions: (args?: {
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<role_has_permissions_order_by>>;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => Array<role_has_permissions>;
  role_has_permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<role_has_permissions_order_by>>;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => role_has_permissions_aggregate;
  roles: (args?: {
    distinct_on?: Maybe<Array<roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<roles_order_by>>;
    where?: Maybe<roles_bool_exp>;
  }) => Array<roles>;
  roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<roles_order_by>>;
    where?: Maybe<roles_bool_exp>;
  }) => roles_aggregate;
  roles_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<roles>;
  social_relationships: (args?: {
    distinct_on?: Maybe<Array<social_relationships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<social_relationships_order_by>>;
    where?: Maybe<social_relationships_bool_exp>;
  }) => Array<social_relationships>;
  social_relationships_aggregate: (args?: {
    distinct_on?: Maybe<Array<social_relationships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<social_relationships_order_by>>;
    where?: Maybe<social_relationships_bool_exp>;
  }) => social_relationships_aggregate;
  social_relationships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<social_relationships>;
  spaces: (args?: {
    distinct_on?: Maybe<Array<spaces_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_order_by>>;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  spaces_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_order_by>>;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  spaces_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<spaces>;
  spaces_guests: (args?: {
    distinct_on?: Maybe<Array<spaces_guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_guests_order_by>>;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => Array<spaces_guests>;
  spaces_guests_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_guests_order_by>>;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => spaces_guests_aggregate;
  spaces_guests_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<spaces_guests>;
  spaces_usage: (args?: {
    distinct_on?: Maybe<Array<spaces_usage_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_usage_order_by>>;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  spaces_usage_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_usage_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_usage_order_by>>;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  spaces_usage_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<spaces_usage>;
  storage_buckets: (args?: {
    distinct_on?: Maybe<Array<storage_buckets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<storage_buckets_order_by>>;
    where?: Maybe<storage_buckets_bool_exp>;
  }) => Array<storage_buckets>;
  storage_buckets_aggregate: (args?: {
    distinct_on?: Maybe<Array<storage_buckets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<storage_buckets_order_by>>;
    where?: Maybe<storage_buckets_bool_exp>;
  }) => storage_buckets_aggregate;
  storage_buckets_by_pk: (args: {
    id: Scalars["String"];
  }) => Maybe<storage_buckets>;
  stripe_transfers: (args?: {
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<stripe_transfers_order_by>>;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => Array<stripe_transfers>;
  stripe_transfers_aggregate: (args?: {
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<stripe_transfers_order_by>>;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => stripe_transfers_aggregate;
  stripe_transfers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<stripe_transfers>;
  subscriptions: (args?: {
    distinct_on?: Maybe<Array<subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<subscriptions_order_by>>;
    where?: Maybe<subscriptions_bool_exp>;
  }) => Array<subscriptions>;
  subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<subscriptions_order_by>>;
    where?: Maybe<subscriptions_bool_exp>;
  }) => subscriptions_aggregate;
  subscriptions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<subscriptions>;
  supabase_functions_hooks: (args?: {
    distinct_on?: Maybe<Array<supabase_functions_hooks_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<supabase_functions_hooks_order_by>>;
    where?: Maybe<supabase_functions_hooks_bool_exp>;
  }) => Array<supabase_functions_hooks>;
  supabase_functions_hooks_aggregate: (args?: {
    distinct_on?: Maybe<Array<supabase_functions_hooks_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<supabase_functions_hooks_order_by>>;
    where?: Maybe<supabase_functions_hooks_bool_exp>;
  }) => supabase_functions_hooks_aggregate;
  supabase_functions_hooks_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<supabase_functions_hooks>;
  tags: (args?: {
    distinct_on?: Maybe<Array<tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<tags_order_by>>;
    where?: Maybe<tags_bool_exp>;
  }) => Array<tags>;
  tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<tags_order_by>>;
    where?: Maybe<tags_bool_exp>;
  }) => tags_aggregate;
  tags_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<tags>;
  team_memberships: (args?: {
    distinct_on?: Maybe<Array<team_memberships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_memberships_order_by>>;
    where?: Maybe<team_memberships_bool_exp>;
  }) => Array<team_memberships>;
  team_memberships_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_memberships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_memberships_order_by>>;
    where?: Maybe<team_memberships_bool_exp>;
  }) => team_memberships_aggregate;
  team_memberships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_memberships>;
  team_roles: (args?: {
    distinct_on?: Maybe<Array<team_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_roles_order_by>>;
    where?: Maybe<team_roles_bool_exp>;
  }) => Array<team_roles>;
  team_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_roles_order_by>>;
    where?: Maybe<team_roles_bool_exp>;
  }) => team_roles_aggregate;
  team_schedules: (args?: {
    distinct_on?: Maybe<Array<team_schedules_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_schedules_order_by>>;
    where?: Maybe<team_schedules_bool_exp>;
  }) => Array<team_schedules>;
  team_schedules_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_schedules_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_schedules_order_by>>;
    where?: Maybe<team_schedules_bool_exp>;
  }) => team_schedules_aggregate;
  team_schedules_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_schedules>;
  team_subscriptions: (args?: {
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_subscriptions_order_by>>;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => Array<team_subscriptions>;
  team_subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_subscriptions_order_by>>;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => team_subscriptions_aggregate;
  teams: (args?: {
    distinct_on?: Maybe<Array<teams_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<teams_order_by>>;
    where?: Maybe<teams_bool_exp>;
  }) => Array<teams>;
  teams_aggregate: (args?: {
    distinct_on?: Maybe<Array<teams_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<teams_order_by>>;
    where?: Maybe<teams_bool_exp>;
  }) => teams_aggregate;
  teams_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<teams>;
  user_has_reservations: (args?: {
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_has_reservations_order_by>>;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => Array<user_has_reservations>;
  user_has_reservations_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_has_reservations_order_by>>;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => user_has_reservations_aggregate;
  user_has_reservations_by_pk: (args: {
    reservation_uuid: Scalars["uuid"];
  }) => Maybe<user_has_reservations>;
  user_inbox: (args?: {
    distinct_on?: Maybe<Array<user_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_inbox_order_by>>;
    where?: Maybe<user_inbox_bool_exp>;
  }) => Array<user_inbox>;
  user_inbox_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_inbox_order_by>>;
    where?: Maybe<user_inbox_bool_exp>;
  }) => user_inbox_aggregate;
  user_media: (args?: {
    distinct_on?: Maybe<Array<user_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_media_order_by>>;
    where?: Maybe<user_media_bool_exp>;
  }) => Array<user_media>;
  user_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_media_order_by>>;
    where?: Maybe<user_media_bool_exp>;
  }) => user_media_aggregate;
  user_roles: (args?: {
    distinct_on?: Maybe<Array<user_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_roles_order_by>>;
    where?: Maybe<user_roles_bool_exp>;
  }) => Array<user_roles>;
  user_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_roles_order_by>>;
    where?: Maybe<user_roles_bool_exp>;
  }) => user_roles_aggregate;
  user_sessions: (args?: {
    distinct_on?: Maybe<Array<user_sessions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_sessions_order_by>>;
    where?: Maybe<user_sessions_bool_exp>;
  }) => Array<user_sessions>;
  user_sessions_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_sessions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_sessions_order_by>>;
    where?: Maybe<user_sessions_bool_exp>;
  }) => user_sessions_aggregate;
  user_sessions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<user_sessions>;
  user_subscriptions: (args?: {
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_subscriptions_order_by>>;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => Array<user_subscriptions>;
  user_subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_subscriptions_order_by>>;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => user_subscriptions_aggregate;
  users: (args?: {
    distinct_on?: Maybe<Array<users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<users_order_by>>;
    where?: Maybe<users_bool_exp>;
  }) => Array<users>;
  users_aggregate: (args?: {
    distinct_on?: Maybe<Array<users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<users_order_by>>;
    where?: Maybe<users_bool_exp>;
  }) => users_aggregate;
  users_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<users>;
  wishlist: (args?: {
    distinct_on?: Maybe<Array<wishlist_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<wishlist_order_by>>;
    where?: Maybe<wishlist_bool_exp>;
  }) => Array<wishlist>;
  wishlist_aggregate: (args?: {
    distinct_on?: Maybe<Array<wishlist_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<wishlist_order_by>>;
    where?: Maybe<wishlist_bool_exp>;
  }) => wishlist_aggregate;
  wishlist_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<wishlist>;
}

export interface Mutation {
  __typename: "Mutation" | undefined;
  delete_activity_logs: (args: {
    where: activity_logs_bool_exp;
  }) => Maybe<activity_logs_mutation_response>;
  delete_activity_logs_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<activity_logs>;
  delete_aruba_wifi_access: (args: {
    where: aruba_wifi_access_bool_exp;
  }) => Maybe<aruba_wifi_access_mutation_response>;
  delete_aruba_wifi_access_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<aruba_wifi_access>;
  delete_auth_audit_log_entries: (args: {
    where: auth_audit_log_entries_bool_exp;
  }) => Maybe<auth_audit_log_entries_mutation_response>;
  delete_auth_audit_log_entries_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_audit_log_entries>;
  delete_auth_instances: (args: {
    where: auth_instances_bool_exp;
  }) => Maybe<auth_instances_mutation_response>;
  delete_auth_instances_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_instances>;
  delete_auth_refresh_tokens: (args: {
    where: auth_refresh_tokens_bool_exp;
  }) => Maybe<auth_refresh_tokens_mutation_response>;
  delete_auth_refresh_tokens_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<auth_refresh_tokens>;
  delete_auth_schema_migrations: (args: {
    where: auth_schema_migrations_bool_exp;
  }) => Maybe<auth_schema_migrations_mutation_response>;
  delete_auth_schema_migrations_by_pk: (args: {
    version: Scalars["String"];
  }) => Maybe<auth_schema_migrations>;
  delete_auth_users: (args: {
    where: auth_users_bool_exp;
  }) => Maybe<auth_users_mutation_response>;
  delete_auth_users_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<auth_users>;
  delete_brand_campaigns: (args: {
    where: brand_campaigns_bool_exp;
  }) => Maybe<brand_campaigns_mutation_response>;
  delete_brand_campaigns_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<brand_campaigns>;
  delete_brand_discussions: (args: {
    where: brand_discussions_bool_exp;
  }) => Maybe<brand_discussions_mutation_response>;
  delete_brand_inbox: (args: {
    where: brand_inbox_bool_exp;
  }) => Maybe<brand_inbox_mutation_response>;
  delete_brand_media: (args: {
    where: brand_media_bool_exp;
  }) => Maybe<brand_media_mutation_response>;
  delete_brand_tags: (args: {
    where: brand_tags_bool_exp;
  }) => Maybe<brand_tags_mutation_response>;
  delete_brand_users: (args: {
    where: brand_users_bool_exp;
  }) => Maybe<brand_users_mutation_response>;
  delete_brand_users_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<brand_users>;
  delete_brand_wishes: (args: {
    where: brand_wishes_bool_exp;
  }) => Maybe<brand_wishes_mutation_response>;
  delete_brands: (args: {
    where: brands_bool_exp;
  }) => Maybe<brands_mutation_response>;
  delete_brands_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<brands>;
  delete_campaigns: (args: {
    where: campaigns_bool_exp;
  }) => Maybe<campaigns_mutation_response>;
  delete_campaigns_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<campaigns>;
  delete_card: (args: {
    where: card_bool_exp;
  }) => Maybe<card_mutation_response>;
  delete_card_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<card>;
  delete_comment_comments: (args: {
    where: comment_comments_bool_exp;
  }) => Maybe<comment_comments_mutation_response>;
  delete_comment_likes: (args: {
    where: comment_likes_bool_exp;
  }) => Maybe<comment_likes_mutation_response>;
  delete_conversations: (args: {
    where: conversations_bool_exp;
  }) => Maybe<conversations_mutation_response>;
  delete_conversations_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<conversations>;
  delete_currencies: (args: {
    where: currencies_bool_exp;
  }) => Maybe<currencies_mutation_response>;
  delete_currencies_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<currencies>;
  delete_daily_rates: (args: {
    where: daily_rates_bool_exp;
  }) => Maybe<daily_rates_mutation_response>;
  delete_daily_rates_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<daily_rates>;
  delete_default_addons: (args: {
    where: default_addons_bool_exp;
  }) => Maybe<default_addons_mutation_response>;
  delete_default_addons_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<default_addons>;
  delete_discount_codes: (args: {
    where: discount_codes_bool_exp;
  }) => Maybe<discount_codes_mutation_response>;
  delete_discount_codes_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<discount_codes>;
  delete_discussion_user: (args: {
    where: discussion_user_bool_exp;
  }) => Maybe<discussion_user_mutation_response>;
  delete_discussions: (args: {
    where: discussions_bool_exp;
  }) => Maybe<discussions_mutation_response>;
  delete_discussions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<discussions>;
  delete_extensions: (args: {
    where: extensions_bool_exp;
  }) => Maybe<extensions_mutation_response>;
  delete_extensions_by_pk: (args: {
    id: Scalars["String"];
  }) => Maybe<extensions>;
  delete_extensions_geometry_columns: (args: {
    where: extensions_geometry_columns_bool_exp;
  }) => Maybe<extensions_geometry_columns_mutation_response>;
  delete_extensions_spatial_ref_sys: (args: {
    where: extensions_spatial_ref_sys_bool_exp;
  }) => Maybe<extensions_spatial_ref_sys_mutation_response>;
  delete_extensions_spatial_ref_sys_by_pk: (args: {
    srid: Scalars["Int"];
  }) => Maybe<extensions_spatial_ref_sys>;
  delete_floor_plan_grid: (args: {
    where: floor_plan_grid_bool_exp;
  }) => Maybe<floor_plan_grid_mutation_response>;
  delete_floor_plan_grid_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<floor_plan_grid>;
  delete_floor_plans: (args: {
    where: floor_plans_bool_exp;
  }) => Maybe<floor_plans_mutation_response>;
  delete_floor_plans_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<floor_plans>;
  delete_guest_questionaires_answers: (args: {
    where: guest_questionaires_answers_bool_exp;
  }) => Maybe<guest_questionaires_answers_mutation_response>;
  delete_guest_questionaires_answers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guest_questionaires_answers>;
  delete_guests: (args: {
    where: guests_bool_exp;
  }) => Maybe<guests_mutation_response>;
  delete_guests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<guests>;
  delete_guests_has_questionaires: (args: {
    where: guests_has_questionaires_bool_exp;
  }) => Maybe<guests_has_questionaires_mutation_response>;
  delete_guests_has_questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guests_has_questionaires>;
  delete_inboxes: (args: {
    where: inboxes_bool_exp;
  }) => Maybe<inboxes_mutation_response>;
  delete_inboxes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<inboxes>;
  delete_invoice: (args: {
    where: invoice_bool_exp;
  }) => Maybe<invoice_mutation_response>;
  delete_invoice_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<invoice>;
  delete_key_performance_snapshots: (args: {
    where: key_performance_snapshots_bool_exp;
  }) => Maybe<key_performance_snapshots_mutation_response>;
  delete_key_performance_snapshots_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<key_performance_snapshots>;
  delete_listing_categories: (args: {
    where: listing_categories_bool_exp;
  }) => Maybe<listing_categories_mutation_response>;
  delete_listing_categories_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_categories>;
  delete_listing_collections: (args: {
    where: listing_collections_bool_exp;
  }) => Maybe<listing_collections_mutation_response>;
  delete_listing_collections_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_collections>;
  delete_listing_discussions: (args: {
    where: listing_discussions_bool_exp;
  }) => Maybe<listing_discussions_mutation_response>;
  delete_listing_in_collections: (args: {
    where: listing_in_collections_bool_exp;
  }) => Maybe<listing_in_collections_mutation_response>;
  delete_listing_media: (args: {
    where: listing_media_bool_exp;
  }) => Maybe<listing_media_mutation_response>;
  delete_listing_tags: (args: {
    where: listing_tags_bool_exp;
  }) => Maybe<listing_tags_mutation_response>;
  delete_listing_wishes: (args: {
    where: listing_wishes_bool_exp;
  }) => Maybe<listing_wishes_mutation_response>;
  delete_listings: (args: {
    where: listings_bool_exp;
  }) => Maybe<listings_mutation_response>;
  delete_listings_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<listings>;
  delete_logs: (args: {
    where: logs_bool_exp;
  }) => Maybe<logs_mutation_response>;
  delete_logs_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<logs>;
  delete_media: (args: {
    where: media_bool_exp;
  }) => Maybe<media_mutation_response>;
  delete_media_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<media>;
  delete_messages: (args: {
    where: messages_bool_exp;
  }) => Maybe<messages_mutation_response>;
  delete_messages_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<messages>;
  delete_model_has_comments: (args: {
    where: model_has_comments_bool_exp;
  }) => Maybe<model_has_comments_mutation_response>;
  delete_model_has_comments_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<model_has_comments>;
  delete_model_has_likes: (args: {
    where: model_has_likes_bool_exp;
  }) => Maybe<model_has_likes_mutation_response>;
  delete_model_has_permissions: (args: {
    where: model_has_permissions_bool_exp;
  }) => Maybe<model_has_permissions_mutation_response>;
  delete_model_has_roles: (args: {
    where: model_has_roles_bool_exp;
  }) => Maybe<model_has_roles_mutation_response>;
  delete_model_has_tags: (args: {
    where: model_has_tags_bool_exp;
  }) => Maybe<model_has_tags_mutation_response>;
  delete_model_has_tags_by_pk: (args: {
    tag_uuid: Scalars["uuid"];
  }) => Maybe<model_has_tags>;
  delete_notifications: (args: {
    where: notifications_bool_exp;
  }) => Maybe<notifications_mutation_response>;
  delete_notifications_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<notifications>;
  delete_outlet_has_addons: (args: {
    where: outlet_has_addons_bool_exp;
  }) => Maybe<outlet_has_addons_mutation_response>;
  delete_outlet_has_addons_by_pk: (args: {
    outlet_uuid: Scalars["uuid"];
  }) => Maybe<outlet_has_addons>;
  delete_outlets: (args: {
    where: outlets_bool_exp;
  }) => Maybe<outlets_mutation_response>;
  delete_outlets_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<outlets>;
  delete_passes: (args: {
    where: passes_bool_exp;
  }) => Maybe<passes_mutation_response>;
  delete_passes_activity_logs: (args: {
    where: passes_activity_logs_bool_exp;
  }) => Maybe<passes_activity_logs_mutation_response>;
  delete_passes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<passes>;
  delete_payments: (args: {
    where: payments_bool_exp;
  }) => Maybe<payments_mutation_response>;
  delete_payments_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<payments>;
  delete_permissions: (args: {
    where: permissions_bool_exp;
  }) => Maybe<permissions_mutation_response>;
  delete_permissions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<permissions>;
  delete_post_comments: (args: {
    where: post_comments_bool_exp;
  }) => Maybe<post_comments_mutation_response>;
  delete_post_likes: (args: {
    where: post_likes_bool_exp;
  }) => Maybe<post_likes_mutation_response>;
  delete_posts: (args: {
    where: posts_bool_exp;
  }) => Maybe<posts_mutation_response>;
  delete_posts_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<posts>;
  delete_questionaires: (args: {
    where: questionaires_bool_exp;
  }) => Maybe<questionaires_mutation_response>;
  delete_questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<questionaires>;
  delete_questions: (args: {
    where: questions_bool_exp;
  }) => Maybe<questions_mutation_response>;
  delete_questions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<questions>;
  delete_requests: (args: {
    where: requests_bool_exp;
  }) => Maybe<requests_mutation_response>;
  delete_requests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<requests>;
  delete_reservations: (args: {
    where: reservations_bool_exp;
  }) => Maybe<reservations_mutation_response>;
  delete_reservations_activity_logs: (args: {
    where: reservations_activity_logs_bool_exp;
  }) => Maybe<reservations_activity_logs_mutation_response>;
  delete_reservations_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<reservations>;
  delete_review_comments: (args: {
    where: review_comments_bool_exp;
  }) => Maybe<review_comments_mutation_response>;
  delete_review_likes: (args: {
    where: review_likes_bool_exp;
  }) => Maybe<review_likes_mutation_response>;
  delete_review_media: (args: {
    where: review_media_bool_exp;
  }) => Maybe<review_media_mutation_response>;
  delete_reviews: (args: {
    where: reviews_bool_exp;
  }) => Maybe<reviews_mutation_response>;
  delete_reviews_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<reviews>;
  delete_role_has_permissions: (args: {
    where: role_has_permissions_bool_exp;
  }) => Maybe<role_has_permissions_mutation_response>;
  delete_roles: (args: {
    where: roles_bool_exp;
  }) => Maybe<roles_mutation_response>;
  delete_roles_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<roles>;
  delete_social_relationships: (args: {
    where: social_relationships_bool_exp;
  }) => Maybe<social_relationships_mutation_response>;
  delete_social_relationships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<social_relationships>;
  delete_spaces: (args: {
    where: spaces_bool_exp;
  }) => Maybe<spaces_mutation_response>;
  delete_spaces_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<spaces>;
  delete_spaces_guests: (args: {
    where: spaces_guests_bool_exp;
  }) => Maybe<spaces_guests_mutation_response>;
  delete_spaces_guests_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<spaces_guests>;
  delete_spaces_usage: (args: {
    where: spaces_usage_bool_exp;
  }) => Maybe<spaces_usage_mutation_response>;
  delete_spaces_usage_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<spaces_usage>;
  delete_storage_buckets: (args: {
    where: storage_buckets_bool_exp;
  }) => Maybe<storage_buckets_mutation_response>;
  delete_storage_buckets_by_pk: (args: {
    id: Scalars["String"];
  }) => Maybe<storage_buckets>;
  delete_stripe_transfers: (args: {
    where: stripe_transfers_bool_exp;
  }) => Maybe<stripe_transfers_mutation_response>;
  delete_stripe_transfers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<stripe_transfers>;
  delete_subscriptions: (args: {
    where: subscriptions_bool_exp;
  }) => Maybe<subscriptions_mutation_response>;
  delete_subscriptions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<subscriptions>;
  delete_supabase_functions_hooks: (args: {
    where: supabase_functions_hooks_bool_exp;
  }) => Maybe<supabase_functions_hooks_mutation_response>;
  delete_supabase_functions_hooks_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<supabase_functions_hooks>;
  delete_tags: (args: {
    where: tags_bool_exp;
  }) => Maybe<tags_mutation_response>;
  delete_tags_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<tags>;
  delete_team_memberships: (args: {
    where: team_memberships_bool_exp;
  }) => Maybe<team_memberships_mutation_response>;
  delete_team_memberships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_memberships>;
  delete_team_roles: (args: {
    where: team_roles_bool_exp;
  }) => Maybe<team_roles_mutation_response>;
  delete_team_schedules: (args: {
    where: team_schedules_bool_exp;
  }) => Maybe<team_schedules_mutation_response>;
  delete_team_schedules_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_schedules>;
  delete_team_subscriptions: (args: {
    where: team_subscriptions_bool_exp;
  }) => Maybe<team_subscriptions_mutation_response>;
  delete_teams: (args: {
    where: teams_bool_exp;
  }) => Maybe<teams_mutation_response>;
  delete_teams_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<teams>;
  delete_user_has_reservations: (args: {
    where: user_has_reservations_bool_exp;
  }) => Maybe<user_has_reservations_mutation_response>;
  delete_user_has_reservations_by_pk: (args: {
    reservation_uuid: Scalars["uuid"];
  }) => Maybe<user_has_reservations>;
  delete_user_inbox: (args: {
    where: user_inbox_bool_exp;
  }) => Maybe<user_inbox_mutation_response>;
  delete_user_media: (args: {
    where: user_media_bool_exp;
  }) => Maybe<user_media_mutation_response>;
  delete_user_roles: (args: {
    where: user_roles_bool_exp;
  }) => Maybe<user_roles_mutation_response>;
  delete_user_sessions: (args: {
    where: user_sessions_bool_exp;
  }) => Maybe<user_sessions_mutation_response>;
  delete_user_sessions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<user_sessions>;
  delete_user_subscriptions: (args: {
    where: user_subscriptions_bool_exp;
  }) => Maybe<user_subscriptions_mutation_response>;
  delete_users: (args: {
    where: users_bool_exp;
  }) => Maybe<users_mutation_response>;
  delete_users_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<users>;
  delete_wishlist: (args: {
    where: wishlist_bool_exp;
  }) => Maybe<wishlist_mutation_response>;
  delete_wishlist_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<wishlist>;
  insert_activity_logs: (args: {
    objects: Array<activity_logs_insert_input>;
    on_conflict?: Maybe<activity_logs_on_conflict>;
  }) => Maybe<activity_logs_mutation_response>;
  insert_activity_logs_one: (args: {
    object: activity_logs_insert_input;
    on_conflict?: Maybe<activity_logs_on_conflict>;
  }) => Maybe<activity_logs>;
  insert_aruba_wifi_access: (args: {
    objects: Array<aruba_wifi_access_insert_input>;
    on_conflict?: Maybe<aruba_wifi_access_on_conflict>;
  }) => Maybe<aruba_wifi_access_mutation_response>;
  insert_aruba_wifi_access_one: (args: {
    object: aruba_wifi_access_insert_input;
    on_conflict?: Maybe<aruba_wifi_access_on_conflict>;
  }) => Maybe<aruba_wifi_access>;
  insert_auth_audit_log_entries: (args: {
    objects: Array<auth_audit_log_entries_insert_input>;
    on_conflict?: Maybe<auth_audit_log_entries_on_conflict>;
  }) => Maybe<auth_audit_log_entries_mutation_response>;
  insert_auth_audit_log_entries_one: (args: {
    object: auth_audit_log_entries_insert_input;
    on_conflict?: Maybe<auth_audit_log_entries_on_conflict>;
  }) => Maybe<auth_audit_log_entries>;
  insert_auth_instances: (args: {
    objects: Array<auth_instances_insert_input>;
    on_conflict?: Maybe<auth_instances_on_conflict>;
  }) => Maybe<auth_instances_mutation_response>;
  insert_auth_instances_one: (args: {
    object: auth_instances_insert_input;
    on_conflict?: Maybe<auth_instances_on_conflict>;
  }) => Maybe<auth_instances>;
  insert_auth_refresh_tokens: (args: {
    objects: Array<auth_refresh_tokens_insert_input>;
    on_conflict?: Maybe<auth_refresh_tokens_on_conflict>;
  }) => Maybe<auth_refresh_tokens_mutation_response>;
  insert_auth_refresh_tokens_one: (args: {
    object: auth_refresh_tokens_insert_input;
    on_conflict?: Maybe<auth_refresh_tokens_on_conflict>;
  }) => Maybe<auth_refresh_tokens>;
  insert_auth_schema_migrations: (args: {
    objects: Array<auth_schema_migrations_insert_input>;
    on_conflict?: Maybe<auth_schema_migrations_on_conflict>;
  }) => Maybe<auth_schema_migrations_mutation_response>;
  insert_auth_schema_migrations_one: (args: {
    object: auth_schema_migrations_insert_input;
    on_conflict?: Maybe<auth_schema_migrations_on_conflict>;
  }) => Maybe<auth_schema_migrations>;
  insert_auth_users: (args: {
    objects: Array<auth_users_insert_input>;
    on_conflict?: Maybe<auth_users_on_conflict>;
  }) => Maybe<auth_users_mutation_response>;
  insert_auth_users_one: (args: {
    object: auth_users_insert_input;
    on_conflict?: Maybe<auth_users_on_conflict>;
  }) => Maybe<auth_users>;
  insert_brand_campaigns: (args: {
    objects: Array<brand_campaigns_insert_input>;
    on_conflict?: Maybe<brand_campaigns_on_conflict>;
  }) => Maybe<brand_campaigns_mutation_response>;
  insert_brand_campaigns_one: (args: {
    object: brand_campaigns_insert_input;
    on_conflict?: Maybe<brand_campaigns_on_conflict>;
  }) => Maybe<brand_campaigns>;
  insert_brand_discussions: (args: {
    objects: Array<brand_discussions_insert_input>;
  }) => Maybe<brand_discussions_mutation_response>;
  insert_brand_discussions_one: (args: {
    object: brand_discussions_insert_input;
  }) => Maybe<brand_discussions>;
  insert_brand_inbox: (args: {
    objects: Array<brand_inbox_insert_input>;
  }) => Maybe<brand_inbox_mutation_response>;
  insert_brand_inbox_one: (args: {
    object: brand_inbox_insert_input;
  }) => Maybe<brand_inbox>;
  insert_brand_media: (args: {
    objects: Array<brand_media_insert_input>;
  }) => Maybe<brand_media_mutation_response>;
  insert_brand_media_one: (args: {
    object: brand_media_insert_input;
  }) => Maybe<brand_media>;
  insert_brand_tags: (args: {
    objects: Array<brand_tags_insert_input>;
  }) => Maybe<brand_tags_mutation_response>;
  insert_brand_tags_one: (args: {
    object: brand_tags_insert_input;
  }) => Maybe<brand_tags>;
  insert_brand_users: (args: {
    objects: Array<brand_users_insert_input>;
    on_conflict?: Maybe<brand_users_on_conflict>;
  }) => Maybe<brand_users_mutation_response>;
  insert_brand_users_one: (args: {
    object: brand_users_insert_input;
    on_conflict?: Maybe<brand_users_on_conflict>;
  }) => Maybe<brand_users>;
  insert_brand_wishes: (args: {
    objects: Array<brand_wishes_insert_input>;
  }) => Maybe<brand_wishes_mutation_response>;
  insert_brand_wishes_one: (args: {
    object: brand_wishes_insert_input;
  }) => Maybe<brand_wishes>;
  insert_brands: (args: {
    objects: Array<brands_insert_input>;
    on_conflict?: Maybe<brands_on_conflict>;
  }) => Maybe<brands_mutation_response>;
  insert_brands_one: (args: {
    object: brands_insert_input;
    on_conflict?: Maybe<brands_on_conflict>;
  }) => Maybe<brands>;
  insert_campaigns: (args: {
    objects: Array<campaigns_insert_input>;
    on_conflict?: Maybe<campaigns_on_conflict>;
  }) => Maybe<campaigns_mutation_response>;
  insert_campaigns_one: (args: {
    object: campaigns_insert_input;
    on_conflict?: Maybe<campaigns_on_conflict>;
  }) => Maybe<campaigns>;
  insert_card: (args: {
    objects: Array<card_insert_input>;
    on_conflict?: Maybe<card_on_conflict>;
  }) => Maybe<card_mutation_response>;
  insert_card_one: (args: {
    object: card_insert_input;
    on_conflict?: Maybe<card_on_conflict>;
  }) => Maybe<card>;
  insert_comment_comments: (args: {
    objects: Array<comment_comments_insert_input>;
  }) => Maybe<comment_comments_mutation_response>;
  insert_comment_comments_one: (args: {
    object: comment_comments_insert_input;
  }) => Maybe<comment_comments>;
  insert_comment_likes: (args: {
    objects: Array<comment_likes_insert_input>;
  }) => Maybe<comment_likes_mutation_response>;
  insert_comment_likes_one: (args: {
    object: comment_likes_insert_input;
  }) => Maybe<comment_likes>;
  insert_conversations: (args: {
    objects: Array<conversations_insert_input>;
    on_conflict?: Maybe<conversations_on_conflict>;
  }) => Maybe<conversations_mutation_response>;
  insert_conversations_one: (args: {
    object: conversations_insert_input;
    on_conflict?: Maybe<conversations_on_conflict>;
  }) => Maybe<conversations>;
  insert_currencies: (args: {
    objects: Array<currencies_insert_input>;
    on_conflict?: Maybe<currencies_on_conflict>;
  }) => Maybe<currencies_mutation_response>;
  insert_currencies_one: (args: {
    object: currencies_insert_input;
    on_conflict?: Maybe<currencies_on_conflict>;
  }) => Maybe<currencies>;
  insert_daily_rates: (args: {
    objects: Array<daily_rates_insert_input>;
    on_conflict?: Maybe<daily_rates_on_conflict>;
  }) => Maybe<daily_rates_mutation_response>;
  insert_daily_rates_one: (args: {
    object: daily_rates_insert_input;
    on_conflict?: Maybe<daily_rates_on_conflict>;
  }) => Maybe<daily_rates>;
  insert_default_addons: (args: {
    objects: Array<default_addons_insert_input>;
    on_conflict?: Maybe<default_addons_on_conflict>;
  }) => Maybe<default_addons_mutation_response>;
  insert_default_addons_one: (args: {
    object: default_addons_insert_input;
    on_conflict?: Maybe<default_addons_on_conflict>;
  }) => Maybe<default_addons>;
  insert_discount_codes: (args: {
    objects: Array<discount_codes_insert_input>;
    on_conflict?: Maybe<discount_codes_on_conflict>;
  }) => Maybe<discount_codes_mutation_response>;
  insert_discount_codes_one: (args: {
    object: discount_codes_insert_input;
    on_conflict?: Maybe<discount_codes_on_conflict>;
  }) => Maybe<discount_codes>;
  insert_discussion_user: (args: {
    objects: Array<discussion_user_insert_input>;
  }) => Maybe<discussion_user_mutation_response>;
  insert_discussion_user_one: (args: {
    object: discussion_user_insert_input;
  }) => Maybe<discussion_user>;
  insert_discussions: (args: {
    objects: Array<discussions_insert_input>;
    on_conflict?: Maybe<discussions_on_conflict>;
  }) => Maybe<discussions_mutation_response>;
  insert_discussions_one: (args: {
    object: discussions_insert_input;
    on_conflict?: Maybe<discussions_on_conflict>;
  }) => Maybe<discussions>;
  insert_extensions: (args: {
    objects: Array<extensions_insert_input>;
    on_conflict?: Maybe<extensions_on_conflict>;
  }) => Maybe<extensions_mutation_response>;
  insert_extensions_geometry_columns: (args: {
    objects: Array<extensions_geometry_columns_insert_input>;
  }) => Maybe<extensions_geometry_columns_mutation_response>;
  insert_extensions_geometry_columns_one: (args: {
    object: extensions_geometry_columns_insert_input;
  }) => Maybe<extensions_geometry_columns>;
  insert_extensions_one: (args: {
    object: extensions_insert_input;
    on_conflict?: Maybe<extensions_on_conflict>;
  }) => Maybe<extensions>;
  insert_extensions_spatial_ref_sys: (args: {
    objects: Array<extensions_spatial_ref_sys_insert_input>;
    on_conflict?: Maybe<extensions_spatial_ref_sys_on_conflict>;
  }) => Maybe<extensions_spatial_ref_sys_mutation_response>;
  insert_extensions_spatial_ref_sys_one: (args: {
    object: extensions_spatial_ref_sys_insert_input;
    on_conflict?: Maybe<extensions_spatial_ref_sys_on_conflict>;
  }) => Maybe<extensions_spatial_ref_sys>;
  insert_floor_plan_grid: (args: {
    objects: Array<floor_plan_grid_insert_input>;
    on_conflict?: Maybe<floor_plan_grid_on_conflict>;
  }) => Maybe<floor_plan_grid_mutation_response>;
  insert_floor_plan_grid_one: (args: {
    object: floor_plan_grid_insert_input;
    on_conflict?: Maybe<floor_plan_grid_on_conflict>;
  }) => Maybe<floor_plan_grid>;
  insert_floor_plans: (args: {
    objects: Array<floor_plans_insert_input>;
    on_conflict?: Maybe<floor_plans_on_conflict>;
  }) => Maybe<floor_plans_mutation_response>;
  insert_floor_plans_one: (args: {
    object: floor_plans_insert_input;
    on_conflict?: Maybe<floor_plans_on_conflict>;
  }) => Maybe<floor_plans>;
  insert_guest_questionaires_answers: (args: {
    objects: Array<guest_questionaires_answers_insert_input>;
    on_conflict?: Maybe<guest_questionaires_answers_on_conflict>;
  }) => Maybe<guest_questionaires_answers_mutation_response>;
  insert_guest_questionaires_answers_one: (args: {
    object: guest_questionaires_answers_insert_input;
    on_conflict?: Maybe<guest_questionaires_answers_on_conflict>;
  }) => Maybe<guest_questionaires_answers>;
  insert_guests: (args: {
    objects: Array<guests_insert_input>;
    on_conflict?: Maybe<guests_on_conflict>;
  }) => Maybe<guests_mutation_response>;
  insert_guests_has_questionaires: (args: {
    objects: Array<guests_has_questionaires_insert_input>;
    on_conflict?: Maybe<guests_has_questionaires_on_conflict>;
  }) => Maybe<guests_has_questionaires_mutation_response>;
  insert_guests_has_questionaires_one: (args: {
    object: guests_has_questionaires_insert_input;
    on_conflict?: Maybe<guests_has_questionaires_on_conflict>;
  }) => Maybe<guests_has_questionaires>;
  insert_guests_one: (args: {
    object: guests_insert_input;
    on_conflict?: Maybe<guests_on_conflict>;
  }) => Maybe<guests>;
  insert_inboxes: (args: {
    objects: Array<inboxes_insert_input>;
    on_conflict?: Maybe<inboxes_on_conflict>;
  }) => Maybe<inboxes_mutation_response>;
  insert_inboxes_one: (args: {
    object: inboxes_insert_input;
    on_conflict?: Maybe<inboxes_on_conflict>;
  }) => Maybe<inboxes>;
  insert_invoice: (args: {
    objects: Array<invoice_insert_input>;
    on_conflict?: Maybe<invoice_on_conflict>;
  }) => Maybe<invoice_mutation_response>;
  insert_invoice_one: (args: {
    object: invoice_insert_input;
    on_conflict?: Maybe<invoice_on_conflict>;
  }) => Maybe<invoice>;
  insert_key_performance_snapshots: (args: {
    objects: Array<key_performance_snapshots_insert_input>;
    on_conflict?: Maybe<key_performance_snapshots_on_conflict>;
  }) => Maybe<key_performance_snapshots_mutation_response>;
  insert_key_performance_snapshots_one: (args: {
    object: key_performance_snapshots_insert_input;
    on_conflict?: Maybe<key_performance_snapshots_on_conflict>;
  }) => Maybe<key_performance_snapshots>;
  insert_listing_categories: (args: {
    objects: Array<listing_categories_insert_input>;
    on_conflict?: Maybe<listing_categories_on_conflict>;
  }) => Maybe<listing_categories_mutation_response>;
  insert_listing_categories_one: (args: {
    object: listing_categories_insert_input;
    on_conflict?: Maybe<listing_categories_on_conflict>;
  }) => Maybe<listing_categories>;
  insert_listing_collections: (args: {
    objects: Array<listing_collections_insert_input>;
    on_conflict?: Maybe<listing_collections_on_conflict>;
  }) => Maybe<listing_collections_mutation_response>;
  insert_listing_collections_one: (args: {
    object: listing_collections_insert_input;
    on_conflict?: Maybe<listing_collections_on_conflict>;
  }) => Maybe<listing_collections>;
  insert_listing_discussions: (args: {
    objects: Array<listing_discussions_insert_input>;
  }) => Maybe<listing_discussions_mutation_response>;
  insert_listing_discussions_one: (args: {
    object: listing_discussions_insert_input;
  }) => Maybe<listing_discussions>;
  insert_listing_in_collections: (args: {
    objects: Array<listing_in_collections_insert_input>;
  }) => Maybe<listing_in_collections_mutation_response>;
  insert_listing_in_collections_one: (args: {
    object: listing_in_collections_insert_input;
  }) => Maybe<listing_in_collections>;
  insert_listing_media: (args: {
    objects: Array<listing_media_insert_input>;
  }) => Maybe<listing_media_mutation_response>;
  insert_listing_media_one: (args: {
    object: listing_media_insert_input;
  }) => Maybe<listing_media>;
  insert_listing_tags: (args: {
    objects: Array<listing_tags_insert_input>;
  }) => Maybe<listing_tags_mutation_response>;
  insert_listing_tags_one: (args: {
    object: listing_tags_insert_input;
  }) => Maybe<listing_tags>;
  insert_listing_wishes: (args: {
    objects: Array<listing_wishes_insert_input>;
  }) => Maybe<listing_wishes_mutation_response>;
  insert_listing_wishes_one: (args: {
    object: listing_wishes_insert_input;
  }) => Maybe<listing_wishes>;
  insert_listings: (args: {
    objects: Array<listings_insert_input>;
    on_conflict?: Maybe<listings_on_conflict>;
  }) => Maybe<listings_mutation_response>;
  insert_listings_one: (args: {
    object: listings_insert_input;
    on_conflict?: Maybe<listings_on_conflict>;
  }) => Maybe<listings>;
  insert_logs: (args: {
    objects: Array<logs_insert_input>;
    on_conflict?: Maybe<logs_on_conflict>;
  }) => Maybe<logs_mutation_response>;
  insert_logs_one: (args: {
    object: logs_insert_input;
    on_conflict?: Maybe<logs_on_conflict>;
  }) => Maybe<logs>;
  insert_media: (args: {
    objects: Array<media_insert_input>;
    on_conflict?: Maybe<media_on_conflict>;
  }) => Maybe<media_mutation_response>;
  insert_media_one: (args: {
    object: media_insert_input;
    on_conflict?: Maybe<media_on_conflict>;
  }) => Maybe<media>;
  insert_messages: (args: {
    objects: Array<messages_insert_input>;
    on_conflict?: Maybe<messages_on_conflict>;
  }) => Maybe<messages_mutation_response>;
  insert_messages_one: (args: {
    object: messages_insert_input;
    on_conflict?: Maybe<messages_on_conflict>;
  }) => Maybe<messages>;
  insert_model_has_comments: (args: {
    objects: Array<model_has_comments_insert_input>;
    on_conflict?: Maybe<model_has_comments_on_conflict>;
  }) => Maybe<model_has_comments_mutation_response>;
  insert_model_has_comments_one: (args: {
    object: model_has_comments_insert_input;
    on_conflict?: Maybe<model_has_comments_on_conflict>;
  }) => Maybe<model_has_comments>;
  insert_model_has_likes: (args: {
    objects: Array<model_has_likes_insert_input>;
  }) => Maybe<model_has_likes_mutation_response>;
  insert_model_has_likes_one: (args: {
    object: model_has_likes_insert_input;
  }) => Maybe<model_has_likes>;
  insert_model_has_permissions: (args: {
    objects: Array<model_has_permissions_insert_input>;
  }) => Maybe<model_has_permissions_mutation_response>;
  insert_model_has_permissions_one: (args: {
    object: model_has_permissions_insert_input;
  }) => Maybe<model_has_permissions>;
  insert_model_has_roles: (args: {
    objects: Array<model_has_roles_insert_input>;
  }) => Maybe<model_has_roles_mutation_response>;
  insert_model_has_roles_one: (args: {
    object: model_has_roles_insert_input;
  }) => Maybe<model_has_roles>;
  insert_model_has_tags: (args: {
    objects: Array<model_has_tags_insert_input>;
    on_conflict?: Maybe<model_has_tags_on_conflict>;
  }) => Maybe<model_has_tags_mutation_response>;
  insert_model_has_tags_one: (args: {
    object: model_has_tags_insert_input;
    on_conflict?: Maybe<model_has_tags_on_conflict>;
  }) => Maybe<model_has_tags>;
  insert_notifications: (args: {
    objects: Array<notifications_insert_input>;
    on_conflict?: Maybe<notifications_on_conflict>;
  }) => Maybe<notifications_mutation_response>;
  insert_notifications_one: (args: {
    object: notifications_insert_input;
    on_conflict?: Maybe<notifications_on_conflict>;
  }) => Maybe<notifications>;
  insert_outlet_has_addons: (args: {
    objects: Array<outlet_has_addons_insert_input>;
    on_conflict?: Maybe<outlet_has_addons_on_conflict>;
  }) => Maybe<outlet_has_addons_mutation_response>;
  insert_outlet_has_addons_one: (args: {
    object: outlet_has_addons_insert_input;
    on_conflict?: Maybe<outlet_has_addons_on_conflict>;
  }) => Maybe<outlet_has_addons>;
  insert_outlets: (args: {
    objects: Array<outlets_insert_input>;
    on_conflict?: Maybe<outlets_on_conflict>;
  }) => Maybe<outlets_mutation_response>;
  insert_outlets_one: (args: {
    object: outlets_insert_input;
    on_conflict?: Maybe<outlets_on_conflict>;
  }) => Maybe<outlets>;
  insert_passes: (args: {
    objects: Array<passes_insert_input>;
    on_conflict?: Maybe<passes_on_conflict>;
  }) => Maybe<passes_mutation_response>;
  insert_passes_activity_logs: (args: {
    objects: Array<passes_activity_logs_insert_input>;
  }) => Maybe<passes_activity_logs_mutation_response>;
  insert_passes_activity_logs_one: (args: {
    object: passes_activity_logs_insert_input;
  }) => Maybe<passes_activity_logs>;
  insert_passes_one: (args: {
    object: passes_insert_input;
    on_conflict?: Maybe<passes_on_conflict>;
  }) => Maybe<passes>;
  insert_payments: (args: {
    objects: Array<payments_insert_input>;
    on_conflict?: Maybe<payments_on_conflict>;
  }) => Maybe<payments_mutation_response>;
  insert_payments_one: (args: {
    object: payments_insert_input;
    on_conflict?: Maybe<payments_on_conflict>;
  }) => Maybe<payments>;
  insert_permissions: (args: {
    objects: Array<permissions_insert_input>;
    on_conflict?: Maybe<permissions_on_conflict>;
  }) => Maybe<permissions_mutation_response>;
  insert_permissions_one: (args: {
    object: permissions_insert_input;
    on_conflict?: Maybe<permissions_on_conflict>;
  }) => Maybe<permissions>;
  insert_post_comments: (args: {
    objects: Array<post_comments_insert_input>;
  }) => Maybe<post_comments_mutation_response>;
  insert_post_comments_one: (args: {
    object: post_comments_insert_input;
  }) => Maybe<post_comments>;
  insert_post_likes: (args: {
    objects: Array<post_likes_insert_input>;
  }) => Maybe<post_likes_mutation_response>;
  insert_post_likes_one: (args: {
    object: post_likes_insert_input;
  }) => Maybe<post_likes>;
  insert_posts: (args: {
    objects: Array<posts_insert_input>;
    on_conflict?: Maybe<posts_on_conflict>;
  }) => Maybe<posts_mutation_response>;
  insert_posts_one: (args: {
    object: posts_insert_input;
    on_conflict?: Maybe<posts_on_conflict>;
  }) => Maybe<posts>;
  insert_questionaires: (args: {
    objects: Array<questionaires_insert_input>;
    on_conflict?: Maybe<questionaires_on_conflict>;
  }) => Maybe<questionaires_mutation_response>;
  insert_questionaires_one: (args: {
    object: questionaires_insert_input;
    on_conflict?: Maybe<questionaires_on_conflict>;
  }) => Maybe<questionaires>;
  insert_questions: (args: {
    objects: Array<questions_insert_input>;
    on_conflict?: Maybe<questions_on_conflict>;
  }) => Maybe<questions_mutation_response>;
  insert_questions_one: (args: {
    object: questions_insert_input;
    on_conflict?: Maybe<questions_on_conflict>;
  }) => Maybe<questions>;
  insert_requests: (args: {
    objects: Array<requests_insert_input>;
    on_conflict?: Maybe<requests_on_conflict>;
  }) => Maybe<requests_mutation_response>;
  insert_requests_one: (args: {
    object: requests_insert_input;
    on_conflict?: Maybe<requests_on_conflict>;
  }) => Maybe<requests>;
  insert_reservations: (args: {
    objects: Array<reservations_insert_input>;
    on_conflict?: Maybe<reservations_on_conflict>;
  }) => Maybe<reservations_mutation_response>;
  insert_reservations_activity_logs: (args: {
    objects: Array<reservations_activity_logs_insert_input>;
  }) => Maybe<reservations_activity_logs_mutation_response>;
  insert_reservations_activity_logs_one: (args: {
    object: reservations_activity_logs_insert_input;
  }) => Maybe<reservations_activity_logs>;
  insert_reservations_one: (args: {
    object: reservations_insert_input;
    on_conflict?: Maybe<reservations_on_conflict>;
  }) => Maybe<reservations>;
  insert_review_comments: (args: {
    objects: Array<review_comments_insert_input>;
  }) => Maybe<review_comments_mutation_response>;
  insert_review_comments_one: (args: {
    object: review_comments_insert_input;
  }) => Maybe<review_comments>;
  insert_review_likes: (args: {
    objects: Array<review_likes_insert_input>;
  }) => Maybe<review_likes_mutation_response>;
  insert_review_likes_one: (args: {
    object: review_likes_insert_input;
  }) => Maybe<review_likes>;
  insert_review_media: (args: {
    objects: Array<review_media_insert_input>;
  }) => Maybe<review_media_mutation_response>;
  insert_review_media_one: (args: {
    object: review_media_insert_input;
  }) => Maybe<review_media>;
  insert_reviews: (args: {
    objects: Array<reviews_insert_input>;
    on_conflict?: Maybe<reviews_on_conflict>;
  }) => Maybe<reviews_mutation_response>;
  insert_reviews_one: (args: {
    object: reviews_insert_input;
    on_conflict?: Maybe<reviews_on_conflict>;
  }) => Maybe<reviews>;
  insert_role_has_permissions: (args: {
    objects: Array<role_has_permissions_insert_input>;
  }) => Maybe<role_has_permissions_mutation_response>;
  insert_role_has_permissions_one: (args: {
    object: role_has_permissions_insert_input;
  }) => Maybe<role_has_permissions>;
  insert_roles: (args: {
    objects: Array<roles_insert_input>;
    on_conflict?: Maybe<roles_on_conflict>;
  }) => Maybe<roles_mutation_response>;
  insert_roles_one: (args: {
    object: roles_insert_input;
    on_conflict?: Maybe<roles_on_conflict>;
  }) => Maybe<roles>;
  insert_social_relationships: (args: {
    objects: Array<social_relationships_insert_input>;
    on_conflict?: Maybe<social_relationships_on_conflict>;
  }) => Maybe<social_relationships_mutation_response>;
  insert_social_relationships_one: (args: {
    object: social_relationships_insert_input;
    on_conflict?: Maybe<social_relationships_on_conflict>;
  }) => Maybe<social_relationships>;
  insert_spaces: (args: {
    objects: Array<spaces_insert_input>;
    on_conflict?: Maybe<spaces_on_conflict>;
  }) => Maybe<spaces_mutation_response>;
  insert_spaces_guests: (args: {
    objects: Array<spaces_guests_insert_input>;
    on_conflict?: Maybe<spaces_guests_on_conflict>;
  }) => Maybe<spaces_guests_mutation_response>;
  insert_spaces_guests_one: (args: {
    object: spaces_guests_insert_input;
    on_conflict?: Maybe<spaces_guests_on_conflict>;
  }) => Maybe<spaces_guests>;
  insert_spaces_one: (args: {
    object: spaces_insert_input;
    on_conflict?: Maybe<spaces_on_conflict>;
  }) => Maybe<spaces>;
  insert_spaces_usage: (args: {
    objects: Array<spaces_usage_insert_input>;
    on_conflict?: Maybe<spaces_usage_on_conflict>;
  }) => Maybe<spaces_usage_mutation_response>;
  insert_spaces_usage_one: (args: {
    object: spaces_usage_insert_input;
    on_conflict?: Maybe<spaces_usage_on_conflict>;
  }) => Maybe<spaces_usage>;
  insert_storage_buckets: (args: {
    objects: Array<storage_buckets_insert_input>;
    on_conflict?: Maybe<storage_buckets_on_conflict>;
  }) => Maybe<storage_buckets_mutation_response>;
  insert_storage_buckets_one: (args: {
    object: storage_buckets_insert_input;
    on_conflict?: Maybe<storage_buckets_on_conflict>;
  }) => Maybe<storage_buckets>;
  insert_stripe_transfers: (args: {
    objects: Array<stripe_transfers_insert_input>;
    on_conflict?: Maybe<stripe_transfers_on_conflict>;
  }) => Maybe<stripe_transfers_mutation_response>;
  insert_stripe_transfers_one: (args: {
    object: stripe_transfers_insert_input;
    on_conflict?: Maybe<stripe_transfers_on_conflict>;
  }) => Maybe<stripe_transfers>;
  insert_subscriptions: (args: {
    objects: Array<subscriptions_insert_input>;
    on_conflict?: Maybe<subscriptions_on_conflict>;
  }) => Maybe<subscriptions_mutation_response>;
  insert_subscriptions_one: (args: {
    object: subscriptions_insert_input;
    on_conflict?: Maybe<subscriptions_on_conflict>;
  }) => Maybe<subscriptions>;
  insert_supabase_functions_hooks: (args: {
    objects: Array<supabase_functions_hooks_insert_input>;
    on_conflict?: Maybe<supabase_functions_hooks_on_conflict>;
  }) => Maybe<supabase_functions_hooks_mutation_response>;
  insert_supabase_functions_hooks_one: (args: {
    object: supabase_functions_hooks_insert_input;
    on_conflict?: Maybe<supabase_functions_hooks_on_conflict>;
  }) => Maybe<supabase_functions_hooks>;
  insert_tags: (args: {
    objects: Array<tags_insert_input>;
    on_conflict?: Maybe<tags_on_conflict>;
  }) => Maybe<tags_mutation_response>;
  insert_tags_one: (args: {
    object: tags_insert_input;
    on_conflict?: Maybe<tags_on_conflict>;
  }) => Maybe<tags>;
  insert_team_memberships: (args: {
    objects: Array<team_memberships_insert_input>;
    on_conflict?: Maybe<team_memberships_on_conflict>;
  }) => Maybe<team_memberships_mutation_response>;
  insert_team_memberships_one: (args: {
    object: team_memberships_insert_input;
    on_conflict?: Maybe<team_memberships_on_conflict>;
  }) => Maybe<team_memberships>;
  insert_team_roles: (args: {
    objects: Array<team_roles_insert_input>;
  }) => Maybe<team_roles_mutation_response>;
  insert_team_roles_one: (args: {
    object: team_roles_insert_input;
  }) => Maybe<team_roles>;
  insert_team_schedules: (args: {
    objects: Array<team_schedules_insert_input>;
    on_conflict?: Maybe<team_schedules_on_conflict>;
  }) => Maybe<team_schedules_mutation_response>;
  insert_team_schedules_one: (args: {
    object: team_schedules_insert_input;
    on_conflict?: Maybe<team_schedules_on_conflict>;
  }) => Maybe<team_schedules>;
  insert_team_subscriptions: (args: {
    objects: Array<team_subscriptions_insert_input>;
  }) => Maybe<team_subscriptions_mutation_response>;
  insert_team_subscriptions_one: (args: {
    object: team_subscriptions_insert_input;
  }) => Maybe<team_subscriptions>;
  insert_teams: (args: {
    objects: Array<teams_insert_input>;
    on_conflict?: Maybe<teams_on_conflict>;
  }) => Maybe<teams_mutation_response>;
  insert_teams_one: (args: {
    object: teams_insert_input;
    on_conflict?: Maybe<teams_on_conflict>;
  }) => Maybe<teams>;
  insert_user_has_reservations: (args: {
    objects: Array<user_has_reservations_insert_input>;
    on_conflict?: Maybe<user_has_reservations_on_conflict>;
  }) => Maybe<user_has_reservations_mutation_response>;
  insert_user_has_reservations_one: (args: {
    object: user_has_reservations_insert_input;
    on_conflict?: Maybe<user_has_reservations_on_conflict>;
  }) => Maybe<user_has_reservations>;
  insert_user_inbox: (args: {
    objects: Array<user_inbox_insert_input>;
  }) => Maybe<user_inbox_mutation_response>;
  insert_user_inbox_one: (args: {
    object: user_inbox_insert_input;
  }) => Maybe<user_inbox>;
  insert_user_media: (args: {
    objects: Array<user_media_insert_input>;
  }) => Maybe<user_media_mutation_response>;
  insert_user_media_one: (args: {
    object: user_media_insert_input;
  }) => Maybe<user_media>;
  insert_user_roles: (args: {
    objects: Array<user_roles_insert_input>;
  }) => Maybe<user_roles_mutation_response>;
  insert_user_roles_one: (args: {
    object: user_roles_insert_input;
  }) => Maybe<user_roles>;
  insert_user_sessions: (args: {
    objects: Array<user_sessions_insert_input>;
    on_conflict?: Maybe<user_sessions_on_conflict>;
  }) => Maybe<user_sessions_mutation_response>;
  insert_user_sessions_one: (args: {
    object: user_sessions_insert_input;
    on_conflict?: Maybe<user_sessions_on_conflict>;
  }) => Maybe<user_sessions>;
  insert_user_subscriptions: (args: {
    objects: Array<user_subscriptions_insert_input>;
  }) => Maybe<user_subscriptions_mutation_response>;
  insert_user_subscriptions_one: (args: {
    object: user_subscriptions_insert_input;
  }) => Maybe<user_subscriptions>;
  insert_users: (args: {
    objects: Array<users_insert_input>;
    on_conflict?: Maybe<users_on_conflict>;
  }) => Maybe<users_mutation_response>;
  insert_users_one: (args: {
    object: users_insert_input;
    on_conflict?: Maybe<users_on_conflict>;
  }) => Maybe<users>;
  insert_wishlist: (args: {
    objects: Array<wishlist_insert_input>;
    on_conflict?: Maybe<wishlist_on_conflict>;
  }) => Maybe<wishlist_mutation_response>;
  insert_wishlist_one: (args: {
    object: wishlist_insert_input;
    on_conflict?: Maybe<wishlist_on_conflict>;
  }) => Maybe<wishlist>;
  update_activity_logs: (args: {
    _set?: Maybe<activity_logs_set_input>;
    where: activity_logs_bool_exp;
  }) => Maybe<activity_logs_mutation_response>;
  update_activity_logs_by_pk: (args: {
    _set?: Maybe<activity_logs_set_input>;
    pk_columns: activity_logs_pk_columns_input;
  }) => Maybe<activity_logs>;
  update_aruba_wifi_access: (args: {
    _set?: Maybe<aruba_wifi_access_set_input>;
    where: aruba_wifi_access_bool_exp;
  }) => Maybe<aruba_wifi_access_mutation_response>;
  update_aruba_wifi_access_by_pk: (args: {
    _set?: Maybe<aruba_wifi_access_set_input>;
    pk_columns: aruba_wifi_access_pk_columns_input;
  }) => Maybe<aruba_wifi_access>;
  update_auth_audit_log_entries: (args: {
    _set?: Maybe<auth_audit_log_entries_set_input>;
    where: auth_audit_log_entries_bool_exp;
  }) => Maybe<auth_audit_log_entries_mutation_response>;
  update_auth_audit_log_entries_by_pk: (args: {
    _set?: Maybe<auth_audit_log_entries_set_input>;
    pk_columns: auth_audit_log_entries_pk_columns_input;
  }) => Maybe<auth_audit_log_entries>;
  update_auth_instances: (args: {
    _set?: Maybe<auth_instances_set_input>;
    where: auth_instances_bool_exp;
  }) => Maybe<auth_instances_mutation_response>;
  update_auth_instances_by_pk: (args: {
    _set?: Maybe<auth_instances_set_input>;
    pk_columns: auth_instances_pk_columns_input;
  }) => Maybe<auth_instances>;
  update_auth_refresh_tokens: (args: {
    _inc?: Maybe<auth_refresh_tokens_inc_input>;
    _set?: Maybe<auth_refresh_tokens_set_input>;
    where: auth_refresh_tokens_bool_exp;
  }) => Maybe<auth_refresh_tokens_mutation_response>;
  update_auth_refresh_tokens_by_pk: (args: {
    _inc?: Maybe<auth_refresh_tokens_inc_input>;
    _set?: Maybe<auth_refresh_tokens_set_input>;
    pk_columns: auth_refresh_tokens_pk_columns_input;
  }) => Maybe<auth_refresh_tokens>;
  update_auth_schema_migrations: (args: {
    _set?: Maybe<auth_schema_migrations_set_input>;
    where: auth_schema_migrations_bool_exp;
  }) => Maybe<auth_schema_migrations_mutation_response>;
  update_auth_schema_migrations_by_pk: (args: {
    _set?: Maybe<auth_schema_migrations_set_input>;
    pk_columns: auth_schema_migrations_pk_columns_input;
  }) => Maybe<auth_schema_migrations>;
  update_auth_users: (args: {
    _append?: Maybe<auth_users_append_input>;
    _delete_at_path?: Maybe<auth_users_delete_at_path_input>;
    _delete_elem?: Maybe<auth_users_delete_elem_input>;
    _delete_key?: Maybe<auth_users_delete_key_input>;
    _inc?: Maybe<auth_users_inc_input>;
    _prepend?: Maybe<auth_users_prepend_input>;
    _set?: Maybe<auth_users_set_input>;
    where: auth_users_bool_exp;
  }) => Maybe<auth_users_mutation_response>;
  update_auth_users_by_pk: (args: {
    _append?: Maybe<auth_users_append_input>;
    _delete_at_path?: Maybe<auth_users_delete_at_path_input>;
    _delete_elem?: Maybe<auth_users_delete_elem_input>;
    _delete_key?: Maybe<auth_users_delete_key_input>;
    _inc?: Maybe<auth_users_inc_input>;
    _prepend?: Maybe<auth_users_prepend_input>;
    _set?: Maybe<auth_users_set_input>;
    pk_columns: auth_users_pk_columns_input;
  }) => Maybe<auth_users>;
  update_brand_campaigns: (args: {
    _set?: Maybe<brand_campaigns_set_input>;
    where: brand_campaigns_bool_exp;
  }) => Maybe<brand_campaigns_mutation_response>;
  update_brand_campaigns_by_pk: (args: {
    _set?: Maybe<brand_campaigns_set_input>;
    pk_columns: brand_campaigns_pk_columns_input;
  }) => Maybe<brand_campaigns>;
  update_brand_discussions: (args: {
    _inc?: Maybe<brand_discussions_inc_input>;
    _set?: Maybe<brand_discussions_set_input>;
    where: brand_discussions_bool_exp;
  }) => Maybe<brand_discussions_mutation_response>;
  update_brand_inbox: (args: {
    _set?: Maybe<brand_inbox_set_input>;
    where: brand_inbox_bool_exp;
  }) => Maybe<brand_inbox_mutation_response>;
  update_brand_media: (args: {
    _inc?: Maybe<brand_media_inc_input>;
    _set?: Maybe<brand_media_set_input>;
    where: brand_media_bool_exp;
  }) => Maybe<brand_media_mutation_response>;
  update_brand_tags: (args: {
    _set?: Maybe<brand_tags_set_input>;
    where: brand_tags_bool_exp;
  }) => Maybe<brand_tags_mutation_response>;
  update_brand_users: (args: {
    _set?: Maybe<brand_users_set_input>;
    where: brand_users_bool_exp;
  }) => Maybe<brand_users_mutation_response>;
  update_brand_users_by_pk: (args: {
    _set?: Maybe<brand_users_set_input>;
    pk_columns: brand_users_pk_columns_input;
  }) => Maybe<brand_users>;
  update_brand_wishes: (args: {
    _set?: Maybe<brand_wishes_set_input>;
    where: brand_wishes_bool_exp;
  }) => Maybe<brand_wishes_mutation_response>;
  update_brands: (args: {
    _set?: Maybe<brands_set_input>;
    where: brands_bool_exp;
  }) => Maybe<brands_mutation_response>;
  update_brands_by_pk: (args: {
    _set?: Maybe<brands_set_input>;
    pk_columns: brands_pk_columns_input;
  }) => Maybe<brands>;
  update_campaigns: (args: {
    _set?: Maybe<campaigns_set_input>;
    where: campaigns_bool_exp;
  }) => Maybe<campaigns_mutation_response>;
  update_campaigns_by_pk: (args: {
    _set?: Maybe<campaigns_set_input>;
    pk_columns: campaigns_pk_columns_input;
  }) => Maybe<campaigns>;
  update_card: (args: {
    _set?: Maybe<card_set_input>;
    where: card_bool_exp;
  }) => Maybe<card_mutation_response>;
  update_card_by_pk: (args: {
    _set?: Maybe<card_set_input>;
    pk_columns: card_pk_columns_input;
  }) => Maybe<card>;
  update_comment_comments: (args: {
    _set?: Maybe<comment_comments_set_input>;
    where: comment_comments_bool_exp;
  }) => Maybe<comment_comments_mutation_response>;
  update_comment_likes: (args: {
    _set?: Maybe<comment_likes_set_input>;
    where: comment_likes_bool_exp;
  }) => Maybe<comment_likes_mutation_response>;
  update_conversations: (args: {
    _set?: Maybe<conversations_set_input>;
    where: conversations_bool_exp;
  }) => Maybe<conversations_mutation_response>;
  update_conversations_by_pk: (args: {
    _set?: Maybe<conversations_set_input>;
    pk_columns: conversations_pk_columns_input;
  }) => Maybe<conversations>;
  update_currencies: (args: {
    _set?: Maybe<currencies_set_input>;
    where: currencies_bool_exp;
  }) => Maybe<currencies_mutation_response>;
  update_currencies_by_pk: (args: {
    _set?: Maybe<currencies_set_input>;
    pk_columns: currencies_pk_columns_input;
  }) => Maybe<currencies>;
  update_daily_rates: (args: {
    _inc?: Maybe<daily_rates_inc_input>;
    _set?: Maybe<daily_rates_set_input>;
    where: daily_rates_bool_exp;
  }) => Maybe<daily_rates_mutation_response>;
  update_daily_rates_by_pk: (args: {
    _inc?: Maybe<daily_rates_inc_input>;
    _set?: Maybe<daily_rates_set_input>;
    pk_columns: daily_rates_pk_columns_input;
  }) => Maybe<daily_rates>;
  update_default_addons: (args: {
    _inc?: Maybe<default_addons_inc_input>;
    _set?: Maybe<default_addons_set_input>;
    where: default_addons_bool_exp;
  }) => Maybe<default_addons_mutation_response>;
  update_default_addons_by_pk: (args: {
    _inc?: Maybe<default_addons_inc_input>;
    _set?: Maybe<default_addons_set_input>;
    pk_columns: default_addons_pk_columns_input;
  }) => Maybe<default_addons>;
  update_discount_codes: (args: {
    _inc?: Maybe<discount_codes_inc_input>;
    _set?: Maybe<discount_codes_set_input>;
    where: discount_codes_bool_exp;
  }) => Maybe<discount_codes_mutation_response>;
  update_discount_codes_by_pk: (args: {
    _inc?: Maybe<discount_codes_inc_input>;
    _set?: Maybe<discount_codes_set_input>;
    pk_columns: discount_codes_pk_columns_input;
  }) => Maybe<discount_codes>;
  update_discussion_user: (args: {
    _set?: Maybe<discussion_user_set_input>;
    where: discussion_user_bool_exp;
  }) => Maybe<discussion_user_mutation_response>;
  update_discussions: (args: {
    _inc?: Maybe<discussions_inc_input>;
    _set?: Maybe<discussions_set_input>;
    where: discussions_bool_exp;
  }) => Maybe<discussions_mutation_response>;
  update_discussions_by_pk: (args: {
    _inc?: Maybe<discussions_inc_input>;
    _set?: Maybe<discussions_set_input>;
    pk_columns: discussions_pk_columns_input;
  }) => Maybe<discussions>;
  update_extensions: (args: {
    _inc?: Maybe<extensions_inc_input>;
    _set?: Maybe<extensions_set_input>;
    where: extensions_bool_exp;
  }) => Maybe<extensions_mutation_response>;
  update_extensions_by_pk: (args: {
    _inc?: Maybe<extensions_inc_input>;
    _set?: Maybe<extensions_set_input>;
    pk_columns: extensions_pk_columns_input;
  }) => Maybe<extensions>;
  update_extensions_geometry_columns: (args: {
    _inc?: Maybe<extensions_geometry_columns_inc_input>;
    _set?: Maybe<extensions_geometry_columns_set_input>;
    where: extensions_geometry_columns_bool_exp;
  }) => Maybe<extensions_geometry_columns_mutation_response>;
  update_extensions_spatial_ref_sys: (args: {
    _inc?: Maybe<extensions_spatial_ref_sys_inc_input>;
    _set?: Maybe<extensions_spatial_ref_sys_set_input>;
    where: extensions_spatial_ref_sys_bool_exp;
  }) => Maybe<extensions_spatial_ref_sys_mutation_response>;
  update_extensions_spatial_ref_sys_by_pk: (args: {
    _inc?: Maybe<extensions_spatial_ref_sys_inc_input>;
    _set?: Maybe<extensions_spatial_ref_sys_set_input>;
    pk_columns: extensions_spatial_ref_sys_pk_columns_input;
  }) => Maybe<extensions_spatial_ref_sys>;
  update_floor_plan_grid: (args: {
    _inc?: Maybe<floor_plan_grid_inc_input>;
    _set?: Maybe<floor_plan_grid_set_input>;
    where: floor_plan_grid_bool_exp;
  }) => Maybe<floor_plan_grid_mutation_response>;
  update_floor_plan_grid_by_pk: (args: {
    _inc?: Maybe<floor_plan_grid_inc_input>;
    _set?: Maybe<floor_plan_grid_set_input>;
    pk_columns: floor_plan_grid_pk_columns_input;
  }) => Maybe<floor_plan_grid>;
  update_floor_plans: (args: {
    _set?: Maybe<floor_plans_set_input>;
    where: floor_plans_bool_exp;
  }) => Maybe<floor_plans_mutation_response>;
  update_floor_plans_by_pk: (args: {
    _set?: Maybe<floor_plans_set_input>;
    pk_columns: floor_plans_pk_columns_input;
  }) => Maybe<floor_plans>;
  update_guest_questionaires_answers: (args: {
    _set?: Maybe<guest_questionaires_answers_set_input>;
    where: guest_questionaires_answers_bool_exp;
  }) => Maybe<guest_questionaires_answers_mutation_response>;
  update_guest_questionaires_answers_by_pk: (args: {
    _set?: Maybe<guest_questionaires_answers_set_input>;
    pk_columns: guest_questionaires_answers_pk_columns_input;
  }) => Maybe<guest_questionaires_answers>;
  update_guests: (args: {
    _set?: Maybe<guests_set_input>;
    where: guests_bool_exp;
  }) => Maybe<guests_mutation_response>;
  update_guests_by_pk: (args: {
    _set?: Maybe<guests_set_input>;
    pk_columns: guests_pk_columns_input;
  }) => Maybe<guests>;
  update_guests_has_questionaires: (args: {
    _set?: Maybe<guests_has_questionaires_set_input>;
    where: guests_has_questionaires_bool_exp;
  }) => Maybe<guests_has_questionaires_mutation_response>;
  update_guests_has_questionaires_by_pk: (args: {
    _set?: Maybe<guests_has_questionaires_set_input>;
    pk_columns: guests_has_questionaires_pk_columns_input;
  }) => Maybe<guests_has_questionaires>;
  update_inboxes: (args: {
    _set?: Maybe<inboxes_set_input>;
    where: inboxes_bool_exp;
  }) => Maybe<inboxes_mutation_response>;
  update_inboxes_by_pk: (args: {
    _set?: Maybe<inboxes_set_input>;
    pk_columns: inboxes_pk_columns_input;
  }) => Maybe<inboxes>;
  update_invoice: (args: {
    _inc?: Maybe<invoice_inc_input>;
    _set?: Maybe<invoice_set_input>;
    where: invoice_bool_exp;
  }) => Maybe<invoice_mutation_response>;
  update_invoice_by_pk: (args: {
    _inc?: Maybe<invoice_inc_input>;
    _set?: Maybe<invoice_set_input>;
    pk_columns: invoice_pk_columns_input;
  }) => Maybe<invoice>;
  update_key_performance_snapshots: (args: {
    _set?: Maybe<key_performance_snapshots_set_input>;
    where: key_performance_snapshots_bool_exp;
  }) => Maybe<key_performance_snapshots_mutation_response>;
  update_key_performance_snapshots_by_pk: (args: {
    _set?: Maybe<key_performance_snapshots_set_input>;
    pk_columns: key_performance_snapshots_pk_columns_input;
  }) => Maybe<key_performance_snapshots>;
  update_listing_categories: (args: {
    _inc?: Maybe<listing_categories_inc_input>;
    _set?: Maybe<listing_categories_set_input>;
    where: listing_categories_bool_exp;
  }) => Maybe<listing_categories_mutation_response>;
  update_listing_categories_by_pk: (args: {
    _inc?: Maybe<listing_categories_inc_input>;
    _set?: Maybe<listing_categories_set_input>;
    pk_columns: listing_categories_pk_columns_input;
  }) => Maybe<listing_categories>;
  update_listing_collections: (args: {
    _inc?: Maybe<listing_collections_inc_input>;
    _set?: Maybe<listing_collections_set_input>;
    where: listing_collections_bool_exp;
  }) => Maybe<listing_collections_mutation_response>;
  update_listing_collections_by_pk: (args: {
    _inc?: Maybe<listing_collections_inc_input>;
    _set?: Maybe<listing_collections_set_input>;
    pk_columns: listing_collections_pk_columns_input;
  }) => Maybe<listing_collections>;
  update_listing_discussions: (args: {
    _inc?: Maybe<listing_discussions_inc_input>;
    _set?: Maybe<listing_discussions_set_input>;
    where: listing_discussions_bool_exp;
  }) => Maybe<listing_discussions_mutation_response>;
  update_listing_in_collections: (args: {
    _set?: Maybe<listing_in_collections_set_input>;
    where: listing_in_collections_bool_exp;
  }) => Maybe<listing_in_collections_mutation_response>;
  update_listing_media: (args: {
    _inc?: Maybe<listing_media_inc_input>;
    _set?: Maybe<listing_media_set_input>;
    where: listing_media_bool_exp;
  }) => Maybe<listing_media_mutation_response>;
  update_listing_tags: (args: {
    _set?: Maybe<listing_tags_set_input>;
    where: listing_tags_bool_exp;
  }) => Maybe<listing_tags_mutation_response>;
  update_listing_wishes: (args: {
    _set?: Maybe<listing_wishes_set_input>;
    where: listing_wishes_bool_exp;
  }) => Maybe<listing_wishes_mutation_response>;
  update_listings: (args: {
    _inc?: Maybe<listings_inc_input>;
    _set?: Maybe<listings_set_input>;
    where: listings_bool_exp;
  }) => Maybe<listings_mutation_response>;
  update_listings_by_pk: (args: {
    _inc?: Maybe<listings_inc_input>;
    _set?: Maybe<listings_set_input>;
    pk_columns: listings_pk_columns_input;
  }) => Maybe<listings>;
  update_logs: (args: {
    _set?: Maybe<logs_set_input>;
    where: logs_bool_exp;
  }) => Maybe<logs_mutation_response>;
  update_logs_by_pk: (args: {
    _set?: Maybe<logs_set_input>;
    pk_columns: logs_pk_columns_input;
  }) => Maybe<logs>;
  update_media: (args: {
    _inc?: Maybe<media_inc_input>;
    _set?: Maybe<media_set_input>;
    where: media_bool_exp;
  }) => Maybe<media_mutation_response>;
  update_media_by_pk: (args: {
    _inc?: Maybe<media_inc_input>;
    _set?: Maybe<media_set_input>;
    pk_columns: media_pk_columns_input;
  }) => Maybe<media>;
  update_messages: (args: {
    _set?: Maybe<messages_set_input>;
    where: messages_bool_exp;
  }) => Maybe<messages_mutation_response>;
  update_messages_by_pk: (args: {
    _set?: Maybe<messages_set_input>;
    pk_columns: messages_pk_columns_input;
  }) => Maybe<messages>;
  update_model_has_comments: (args: {
    _set?: Maybe<model_has_comments_set_input>;
    where: model_has_comments_bool_exp;
  }) => Maybe<model_has_comments_mutation_response>;
  update_model_has_comments_by_pk: (args: {
    _set?: Maybe<model_has_comments_set_input>;
    pk_columns: model_has_comments_pk_columns_input;
  }) => Maybe<model_has_comments>;
  update_model_has_likes: (args: {
    _set?: Maybe<model_has_likes_set_input>;
    where: model_has_likes_bool_exp;
  }) => Maybe<model_has_likes_mutation_response>;
  update_model_has_permissions: (args: {
    _set?: Maybe<model_has_permissions_set_input>;
    where: model_has_permissions_bool_exp;
  }) => Maybe<model_has_permissions_mutation_response>;
  update_model_has_roles: (args: {
    _set?: Maybe<model_has_roles_set_input>;
    where: model_has_roles_bool_exp;
  }) => Maybe<model_has_roles_mutation_response>;
  update_model_has_tags: (args: {
    _set?: Maybe<model_has_tags_set_input>;
    where: model_has_tags_bool_exp;
  }) => Maybe<model_has_tags_mutation_response>;
  update_model_has_tags_by_pk: (args: {
    _set?: Maybe<model_has_tags_set_input>;
    pk_columns: model_has_tags_pk_columns_input;
  }) => Maybe<model_has_tags>;
  update_notifications: (args: {
    _set?: Maybe<notifications_set_input>;
    where: notifications_bool_exp;
  }) => Maybe<notifications_mutation_response>;
  update_notifications_by_pk: (args: {
    _set?: Maybe<notifications_set_input>;
    pk_columns: notifications_pk_columns_input;
  }) => Maybe<notifications>;
  update_outlet_has_addons: (args: {
    _inc?: Maybe<outlet_has_addons_inc_input>;
    _set?: Maybe<outlet_has_addons_set_input>;
    where: outlet_has_addons_bool_exp;
  }) => Maybe<outlet_has_addons_mutation_response>;
  update_outlet_has_addons_by_pk: (args: {
    _inc?: Maybe<outlet_has_addons_inc_input>;
    _set?: Maybe<outlet_has_addons_set_input>;
    pk_columns: outlet_has_addons_pk_columns_input;
  }) => Maybe<outlet_has_addons>;
  update_outlets: (args: {
    _inc?: Maybe<outlets_inc_input>;
    _set?: Maybe<outlets_set_input>;
    where: outlets_bool_exp;
  }) => Maybe<outlets_mutation_response>;
  update_outlets_by_pk: (args: {
    _inc?: Maybe<outlets_inc_input>;
    _set?: Maybe<outlets_set_input>;
    pk_columns: outlets_pk_columns_input;
  }) => Maybe<outlets>;
  update_passes: (args: {
    _set?: Maybe<passes_set_input>;
    where: passes_bool_exp;
  }) => Maybe<passes_mutation_response>;
  update_passes_activity_logs: (args: {
    _set?: Maybe<passes_activity_logs_set_input>;
    where: passes_activity_logs_bool_exp;
  }) => Maybe<passes_activity_logs_mutation_response>;
  update_passes_by_pk: (args: {
    _set?: Maybe<passes_set_input>;
    pk_columns: passes_pk_columns_input;
  }) => Maybe<passes>;
  update_payments: (args: {
    _inc?: Maybe<payments_inc_input>;
    _set?: Maybe<payments_set_input>;
    where: payments_bool_exp;
  }) => Maybe<payments_mutation_response>;
  update_payments_by_pk: (args: {
    _inc?: Maybe<payments_inc_input>;
    _set?: Maybe<payments_set_input>;
    pk_columns: payments_pk_columns_input;
  }) => Maybe<payments>;
  update_permissions: (args: {
    _set?: Maybe<permissions_set_input>;
    where: permissions_bool_exp;
  }) => Maybe<permissions_mutation_response>;
  update_permissions_by_pk: (args: {
    _set?: Maybe<permissions_set_input>;
    pk_columns: permissions_pk_columns_input;
  }) => Maybe<permissions>;
  update_post_comments: (args: {
    _set?: Maybe<post_comments_set_input>;
    where: post_comments_bool_exp;
  }) => Maybe<post_comments_mutation_response>;
  update_post_likes: (args: {
    _set?: Maybe<post_likes_set_input>;
    where: post_likes_bool_exp;
  }) => Maybe<post_likes_mutation_response>;
  update_posts: (args: {
    _set?: Maybe<posts_set_input>;
    where: posts_bool_exp;
  }) => Maybe<posts_mutation_response>;
  update_posts_by_pk: (args: {
    _set?: Maybe<posts_set_input>;
    pk_columns: posts_pk_columns_input;
  }) => Maybe<posts>;
  update_questionaires: (args: {
    _set?: Maybe<questionaires_set_input>;
    where: questionaires_bool_exp;
  }) => Maybe<questionaires_mutation_response>;
  update_questionaires_by_pk: (args: {
    _set?: Maybe<questionaires_set_input>;
    pk_columns: questionaires_pk_columns_input;
  }) => Maybe<questionaires>;
  update_questions: (args: {
    _set?: Maybe<questions_set_input>;
    where: questions_bool_exp;
  }) => Maybe<questions_mutation_response>;
  update_questions_by_pk: (args: {
    _set?: Maybe<questions_set_input>;
    pk_columns: questions_pk_columns_input;
  }) => Maybe<questions>;
  update_requests: (args: {
    _inc?: Maybe<requests_inc_input>;
    _set?: Maybe<requests_set_input>;
    where: requests_bool_exp;
  }) => Maybe<requests_mutation_response>;
  update_requests_by_pk: (args: {
    _inc?: Maybe<requests_inc_input>;
    _set?: Maybe<requests_set_input>;
    pk_columns: requests_pk_columns_input;
  }) => Maybe<requests>;
  update_reservations: (args: {
    _inc?: Maybe<reservations_inc_input>;
    _set?: Maybe<reservations_set_input>;
    where: reservations_bool_exp;
  }) => Maybe<reservations_mutation_response>;
  update_reservations_activity_logs: (args: {
    _set?: Maybe<reservations_activity_logs_set_input>;
    where: reservations_activity_logs_bool_exp;
  }) => Maybe<reservations_activity_logs_mutation_response>;
  update_reservations_by_pk: (args: {
    _inc?: Maybe<reservations_inc_input>;
    _set?: Maybe<reservations_set_input>;
    pk_columns: reservations_pk_columns_input;
  }) => Maybe<reservations>;
  update_review_comments: (args: {
    _set?: Maybe<review_comments_set_input>;
    where: review_comments_bool_exp;
  }) => Maybe<review_comments_mutation_response>;
  update_review_likes: (args: {
    _set?: Maybe<review_likes_set_input>;
    where: review_likes_bool_exp;
  }) => Maybe<review_likes_mutation_response>;
  update_review_media: (args: {
    _inc?: Maybe<review_media_inc_input>;
    _set?: Maybe<review_media_set_input>;
    where: review_media_bool_exp;
  }) => Maybe<review_media_mutation_response>;
  update_reviews: (args: {
    _inc?: Maybe<reviews_inc_input>;
    _set?: Maybe<reviews_set_input>;
    where: reviews_bool_exp;
  }) => Maybe<reviews_mutation_response>;
  update_reviews_by_pk: (args: {
    _inc?: Maybe<reviews_inc_input>;
    _set?: Maybe<reviews_set_input>;
    pk_columns: reviews_pk_columns_input;
  }) => Maybe<reviews>;
  update_role_has_permissions: (args: {
    _set?: Maybe<role_has_permissions_set_input>;
    where: role_has_permissions_bool_exp;
  }) => Maybe<role_has_permissions_mutation_response>;
  update_roles: (args: {
    _set?: Maybe<roles_set_input>;
    where: roles_bool_exp;
  }) => Maybe<roles_mutation_response>;
  update_roles_by_pk: (args: {
    _set?: Maybe<roles_set_input>;
    pk_columns: roles_pk_columns_input;
  }) => Maybe<roles>;
  update_social_relationships: (args: {
    _set?: Maybe<social_relationships_set_input>;
    where: social_relationships_bool_exp;
  }) => Maybe<social_relationships_mutation_response>;
  update_social_relationships_by_pk: (args: {
    _set?: Maybe<social_relationships_set_input>;
    pk_columns: social_relationships_pk_columns_input;
  }) => Maybe<social_relationships>;
  update_spaces: (args: {
    _inc?: Maybe<spaces_inc_input>;
    _set?: Maybe<spaces_set_input>;
    where: spaces_bool_exp;
  }) => Maybe<spaces_mutation_response>;
  update_spaces_by_pk: (args: {
    _inc?: Maybe<spaces_inc_input>;
    _set?: Maybe<spaces_set_input>;
    pk_columns: spaces_pk_columns_input;
  }) => Maybe<spaces>;
  update_spaces_guests: (args: {
    _set?: Maybe<spaces_guests_set_input>;
    where: spaces_guests_bool_exp;
  }) => Maybe<spaces_guests_mutation_response>;
  update_spaces_guests_by_pk: (args: {
    _set?: Maybe<spaces_guests_set_input>;
    pk_columns: spaces_guests_pk_columns_input;
  }) => Maybe<spaces_guests>;
  update_spaces_usage: (args: {
    _set?: Maybe<spaces_usage_set_input>;
    where: spaces_usage_bool_exp;
  }) => Maybe<spaces_usage_mutation_response>;
  update_spaces_usage_by_pk: (args: {
    _set?: Maybe<spaces_usage_set_input>;
    pk_columns: spaces_usage_pk_columns_input;
  }) => Maybe<spaces_usage>;
  update_storage_buckets: (args: {
    _set?: Maybe<storage_buckets_set_input>;
    where: storage_buckets_bool_exp;
  }) => Maybe<storage_buckets_mutation_response>;
  update_storage_buckets_by_pk: (args: {
    _set?: Maybe<storage_buckets_set_input>;
    pk_columns: storage_buckets_pk_columns_input;
  }) => Maybe<storage_buckets>;
  update_stripe_transfers: (args: {
    _set?: Maybe<stripe_transfers_set_input>;
    where: stripe_transfers_bool_exp;
  }) => Maybe<stripe_transfers_mutation_response>;
  update_stripe_transfers_by_pk: (args: {
    _set?: Maybe<stripe_transfers_set_input>;
    pk_columns: stripe_transfers_pk_columns_input;
  }) => Maybe<stripe_transfers>;
  update_subscriptions: (args: {
    _set?: Maybe<subscriptions_set_input>;
    where: subscriptions_bool_exp;
  }) => Maybe<subscriptions_mutation_response>;
  update_subscriptions_by_pk: (args: {
    _set?: Maybe<subscriptions_set_input>;
    pk_columns: subscriptions_pk_columns_input;
  }) => Maybe<subscriptions>;
  update_supabase_functions_hooks: (args: {
    _inc?: Maybe<supabase_functions_hooks_inc_input>;
    _set?: Maybe<supabase_functions_hooks_set_input>;
    where: supabase_functions_hooks_bool_exp;
  }) => Maybe<supabase_functions_hooks_mutation_response>;
  update_supabase_functions_hooks_by_pk: (args: {
    _inc?: Maybe<supabase_functions_hooks_inc_input>;
    _set?: Maybe<supabase_functions_hooks_set_input>;
    pk_columns: supabase_functions_hooks_pk_columns_input;
  }) => Maybe<supabase_functions_hooks>;
  update_tags: (args: {
    _set?: Maybe<tags_set_input>;
    where: tags_bool_exp;
  }) => Maybe<tags_mutation_response>;
  update_tags_by_pk: (args: {
    _set?: Maybe<tags_set_input>;
    pk_columns: tags_pk_columns_input;
  }) => Maybe<tags>;
  update_team_memberships: (args: {
    _set?: Maybe<team_memberships_set_input>;
    where: team_memberships_bool_exp;
  }) => Maybe<team_memberships_mutation_response>;
  update_team_memberships_by_pk: (args: {
    _set?: Maybe<team_memberships_set_input>;
    pk_columns: team_memberships_pk_columns_input;
  }) => Maybe<team_memberships>;
  update_team_roles: (args: {
    _set?: Maybe<team_roles_set_input>;
    where: team_roles_bool_exp;
  }) => Maybe<team_roles_mutation_response>;
  update_team_schedules: (args: {
    _set?: Maybe<team_schedules_set_input>;
    where: team_schedules_bool_exp;
  }) => Maybe<team_schedules_mutation_response>;
  update_team_schedules_by_pk: (args: {
    _set?: Maybe<team_schedules_set_input>;
    pk_columns: team_schedules_pk_columns_input;
  }) => Maybe<team_schedules>;
  update_team_subscriptions: (args: {
    _set?: Maybe<team_subscriptions_set_input>;
    where: team_subscriptions_bool_exp;
  }) => Maybe<team_subscriptions_mutation_response>;
  update_teams: (args: {
    _set?: Maybe<teams_set_input>;
    where: teams_bool_exp;
  }) => Maybe<teams_mutation_response>;
  update_teams_by_pk: (args: {
    _set?: Maybe<teams_set_input>;
    pk_columns: teams_pk_columns_input;
  }) => Maybe<teams>;
  update_user_has_reservations: (args: {
    _set?: Maybe<user_has_reservations_set_input>;
    where: user_has_reservations_bool_exp;
  }) => Maybe<user_has_reservations_mutation_response>;
  update_user_has_reservations_by_pk: (args: {
    _set?: Maybe<user_has_reservations_set_input>;
    pk_columns: user_has_reservations_pk_columns_input;
  }) => Maybe<user_has_reservations>;
  update_user_inbox: (args: {
    _set?: Maybe<user_inbox_set_input>;
    where: user_inbox_bool_exp;
  }) => Maybe<user_inbox_mutation_response>;
  update_user_media: (args: {
    _inc?: Maybe<user_media_inc_input>;
    _set?: Maybe<user_media_set_input>;
    where: user_media_bool_exp;
  }) => Maybe<user_media_mutation_response>;
  update_user_roles: (args: {
    _set?: Maybe<user_roles_set_input>;
    where: user_roles_bool_exp;
  }) => Maybe<user_roles_mutation_response>;
  update_user_sessions: (args: {
    _inc?: Maybe<user_sessions_inc_input>;
    _set?: Maybe<user_sessions_set_input>;
    where: user_sessions_bool_exp;
  }) => Maybe<user_sessions_mutation_response>;
  update_user_sessions_by_pk: (args: {
    _inc?: Maybe<user_sessions_inc_input>;
    _set?: Maybe<user_sessions_set_input>;
    pk_columns: user_sessions_pk_columns_input;
  }) => Maybe<user_sessions>;
  update_user_subscriptions: (args: {
    _set?: Maybe<user_subscriptions_set_input>;
    where: user_subscriptions_bool_exp;
  }) => Maybe<user_subscriptions_mutation_response>;
  update_users: (args: {
    _set?: Maybe<users_set_input>;
    where: users_bool_exp;
  }) => Maybe<users_mutation_response>;
  update_users_by_pk: (args: {
    _set?: Maybe<users_set_input>;
    pk_columns: users_pk_columns_input;
  }) => Maybe<users>;
  update_wishlist: (args: {
    _set?: Maybe<wishlist_set_input>;
    where: wishlist_bool_exp;
  }) => Maybe<wishlist_mutation_response>;
  update_wishlist_by_pk: (args: {
    _set?: Maybe<wishlist_set_input>;
    pk_columns: wishlist_pk_columns_input;
  }) => Maybe<wishlist>;
}

export interface Subscription {
  __typename: "Subscription" | undefined;
  activity_logs: (args?: {
    distinct_on?: Maybe<Array<activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<activity_logs_order_by>>;
    where?: Maybe<activity_logs_bool_exp>;
  }) => Array<activity_logs>;
  activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<activity_logs_order_by>>;
    where?: Maybe<activity_logs_bool_exp>;
  }) => activity_logs_aggregate;
  activity_logs_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<activity_logs>;
  aruba_wifi_access: (args?: {
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => Array<aruba_wifi_access>;
  aruba_wifi_access_aggregate: (args?: {
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => aruba_wifi_access_aggregate;
  aruba_wifi_access_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<aruba_wifi_access>;
  auth_audit_log_entries: (args?: {
    distinct_on?: Maybe<Array<auth_audit_log_entries_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_audit_log_entries_order_by>>;
    where?: Maybe<auth_audit_log_entries_bool_exp>;
  }) => Array<auth_audit_log_entries>;
  auth_audit_log_entries_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_audit_log_entries_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_audit_log_entries_order_by>>;
    where?: Maybe<auth_audit_log_entries_bool_exp>;
  }) => auth_audit_log_entries_aggregate;
  auth_audit_log_entries_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_audit_log_entries>;
  auth_instances: (args?: {
    distinct_on?: Maybe<Array<auth_instances_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_instances_order_by>>;
    where?: Maybe<auth_instances_bool_exp>;
  }) => Array<auth_instances>;
  auth_instances_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_instances_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_instances_order_by>>;
    where?: Maybe<auth_instances_bool_exp>;
  }) => auth_instances_aggregate;
  auth_instances_by_pk: (args: {
    id: Scalars["uuid"];
  }) => Maybe<auth_instances>;
  auth_refresh_tokens: (args?: {
    distinct_on?: Maybe<Array<auth_refresh_tokens_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_refresh_tokens_order_by>>;
    where?: Maybe<auth_refresh_tokens_bool_exp>;
  }) => Array<auth_refresh_tokens>;
  auth_refresh_tokens_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_refresh_tokens_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_refresh_tokens_order_by>>;
    where?: Maybe<auth_refresh_tokens_bool_exp>;
  }) => auth_refresh_tokens_aggregate;
  auth_refresh_tokens_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<auth_refresh_tokens>;
  auth_schema_migrations: (args?: {
    distinct_on?: Maybe<Array<auth_schema_migrations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_schema_migrations_order_by>>;
    where?: Maybe<auth_schema_migrations_bool_exp>;
  }) => Array<auth_schema_migrations>;
  auth_schema_migrations_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_schema_migrations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_schema_migrations_order_by>>;
    where?: Maybe<auth_schema_migrations_bool_exp>;
  }) => auth_schema_migrations_aggregate;
  auth_schema_migrations_by_pk: (args: {
    version: Scalars["String"];
  }) => Maybe<auth_schema_migrations>;
  auth_users: (args?: {
    distinct_on?: Maybe<Array<auth_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_users_order_by>>;
    where?: Maybe<auth_users_bool_exp>;
  }) => Array<auth_users>;
  auth_users_aggregate: (args?: {
    distinct_on?: Maybe<Array<auth_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<auth_users_order_by>>;
    where?: Maybe<auth_users_bool_exp>;
  }) => auth_users_aggregate;
  auth_users_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<auth_users>;
  brand_campaigns: (args?: {
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_campaigns_order_by>>;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => Array<brand_campaigns>;
  brand_campaigns_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_campaigns_order_by>>;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => brand_campaigns_aggregate;
  brand_campaigns_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<brand_campaigns>;
  brand_discussions: (args?: {
    distinct_on?: Maybe<Array<brand_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_discussions_order_by>>;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => Array<brand_discussions>;
  brand_discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_discussions_order_by>>;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => brand_discussions_aggregate;
  brand_inbox: (args?: {
    distinct_on?: Maybe<Array<brand_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_inbox_order_by>>;
    where?: Maybe<brand_inbox_bool_exp>;
  }) => Array<brand_inbox>;
  brand_inbox_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_inbox_order_by>>;
    where?: Maybe<brand_inbox_bool_exp>;
  }) => brand_inbox_aggregate;
  brand_media: (args?: {
    distinct_on?: Maybe<Array<brand_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_media_order_by>>;
    where?: Maybe<brand_media_bool_exp>;
  }) => Array<brand_media>;
  brand_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_media_order_by>>;
    where?: Maybe<brand_media_bool_exp>;
  }) => brand_media_aggregate;
  brand_tags: (args?: {
    distinct_on?: Maybe<Array<brand_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_tags_order_by>>;
    where?: Maybe<brand_tags_bool_exp>;
  }) => Array<brand_tags>;
  brand_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_tags_order_by>>;
    where?: Maybe<brand_tags_bool_exp>;
  }) => brand_tags_aggregate;
  brand_users: (args?: {
    distinct_on?: Maybe<Array<brand_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_users_order_by>>;
    where?: Maybe<brand_users_bool_exp>;
  }) => Array<brand_users>;
  brand_users_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_users_order_by>>;
    where?: Maybe<brand_users_bool_exp>;
  }) => brand_users_aggregate;
  brand_users_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<brand_users>;
  brand_wishes: (args?: {
    distinct_on?: Maybe<Array<brand_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_wishes_order_by>>;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => Array<brand_wishes>;
  brand_wishes_aggregate: (args?: {
    distinct_on?: Maybe<Array<brand_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brand_wishes_order_by>>;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => brand_wishes_aggregate;
  brands: (args?: {
    distinct_on?: Maybe<Array<brands_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brands_order_by>>;
    where?: Maybe<brands_bool_exp>;
  }) => Array<brands>;
  brands_aggregate: (args?: {
    distinct_on?: Maybe<Array<brands_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<brands_order_by>>;
    where?: Maybe<brands_bool_exp>;
  }) => brands_aggregate;
  brands_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<brands>;
  campaigns: (args?: {
    distinct_on?: Maybe<Array<campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<campaigns_order_by>>;
    where?: Maybe<campaigns_bool_exp>;
  }) => Array<campaigns>;
  campaigns_aggregate: (args?: {
    distinct_on?: Maybe<Array<campaigns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<campaigns_order_by>>;
    where?: Maybe<campaigns_bool_exp>;
  }) => campaigns_aggregate;
  campaigns_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<campaigns>;
  card: (args?: {
    distinct_on?: Maybe<Array<card_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<card_order_by>>;
    where?: Maybe<card_bool_exp>;
  }) => Array<card>;
  card_aggregate: (args?: {
    distinct_on?: Maybe<Array<card_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<card_order_by>>;
    where?: Maybe<card_bool_exp>;
  }) => card_aggregate;
  card_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<card>;
  comment_comments: (args?: {
    distinct_on?: Maybe<Array<comment_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_comments_order_by>>;
    where?: Maybe<comment_comments_bool_exp>;
  }) => Array<comment_comments>;
  comment_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<comment_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_comments_order_by>>;
    where?: Maybe<comment_comments_bool_exp>;
  }) => comment_comments_aggregate;
  comment_likes: (args?: {
    distinct_on?: Maybe<Array<comment_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_likes_order_by>>;
    where?: Maybe<comment_likes_bool_exp>;
  }) => Array<comment_likes>;
  comment_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<comment_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<comment_likes_order_by>>;
    where?: Maybe<comment_likes_bool_exp>;
  }) => comment_likes_aggregate;
  conversations: (args?: {
    distinct_on?: Maybe<Array<conversations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<conversations_order_by>>;
    where?: Maybe<conversations_bool_exp>;
  }) => Array<conversations>;
  conversations_aggregate: (args?: {
    distinct_on?: Maybe<Array<conversations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<conversations_order_by>>;
    where?: Maybe<conversations_bool_exp>;
  }) => conversations_aggregate;
  conversations_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<conversations>;
  currencies: (args?: {
    distinct_on?: Maybe<Array<currencies_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<currencies_order_by>>;
    where?: Maybe<currencies_bool_exp>;
  }) => Array<currencies>;
  currencies_aggregate: (args?: {
    distinct_on?: Maybe<Array<currencies_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<currencies_order_by>>;
    where?: Maybe<currencies_bool_exp>;
  }) => currencies_aggregate;
  currencies_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<currencies>;
  daily_rates: (args?: {
    distinct_on?: Maybe<Array<daily_rates_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<daily_rates_order_by>>;
    where?: Maybe<daily_rates_bool_exp>;
  }) => Array<daily_rates>;
  daily_rates_aggregate: (args?: {
    distinct_on?: Maybe<Array<daily_rates_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<daily_rates_order_by>>;
    where?: Maybe<daily_rates_bool_exp>;
  }) => daily_rates_aggregate;
  daily_rates_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<daily_rates>;
  default_addons: (args?: {
    distinct_on?: Maybe<Array<default_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<default_addons_order_by>>;
    where?: Maybe<default_addons_bool_exp>;
  }) => Array<default_addons>;
  default_addons_aggregate: (args?: {
    distinct_on?: Maybe<Array<default_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<default_addons_order_by>>;
    where?: Maybe<default_addons_bool_exp>;
  }) => default_addons_aggregate;
  default_addons_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<default_addons>;
  discount_codes: (args?: {
    distinct_on?: Maybe<Array<discount_codes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discount_codes_order_by>>;
    where?: Maybe<discount_codes_bool_exp>;
  }) => Array<discount_codes>;
  discount_codes_aggregate: (args?: {
    distinct_on?: Maybe<Array<discount_codes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discount_codes_order_by>>;
    where?: Maybe<discount_codes_bool_exp>;
  }) => discount_codes_aggregate;
  discount_codes_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<discount_codes>;
  discussion_user: (args?: {
    distinct_on?: Maybe<Array<discussion_user_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussion_user_order_by>>;
    where?: Maybe<discussion_user_bool_exp>;
  }) => Array<discussion_user>;
  discussion_user_aggregate: (args?: {
    distinct_on?: Maybe<Array<discussion_user_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussion_user_order_by>>;
    where?: Maybe<discussion_user_bool_exp>;
  }) => discussion_user_aggregate;
  discussions: (args?: {
    distinct_on?: Maybe<Array<discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussions_order_by>>;
    where?: Maybe<discussions_bool_exp>;
  }) => Array<discussions>;
  discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<discussions_order_by>>;
    where?: Maybe<discussions_bool_exp>;
  }) => discussions_aggregate;
  discussions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<discussions>;
  extensions: (args?: {
    distinct_on?: Maybe<Array<extensions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_order_by>>;
    where?: Maybe<extensions_bool_exp>;
  }) => Array<extensions>;
  extensions_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_order_by>>;
    where?: Maybe<extensions_bool_exp>;
  }) => extensions_aggregate;
  extensions_by_pk: (args: { id: Scalars["String"] }) => Maybe<extensions>;
  extensions_geography_columns: (args?: {
    distinct_on?: Maybe<Array<extensions_geography_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geography_columns_order_by>>;
    where?: Maybe<extensions_geography_columns_bool_exp>;
  }) => Array<extensions_geography_columns>;
  extensions_geography_columns_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_geography_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geography_columns_order_by>>;
    where?: Maybe<extensions_geography_columns_bool_exp>;
  }) => extensions_geography_columns_aggregate;
  extensions_geometry_columns: (args?: {
    distinct_on?: Maybe<Array<extensions_geometry_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geometry_columns_order_by>>;
    where?: Maybe<extensions_geometry_columns_bool_exp>;
  }) => Array<extensions_geometry_columns>;
  extensions_geometry_columns_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_geometry_columns_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_geometry_columns_order_by>>;
    where?: Maybe<extensions_geometry_columns_bool_exp>;
  }) => extensions_geometry_columns_aggregate;
  extensions_pg_stat_statements: (args?: {
    distinct_on?: Maybe<Array<extensions_pg_stat_statements_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_pg_stat_statements_order_by>>;
    where?: Maybe<extensions_pg_stat_statements_bool_exp>;
  }) => Array<extensions_pg_stat_statements>;
  extensions_pg_stat_statements_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_pg_stat_statements_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_pg_stat_statements_order_by>>;
    where?: Maybe<extensions_pg_stat_statements_bool_exp>;
  }) => extensions_pg_stat_statements_aggregate;
  extensions_spatial_ref_sys: (args?: {
    distinct_on?: Maybe<Array<extensions_spatial_ref_sys_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_spatial_ref_sys_order_by>>;
    where?: Maybe<extensions_spatial_ref_sys_bool_exp>;
  }) => Array<extensions_spatial_ref_sys>;
  extensions_spatial_ref_sys_aggregate: (args?: {
    distinct_on?: Maybe<Array<extensions_spatial_ref_sys_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<extensions_spatial_ref_sys_order_by>>;
    where?: Maybe<extensions_spatial_ref_sys_bool_exp>;
  }) => extensions_spatial_ref_sys_aggregate;
  extensions_spatial_ref_sys_by_pk: (args: {
    srid: Scalars["Int"];
  }) => Maybe<extensions_spatial_ref_sys>;
  floor_plan_grid: (args?: {
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => Array<floor_plan_grid>;
  floor_plan_grid_aggregate: (args?: {
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => floor_plan_grid_aggregate;
  floor_plan_grid_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<floor_plan_grid>;
  floor_plans: (args?: {
    distinct_on?: Maybe<Array<floor_plans_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plans_order_by>>;
    where?: Maybe<floor_plans_bool_exp>;
  }) => Array<floor_plans>;
  floor_plans_aggregate: (args?: {
    distinct_on?: Maybe<Array<floor_plans_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<floor_plans_order_by>>;
    where?: Maybe<floor_plans_bool_exp>;
  }) => floor_plans_aggregate;
  floor_plans_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<floor_plans>;
  guest_questionaires_answers: (args?: {
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => Array<guest_questionaires_answers>;
  guest_questionaires_answers_aggregate: (args?: {
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => guest_questionaires_answers_aggregate;
  guest_questionaires_answers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guest_questionaires_answers>;
  guests: (args?: {
    distinct_on?: Maybe<Array<guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_order_by>>;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  guests_aggregate: (args?: {
    distinct_on?: Maybe<Array<guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_order_by>>;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  guests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<guests>;
  guests_has_questionaires: (args?: {
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => Array<guests_has_questionaires>;
  guests_has_questionaires_aggregate: (args?: {
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => guests_has_questionaires_aggregate;
  guests_has_questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<guests_has_questionaires>;
  inboxes: (args?: {
    distinct_on?: Maybe<Array<inboxes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<inboxes_order_by>>;
    where?: Maybe<inboxes_bool_exp>;
  }) => Array<inboxes>;
  inboxes_aggregate: (args?: {
    distinct_on?: Maybe<Array<inboxes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<inboxes_order_by>>;
    where?: Maybe<inboxes_bool_exp>;
  }) => inboxes_aggregate;
  inboxes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<inboxes>;
  invoice: (args?: {
    distinct_on?: Maybe<Array<invoice_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<invoice_order_by>>;
    where?: Maybe<invoice_bool_exp>;
  }) => Array<invoice>;
  invoice_aggregate: (args?: {
    distinct_on?: Maybe<Array<invoice_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<invoice_order_by>>;
    where?: Maybe<invoice_bool_exp>;
  }) => invoice_aggregate;
  invoice_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<invoice>;
  key_performance_snapshots: (args?: {
    distinct_on?: Maybe<Array<key_performance_snapshots_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<key_performance_snapshots_order_by>>;
    where?: Maybe<key_performance_snapshots_bool_exp>;
  }) => Array<key_performance_snapshots>;
  key_performance_snapshots_aggregate: (args?: {
    distinct_on?: Maybe<Array<key_performance_snapshots_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<key_performance_snapshots_order_by>>;
    where?: Maybe<key_performance_snapshots_bool_exp>;
  }) => key_performance_snapshots_aggregate;
  key_performance_snapshots_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<key_performance_snapshots>;
  listing_categories: (args?: {
    distinct_on?: Maybe<Array<listing_categories_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_categories_order_by>>;
    where?: Maybe<listing_categories_bool_exp>;
  }) => Array<listing_categories>;
  listing_categories_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_categories_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_categories_order_by>>;
    where?: Maybe<listing_categories_bool_exp>;
  }) => listing_categories_aggregate;
  listing_categories_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_categories>;
  listing_collections: (args?: {
    distinct_on?: Maybe<Array<listing_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_collections_order_by>>;
    where?: Maybe<listing_collections_bool_exp>;
  }) => Array<listing_collections>;
  listing_collections_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_collections_order_by>>;
    where?: Maybe<listing_collections_bool_exp>;
  }) => listing_collections_aggregate;
  listing_collections_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<listing_collections>;
  listing_discussions: (args?: {
    distinct_on?: Maybe<Array<listing_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_discussions_order_by>>;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => Array<listing_discussions>;
  listing_discussions_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_discussions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_discussions_order_by>>;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => listing_discussions_aggregate;
  listing_in_collections: (args?: {
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_in_collections_order_by>>;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => Array<listing_in_collections>;
  listing_in_collections_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_in_collections_order_by>>;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => listing_in_collections_aggregate;
  listing_media: (args?: {
    distinct_on?: Maybe<Array<listing_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_media_order_by>>;
    where?: Maybe<listing_media_bool_exp>;
  }) => Array<listing_media>;
  listing_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_media_order_by>>;
    where?: Maybe<listing_media_bool_exp>;
  }) => listing_media_aggregate;
  listing_tags: (args?: {
    distinct_on?: Maybe<Array<listing_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_tags_order_by>>;
    where?: Maybe<listing_tags_bool_exp>;
  }) => Array<listing_tags>;
  listing_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_tags_order_by>>;
    where?: Maybe<listing_tags_bool_exp>;
  }) => listing_tags_aggregate;
  listing_wishes: (args?: {
    distinct_on?: Maybe<Array<listing_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_wishes_order_by>>;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => Array<listing_wishes>;
  listing_wishes_aggregate: (args?: {
    distinct_on?: Maybe<Array<listing_wishes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listing_wishes_order_by>>;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => listing_wishes_aggregate;
  listings: (args?: {
    distinct_on?: Maybe<Array<listings_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listings_order_by>>;
    where?: Maybe<listings_bool_exp>;
  }) => Array<listings>;
  listings_aggregate: (args?: {
    distinct_on?: Maybe<Array<listings_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<listings_order_by>>;
    where?: Maybe<listings_bool_exp>;
  }) => listings_aggregate;
  listings_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<listings>;
  logs: (args?: {
    distinct_on?: Maybe<Array<logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<logs_order_by>>;
    where?: Maybe<logs_bool_exp>;
  }) => Array<logs>;
  logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<logs_order_by>>;
    where?: Maybe<logs_bool_exp>;
  }) => logs_aggregate;
  logs_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<logs>;
  media: (args?: {
    distinct_on?: Maybe<Array<media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<media_order_by>>;
    where?: Maybe<media_bool_exp>;
  }) => Array<media>;
  media_aggregate: (args?: {
    distinct_on?: Maybe<Array<media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<media_order_by>>;
    where?: Maybe<media_bool_exp>;
  }) => media_aggregate;
  media_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<media>;
  messages: (args?: {
    distinct_on?: Maybe<Array<messages_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<messages_order_by>>;
    where?: Maybe<messages_bool_exp>;
  }) => Array<messages>;
  messages_aggregate: (args?: {
    distinct_on?: Maybe<Array<messages_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<messages_order_by>>;
    where?: Maybe<messages_bool_exp>;
  }) => messages_aggregate;
  messages_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<messages>;
  model_has_comments: (args?: {
    distinct_on?: Maybe<Array<model_has_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_comments_order_by>>;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => Array<model_has_comments>;
  model_has_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_comments_order_by>>;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => model_has_comments_aggregate;
  model_has_comments_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<model_has_comments>;
  model_has_likes: (args?: {
    distinct_on?: Maybe<Array<model_has_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_likes_order_by>>;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => Array<model_has_likes>;
  model_has_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_likes_order_by>>;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => model_has_likes_aggregate;
  model_has_permissions: (args?: {
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_permissions_order_by>>;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => Array<model_has_permissions>;
  model_has_permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_permissions_order_by>>;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => model_has_permissions_aggregate;
  model_has_roles: (args?: {
    distinct_on?: Maybe<Array<model_has_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_roles_order_by>>;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => Array<model_has_roles>;
  model_has_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_roles_order_by>>;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => model_has_roles_aggregate;
  model_has_tags: (args?: {
    distinct_on?: Maybe<Array<model_has_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_tags_order_by>>;
    where?: Maybe<model_has_tags_bool_exp>;
  }) => Array<model_has_tags>;
  model_has_tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<model_has_tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<model_has_tags_order_by>>;
    where?: Maybe<model_has_tags_bool_exp>;
  }) => model_has_tags_aggregate;
  model_has_tags_by_pk: (args: {
    tag_uuid: Scalars["uuid"];
  }) => Maybe<model_has_tags>;
  notifications: (args?: {
    distinct_on?: Maybe<Array<notifications_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<notifications_order_by>>;
    where?: Maybe<notifications_bool_exp>;
  }) => Array<notifications>;
  notifications_aggregate: (args?: {
    distinct_on?: Maybe<Array<notifications_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<notifications_order_by>>;
    where?: Maybe<notifications_bool_exp>;
  }) => notifications_aggregate;
  notifications_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<notifications>;
  outlet_has_addons: (args?: {
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => Array<outlet_has_addons>;
  outlet_has_addons_aggregate: (args?: {
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => outlet_has_addons_aggregate;
  outlet_has_addons_by_pk: (args: {
    outlet_uuid: Scalars["uuid"];
  }) => Maybe<outlet_has_addons>;
  outlets: (args?: {
    distinct_on?: Maybe<Array<outlets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlets_order_by>>;
    where?: Maybe<outlets_bool_exp>;
  }) => Array<outlets>;
  outlets_aggregate: (args?: {
    distinct_on?: Maybe<Array<outlets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<outlets_order_by>>;
    where?: Maybe<outlets_bool_exp>;
  }) => outlets_aggregate;
  outlets_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<outlets>;
  passes: (args?: {
    distinct_on?: Maybe<Array<passes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_order_by>>;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  passes_activity_logs: (args?: {
    distinct_on?: Maybe<Array<passes_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_activity_logs_order_by>>;
    where?: Maybe<passes_activity_logs_bool_exp>;
  }) => Array<passes_activity_logs>;
  passes_activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<passes_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_activity_logs_order_by>>;
    where?: Maybe<passes_activity_logs_bool_exp>;
  }) => passes_activity_logs_aggregate;
  passes_aggregate: (args?: {
    distinct_on?: Maybe<Array<passes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<passes_order_by>>;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  passes_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<passes>;
  payments: (args?: {
    distinct_on?: Maybe<Array<payments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<payments_order_by>>;
    where?: Maybe<payments_bool_exp>;
  }) => Array<payments>;
  payments_aggregate: (args?: {
    distinct_on?: Maybe<Array<payments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<payments_order_by>>;
    where?: Maybe<payments_bool_exp>;
  }) => payments_aggregate;
  payments_by_pk: (args: { id: Scalars["uuid"] }) => Maybe<payments>;
  permissions: (args?: {
    distinct_on?: Maybe<Array<permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<permissions_order_by>>;
    where?: Maybe<permissions_bool_exp>;
  }) => Array<permissions>;
  permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<permissions_order_by>>;
    where?: Maybe<permissions_bool_exp>;
  }) => permissions_aggregate;
  permissions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<permissions>;
  post_comments: (args?: {
    distinct_on?: Maybe<Array<post_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_comments_order_by>>;
    where?: Maybe<post_comments_bool_exp>;
  }) => Array<post_comments>;
  post_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<post_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_comments_order_by>>;
    where?: Maybe<post_comments_bool_exp>;
  }) => post_comments_aggregate;
  post_likes: (args?: {
    distinct_on?: Maybe<Array<post_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_likes_order_by>>;
    where?: Maybe<post_likes_bool_exp>;
  }) => Array<post_likes>;
  post_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<post_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<post_likes_order_by>>;
    where?: Maybe<post_likes_bool_exp>;
  }) => post_likes_aggregate;
  posts: (args?: {
    distinct_on?: Maybe<Array<posts_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<posts_order_by>>;
    where?: Maybe<posts_bool_exp>;
  }) => Array<posts>;
  posts_aggregate: (args?: {
    distinct_on?: Maybe<Array<posts_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<posts_order_by>>;
    where?: Maybe<posts_bool_exp>;
  }) => posts_aggregate;
  posts_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<posts>;
  questionaires: (args?: {
    distinct_on?: Maybe<Array<questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questionaires_order_by>>;
    where?: Maybe<questionaires_bool_exp>;
  }) => Array<questionaires>;
  questionaires_aggregate: (args?: {
    distinct_on?: Maybe<Array<questionaires_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questionaires_order_by>>;
    where?: Maybe<questionaires_bool_exp>;
  }) => questionaires_aggregate;
  questionaires_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<questionaires>;
  questions: (args?: {
    distinct_on?: Maybe<Array<questions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questions_order_by>>;
    where?: Maybe<questions_bool_exp>;
  }) => Array<questions>;
  questions_aggregate: (args?: {
    distinct_on?: Maybe<Array<questions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<questions_order_by>>;
    where?: Maybe<questions_bool_exp>;
  }) => questions_aggregate;
  questions_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<questions>;
  requests: (args?: {
    distinct_on?: Maybe<Array<requests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<requests_order_by>>;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  requests_aggregate: (args?: {
    distinct_on?: Maybe<Array<requests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<requests_order_by>>;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  requests_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<requests>;
  reservations: (args?: {
    distinct_on?: Maybe<Array<reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_order_by>>;
    where?: Maybe<reservations_bool_exp>;
  }) => Array<reservations>;
  reservations_activity_logs: (args?: {
    distinct_on?: Maybe<Array<reservations_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_activity_logs_order_by>>;
    where?: Maybe<reservations_activity_logs_bool_exp>;
  }) => Array<reservations_activity_logs>;
  reservations_activity_logs_aggregate: (args?: {
    distinct_on?: Maybe<Array<reservations_activity_logs_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_activity_logs_order_by>>;
    where?: Maybe<reservations_activity_logs_bool_exp>;
  }) => reservations_activity_logs_aggregate;
  reservations_aggregate: (args?: {
    distinct_on?: Maybe<Array<reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reservations_order_by>>;
    where?: Maybe<reservations_bool_exp>;
  }) => reservations_aggregate;
  reservations_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<reservations>;
  review_comments: (args?: {
    distinct_on?: Maybe<Array<review_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_comments_order_by>>;
    where?: Maybe<review_comments_bool_exp>;
  }) => Array<review_comments>;
  review_comments_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_comments_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_comments_order_by>>;
    where?: Maybe<review_comments_bool_exp>;
  }) => review_comments_aggregate;
  review_likes: (args?: {
    distinct_on?: Maybe<Array<review_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_likes_order_by>>;
    where?: Maybe<review_likes_bool_exp>;
  }) => Array<review_likes>;
  review_likes_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_likes_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_likes_order_by>>;
    where?: Maybe<review_likes_bool_exp>;
  }) => review_likes_aggregate;
  review_media: (args?: {
    distinct_on?: Maybe<Array<review_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_media_order_by>>;
    where?: Maybe<review_media_bool_exp>;
  }) => Array<review_media>;
  review_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<review_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<review_media_order_by>>;
    where?: Maybe<review_media_bool_exp>;
  }) => review_media_aggregate;
  reviews: (args?: {
    distinct_on?: Maybe<Array<reviews_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reviews_order_by>>;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  reviews_aggregate: (args?: {
    distinct_on?: Maybe<Array<reviews_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<reviews_order_by>>;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  reviews_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<reviews>;
  role_has_permissions: (args?: {
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<role_has_permissions_order_by>>;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => Array<role_has_permissions>;
  role_has_permissions_aggregate: (args?: {
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<role_has_permissions_order_by>>;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => role_has_permissions_aggregate;
  roles: (args?: {
    distinct_on?: Maybe<Array<roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<roles_order_by>>;
    where?: Maybe<roles_bool_exp>;
  }) => Array<roles>;
  roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<roles_order_by>>;
    where?: Maybe<roles_bool_exp>;
  }) => roles_aggregate;
  roles_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<roles>;
  social_relationships: (args?: {
    distinct_on?: Maybe<Array<social_relationships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<social_relationships_order_by>>;
    where?: Maybe<social_relationships_bool_exp>;
  }) => Array<social_relationships>;
  social_relationships_aggregate: (args?: {
    distinct_on?: Maybe<Array<social_relationships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<social_relationships_order_by>>;
    where?: Maybe<social_relationships_bool_exp>;
  }) => social_relationships_aggregate;
  social_relationships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<social_relationships>;
  spaces: (args?: {
    distinct_on?: Maybe<Array<spaces_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_order_by>>;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  spaces_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_order_by>>;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  spaces_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<spaces>;
  spaces_guests: (args?: {
    distinct_on?: Maybe<Array<spaces_guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_guests_order_by>>;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => Array<spaces_guests>;
  spaces_guests_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_guests_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_guests_order_by>>;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => spaces_guests_aggregate;
  spaces_guests_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<spaces_guests>;
  spaces_usage: (args?: {
    distinct_on?: Maybe<Array<spaces_usage_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_usage_order_by>>;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  spaces_usage_aggregate: (args?: {
    distinct_on?: Maybe<Array<spaces_usage_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<spaces_usage_order_by>>;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  spaces_usage_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<spaces_usage>;
  storage_buckets: (args?: {
    distinct_on?: Maybe<Array<storage_buckets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<storage_buckets_order_by>>;
    where?: Maybe<storage_buckets_bool_exp>;
  }) => Array<storage_buckets>;
  storage_buckets_aggregate: (args?: {
    distinct_on?: Maybe<Array<storage_buckets_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<storage_buckets_order_by>>;
    where?: Maybe<storage_buckets_bool_exp>;
  }) => storage_buckets_aggregate;
  storage_buckets_by_pk: (args: {
    id: Scalars["String"];
  }) => Maybe<storage_buckets>;
  stripe_transfers: (args?: {
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<stripe_transfers_order_by>>;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => Array<stripe_transfers>;
  stripe_transfers_aggregate: (args?: {
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<stripe_transfers_order_by>>;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => stripe_transfers_aggregate;
  stripe_transfers_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<stripe_transfers>;
  subscriptions: (args?: {
    distinct_on?: Maybe<Array<subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<subscriptions_order_by>>;
    where?: Maybe<subscriptions_bool_exp>;
  }) => Array<subscriptions>;
  subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<subscriptions_order_by>>;
    where?: Maybe<subscriptions_bool_exp>;
  }) => subscriptions_aggregate;
  subscriptions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<subscriptions>;
  supabase_functions_hooks: (args?: {
    distinct_on?: Maybe<Array<supabase_functions_hooks_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<supabase_functions_hooks_order_by>>;
    where?: Maybe<supabase_functions_hooks_bool_exp>;
  }) => Array<supabase_functions_hooks>;
  supabase_functions_hooks_aggregate: (args?: {
    distinct_on?: Maybe<Array<supabase_functions_hooks_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<supabase_functions_hooks_order_by>>;
    where?: Maybe<supabase_functions_hooks_bool_exp>;
  }) => supabase_functions_hooks_aggregate;
  supabase_functions_hooks_by_pk: (args: {
    id: Scalars["bigint"];
  }) => Maybe<supabase_functions_hooks>;
  tags: (args?: {
    distinct_on?: Maybe<Array<tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<tags_order_by>>;
    where?: Maybe<tags_bool_exp>;
  }) => Array<tags>;
  tags_aggregate: (args?: {
    distinct_on?: Maybe<Array<tags_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<tags_order_by>>;
    where?: Maybe<tags_bool_exp>;
  }) => tags_aggregate;
  tags_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<tags>;
  team_memberships: (args?: {
    distinct_on?: Maybe<Array<team_memberships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_memberships_order_by>>;
    where?: Maybe<team_memberships_bool_exp>;
  }) => Array<team_memberships>;
  team_memberships_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_memberships_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_memberships_order_by>>;
    where?: Maybe<team_memberships_bool_exp>;
  }) => team_memberships_aggregate;
  team_memberships_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_memberships>;
  team_roles: (args?: {
    distinct_on?: Maybe<Array<team_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_roles_order_by>>;
    where?: Maybe<team_roles_bool_exp>;
  }) => Array<team_roles>;
  team_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_roles_order_by>>;
    where?: Maybe<team_roles_bool_exp>;
  }) => team_roles_aggregate;
  team_schedules: (args?: {
    distinct_on?: Maybe<Array<team_schedules_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_schedules_order_by>>;
    where?: Maybe<team_schedules_bool_exp>;
  }) => Array<team_schedules>;
  team_schedules_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_schedules_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_schedules_order_by>>;
    where?: Maybe<team_schedules_bool_exp>;
  }) => team_schedules_aggregate;
  team_schedules_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<team_schedules>;
  team_subscriptions: (args?: {
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_subscriptions_order_by>>;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => Array<team_subscriptions>;
  team_subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<team_subscriptions_order_by>>;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => team_subscriptions_aggregate;
  teams: (args?: {
    distinct_on?: Maybe<Array<teams_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<teams_order_by>>;
    where?: Maybe<teams_bool_exp>;
  }) => Array<teams>;
  teams_aggregate: (args?: {
    distinct_on?: Maybe<Array<teams_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<teams_order_by>>;
    where?: Maybe<teams_bool_exp>;
  }) => teams_aggregate;
  teams_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<teams>;
  user_has_reservations: (args?: {
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_has_reservations_order_by>>;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => Array<user_has_reservations>;
  user_has_reservations_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_has_reservations_order_by>>;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => user_has_reservations_aggregate;
  user_has_reservations_by_pk: (args: {
    reservation_uuid: Scalars["uuid"];
  }) => Maybe<user_has_reservations>;
  user_inbox: (args?: {
    distinct_on?: Maybe<Array<user_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_inbox_order_by>>;
    where?: Maybe<user_inbox_bool_exp>;
  }) => Array<user_inbox>;
  user_inbox_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_inbox_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_inbox_order_by>>;
    where?: Maybe<user_inbox_bool_exp>;
  }) => user_inbox_aggregate;
  user_media: (args?: {
    distinct_on?: Maybe<Array<user_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_media_order_by>>;
    where?: Maybe<user_media_bool_exp>;
  }) => Array<user_media>;
  user_media_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_media_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_media_order_by>>;
    where?: Maybe<user_media_bool_exp>;
  }) => user_media_aggregate;
  user_roles: (args?: {
    distinct_on?: Maybe<Array<user_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_roles_order_by>>;
    where?: Maybe<user_roles_bool_exp>;
  }) => Array<user_roles>;
  user_roles_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_roles_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_roles_order_by>>;
    where?: Maybe<user_roles_bool_exp>;
  }) => user_roles_aggregate;
  user_sessions: (args?: {
    distinct_on?: Maybe<Array<user_sessions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_sessions_order_by>>;
    where?: Maybe<user_sessions_bool_exp>;
  }) => Array<user_sessions>;
  user_sessions_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_sessions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_sessions_order_by>>;
    where?: Maybe<user_sessions_bool_exp>;
  }) => user_sessions_aggregate;
  user_sessions_by_pk: (args: {
    uuid: Scalars["uuid"];
  }) => Maybe<user_sessions>;
  user_subscriptions: (args?: {
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_subscriptions_order_by>>;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => Array<user_subscriptions>;
  user_subscriptions_aggregate: (args?: {
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<user_subscriptions_order_by>>;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => user_subscriptions_aggregate;
  users: (args?: {
    distinct_on?: Maybe<Array<users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<users_order_by>>;
    where?: Maybe<users_bool_exp>;
  }) => Array<users>;
  users_aggregate: (args?: {
    distinct_on?: Maybe<Array<users_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<users_order_by>>;
    where?: Maybe<users_bool_exp>;
  }) => users_aggregate;
  users_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<users>;
  wishlist: (args?: {
    distinct_on?: Maybe<Array<wishlist_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<wishlist_order_by>>;
    where?: Maybe<wishlist_bool_exp>;
  }) => Array<wishlist>;
  wishlist_aggregate: (args?: {
    distinct_on?: Maybe<Array<wishlist_select_column>>;
    limit?: Maybe<Scalars["Int"]>;
    offset?: Maybe<Scalars["Int"]>;
    order_by?: Maybe<Array<wishlist_order_by>>;
    where?: Maybe<wishlist_bool_exp>;
  }) => wishlist_aggregate;
  wishlist_by_pk: (args: { uuid: Scalars["uuid"] }) => Maybe<wishlist>;
}

/**
 * columns and relationships of "activity_logs"
 */
export interface activity_logs {
  __typename: "activity_logs" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  description?: Maybe<ScalarsEnums["String"]>;
  event_type: ScalarsEnums["String"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "activity_logs"
 */
export interface activity_logs_aggregate {
  __typename: "activity_logs_aggregate" | undefined;
  aggregate?: Maybe<activity_logs_aggregate_fields>;
  nodes: Array<activity_logs>;
}

/**
 * aggregate fields of "activity_logs"
 */
export interface activity_logs_aggregate_fields {
  __typename: "activity_logs_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<activity_logs_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<activity_logs_max_fields>;
  min?: Maybe<activity_logs_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface activity_logs_max_fields {
  __typename: "activity_logs_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface activity_logs_min_fields {
  __typename: "activity_logs_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "activity_logs"
 */
export interface activity_logs_mutation_response {
  __typename: "activity_logs_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<activity_logs>;
}

/**
 * columns and relationships of "aruba_wifi_access"
 */
export interface aruba_wifi_access {
  __typename: "aruba_wifi_access" | undefined;
  access_end: ScalarsEnums["timestamptz"];
  access_start: ScalarsEnums["timestamptz"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  guest: guests;
  guest_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  password: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  wifi_ssid: ScalarsEnums["String"];
}

/**
 * aggregated selection of "aruba_wifi_access"
 */
export interface aruba_wifi_access_aggregate {
  __typename: "aruba_wifi_access_aggregate" | undefined;
  aggregate?: Maybe<aruba_wifi_access_aggregate_fields>;
  nodes: Array<aruba_wifi_access>;
}

/**
 * aggregate fields of "aruba_wifi_access"
 */
export interface aruba_wifi_access_aggregate_fields {
  __typename: "aruba_wifi_access_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<aruba_wifi_access_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<aruba_wifi_access_max_fields>;
  min?: Maybe<aruba_wifi_access_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface aruba_wifi_access_max_fields {
  __typename: "aruba_wifi_access_max_fields" | undefined;
  access_end?: Maybe<ScalarsEnums["timestamptz"]>;
  access_start?: Maybe<ScalarsEnums["timestamptz"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  password?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  wifi_ssid?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface aruba_wifi_access_min_fields {
  __typename: "aruba_wifi_access_min_fields" | undefined;
  access_end?: Maybe<ScalarsEnums["timestamptz"]>;
  access_start?: Maybe<ScalarsEnums["timestamptz"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  password?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  wifi_ssid?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "aruba_wifi_access"
 */
export interface aruba_wifi_access_mutation_response {
  __typename: "aruba_wifi_access_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<aruba_wifi_access>;
}

/**
 * Auth: Audit trail for user actions.
 *
 *
 * columns and relationships of "auth.audit_log_entries"
 */
export interface auth_audit_log_entries {
  __typename: "auth_audit_log_entries" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id: ScalarsEnums["uuid"];
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  payload: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
}

/**
 * aggregated selection of "auth.audit_log_entries"
 */
export interface auth_audit_log_entries_aggregate {
  __typename: "auth_audit_log_entries_aggregate" | undefined;
  aggregate?: Maybe<auth_audit_log_entries_aggregate_fields>;
  nodes: Array<auth_audit_log_entries>;
}

/**
 * aggregate fields of "auth.audit_log_entries"
 */
export interface auth_audit_log_entries_aggregate_fields {
  __typename: "auth_audit_log_entries_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<auth_audit_log_entries_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<auth_audit_log_entries_max_fields>;
  min?: Maybe<auth_audit_log_entries_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface auth_audit_log_entries_max_fields {
  __typename: "auth_audit_log_entries_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface auth_audit_log_entries_min_fields {
  __typename: "auth_audit_log_entries_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "auth.audit_log_entries"
 */
export interface auth_audit_log_entries_mutation_response {
  __typename: "auth_audit_log_entries_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<auth_audit_log_entries>;
}

/**
 * Auth: Manages users across multiple sites.
 *
 *
 * columns and relationships of "auth.instances"
 */
export interface auth_instances {
  __typename: "auth_instances" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id: ScalarsEnums["uuid"];
  raw_base_config?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "auth.instances"
 */
export interface auth_instances_aggregate {
  __typename: "auth_instances_aggregate" | undefined;
  aggregate?: Maybe<auth_instances_aggregate_fields>;
  nodes: Array<auth_instances>;
}

/**
 * aggregate fields of "auth.instances"
 */
export interface auth_instances_aggregate_fields {
  __typename: "auth_instances_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<auth_instances_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<auth_instances_max_fields>;
  min?: Maybe<auth_instances_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface auth_instances_max_fields {
  __typename: "auth_instances_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  raw_base_config?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface auth_instances_min_fields {
  __typename: "auth_instances_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  raw_base_config?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "auth.instances"
 */
export interface auth_instances_mutation_response {
  __typename: "auth_instances_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<auth_instances>;
}

/**
 * Auth: Store of tokens used to refresh JWT tokens once they expire.
 *
 *
 * columns and relationships of "auth.refresh_tokens"
 */
export interface auth_refresh_tokens {
  __typename: "auth_refresh_tokens" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id: ScalarsEnums["bigint"];
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  revoked?: Maybe<ScalarsEnums["Boolean"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_id?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregated selection of "auth.refresh_tokens"
 */
export interface auth_refresh_tokens_aggregate {
  __typename: "auth_refresh_tokens_aggregate" | undefined;
  aggregate?: Maybe<auth_refresh_tokens_aggregate_fields>;
  nodes: Array<auth_refresh_tokens>;
}

/**
 * aggregate fields of "auth.refresh_tokens"
 */
export interface auth_refresh_tokens_aggregate_fields {
  __typename: "auth_refresh_tokens_aggregate_fields" | undefined;
  avg?: Maybe<auth_refresh_tokens_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<auth_refresh_tokens_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<auth_refresh_tokens_max_fields>;
  min?: Maybe<auth_refresh_tokens_min_fields>;
  stddev?: Maybe<auth_refresh_tokens_stddev_fields>;
  stddev_pop?: Maybe<auth_refresh_tokens_stddev_pop_fields>;
  stddev_samp?: Maybe<auth_refresh_tokens_stddev_samp_fields>;
  sum?: Maybe<auth_refresh_tokens_sum_fields>;
  var_pop?: Maybe<auth_refresh_tokens_var_pop_fields>;
  var_samp?: Maybe<auth_refresh_tokens_var_samp_fields>;
  variance?: Maybe<auth_refresh_tokens_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface auth_refresh_tokens_avg_fields {
  __typename: "auth_refresh_tokens_avg_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface auth_refresh_tokens_max_fields {
  __typename: "auth_refresh_tokens_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["bigint"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_id?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface auth_refresh_tokens_min_fields {
  __typename: "auth_refresh_tokens_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["bigint"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_id?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "auth.refresh_tokens"
 */
export interface auth_refresh_tokens_mutation_response {
  __typename: "auth_refresh_tokens_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<auth_refresh_tokens>;
}

/**
 * aggregate stddev on columns
 */
export interface auth_refresh_tokens_stddev_fields {
  __typename: "auth_refresh_tokens_stddev_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface auth_refresh_tokens_stddev_pop_fields {
  __typename: "auth_refresh_tokens_stddev_pop_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface auth_refresh_tokens_stddev_samp_fields {
  __typename: "auth_refresh_tokens_stddev_samp_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface auth_refresh_tokens_sum_fields {
  __typename: "auth_refresh_tokens_sum_fields" | undefined;
  id?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface auth_refresh_tokens_var_pop_fields {
  __typename: "auth_refresh_tokens_var_pop_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface auth_refresh_tokens_var_samp_fields {
  __typename: "auth_refresh_tokens_var_samp_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface auth_refresh_tokens_variance_fields {
  __typename: "auth_refresh_tokens_variance_fields" | undefined;
  id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * Auth: Manages updates to the auth system.
 *
 *
 * columns and relationships of "auth.schema_migrations"
 */
export interface auth_schema_migrations {
  __typename: "auth_schema_migrations" | undefined;
  version: ScalarsEnums["String"];
}

/**
 * aggregated selection of "auth.schema_migrations"
 */
export interface auth_schema_migrations_aggregate {
  __typename: "auth_schema_migrations_aggregate" | undefined;
  aggregate?: Maybe<auth_schema_migrations_aggregate_fields>;
  nodes: Array<auth_schema_migrations>;
}

/**
 * aggregate fields of "auth.schema_migrations"
 */
export interface auth_schema_migrations_aggregate_fields {
  __typename: "auth_schema_migrations_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<auth_schema_migrations_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<auth_schema_migrations_max_fields>;
  min?: Maybe<auth_schema_migrations_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface auth_schema_migrations_max_fields {
  __typename: "auth_schema_migrations_max_fields" | undefined;
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface auth_schema_migrations_min_fields {
  __typename: "auth_schema_migrations_min_fields" | undefined;
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "auth.schema_migrations"
 */
export interface auth_schema_migrations_mutation_response {
  __typename: "auth_schema_migrations_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<auth_schema_migrations>;
}

/**
 * Auth: Stores user login data within a secure schema.
 *
 *
 * columns and relationships of "auth.users"
 */
export interface auth_users {
  __typename: "auth_users" | undefined;
  aud?: Maybe<ScalarsEnums["String"]>;
  confirmation_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  confirmation_token?: Maybe<ScalarsEnums["String"]>;
  confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  email_change?: Maybe<ScalarsEnums["String"]>;
  email_change_confirm_status?: Maybe<ScalarsEnums["smallint"]>;
  email_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email_change_token_current?: Maybe<ScalarsEnums["String"]>;
  email_change_token_new?: Maybe<ScalarsEnums["String"]>;
  email_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  encrypted_password?: Maybe<ScalarsEnums["String"]>;
  id: ScalarsEnums["uuid"];
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  invited_at?: Maybe<ScalarsEnums["timestamptz"]>;
  is_super_admin?: Maybe<ScalarsEnums["Boolean"]>;
  last_sign_in_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone?: Maybe<ScalarsEnums["String"]>;
  phone_change?: Maybe<ScalarsEnums["String"]>;
  phone_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone_change_token?: Maybe<ScalarsEnums["String"]>;
  phone_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  raw_app_meta_data: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["jsonb"]>;
  raw_user_meta_data: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["jsonb"]>;
  recovery_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  recovery_token?: Maybe<ScalarsEnums["String"]>;
  role?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * aggregated selection of "auth.users"
 */
export interface auth_users_aggregate {
  __typename: "auth_users_aggregate" | undefined;
  aggregate?: Maybe<auth_users_aggregate_fields>;
  nodes: Array<auth_users>;
}

/**
 * aggregate fields of "auth.users"
 */
export interface auth_users_aggregate_fields {
  __typename: "auth_users_aggregate_fields" | undefined;
  avg?: Maybe<auth_users_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<auth_users_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<auth_users_max_fields>;
  min?: Maybe<auth_users_min_fields>;
  stddev?: Maybe<auth_users_stddev_fields>;
  stddev_pop?: Maybe<auth_users_stddev_pop_fields>;
  stddev_samp?: Maybe<auth_users_stddev_samp_fields>;
  sum?: Maybe<auth_users_sum_fields>;
  var_pop?: Maybe<auth_users_var_pop_fields>;
  var_samp?: Maybe<auth_users_var_samp_fields>;
  variance?: Maybe<auth_users_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface auth_users_avg_fields {
  __typename: "auth_users_avg_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface auth_users_max_fields {
  __typename: "auth_users_max_fields" | undefined;
  aud?: Maybe<ScalarsEnums["String"]>;
  confirmation_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  confirmation_token?: Maybe<ScalarsEnums["String"]>;
  confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  email_change?: Maybe<ScalarsEnums["String"]>;
  email_change_confirm_status?: Maybe<ScalarsEnums["smallint"]>;
  email_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email_change_token_current?: Maybe<ScalarsEnums["String"]>;
  email_change_token_new?: Maybe<ScalarsEnums["String"]>;
  email_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  encrypted_password?: Maybe<ScalarsEnums["String"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  invited_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_sign_in_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone?: Maybe<ScalarsEnums["String"]>;
  phone_change?: Maybe<ScalarsEnums["String"]>;
  phone_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone_change_token?: Maybe<ScalarsEnums["String"]>;
  phone_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  recovery_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  recovery_token?: Maybe<ScalarsEnums["String"]>;
  role?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * aggregate min on columns
 */
export interface auth_users_min_fields {
  __typename: "auth_users_min_fields" | undefined;
  aud?: Maybe<ScalarsEnums["String"]>;
  confirmation_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  confirmation_token?: Maybe<ScalarsEnums["String"]>;
  confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  email_change?: Maybe<ScalarsEnums["String"]>;
  email_change_confirm_status?: Maybe<ScalarsEnums["smallint"]>;
  email_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email_change_token_current?: Maybe<ScalarsEnums["String"]>;
  email_change_token_new?: Maybe<ScalarsEnums["String"]>;
  email_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  encrypted_password?: Maybe<ScalarsEnums["String"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
  instance_id?: Maybe<ScalarsEnums["uuid"]>;
  invited_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_sign_in_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone?: Maybe<ScalarsEnums["String"]>;
  phone_change?: Maybe<ScalarsEnums["String"]>;
  phone_change_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  phone_change_token?: Maybe<ScalarsEnums["String"]>;
  phone_confirmed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  recovery_sent_at?: Maybe<ScalarsEnums["timestamptz"]>;
  recovery_token?: Maybe<ScalarsEnums["String"]>;
  role?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * response of any mutation on the table "auth.users"
 */
export interface auth_users_mutation_response {
  __typename: "auth_users_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<auth_users>;
}

/**
 * aggregate stddev on columns
 */
export interface auth_users_stddev_fields {
  __typename: "auth_users_stddev_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface auth_users_stddev_pop_fields {
  __typename: "auth_users_stddev_pop_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface auth_users_stddev_samp_fields {
  __typename: "auth_users_stddev_samp_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface auth_users_sum_fields {
  __typename: "auth_users_sum_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["smallint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface auth_users_var_pop_fields {
  __typename: "auth_users_var_pop_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface auth_users_var_samp_fields {
  __typename: "auth_users_var_samp_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface auth_users_variance_fields {
  __typename: "auth_users_variance_fields" | undefined;
  email_change_confirm_status?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "brand_campaigns"
 */
export interface brand_campaigns {
  __typename: "brand_campaigns" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  campaign: campaigns;
  campaign_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "brand_campaigns"
 */
export interface brand_campaigns_aggregate {
  __typename: "brand_campaigns_aggregate" | undefined;
  aggregate?: Maybe<brand_campaigns_aggregate_fields>;
  nodes: Array<brand_campaigns>;
}

/**
 * aggregate fields of "brand_campaigns"
 */
export interface brand_campaigns_aggregate_fields {
  __typename: "brand_campaigns_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brand_campaigns_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_campaigns_max_fields>;
  min?: Maybe<brand_campaigns_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brand_campaigns_max_fields {
  __typename: "brand_campaigns_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  campaign_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_campaigns_min_fields {
  __typename: "brand_campaigns_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  campaign_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_campaigns"
 */
export interface brand_campaigns_mutation_response {
  __typename: "brand_campaigns_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_campaigns>;
}

/**
 * columns and relationships of "brand_discussions"
 */
export interface brand_discussions {
  __typename: "brand_discussions" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  locked?: Maybe<ScalarsEnums["Boolean"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  private?: Maybe<ScalarsEnums["Boolean"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "brand_discussions"
 */
export interface brand_discussions_aggregate {
  __typename: "brand_discussions_aggregate" | undefined;
  aggregate?: Maybe<brand_discussions_aggregate_fields>;
  nodes: Array<brand_discussions>;
}

/**
 * aggregate fields of "brand_discussions"
 */
export interface brand_discussions_aggregate_fields {
  __typename: "brand_discussions_aggregate_fields" | undefined;
  avg?: Maybe<brand_discussions_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<brand_discussions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_discussions_max_fields>;
  min?: Maybe<brand_discussions_min_fields>;
  stddev?: Maybe<brand_discussions_stddev_fields>;
  stddev_pop?: Maybe<brand_discussions_stddev_pop_fields>;
  stddev_samp?: Maybe<brand_discussions_stddev_samp_fields>;
  sum?: Maybe<brand_discussions_sum_fields>;
  var_pop?: Maybe<brand_discussions_var_pop_fields>;
  var_samp?: Maybe<brand_discussions_var_samp_fields>;
  variance?: Maybe<brand_discussions_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface brand_discussions_avg_fields {
  __typename: "brand_discussions_avg_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface brand_discussions_max_fields {
  __typename: "brand_discussions_max_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_discussions_min_fields {
  __typename: "brand_discussions_min_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_discussions"
 */
export interface brand_discussions_mutation_response {
  __typename: "brand_discussions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_discussions>;
}

/**
 * aggregate stddev on columns
 */
export interface brand_discussions_stddev_fields {
  __typename: "brand_discussions_stddev_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface brand_discussions_stddev_pop_fields {
  __typename: "brand_discussions_stddev_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface brand_discussions_stddev_samp_fields {
  __typename: "brand_discussions_stddev_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface brand_discussions_sum_fields {
  __typename: "brand_discussions_sum_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface brand_discussions_var_pop_fields {
  __typename: "brand_discussions_var_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface brand_discussions_var_samp_fields {
  __typename: "brand_discussions_var_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface brand_discussions_variance_fields {
  __typename: "brand_discussions_variance_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "brand_inbox"
 */
export interface brand_inbox {
  __typename: "brand_inbox" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "brand_inbox"
 */
export interface brand_inbox_aggregate {
  __typename: "brand_inbox_aggregate" | undefined;
  aggregate?: Maybe<brand_inbox_aggregate_fields>;
  nodes: Array<brand_inbox>;
}

/**
 * aggregate fields of "brand_inbox"
 */
export interface brand_inbox_aggregate_fields {
  __typename: "brand_inbox_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brand_inbox_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_inbox_max_fields>;
  min?: Maybe<brand_inbox_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brand_inbox_max_fields {
  __typename: "brand_inbox_max_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_inbox_min_fields {
  __typename: "brand_inbox_min_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_inbox"
 */
export interface brand_inbox_mutation_response {
  __typename: "brand_inbox_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_inbox>;
}

/**
 * columns and relationships of "brand_media"
 */
export interface brand_media {
  __typename: "brand_media" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "brand_media"
 */
export interface brand_media_aggregate {
  __typename: "brand_media_aggregate" | undefined;
  aggregate?: Maybe<brand_media_aggregate_fields>;
  nodes: Array<brand_media>;
}

/**
 * aggregate fields of "brand_media"
 */
export interface brand_media_aggregate_fields {
  __typename: "brand_media_aggregate_fields" | undefined;
  avg?: Maybe<brand_media_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<brand_media_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_media_max_fields>;
  min?: Maybe<brand_media_min_fields>;
  stddev?: Maybe<brand_media_stddev_fields>;
  stddev_pop?: Maybe<brand_media_stddev_pop_fields>;
  stddev_samp?: Maybe<brand_media_stddev_samp_fields>;
  sum?: Maybe<brand_media_sum_fields>;
  var_pop?: Maybe<brand_media_var_pop_fields>;
  var_samp?: Maybe<brand_media_var_samp_fields>;
  variance?: Maybe<brand_media_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface brand_media_avg_fields {
  __typename: "brand_media_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface brand_media_max_fields {
  __typename: "brand_media_max_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_media_min_fields {
  __typename: "brand_media_min_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_media"
 */
export interface brand_media_mutation_response {
  __typename: "brand_media_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_media>;
}

/**
 * aggregate stddev on columns
 */
export interface brand_media_stddev_fields {
  __typename: "brand_media_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface brand_media_stddev_pop_fields {
  __typename: "brand_media_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface brand_media_stddev_samp_fields {
  __typename: "brand_media_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface brand_media_sum_fields {
  __typename: "brand_media_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface brand_media_var_pop_fields {
  __typename: "brand_media_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface brand_media_var_samp_fields {
  __typename: "brand_media_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface brand_media_variance_fields {
  __typename: "brand_media_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "brand_tags"
 */
export interface brand_tags {
  __typename: "brand_tags" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "brand_tags"
 */
export interface brand_tags_aggregate {
  __typename: "brand_tags_aggregate" | undefined;
  aggregate?: Maybe<brand_tags_aggregate_fields>;
  nodes: Array<brand_tags>;
}

/**
 * aggregate fields of "brand_tags"
 */
export interface brand_tags_aggregate_fields {
  __typename: "brand_tags_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brand_tags_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_tags_max_fields>;
  min?: Maybe<brand_tags_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brand_tags_max_fields {
  __typename: "brand_tags_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_tags_min_fields {
  __typename: "brand_tags_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_tags"
 */
export interface brand_tags_mutation_response {
  __typename: "brand_tags_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_tags>;
}

/**
 * columns and relationships of "brand_users"
 */
export interface brand_users {
  __typename: "brand_users" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  guests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  /**
   * An aggregate relationship
   */
  guests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  job_title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "brand_users"
 */
export interface brand_users_aggregate {
  __typename: "brand_users_aggregate" | undefined;
  aggregate?: Maybe<brand_users_aggregate_fields>;
  nodes: Array<brand_users>;
}

/**
 * aggregate fields of "brand_users"
 */
export interface brand_users_aggregate_fields {
  __typename: "brand_users_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brand_users_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_users_max_fields>;
  min?: Maybe<brand_users_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brand_users_max_fields {
  __typename: "brand_users_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  job_title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_users_min_fields {
  __typename: "brand_users_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  job_title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_users"
 */
export interface brand_users_mutation_response {
  __typename: "brand_users_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_users>;
}

/**
 * columns and relationships of "brand_wishes"
 */
export interface brand_wishes {
  __typename: "brand_wishes" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "brand_wishes"
 */
export interface brand_wishes_aggregate {
  __typename: "brand_wishes_aggregate" | undefined;
  aggregate?: Maybe<brand_wishes_aggregate_fields>;
  nodes: Array<brand_wishes>;
}

/**
 * aggregate fields of "brand_wishes"
 */
export interface brand_wishes_aggregate_fields {
  __typename: "brand_wishes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brand_wishes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brand_wishes_max_fields>;
  min?: Maybe<brand_wishes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brand_wishes_max_fields {
  __typename: "brand_wishes_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brand_wishes_min_fields {
  __typename: "brand_wishes_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brand_wishes"
 */
export interface brand_wishes_mutation_response {
  __typename: "brand_wishes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brand_wishes>;
}

/**
 * columns and relationships of "brands"
 */
export interface brands {
  __typename: "brands" | undefined;
  available: ScalarsEnums["Boolean"];
  /**
   * An array relationship
   */
  brand_campaigns: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_campaigns_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => Array<brand_campaigns>;
  /**
   * An aggregate relationship
   */
  brand_campaigns_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_campaigns_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => brand_campaigns_aggregate;
  /**
   * An array relationship
   */
  brand_users: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_users_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_users_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_users_bool_exp>;
  }) => Array<brand_users>;
  /**
   * An aggregate relationship
   */
  brand_users_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_users_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_users_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_users_bool_exp>;
  }) => brand_users_aggregate;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  default_addons: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<default_addons_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<default_addons_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<default_addons_bool_exp>;
  }) => Array<default_addons>;
  /**
   * An aggregate relationship
   */
  default_addons_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<default_addons_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<default_addons_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<default_addons_bool_exp>;
  }) => default_addons_aggregate;
  description: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  discount_codes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => Array<discount_codes>;
  /**
   * An aggregate relationship
   */
  discount_codes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => discount_codes_aggregate;
  /**
   * An array relationship
   */
  discussions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_discussions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_discussions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => Array<brand_discussions>;
  /**
   * An aggregate relationship
   */
  discussions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_discussions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_discussions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_discussions_bool_exp>;
  }) => brand_discussions_aggregate;
  fine_print: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  floor_plans: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plans_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plans_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plans_bool_exp>;
  }) => Array<floor_plans>;
  /**
   * An aggregate relationship
   */
  floor_plans_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plans_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plans_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plans_bool_exp>;
  }) => floor_plans_aggregate;
  /**
   * An array relationship
   */
  guests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  /**
   * An aggregate relationship
   */
  guests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  /**
   * An object relationship
   */
  inbox?: Maybe<brand_inbox>;
  /**
   * An array relationship
   */
  invoices: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<invoice_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<invoice_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<invoice_bool_exp>;
  }) => Array<invoice>;
  /**
   * An aggregate relationship
   */
  invoices_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<invoice_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<invoice_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<invoice_bool_exp>;
  }) => invoice_aggregate;
  /**
   * An array relationship
   */
  listings: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listings_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listings_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listings_bool_exp>;
  }) => Array<listings>;
  /**
   * An aggregate relationship
   */
  listings_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listings_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listings_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listings_bool_exp>;
  }) => listings_aggregate;
  /**
   * An array relationship
   */
  media: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_media_bool_exp>;
  }) => Array<brand_media>;
  /**
   * An aggregate relationship
   */
  media_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_media_bool_exp>;
  }) => brand_media_aggregate;
  name: ScalarsEnums["String"];
  online: ScalarsEnums["Boolean"];
  /**
   * An array relationship
   */
  outlets: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<outlets_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<outlets_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<outlets_bool_exp>;
  }) => Array<outlets>;
  /**
   * An aggregate relationship
   */
  outlets_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<outlets_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<outlets_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<outlets_bool_exp>;
  }) => outlets_aggregate;
  /**
   * An array relationship
   */
  passes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  /**
   * An aggregate relationship
   */
  passes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  /**
   * An array relationship
   */
  questionaires: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<questionaires_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<questionaires_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<questionaires_bool_exp>;
  }) => Array<questionaires>;
  /**
   * An aggregate relationship
   */
  questionaires_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<questionaires_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<questionaires_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<questionaires_bool_exp>;
  }) => questionaires_aggregate;
  /**
   * An array relationship
   */
  requests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  /**
   * An aggregate relationship
   */
  requests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  /**
   * An array relationship
   */
  reservations: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => Array<reservations>;
  /**
   * An aggregate relationship
   */
  reservations_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => reservations_aggregate;
  /**
   * An array relationship
   */
  reviews: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  /**
   * An aggregate relationship
   */
  reviews_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  slug: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  spaces: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  /**
   * An aggregate relationship
   */
  spaces_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  tags: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_tags_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_tags_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_tags_bool_exp>;
  }) => Array<brand_tags>;
  /**
   * An aggregate relationship
   */
  tags_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_tags_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_tags_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_tags_bool_exp>;
  }) => brand_tags_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  wishes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_wishes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_wishes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => Array<brand_wishes>;
  /**
   * An aggregate relationship
   */
  wishes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_wishes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_wishes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_wishes_bool_exp>;
  }) => brand_wishes_aggregate;
}

/**
 * aggregated selection of "brands"
 */
export interface brands_aggregate {
  __typename: "brands_aggregate" | undefined;
  aggregate?: Maybe<brands_aggregate_fields>;
  nodes: Array<brands>;
}

/**
 * aggregate fields of "brands"
 */
export interface brands_aggregate_fields {
  __typename: "brands_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<brands_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<brands_max_fields>;
  min?: Maybe<brands_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface brands_max_fields {
  __typename: "brands_max_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  fine_print?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface brands_min_fields {
  __typename: "brands_min_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  fine_print?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "brands"
 */
export interface brands_mutation_response {
  __typename: "brands_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<brands>;
}

/**
 * columns and relationships of "campaigns"
 */
export interface campaigns {
  __typename: "campaigns" | undefined;
  authentication: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  brand_campaigns: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_campaigns_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => Array<brand_campaigns>;
  /**
   * An aggregate relationship
   */
  brand_campaigns_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_campaigns_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_campaigns_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_campaigns_bool_exp>;
  }) => brand_campaigns_aggregate;
  currency_code: ScalarsEnums["bpchar"];
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  discount_codes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => Array<discount_codes>;
  /**
   * An aggregate relationship
   */
  discount_codes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => discount_codes_aggregate;
  name: ScalarsEnums["String"];
  type: ScalarsEnums["String"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "campaigns"
 */
export interface campaigns_aggregate {
  __typename: "campaigns_aggregate" | undefined;
  aggregate?: Maybe<campaigns_aggregate_fields>;
  nodes: Array<campaigns>;
}

/**
 * aggregate fields of "campaigns"
 */
export interface campaigns_aggregate_fields {
  __typename: "campaigns_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<campaigns_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<campaigns_max_fields>;
  min?: Maybe<campaigns_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface campaigns_max_fields {
  __typename: "campaigns_max_fields" | undefined;
  authentication?: Maybe<ScalarsEnums["String"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface campaigns_min_fields {
  __typename: "campaigns_min_fields" | undefined;
  authentication?: Maybe<ScalarsEnums["String"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "campaigns"
 */
export interface campaigns_mutation_response {
  __typename: "campaigns_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<campaigns>;
}

/**
 * columns and relationships of "card"
 */
export interface card {
  __typename: "card" | undefined;
  brand: ScalarsEnums["String"];
  country: ScalarsEnums["String"];
  last_4: ScalarsEnums["String"];
  token: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "card"
 */
export interface card_aggregate {
  __typename: "card_aggregate" | undefined;
  aggregate?: Maybe<card_aggregate_fields>;
  nodes: Array<card>;
}

/**
 * aggregate fields of "card"
 */
export interface card_aggregate_fields {
  __typename: "card_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<card_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<card_max_fields>;
  min?: Maybe<card_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface card_max_fields {
  __typename: "card_max_fields" | undefined;
  brand?: Maybe<ScalarsEnums["String"]>;
  country?: Maybe<ScalarsEnums["String"]>;
  last_4?: Maybe<ScalarsEnums["String"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface card_min_fields {
  __typename: "card_min_fields" | undefined;
  brand?: Maybe<ScalarsEnums["String"]>;
  country?: Maybe<ScalarsEnums["String"]>;
  last_4?: Maybe<ScalarsEnums["String"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "card"
 */
export interface card_mutation_response {
  __typename: "card_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<card>;
}

/**
 * columns and relationships of "comment_comments"
 */
export interface comment_comments {
  __typename: "comment_comments" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "comment_comments"
 */
export interface comment_comments_aggregate {
  __typename: "comment_comments_aggregate" | undefined;
  aggregate?: Maybe<comment_comments_aggregate_fields>;
  nodes: Array<comment_comments>;
}

/**
 * aggregate fields of "comment_comments"
 */
export interface comment_comments_aggregate_fields {
  __typename: "comment_comments_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<comment_comments_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<comment_comments_max_fields>;
  min?: Maybe<comment_comments_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface comment_comments_max_fields {
  __typename: "comment_comments_max_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface comment_comments_min_fields {
  __typename: "comment_comments_min_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "comment_comments"
 */
export interface comment_comments_mutation_response {
  __typename: "comment_comments_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<comment_comments>;
}

/**
 * columns and relationships of "comment_likes"
 */
export interface comment_likes {
  __typename: "comment_likes" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "comment_likes"
 */
export interface comment_likes_aggregate {
  __typename: "comment_likes_aggregate" | undefined;
  aggregate?: Maybe<comment_likes_aggregate_fields>;
  nodes: Array<comment_likes>;
}

/**
 * aggregate fields of "comment_likes"
 */
export interface comment_likes_aggregate_fields {
  __typename: "comment_likes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<comment_likes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<comment_likes_max_fields>;
  min?: Maybe<comment_likes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface comment_likes_max_fields {
  __typename: "comment_likes_max_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface comment_likes_min_fields {
  __typename: "comment_likes_min_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "comment_likes"
 */
export interface comment_likes_mutation_response {
  __typename: "comment_likes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<comment_likes>;
}

/**
 * columns and relationships of "conversations"
 */
export interface conversations {
  __typename: "conversations" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  inboxes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<inboxes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<inboxes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<inboxes_bool_exp>;
  }) => Array<inboxes>;
  /**
   * An aggregate relationship
   */
  inboxes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<inboxes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<inboxes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<inboxes_bool_exp>;
  }) => inboxes_aggregate;
  /**
   * An array relationship
   */
  messages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<messages_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<messages_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<messages_bool_exp>;
  }) => Array<messages>;
  /**
   * An aggregate relationship
   */
  messages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<messages_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<messages_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<messages_bool_exp>;
  }) => messages_aggregate;
  owner_uuid: ScalarsEnums["uuid"];
  private: ScalarsEnums["Boolean"];
  type: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "conversations"
 */
export interface conversations_aggregate {
  __typename: "conversations_aggregate" | undefined;
  aggregate?: Maybe<conversations_aggregate_fields>;
  nodes: Array<conversations>;
}

/**
 * aggregate fields of "conversations"
 */
export interface conversations_aggregate_fields {
  __typename: "conversations_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<conversations_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<conversations_max_fields>;
  min?: Maybe<conversations_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface conversations_max_fields {
  __typename: "conversations_max_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  owner_uuid?: Maybe<ScalarsEnums["uuid"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface conversations_min_fields {
  __typename: "conversations_min_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  owner_uuid?: Maybe<ScalarsEnums["uuid"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "conversations"
 */
export interface conversations_mutation_response {
  __typename: "conversations_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<conversations>;
}

/**
 * columns and relationships of "currencies"
 */
export interface currencies {
  __typename: "currencies" | undefined;
  activated: ScalarsEnums["Boolean"];
  code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  decimal_mark: ScalarsEnums["String"];
  name: ScalarsEnums["String"];
  symbol: ScalarsEnums["String"];
  thousands_separator: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "currencies"
 */
export interface currencies_aggregate {
  __typename: "currencies_aggregate" | undefined;
  aggregate?: Maybe<currencies_aggregate_fields>;
  nodes: Array<currencies>;
}

/**
 * aggregate fields of "currencies"
 */
export interface currencies_aggregate_fields {
  __typename: "currencies_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<currencies_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<currencies_max_fields>;
  min?: Maybe<currencies_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface currencies_max_fields {
  __typename: "currencies_max_fields" | undefined;
  code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  decimal_mark?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  symbol?: Maybe<ScalarsEnums["String"]>;
  thousands_separator?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface currencies_min_fields {
  __typename: "currencies_min_fields" | undefined;
  code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  decimal_mark?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  symbol?: Maybe<ScalarsEnums["String"]>;
  thousands_separator?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "currencies"
 */
export interface currencies_mutation_response {
  __typename: "currencies_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<currencies>;
}

/**
 * columns and relationships of "daily_rates"
 */
export interface daily_rates {
  __typename: "daily_rates" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  currency_code: ScalarsEnums["bpchar"];
  rate: ScalarsEnums["float8"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "daily_rates"
 */
export interface daily_rates_aggregate {
  __typename: "daily_rates_aggregate" | undefined;
  aggregate?: Maybe<daily_rates_aggregate_fields>;
  nodes: Array<daily_rates>;
}

/**
 * aggregate fields of "daily_rates"
 */
export interface daily_rates_aggregate_fields {
  __typename: "daily_rates_aggregate_fields" | undefined;
  avg?: Maybe<daily_rates_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<daily_rates_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<daily_rates_max_fields>;
  min?: Maybe<daily_rates_min_fields>;
  stddev?: Maybe<daily_rates_stddev_fields>;
  stddev_pop?: Maybe<daily_rates_stddev_pop_fields>;
  stddev_samp?: Maybe<daily_rates_stddev_samp_fields>;
  sum?: Maybe<daily_rates_sum_fields>;
  var_pop?: Maybe<daily_rates_var_pop_fields>;
  var_samp?: Maybe<daily_rates_var_samp_fields>;
  variance?: Maybe<daily_rates_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface daily_rates_avg_fields {
  __typename: "daily_rates_avg_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface daily_rates_max_fields {
  __typename: "daily_rates_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  rate?: Maybe<ScalarsEnums["float8"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface daily_rates_min_fields {
  __typename: "daily_rates_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  rate?: Maybe<ScalarsEnums["float8"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "daily_rates"
 */
export interface daily_rates_mutation_response {
  __typename: "daily_rates_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<daily_rates>;
}

/**
 * aggregate stddev on columns
 */
export interface daily_rates_stddev_fields {
  __typename: "daily_rates_stddev_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface daily_rates_stddev_pop_fields {
  __typename: "daily_rates_stddev_pop_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface daily_rates_stddev_samp_fields {
  __typename: "daily_rates_stddev_samp_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface daily_rates_sum_fields {
  __typename: "daily_rates_sum_fields" | undefined;
  rate?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface daily_rates_var_pop_fields {
  __typename: "daily_rates_var_pop_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface daily_rates_var_samp_fields {
  __typename: "daily_rates_var_samp_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface daily_rates_variance_fields {
  __typename: "daily_rates_variance_fields" | undefined;
  rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "default_addons"
 */
export interface default_addons {
  __typename: "default_addons" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  outlet_has_addons: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => Array<outlet_has_addons>;
  /**
   * An aggregate relationship
   */
  outlet_has_addons_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<outlet_has_addons_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<outlet_has_addons_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<outlet_has_addons_bool_exp>;
  }) => outlet_has_addons_aggregate;
  price: ScalarsEnums["float8"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "default_addons"
 */
export interface default_addons_aggregate {
  __typename: "default_addons_aggregate" | undefined;
  aggregate?: Maybe<default_addons_aggregate_fields>;
  nodes: Array<default_addons>;
}

/**
 * aggregate fields of "default_addons"
 */
export interface default_addons_aggregate_fields {
  __typename: "default_addons_aggregate_fields" | undefined;
  avg?: Maybe<default_addons_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<default_addons_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<default_addons_max_fields>;
  min?: Maybe<default_addons_min_fields>;
  stddev?: Maybe<default_addons_stddev_fields>;
  stddev_pop?: Maybe<default_addons_stddev_pop_fields>;
  stddev_samp?: Maybe<default_addons_stddev_samp_fields>;
  sum?: Maybe<default_addons_sum_fields>;
  var_pop?: Maybe<default_addons_var_pop_fields>;
  var_samp?: Maybe<default_addons_var_samp_fields>;
  variance?: Maybe<default_addons_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface default_addons_avg_fields {
  __typename: "default_addons_avg_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface default_addons_max_fields {
  __typename: "default_addons_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface default_addons_min_fields {
  __typename: "default_addons_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "default_addons"
 */
export interface default_addons_mutation_response {
  __typename: "default_addons_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<default_addons>;
}

/**
 * aggregate stddev on columns
 */
export interface default_addons_stddev_fields {
  __typename: "default_addons_stddev_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface default_addons_stddev_pop_fields {
  __typename: "default_addons_stddev_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface default_addons_stddev_samp_fields {
  __typename: "default_addons_stddev_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface default_addons_sum_fields {
  __typename: "default_addons_sum_fields" | undefined;
  price?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface default_addons_var_pop_fields {
  __typename: "default_addons_var_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface default_addons_var_samp_fields {
  __typename: "default_addons_var_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface default_addons_variance_fields {
  __typename: "default_addons_variance_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "discount_codes"
 */
export interface discount_codes {
  __typename: "discount_codes" | undefined;
  /**
   * An object relationship
   */
  brand?: Maybe<brands>;
  /**
   * An object relationship
   */
  campaign: campaigns;
  campaign_uuid: ScalarsEnums["uuid"];
  code: ScalarsEnums["String"];
  created_at: ScalarsEnums["timestamptz"];
  currency_code: ScalarsEnums["bpchar"];
  description: ScalarsEnums["String"];
  eligible_brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  eligible_country_code?: Maybe<ScalarsEnums["bpchar"]>;
  eligible_listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  fine_print: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  listing?: Maybe<listings>;
  /**
   * brand | stayr
   */
  sponsor: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  value: ScalarsEnums["float8"];
}

/**
 * aggregated selection of "discount_codes"
 */
export interface discount_codes_aggregate {
  __typename: "discount_codes_aggregate" | undefined;
  aggregate?: Maybe<discount_codes_aggregate_fields>;
  nodes: Array<discount_codes>;
}

/**
 * aggregate fields of "discount_codes"
 */
export interface discount_codes_aggregate_fields {
  __typename: "discount_codes_aggregate_fields" | undefined;
  avg?: Maybe<discount_codes_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<discount_codes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<discount_codes_max_fields>;
  min?: Maybe<discount_codes_min_fields>;
  stddev?: Maybe<discount_codes_stddev_fields>;
  stddev_pop?: Maybe<discount_codes_stddev_pop_fields>;
  stddev_samp?: Maybe<discount_codes_stddev_samp_fields>;
  sum?: Maybe<discount_codes_sum_fields>;
  var_pop?: Maybe<discount_codes_var_pop_fields>;
  var_samp?: Maybe<discount_codes_var_samp_fields>;
  variance?: Maybe<discount_codes_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface discount_codes_avg_fields {
  __typename: "discount_codes_avg_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface discount_codes_max_fields {
  __typename: "discount_codes_max_fields" | undefined;
  campaign_uuid?: Maybe<ScalarsEnums["uuid"]>;
  code?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  eligible_brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  eligible_country_code?: Maybe<ScalarsEnums["bpchar"]>;
  eligible_listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  fine_print?: Maybe<ScalarsEnums["String"]>;
  /**
   * brand | stayr
   */
  sponsor?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  value?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate min on columns
 */
export interface discount_codes_min_fields {
  __typename: "discount_codes_min_fields" | undefined;
  campaign_uuid?: Maybe<ScalarsEnums["uuid"]>;
  code?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  eligible_brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  eligible_country_code?: Maybe<ScalarsEnums["bpchar"]>;
  eligible_listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  fine_print?: Maybe<ScalarsEnums["String"]>;
  /**
   * brand | stayr
   */
  sponsor?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  value?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * response of any mutation on the table "discount_codes"
 */
export interface discount_codes_mutation_response {
  __typename: "discount_codes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<discount_codes>;
}

/**
 * aggregate stddev on columns
 */
export interface discount_codes_stddev_fields {
  __typename: "discount_codes_stddev_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface discount_codes_stddev_pop_fields {
  __typename: "discount_codes_stddev_pop_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface discount_codes_stddev_samp_fields {
  __typename: "discount_codes_stddev_samp_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface discount_codes_sum_fields {
  __typename: "discount_codes_sum_fields" | undefined;
  value?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface discount_codes_var_pop_fields {
  __typename: "discount_codes_var_pop_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface discount_codes_var_samp_fields {
  __typename: "discount_codes_var_samp_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface discount_codes_variance_fields {
  __typename: "discount_codes_variance_fields" | undefined;
  value?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "discussion_user"
 */
export interface discussion_user {
  __typename: "discussion_user" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  discussion: discussions;
  discussion_uuid: ScalarsEnums["uuid"];
  last_read_at: ScalarsEnums["timestamptz"];
  last_read_post_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "discussion_user"
 */
export interface discussion_user_aggregate {
  __typename: "discussion_user_aggregate" | undefined;
  aggregate?: Maybe<discussion_user_aggregate_fields>;
  nodes: Array<discussion_user>;
}

/**
 * aggregate fields of "discussion_user"
 */
export interface discussion_user_aggregate_fields {
  __typename: "discussion_user_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<discussion_user_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<discussion_user_max_fields>;
  min?: Maybe<discussion_user_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface discussion_user_max_fields {
  __typename: "discussion_user_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  discussion_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_read_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_read_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface discussion_user_min_fields {
  __typename: "discussion_user_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  discussion_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_read_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_read_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "discussion_user"
 */
export interface discussion_user_mutation_response {
  __typename: "discussion_user_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<discussion_user>;
}

/**
 * columns and relationships of "discussions"
 */
export interface discussions {
  __typename: "discussions" | undefined;
  comment_count: ScalarsEnums["Int"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  discussion_users: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discussion_user_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discussion_user_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discussion_user_bool_exp>;
  }) => Array<discussion_user>;
  /**
   * An aggregate relationship
   */
  discussion_users_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discussion_user_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discussion_user_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discussion_user_bool_exp>;
  }) => discussion_user_aggregate;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  locked: ScalarsEnums["Boolean"];
  model_type: ScalarsEnums["String"];
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count: ScalarsEnums["Int"];
  /**
   * An array relationship
   */
  posts: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<posts_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<posts_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<posts_bool_exp>;
  }) => Array<posts>;
  /**
   * An aggregate relationship
   */
  posts_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<posts_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<posts_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<posts_bool_exp>;
  }) => posts_aggregate;
  private: ScalarsEnums["Boolean"];
  slug: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "discussions"
 */
export interface discussions_aggregate {
  __typename: "discussions_aggregate" | undefined;
  aggregate?: Maybe<discussions_aggregate_fields>;
  nodes: Array<discussions>;
}

/**
 * aggregate fields of "discussions"
 */
export interface discussions_aggregate_fields {
  __typename: "discussions_aggregate_fields" | undefined;
  avg?: Maybe<discussions_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<discussions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<discussions_max_fields>;
  min?: Maybe<discussions_min_fields>;
  stddev?: Maybe<discussions_stddev_fields>;
  stddev_pop?: Maybe<discussions_stddev_pop_fields>;
  stddev_samp?: Maybe<discussions_stddev_samp_fields>;
  sum?: Maybe<discussions_sum_fields>;
  var_pop?: Maybe<discussions_var_pop_fields>;
  var_samp?: Maybe<discussions_var_samp_fields>;
  variance?: Maybe<discussions_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface discussions_avg_fields {
  __typename: "discussions_avg_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface discussions_max_fields {
  __typename: "discussions_max_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface discussions_min_fields {
  __typename: "discussions_min_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "discussions"
 */
export interface discussions_mutation_response {
  __typename: "discussions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<discussions>;
}

/**
 * aggregate stddev on columns
 */
export interface discussions_stddev_fields {
  __typename: "discussions_stddev_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface discussions_stddev_pop_fields {
  __typename: "discussions_stddev_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface discussions_stddev_samp_fields {
  __typename: "discussions_stddev_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface discussions_sum_fields {
  __typename: "discussions_sum_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface discussions_var_pop_fields {
  __typename: "discussions_var_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface discussions_var_samp_fields {
  __typename: "discussions_var_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface discussions_variance_fields {
  __typename: "discussions_variance_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "extensions"
 */
export interface extensions {
  __typename: "extensions" | undefined;
  id: ScalarsEnums["String"];
  minutes: ScalarsEnums["Int"];
  /**
   * An object relationship
   */
  request: requests;
  request_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "extensions"
 */
export interface extensions_aggregate {
  __typename: "extensions_aggregate" | undefined;
  aggregate?: Maybe<extensions_aggregate_fields>;
  nodes: Array<extensions>;
}

/**
 * aggregate fields of "extensions"
 */
export interface extensions_aggregate_fields {
  __typename: "extensions_aggregate_fields" | undefined;
  avg?: Maybe<extensions_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<extensions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<extensions_max_fields>;
  min?: Maybe<extensions_min_fields>;
  stddev?: Maybe<extensions_stddev_fields>;
  stddev_pop?: Maybe<extensions_stddev_pop_fields>;
  stddev_samp?: Maybe<extensions_stddev_samp_fields>;
  sum?: Maybe<extensions_sum_fields>;
  var_pop?: Maybe<extensions_var_pop_fields>;
  var_samp?: Maybe<extensions_var_samp_fields>;
  variance?: Maybe<extensions_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface extensions_avg_fields {
  __typename: "extensions_avg_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "extensions.geography_columns"
 */
export interface extensions_geography_columns {
  __typename: "extensions_geography_columns" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  f_geography_column?: Maybe<ScalarsEnums["name"]>;
  f_table_catalog?: Maybe<ScalarsEnums["name"]>;
  f_table_name?: Maybe<ScalarsEnums["name"]>;
  f_table_schema?: Maybe<ScalarsEnums["name"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregated selection of "extensions.geography_columns"
 */
export interface extensions_geography_columns_aggregate {
  __typename: "extensions_geography_columns_aggregate" | undefined;
  aggregate?: Maybe<extensions_geography_columns_aggregate_fields>;
  nodes: Array<extensions_geography_columns>;
}

/**
 * aggregate fields of "extensions.geography_columns"
 */
export interface extensions_geography_columns_aggregate_fields {
  __typename: "extensions_geography_columns_aggregate_fields" | undefined;
  avg?: Maybe<extensions_geography_columns_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<extensions_geography_columns_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<extensions_geography_columns_max_fields>;
  min?: Maybe<extensions_geography_columns_min_fields>;
  stddev?: Maybe<extensions_geography_columns_stddev_fields>;
  stddev_pop?: Maybe<extensions_geography_columns_stddev_pop_fields>;
  stddev_samp?: Maybe<extensions_geography_columns_stddev_samp_fields>;
  sum?: Maybe<extensions_geography_columns_sum_fields>;
  var_pop?: Maybe<extensions_geography_columns_var_pop_fields>;
  var_samp?: Maybe<extensions_geography_columns_var_samp_fields>;
  variance?: Maybe<extensions_geography_columns_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface extensions_geography_columns_avg_fields {
  __typename: "extensions_geography_columns_avg_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface extensions_geography_columns_max_fields {
  __typename: "extensions_geography_columns_max_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface extensions_geography_columns_min_fields {
  __typename: "extensions_geography_columns_min_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate stddev on columns
 */
export interface extensions_geography_columns_stddev_fields {
  __typename: "extensions_geography_columns_stddev_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface extensions_geography_columns_stddev_pop_fields {
  __typename: "extensions_geography_columns_stddev_pop_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface extensions_geography_columns_stddev_samp_fields {
  __typename: "extensions_geography_columns_stddev_samp_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface extensions_geography_columns_sum_fields {
  __typename: "extensions_geography_columns_sum_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface extensions_geography_columns_var_pop_fields {
  __typename: "extensions_geography_columns_var_pop_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface extensions_geography_columns_var_samp_fields {
  __typename: "extensions_geography_columns_var_samp_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface extensions_geography_columns_variance_fields {
  __typename: "extensions_geography_columns_variance_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "extensions.geometry_columns"
 */
export interface extensions_geometry_columns {
  __typename: "extensions_geometry_columns" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  f_geometry_column?: Maybe<ScalarsEnums["name"]>;
  f_table_catalog?: Maybe<ScalarsEnums["String"]>;
  f_table_name?: Maybe<ScalarsEnums["name"]>;
  f_table_schema?: Maybe<ScalarsEnums["name"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregated selection of "extensions.geometry_columns"
 */
export interface extensions_geometry_columns_aggregate {
  __typename: "extensions_geometry_columns_aggregate" | undefined;
  aggregate?: Maybe<extensions_geometry_columns_aggregate_fields>;
  nodes: Array<extensions_geometry_columns>;
}

/**
 * aggregate fields of "extensions.geometry_columns"
 */
export interface extensions_geometry_columns_aggregate_fields {
  __typename: "extensions_geometry_columns_aggregate_fields" | undefined;
  avg?: Maybe<extensions_geometry_columns_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<extensions_geometry_columns_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<extensions_geometry_columns_max_fields>;
  min?: Maybe<extensions_geometry_columns_min_fields>;
  stddev?: Maybe<extensions_geometry_columns_stddev_fields>;
  stddev_pop?: Maybe<extensions_geometry_columns_stddev_pop_fields>;
  stddev_samp?: Maybe<extensions_geometry_columns_stddev_samp_fields>;
  sum?: Maybe<extensions_geometry_columns_sum_fields>;
  var_pop?: Maybe<extensions_geometry_columns_var_pop_fields>;
  var_samp?: Maybe<extensions_geometry_columns_var_samp_fields>;
  variance?: Maybe<extensions_geometry_columns_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface extensions_geometry_columns_avg_fields {
  __typename: "extensions_geometry_columns_avg_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface extensions_geometry_columns_max_fields {
  __typename: "extensions_geometry_columns_max_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  f_table_catalog?: Maybe<ScalarsEnums["String"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface extensions_geometry_columns_min_fields {
  __typename: "extensions_geometry_columns_min_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  f_table_catalog?: Maybe<ScalarsEnums["String"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "extensions.geometry_columns"
 */
export interface extensions_geometry_columns_mutation_response {
  __typename: "extensions_geometry_columns_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<extensions_geometry_columns>;
}

/**
 * aggregate stddev on columns
 */
export interface extensions_geometry_columns_stddev_fields {
  __typename: "extensions_geometry_columns_stddev_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface extensions_geometry_columns_stddev_pop_fields {
  __typename: "extensions_geometry_columns_stddev_pop_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface extensions_geometry_columns_stddev_samp_fields {
  __typename: "extensions_geometry_columns_stddev_samp_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface extensions_geometry_columns_sum_fields {
  __typename: "extensions_geometry_columns_sum_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Int"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface extensions_geometry_columns_var_pop_fields {
  __typename: "extensions_geometry_columns_var_pop_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface extensions_geometry_columns_var_samp_fields {
  __typename: "extensions_geometry_columns_var_samp_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface extensions_geometry_columns_variance_fields {
  __typename: "extensions_geometry_columns_variance_fields" | undefined;
  coord_dimension?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface extensions_max_fields {
  __typename: "extensions_max_fields" | undefined;
  id?: Maybe<ScalarsEnums["String"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface extensions_min_fields {
  __typename: "extensions_min_fields" | undefined;
  id?: Maybe<ScalarsEnums["String"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "extensions"
 */
export interface extensions_mutation_response {
  __typename: "extensions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<extensions>;
}

/**
 * columns and relationships of "extensions.pg_stat_statements"
 */
export interface extensions_pg_stat_statements {
  __typename: "extensions_pg_stat_statements" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["float8"]>;
  blk_write_time?: Maybe<ScalarsEnums["float8"]>;
  calls?: Maybe<ScalarsEnums["bigint"]>;
  dbid?: Maybe<ScalarsEnums["oid"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  max_exec_time?: Maybe<ScalarsEnums["float8"]>;
  max_plan_time?: Maybe<ScalarsEnums["float8"]>;
  mean_exec_time?: Maybe<ScalarsEnums["float8"]>;
  mean_plan_time?: Maybe<ScalarsEnums["float8"]>;
  min_exec_time?: Maybe<ScalarsEnums["float8"]>;
  min_plan_time?: Maybe<ScalarsEnums["float8"]>;
  plans?: Maybe<ScalarsEnums["bigint"]>;
  query?: Maybe<ScalarsEnums["String"]>;
  queryid?: Maybe<ScalarsEnums["bigint"]>;
  rows?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["float8"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["float8"]>;
  temp_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  temp_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  total_exec_time?: Maybe<ScalarsEnums["float8"]>;
  total_plan_time?: Maybe<ScalarsEnums["float8"]>;
  userid?: Maybe<ScalarsEnums["oid"]>;
  wal_bytes?: Maybe<ScalarsEnums["numeric"]>;
  wal_fpi?: Maybe<ScalarsEnums["bigint"]>;
  wal_records?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregated selection of "extensions.pg_stat_statements"
 */
export interface extensions_pg_stat_statements_aggregate {
  __typename: "extensions_pg_stat_statements_aggregate" | undefined;
  aggregate?: Maybe<extensions_pg_stat_statements_aggregate_fields>;
  nodes: Array<extensions_pg_stat_statements>;
}

/**
 * aggregate fields of "extensions.pg_stat_statements"
 */
export interface extensions_pg_stat_statements_aggregate_fields {
  __typename: "extensions_pg_stat_statements_aggregate_fields" | undefined;
  avg?: Maybe<extensions_pg_stat_statements_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<extensions_pg_stat_statements_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<extensions_pg_stat_statements_max_fields>;
  min?: Maybe<extensions_pg_stat_statements_min_fields>;
  stddev?: Maybe<extensions_pg_stat_statements_stddev_fields>;
  stddev_pop?: Maybe<extensions_pg_stat_statements_stddev_pop_fields>;
  stddev_samp?: Maybe<extensions_pg_stat_statements_stddev_samp_fields>;
  sum?: Maybe<extensions_pg_stat_statements_sum_fields>;
  var_pop?: Maybe<extensions_pg_stat_statements_var_pop_fields>;
  var_samp?: Maybe<extensions_pg_stat_statements_var_samp_fields>;
  variance?: Maybe<extensions_pg_stat_statements_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface extensions_pg_stat_statements_avg_fields {
  __typename: "extensions_pg_stat_statements_avg_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface extensions_pg_stat_statements_max_fields {
  __typename: "extensions_pg_stat_statements_max_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["float8"]>;
  blk_write_time?: Maybe<ScalarsEnums["float8"]>;
  calls?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  max_exec_time?: Maybe<ScalarsEnums["float8"]>;
  max_plan_time?: Maybe<ScalarsEnums["float8"]>;
  mean_exec_time?: Maybe<ScalarsEnums["float8"]>;
  mean_plan_time?: Maybe<ScalarsEnums["float8"]>;
  min_exec_time?: Maybe<ScalarsEnums["float8"]>;
  min_plan_time?: Maybe<ScalarsEnums["float8"]>;
  plans?: Maybe<ScalarsEnums["bigint"]>;
  query?: Maybe<ScalarsEnums["String"]>;
  queryid?: Maybe<ScalarsEnums["bigint"]>;
  rows?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["float8"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["float8"]>;
  temp_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  temp_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  total_exec_time?: Maybe<ScalarsEnums["float8"]>;
  total_plan_time?: Maybe<ScalarsEnums["float8"]>;
  wal_bytes?: Maybe<ScalarsEnums["numeric"]>;
  wal_fpi?: Maybe<ScalarsEnums["bigint"]>;
  wal_records?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate min on columns
 */
export interface extensions_pg_stat_statements_min_fields {
  __typename: "extensions_pg_stat_statements_min_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["float8"]>;
  blk_write_time?: Maybe<ScalarsEnums["float8"]>;
  calls?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  max_exec_time?: Maybe<ScalarsEnums["float8"]>;
  max_plan_time?: Maybe<ScalarsEnums["float8"]>;
  mean_exec_time?: Maybe<ScalarsEnums["float8"]>;
  mean_plan_time?: Maybe<ScalarsEnums["float8"]>;
  min_exec_time?: Maybe<ScalarsEnums["float8"]>;
  min_plan_time?: Maybe<ScalarsEnums["float8"]>;
  plans?: Maybe<ScalarsEnums["bigint"]>;
  query?: Maybe<ScalarsEnums["String"]>;
  queryid?: Maybe<ScalarsEnums["bigint"]>;
  rows?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["float8"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["float8"]>;
  temp_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  temp_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  total_exec_time?: Maybe<ScalarsEnums["float8"]>;
  total_plan_time?: Maybe<ScalarsEnums["float8"]>;
  wal_bytes?: Maybe<ScalarsEnums["numeric"]>;
  wal_fpi?: Maybe<ScalarsEnums["bigint"]>;
  wal_records?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate stddev on columns
 */
export interface extensions_pg_stat_statements_stddev_fields {
  __typename: "extensions_pg_stat_statements_stddev_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface extensions_pg_stat_statements_stddev_pop_fields {
  __typename: "extensions_pg_stat_statements_stddev_pop_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface extensions_pg_stat_statements_stddev_samp_fields {
  __typename: "extensions_pg_stat_statements_stddev_samp_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface extensions_pg_stat_statements_sum_fields {
  __typename: "extensions_pg_stat_statements_sum_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["float8"]>;
  blk_write_time?: Maybe<ScalarsEnums["float8"]>;
  calls?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  local_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  max_exec_time?: Maybe<ScalarsEnums["float8"]>;
  max_plan_time?: Maybe<ScalarsEnums["float8"]>;
  mean_exec_time?: Maybe<ScalarsEnums["float8"]>;
  mean_plan_time?: Maybe<ScalarsEnums["float8"]>;
  min_exec_time?: Maybe<ScalarsEnums["float8"]>;
  min_plan_time?: Maybe<ScalarsEnums["float8"]>;
  plans?: Maybe<ScalarsEnums["bigint"]>;
  queryid?: Maybe<ScalarsEnums["bigint"]>;
  rows?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  shared_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["float8"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["float8"]>;
  temp_blks_read?: Maybe<ScalarsEnums["bigint"]>;
  temp_blks_written?: Maybe<ScalarsEnums["bigint"]>;
  total_exec_time?: Maybe<ScalarsEnums["float8"]>;
  total_plan_time?: Maybe<ScalarsEnums["float8"]>;
  wal_bytes?: Maybe<ScalarsEnums["numeric"]>;
  wal_fpi?: Maybe<ScalarsEnums["bigint"]>;
  wal_records?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface extensions_pg_stat_statements_var_pop_fields {
  __typename: "extensions_pg_stat_statements_var_pop_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface extensions_pg_stat_statements_var_samp_fields {
  __typename: "extensions_pg_stat_statements_var_samp_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface extensions_pg_stat_statements_variance_fields {
  __typename: "extensions_pg_stat_statements_variance_fields" | undefined;
  blk_read_time?: Maybe<ScalarsEnums["Float"]>;
  blk_write_time?: Maybe<ScalarsEnums["Float"]>;
  calls?: Maybe<ScalarsEnums["Float"]>;
  local_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  local_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  local_blks_read?: Maybe<ScalarsEnums["Float"]>;
  local_blks_written?: Maybe<ScalarsEnums["Float"]>;
  max_exec_time?: Maybe<ScalarsEnums["Float"]>;
  max_plan_time?: Maybe<ScalarsEnums["Float"]>;
  mean_exec_time?: Maybe<ScalarsEnums["Float"]>;
  mean_plan_time?: Maybe<ScalarsEnums["Float"]>;
  min_exec_time?: Maybe<ScalarsEnums["Float"]>;
  min_plan_time?: Maybe<ScalarsEnums["Float"]>;
  plans?: Maybe<ScalarsEnums["Float"]>;
  queryid?: Maybe<ScalarsEnums["Float"]>;
  rows?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_dirtied?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_hit?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_read?: Maybe<ScalarsEnums["Float"]>;
  shared_blks_written?: Maybe<ScalarsEnums["Float"]>;
  stddev_exec_time?: Maybe<ScalarsEnums["Float"]>;
  stddev_plan_time?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_read?: Maybe<ScalarsEnums["Float"]>;
  temp_blks_written?: Maybe<ScalarsEnums["Float"]>;
  total_exec_time?: Maybe<ScalarsEnums["Float"]>;
  total_plan_time?: Maybe<ScalarsEnums["Float"]>;
  wal_bytes?: Maybe<ScalarsEnums["Float"]>;
  wal_fpi?: Maybe<ScalarsEnums["Float"]>;
  wal_records?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "extensions.spatial_ref_sys"
 */
export interface extensions_spatial_ref_sys {
  __typename: "extensions_spatial_ref_sys" | undefined;
  auth_name?: Maybe<ScalarsEnums["String"]>;
  auth_srid?: Maybe<ScalarsEnums["Int"]>;
  proj4text?: Maybe<ScalarsEnums["String"]>;
  srid: ScalarsEnums["Int"];
  srtext?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregated selection of "extensions.spatial_ref_sys"
 */
export interface extensions_spatial_ref_sys_aggregate {
  __typename: "extensions_spatial_ref_sys_aggregate" | undefined;
  aggregate?: Maybe<extensions_spatial_ref_sys_aggregate_fields>;
  nodes: Array<extensions_spatial_ref_sys>;
}

/**
 * aggregate fields of "extensions.spatial_ref_sys"
 */
export interface extensions_spatial_ref_sys_aggregate_fields {
  __typename: "extensions_spatial_ref_sys_aggregate_fields" | undefined;
  avg?: Maybe<extensions_spatial_ref_sys_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<extensions_spatial_ref_sys_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<extensions_spatial_ref_sys_max_fields>;
  min?: Maybe<extensions_spatial_ref_sys_min_fields>;
  stddev?: Maybe<extensions_spatial_ref_sys_stddev_fields>;
  stddev_pop?: Maybe<extensions_spatial_ref_sys_stddev_pop_fields>;
  stddev_samp?: Maybe<extensions_spatial_ref_sys_stddev_samp_fields>;
  sum?: Maybe<extensions_spatial_ref_sys_sum_fields>;
  var_pop?: Maybe<extensions_spatial_ref_sys_var_pop_fields>;
  var_samp?: Maybe<extensions_spatial_ref_sys_var_samp_fields>;
  variance?: Maybe<extensions_spatial_ref_sys_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface extensions_spatial_ref_sys_avg_fields {
  __typename: "extensions_spatial_ref_sys_avg_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface extensions_spatial_ref_sys_max_fields {
  __typename: "extensions_spatial_ref_sys_max_fields" | undefined;
  auth_name?: Maybe<ScalarsEnums["String"]>;
  auth_srid?: Maybe<ScalarsEnums["Int"]>;
  proj4text?: Maybe<ScalarsEnums["String"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  srtext?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface extensions_spatial_ref_sys_min_fields {
  __typename: "extensions_spatial_ref_sys_min_fields" | undefined;
  auth_name?: Maybe<ScalarsEnums["String"]>;
  auth_srid?: Maybe<ScalarsEnums["Int"]>;
  proj4text?: Maybe<ScalarsEnums["String"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
  srtext?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "extensions.spatial_ref_sys"
 */
export interface extensions_spatial_ref_sys_mutation_response {
  __typename: "extensions_spatial_ref_sys_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<extensions_spatial_ref_sys>;
}

/**
 * aggregate stddev on columns
 */
export interface extensions_spatial_ref_sys_stddev_fields {
  __typename: "extensions_spatial_ref_sys_stddev_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface extensions_spatial_ref_sys_stddev_pop_fields {
  __typename: "extensions_spatial_ref_sys_stddev_pop_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface extensions_spatial_ref_sys_stddev_samp_fields {
  __typename: "extensions_spatial_ref_sys_stddev_samp_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface extensions_spatial_ref_sys_sum_fields {
  __typename: "extensions_spatial_ref_sys_sum_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Int"]>;
  srid?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface extensions_spatial_ref_sys_var_pop_fields {
  __typename: "extensions_spatial_ref_sys_var_pop_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface extensions_spatial_ref_sys_var_samp_fields {
  __typename: "extensions_spatial_ref_sys_var_samp_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface extensions_spatial_ref_sys_variance_fields {
  __typename: "extensions_spatial_ref_sys_variance_fields" | undefined;
  auth_srid?: Maybe<ScalarsEnums["Float"]>;
  srid?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev on columns
 */
export interface extensions_stddev_fields {
  __typename: "extensions_stddev_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface extensions_stddev_pop_fields {
  __typename: "extensions_stddev_pop_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface extensions_stddev_samp_fields {
  __typename: "extensions_stddev_samp_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface extensions_sum_fields {
  __typename: "extensions_sum_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface extensions_var_pop_fields {
  __typename: "extensions_var_pop_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface extensions_var_samp_fields {
  __typename: "extensions_var_samp_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface extensions_variance_fields {
  __typename: "extensions_variance_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "floor_plan_grid"
 */
export interface floor_plan_grid {
  __typename: "floor_plan_grid" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  floor_plan: floor_plans;
  floor_plan_uuid: ScalarsEnums["uuid"];
  height: ScalarsEnums["float8"];
  is_overlay: ScalarsEnums["Boolean"];
  path_blocking: ScalarsEnums["Boolean"];
  /**
   * An array relationship
   */
  spaces: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  /**
   * An aggregate relationship
   */
  spaces_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  width: ScalarsEnums["float8"];
  x_axis: ScalarsEnums["float8"];
  y_axis: ScalarsEnums["float8"];
}

/**
 * aggregated selection of "floor_plan_grid"
 */
export interface floor_plan_grid_aggregate {
  __typename: "floor_plan_grid_aggregate" | undefined;
  aggregate?: Maybe<floor_plan_grid_aggregate_fields>;
  nodes: Array<floor_plan_grid>;
}

/**
 * aggregate fields of "floor_plan_grid"
 */
export interface floor_plan_grid_aggregate_fields {
  __typename: "floor_plan_grid_aggregate_fields" | undefined;
  avg?: Maybe<floor_plan_grid_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<floor_plan_grid_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<floor_plan_grid_max_fields>;
  min?: Maybe<floor_plan_grid_min_fields>;
  stddev?: Maybe<floor_plan_grid_stddev_fields>;
  stddev_pop?: Maybe<floor_plan_grid_stddev_pop_fields>;
  stddev_samp?: Maybe<floor_plan_grid_stddev_samp_fields>;
  sum?: Maybe<floor_plan_grid_sum_fields>;
  var_pop?: Maybe<floor_plan_grid_var_pop_fields>;
  var_samp?: Maybe<floor_plan_grid_var_samp_fields>;
  variance?: Maybe<floor_plan_grid_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface floor_plan_grid_avg_fields {
  __typename: "floor_plan_grid_avg_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface floor_plan_grid_max_fields {
  __typename: "floor_plan_grid_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  floor_plan_uuid?: Maybe<ScalarsEnums["uuid"]>;
  height?: Maybe<ScalarsEnums["float8"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  width?: Maybe<ScalarsEnums["float8"]>;
  x_axis?: Maybe<ScalarsEnums["float8"]>;
  y_axis?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate min on columns
 */
export interface floor_plan_grid_min_fields {
  __typename: "floor_plan_grid_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  floor_plan_uuid?: Maybe<ScalarsEnums["uuid"]>;
  height?: Maybe<ScalarsEnums["float8"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  width?: Maybe<ScalarsEnums["float8"]>;
  x_axis?: Maybe<ScalarsEnums["float8"]>;
  y_axis?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * response of any mutation on the table "floor_plan_grid"
 */
export interface floor_plan_grid_mutation_response {
  __typename: "floor_plan_grid_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<floor_plan_grid>;
}

/**
 * aggregate stddev on columns
 */
export interface floor_plan_grid_stddev_fields {
  __typename: "floor_plan_grid_stddev_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface floor_plan_grid_stddev_pop_fields {
  __typename: "floor_plan_grid_stddev_pop_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface floor_plan_grid_stddev_samp_fields {
  __typename: "floor_plan_grid_stddev_samp_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface floor_plan_grid_sum_fields {
  __typename: "floor_plan_grid_sum_fields" | undefined;
  height?: Maybe<ScalarsEnums["float8"]>;
  width?: Maybe<ScalarsEnums["float8"]>;
  x_axis?: Maybe<ScalarsEnums["float8"]>;
  y_axis?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface floor_plan_grid_var_pop_fields {
  __typename: "floor_plan_grid_var_pop_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface floor_plan_grid_var_samp_fields {
  __typename: "floor_plan_grid_var_samp_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface floor_plan_grid_variance_fields {
  __typename: "floor_plan_grid_variance_fields" | undefined;
  height?: Maybe<ScalarsEnums["Float"]>;
  width?: Maybe<ScalarsEnums["Float"]>;
  x_axis?: Maybe<ScalarsEnums["Float"]>;
  y_axis?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "floor_plans"
 */
export interface floor_plans {
  __typename: "floor_plans" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  building: ScalarsEnums["String"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  floor: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  floor_plan_grids: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => Array<floor_plan_grid>;
  /**
   * An aggregate relationship
   */
  floor_plan_grids_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plan_grid_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plan_grid_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plan_grid_bool_exp>;
  }) => floor_plan_grid_aggregate;
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  spaces: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  /**
   * An aggregate relationship
   */
  spaces_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "floor_plans"
 */
export interface floor_plans_aggregate {
  __typename: "floor_plans_aggregate" | undefined;
  aggregate?: Maybe<floor_plans_aggregate_fields>;
  nodes: Array<floor_plans>;
}

/**
 * aggregate fields of "floor_plans"
 */
export interface floor_plans_aggregate_fields {
  __typename: "floor_plans_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<floor_plans_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<floor_plans_max_fields>;
  min?: Maybe<floor_plans_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface floor_plans_max_fields {
  __typename: "floor_plans_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  building?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  floor?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface floor_plans_min_fields {
  __typename: "floor_plans_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  building?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  floor?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "floor_plans"
 */
export interface floor_plans_mutation_response {
  __typename: "floor_plans_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<floor_plans>;
}

/**
 * columns and relationships of "guest_questionaires_answers"
 */
export interface guest_questionaires_answers {
  __typename: "guest_questionaires_answers" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  guest_questionaire_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  guests_has_questionaire: guests_has_questionaires;
  /**
   * An object relationship
   */
  question: questions;
  question_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  questionaire: questionaires;
  questionaire_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  value: ScalarsEnums["String"];
}

/**
 * aggregated selection of "guest_questionaires_answers"
 */
export interface guest_questionaires_answers_aggregate {
  __typename: "guest_questionaires_answers_aggregate" | undefined;
  aggregate?: Maybe<guest_questionaires_answers_aggregate_fields>;
  nodes: Array<guest_questionaires_answers>;
}

/**
 * aggregate fields of "guest_questionaires_answers"
 */
export interface guest_questionaires_answers_aggregate_fields {
  __typename: "guest_questionaires_answers_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<guest_questionaires_answers_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<guest_questionaires_answers_max_fields>;
  min?: Maybe<guest_questionaires_answers_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface guest_questionaires_answers_max_fields {
  __typename: "guest_questionaires_answers_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  question_uuid?: Maybe<ScalarsEnums["uuid"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * aggregate min on columns
 */
export interface guest_questionaires_answers_min_fields {
  __typename: "guest_questionaires_answers_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  question_uuid?: Maybe<ScalarsEnums["uuid"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * response of any mutation on the table "guest_questionaires_answers"
 */
export interface guest_questionaires_answers_mutation_response {
  __typename: "guest_questionaires_answers_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<guest_questionaires_answers>;
}

/**
 * columns and relationships of "guests"
 */
export interface guests {
  __typename: "guests" | undefined;
  /**
   * An array relationship
   */
  aruba_wifi_accesses: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => Array<aruba_wifi_access>;
  /**
   * An aggregate relationship
   */
  aruba_wifi_accesses_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => aruba_wifi_access_aggregate;
  badge_printed: ScalarsEnums["Boolean"];
  badge_printed_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  brand: brands;
  /**
   * An object relationship
   */
  brand_user: brand_users;
  brand_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  email: ScalarsEnums["String"];
  expected_arrival: ScalarsEnums["timestamptz"];
  host_name: ScalarsEnums["String"];
  host_uuid: ScalarsEnums["uuid"];
  name: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  photo_taken_at: ScalarsEnums["timestamptz"];
  photo_url?: Maybe<ScalarsEnums["String"]>;
  purpose_of_visit: ScalarsEnums["String"];
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  rsvp?: Maybe<ScalarsEnums["Boolean"]>;
  rsvp_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  /**
   * An array relationship
   */
  spaces_usages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  /**
   * An aggregate relationship
   */
  spaces_usages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user?: Maybe<users>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "guests"
 */
export interface guests_aggregate {
  __typename: "guests_aggregate" | undefined;
  aggregate?: Maybe<guests_aggregate_fields>;
  nodes: Array<guests>;
}

/**
 * aggregate fields of "guests"
 */
export interface guests_aggregate_fields {
  __typename: "guests_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<guests_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<guests_max_fields>;
  min?: Maybe<guests_min_fields>;
}

/**
 * columns and relationships of "guests_has_questionaires"
 */
export interface guests_has_questionaires {
  __typename: "guests_has_questionaires" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  filled_at?: Maybe<ScalarsEnums["timestamptz"]>;
  /**
   * fetch data from the table: "guest_questionaires_answers"
   */
  guest_questionaires_answers: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => Array<guest_questionaires_answers>;
  /**
   * An aggregate relationship
   */
  guest_questionaires_answers_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => guest_questionaires_answers_aggregate;
  guest_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  questionaire: questionaires;
  questionaire_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "guests_has_questionaires"
 */
export interface guests_has_questionaires_aggregate {
  __typename: "guests_has_questionaires_aggregate" | undefined;
  aggregate?: Maybe<guests_has_questionaires_aggregate_fields>;
  nodes: Array<guests_has_questionaires>;
}

/**
 * aggregate fields of "guests_has_questionaires"
 */
export interface guests_has_questionaires_aggregate_fields {
  __typename: "guests_has_questionaires_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<guests_has_questionaires_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<guests_has_questionaires_max_fields>;
  min?: Maybe<guests_has_questionaires_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface guests_has_questionaires_max_fields {
  __typename: "guests_has_questionaires_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  filled_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface guests_has_questionaires_min_fields {
  __typename: "guests_has_questionaires_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  filled_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "guests_has_questionaires"
 */
export interface guests_has_questionaires_mutation_response {
  __typename: "guests_has_questionaires_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<guests_has_questionaires>;
}

/**
 * aggregate max on columns
 */
export interface guests_max_fields {
  __typename: "guests_max_fields" | undefined;
  badge_printed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  expected_arrival?: Maybe<ScalarsEnums["timestamptz"]>;
  host_name?: Maybe<ScalarsEnums["String"]>;
  host_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  photo_taken_at?: Maybe<ScalarsEnums["timestamptz"]>;
  photo_url?: Maybe<ScalarsEnums["String"]>;
  purpose_of_visit?: Maybe<ScalarsEnums["String"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  rsvp_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface guests_min_fields {
  __typename: "guests_min_fields" | undefined;
  badge_printed_at?: Maybe<ScalarsEnums["timestamptz"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  expected_arrival?: Maybe<ScalarsEnums["timestamptz"]>;
  host_name?: Maybe<ScalarsEnums["String"]>;
  host_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  photo_taken_at?: Maybe<ScalarsEnums["timestamptz"]>;
  photo_url?: Maybe<ScalarsEnums["String"]>;
  purpose_of_visit?: Maybe<ScalarsEnums["String"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  rsvp_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  signout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "guests"
 */
export interface guests_mutation_response {
  __typename: "guests_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<guests>;
}

/**
 * columns and relationships of "inboxes"
 */
export interface inboxes {
  __typename: "inboxes" | undefined;
  /**
   * An object relationship
   */
  conversation: conversations;
  conversation_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  pubsub_token: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  request?: Maybe<requests>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "inboxes"
 */
export interface inboxes_aggregate {
  __typename: "inboxes_aggregate" | undefined;
  aggregate?: Maybe<inboxes_aggregate_fields>;
  nodes: Array<inboxes>;
}

/**
 * aggregate fields of "inboxes"
 */
export interface inboxes_aggregate_fields {
  __typename: "inboxes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<inboxes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<inboxes_max_fields>;
  min?: Maybe<inboxes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface inboxes_max_fields {
  __typename: "inboxes_max_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface inboxes_min_fields {
  __typename: "inboxes_min_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "inboxes"
 */
export interface inboxes_mutation_response {
  __typename: "inboxes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<inboxes>;
}

/**
 * columns and relationships of "invoice"
 */
export interface invoice {
  __typename: "invoice" | undefined;
  base_3rd_party_platform: ScalarsEnums["String"];
  base_3rd_party_platform_fee: ScalarsEnums["float8"];
  base_brand_gross_revenue: ScalarsEnums["float8"];
  base_cashback_by_brand: ScalarsEnums["float8"];
  base_cashback_by_stayr: ScalarsEnums["float8"];
  base_currency_code: ScalarsEnums["bpchar"];
  base_discount_by_brand: ScalarsEnums["float8"];
  base_discount_by_stayr: ScalarsEnums["float8"];
  base_payment_by_card: ScalarsEnums["float8"];
  base_payment_by_cash: ScalarsEnums["float8"];
  base_payment_by_credits: ScalarsEnums["float8"];
  base_pf_cc_fee: ScalarsEnums["float8"];
  base_pf_platform_fixed_fee: ScalarsEnums["float8"];
  base_pf_platform_type: ScalarsEnums["String"];
  base_pf_platform_variable_fee: ScalarsEnums["float8"];
  base_pf_platform_variable_rate: ScalarsEnums["float8"];
  base_pf_transaction_fee: ScalarsEnums["float8"];
  base_total_brand_collected: ScalarsEnums["float8"];
  base_total_cashback: ScalarsEnums["float8"];
  base_total_discount: ScalarsEnums["float8"];
  base_total_due_to_brand: ScalarsEnums["float8"];
  base_total_due_to_stayr: ScalarsEnums["float8"];
  base_total_payment: ScalarsEnums["float8"];
  base_total_price: ScalarsEnums["float8"];
  base_total_stayr_collected: ScalarsEnums["float8"];
  /**
   * An object relationship
   */
  brand: brands;
  brand_conversion_rate: ScalarsEnums["float8"];
  brand_currency_code: ScalarsEnums["bpchar"];
  brand_uuid: ScalarsEnums["uuid"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  email_invoice_data: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  /**
   * An array relationship
   */
  requests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  /**
   * An aggregate relationship
   */
  requests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  /**
   * An array relationship
   */
  stripe_transfers: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<stripe_transfers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => Array<stripe_transfers>;
  /**
   * An aggregate relationship
   */
  stripe_transfers_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<stripe_transfers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<stripe_transfers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<stripe_transfers_bool_exp>;
  }) => stripe_transfers_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  user_conversion_rate: ScalarsEnums["float8"];
  user_currency_code: ScalarsEnums["bpchar"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "invoice"
 */
export interface invoice_aggregate {
  __typename: "invoice_aggregate" | undefined;
  aggregate?: Maybe<invoice_aggregate_fields>;
  nodes: Array<invoice>;
}

/**
 * aggregate fields of "invoice"
 */
export interface invoice_aggregate_fields {
  __typename: "invoice_aggregate_fields" | undefined;
  avg?: Maybe<invoice_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<invoice_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<invoice_max_fields>;
  min?: Maybe<invoice_min_fields>;
  stddev?: Maybe<invoice_stddev_fields>;
  stddev_pop?: Maybe<invoice_stddev_pop_fields>;
  stddev_samp?: Maybe<invoice_stddev_samp_fields>;
  sum?: Maybe<invoice_sum_fields>;
  var_pop?: Maybe<invoice_var_pop_fields>;
  var_samp?: Maybe<invoice_var_samp_fields>;
  variance?: Maybe<invoice_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface invoice_avg_fields {
  __typename: "invoice_avg_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface invoice_max_fields {
  __typename: "invoice_max_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_type?: Maybe<ScalarsEnums["String"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["float8"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface invoice_min_fields {
  __typename: "invoice_min_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_type?: Maybe<ScalarsEnums["String"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["float8"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "invoice"
 */
export interface invoice_mutation_response {
  __typename: "invoice_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<invoice>;
}

/**
 * aggregate stddev on columns
 */
export interface invoice_stddev_fields {
  __typename: "invoice_stddev_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface invoice_stddev_pop_fields {
  __typename: "invoice_stddev_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface invoice_stddev_samp_fields {
  __typename: "invoice_stddev_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface invoice_sum_fields {
  __typename: "invoice_sum_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["float8"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["float8"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface invoice_var_pop_fields {
  __typename: "invoice_var_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface invoice_var_samp_fields {
  __typename: "invoice_var_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface invoice_variance_fields {
  __typename: "invoice_variance_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_fixed_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_platform_variable_rate?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_brand_collected?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_brand?: Maybe<ScalarsEnums["Float"]>;
  base_total_due_to_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_total_stayr_collected?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "key_performance_snapshots"
 */
export interface key_performance_snapshots {
  __typename: "key_performance_snapshots" | undefined;
  content: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  date_report: ScalarsEnums["date"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "key_performance_snapshots"
 */
export interface key_performance_snapshots_aggregate {
  __typename: "key_performance_snapshots_aggregate" | undefined;
  aggregate?: Maybe<key_performance_snapshots_aggregate_fields>;
  nodes: Array<key_performance_snapshots>;
}

/**
 * aggregate fields of "key_performance_snapshots"
 */
export interface key_performance_snapshots_aggregate_fields {
  __typename: "key_performance_snapshots_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<key_performance_snapshots_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<key_performance_snapshots_max_fields>;
  min?: Maybe<key_performance_snapshots_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface key_performance_snapshots_max_fields {
  __typename: "key_performance_snapshots_max_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_report?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface key_performance_snapshots_min_fields {
  __typename: "key_performance_snapshots_min_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_report?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "key_performance_snapshots"
 */
export interface key_performance_snapshots_mutation_response {
  __typename: "key_performance_snapshots_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<key_performance_snapshots>;
}

/**
 * columns and relationships of "listing_categories"
 */
export interface listing_categories {
  __typename: "listing_categories" | undefined;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  index: ScalarsEnums["Int"];
  slug: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "listing_categories"
 */
export interface listing_categories_aggregate {
  __typename: "listing_categories_aggregate" | undefined;
  aggregate?: Maybe<listing_categories_aggregate_fields>;
  nodes: Array<listing_categories>;
}

/**
 * aggregate fields of "listing_categories"
 */
export interface listing_categories_aggregate_fields {
  __typename: "listing_categories_aggregate_fields" | undefined;
  avg?: Maybe<listing_categories_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<listing_categories_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_categories_max_fields>;
  min?: Maybe<listing_categories_min_fields>;
  stddev?: Maybe<listing_categories_stddev_fields>;
  stddev_pop?: Maybe<listing_categories_stddev_pop_fields>;
  stddev_samp?: Maybe<listing_categories_stddev_samp_fields>;
  sum?: Maybe<listing_categories_sum_fields>;
  var_pop?: Maybe<listing_categories_var_pop_fields>;
  var_samp?: Maybe<listing_categories_var_samp_fields>;
  variance?: Maybe<listing_categories_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface listing_categories_avg_fields {
  __typename: "listing_categories_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface listing_categories_max_fields {
  __typename: "listing_categories_max_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_categories_min_fields {
  __typename: "listing_categories_min_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_categories"
 */
export interface listing_categories_mutation_response {
  __typename: "listing_categories_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_categories>;
}

/**
 * aggregate stddev on columns
 */
export interface listing_categories_stddev_fields {
  __typename: "listing_categories_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface listing_categories_stddev_pop_fields {
  __typename: "listing_categories_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface listing_categories_stddev_samp_fields {
  __typename: "listing_categories_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface listing_categories_sum_fields {
  __typename: "listing_categories_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface listing_categories_var_pop_fields {
  __typename: "listing_categories_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface listing_categories_var_samp_fields {
  __typename: "listing_categories_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface listing_categories_variance_fields {
  __typename: "listing_categories_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "listing_collections"
 */
export interface listing_collections {
  __typename: "listing_collections" | undefined;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  index: ScalarsEnums["Int"];
  /**
   * An array relationship
   */
  listing_in_collections: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_in_collections_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => Array<listing_in_collections>;
  /**
   * An aggregate relationship
   */
  listing_in_collections_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_in_collections_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => listing_in_collections_aggregate;
  slug: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "listing_collections"
 */
export interface listing_collections_aggregate {
  __typename: "listing_collections_aggregate" | undefined;
  aggregate?: Maybe<listing_collections_aggregate_fields>;
  nodes: Array<listing_collections>;
}

/**
 * aggregate fields of "listing_collections"
 */
export interface listing_collections_aggregate_fields {
  __typename: "listing_collections_aggregate_fields" | undefined;
  avg?: Maybe<listing_collections_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<listing_collections_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_collections_max_fields>;
  min?: Maybe<listing_collections_min_fields>;
  stddev?: Maybe<listing_collections_stddev_fields>;
  stddev_pop?: Maybe<listing_collections_stddev_pop_fields>;
  stddev_samp?: Maybe<listing_collections_stddev_samp_fields>;
  sum?: Maybe<listing_collections_sum_fields>;
  var_pop?: Maybe<listing_collections_var_pop_fields>;
  var_samp?: Maybe<listing_collections_var_samp_fields>;
  variance?: Maybe<listing_collections_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface listing_collections_avg_fields {
  __typename: "listing_collections_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface listing_collections_max_fields {
  __typename: "listing_collections_max_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_collections_min_fields {
  __typename: "listing_collections_min_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_collections"
 */
export interface listing_collections_mutation_response {
  __typename: "listing_collections_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_collections>;
}

/**
 * aggregate stddev on columns
 */
export interface listing_collections_stddev_fields {
  __typename: "listing_collections_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface listing_collections_stddev_pop_fields {
  __typename: "listing_collections_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface listing_collections_stddev_samp_fields {
  __typename: "listing_collections_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface listing_collections_sum_fields {
  __typename: "listing_collections_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface listing_collections_var_pop_fields {
  __typename: "listing_collections_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface listing_collections_var_samp_fields {
  __typename: "listing_collections_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface listing_collections_variance_fields {
  __typename: "listing_collections_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "listing_discussions"
 */
export interface listing_discussions {
  __typename: "listing_discussions" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  locked?: Maybe<ScalarsEnums["Boolean"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  private?: Maybe<ScalarsEnums["Boolean"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "listing_discussions"
 */
export interface listing_discussions_aggregate {
  __typename: "listing_discussions_aggregate" | undefined;
  aggregate?: Maybe<listing_discussions_aggregate_fields>;
  nodes: Array<listing_discussions>;
}

/**
 * aggregate fields of "listing_discussions"
 */
export interface listing_discussions_aggregate_fields {
  __typename: "listing_discussions_aggregate_fields" | undefined;
  avg?: Maybe<listing_discussions_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<listing_discussions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_discussions_max_fields>;
  min?: Maybe<listing_discussions_min_fields>;
  stddev?: Maybe<listing_discussions_stddev_fields>;
  stddev_pop?: Maybe<listing_discussions_stddev_pop_fields>;
  stddev_samp?: Maybe<listing_discussions_stddev_samp_fields>;
  sum?: Maybe<listing_discussions_sum_fields>;
  var_pop?: Maybe<listing_discussions_var_pop_fields>;
  var_samp?: Maybe<listing_discussions_var_samp_fields>;
  variance?: Maybe<listing_discussions_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface listing_discussions_avg_fields {
  __typename: "listing_discussions_avg_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface listing_discussions_max_fields {
  __typename: "listing_discussions_max_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_discussions_min_fields {
  __typename: "listing_discussions_min_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  first_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  last_post_timestamp?: Maybe<ScalarsEnums["timestamptz"]>;
  last_post_uuid?: Maybe<ScalarsEnums["uuid"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_discussions"
 */
export interface listing_discussions_mutation_response {
  __typename: "listing_discussions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_discussions>;
}

/**
 * aggregate stddev on columns
 */
export interface listing_discussions_stddev_fields {
  __typename: "listing_discussions_stddev_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface listing_discussions_stddev_pop_fields {
  __typename: "listing_discussions_stddev_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface listing_discussions_stddev_samp_fields {
  __typename: "listing_discussions_stddev_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface listing_discussions_sum_fields {
  __typename: "listing_discussions_sum_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Int"]>;
  participant_count?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface listing_discussions_var_pop_fields {
  __typename: "listing_discussions_var_pop_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface listing_discussions_var_samp_fields {
  __typename: "listing_discussions_var_samp_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface listing_discussions_variance_fields {
  __typename: "listing_discussions_variance_fields" | undefined;
  comment_count?: Maybe<ScalarsEnums["Float"]>;
  participant_count?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "listing_in_collections"
 */
export interface listing_in_collections {
  __typename: "listing_in_collections" | undefined;
  collection_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  listing: listings;
  /**
   * An object relationship
   */
  listing_collection: listing_collections;
  listing_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "listing_in_collections"
 */
export interface listing_in_collections_aggregate {
  __typename: "listing_in_collections_aggregate" | undefined;
  aggregate?: Maybe<listing_in_collections_aggregate_fields>;
  nodes: Array<listing_in_collections>;
}

/**
 * aggregate fields of "listing_in_collections"
 */
export interface listing_in_collections_aggregate_fields {
  __typename: "listing_in_collections_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<listing_in_collections_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_in_collections_max_fields>;
  min?: Maybe<listing_in_collections_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface listing_in_collections_max_fields {
  __typename: "listing_in_collections_max_fields" | undefined;
  collection_uuid?: Maybe<ScalarsEnums["uuid"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_in_collections_min_fields {
  __typename: "listing_in_collections_min_fields" | undefined;
  collection_uuid?: Maybe<ScalarsEnums["uuid"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_in_collections"
 */
export interface listing_in_collections_mutation_response {
  __typename: "listing_in_collections_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_in_collections>;
}

/**
 * columns and relationships of "listing_media"
 */
export interface listing_media {
  __typename: "listing_media" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "listing_media"
 */
export interface listing_media_aggregate {
  __typename: "listing_media_aggregate" | undefined;
  aggregate?: Maybe<listing_media_aggregate_fields>;
  nodes: Array<listing_media>;
}

/**
 * aggregate fields of "listing_media"
 */
export interface listing_media_aggregate_fields {
  __typename: "listing_media_aggregate_fields" | undefined;
  avg?: Maybe<listing_media_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<listing_media_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_media_max_fields>;
  min?: Maybe<listing_media_min_fields>;
  stddev?: Maybe<listing_media_stddev_fields>;
  stddev_pop?: Maybe<listing_media_stddev_pop_fields>;
  stddev_samp?: Maybe<listing_media_stddev_samp_fields>;
  sum?: Maybe<listing_media_sum_fields>;
  var_pop?: Maybe<listing_media_var_pop_fields>;
  var_samp?: Maybe<listing_media_var_samp_fields>;
  variance?: Maybe<listing_media_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface listing_media_avg_fields {
  __typename: "listing_media_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface listing_media_max_fields {
  __typename: "listing_media_max_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_media_min_fields {
  __typename: "listing_media_min_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_media"
 */
export interface listing_media_mutation_response {
  __typename: "listing_media_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_media>;
}

/**
 * aggregate stddev on columns
 */
export interface listing_media_stddev_fields {
  __typename: "listing_media_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface listing_media_stddev_pop_fields {
  __typename: "listing_media_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface listing_media_stddev_samp_fields {
  __typename: "listing_media_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface listing_media_sum_fields {
  __typename: "listing_media_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface listing_media_var_pop_fields {
  __typename: "listing_media_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface listing_media_var_samp_fields {
  __typename: "listing_media_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface listing_media_variance_fields {
  __typename: "listing_media_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "listing_tags"
 */
export interface listing_tags {
  __typename: "listing_tags" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "listing_tags"
 */
export interface listing_tags_aggregate {
  __typename: "listing_tags_aggregate" | undefined;
  aggregate?: Maybe<listing_tags_aggregate_fields>;
  nodes: Array<listing_tags>;
}

/**
 * aggregate fields of "listing_tags"
 */
export interface listing_tags_aggregate_fields {
  __typename: "listing_tags_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<listing_tags_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_tags_max_fields>;
  min?: Maybe<listing_tags_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface listing_tags_max_fields {
  __typename: "listing_tags_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_tags_min_fields {
  __typename: "listing_tags_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_tags"
 */
export interface listing_tags_mutation_response {
  __typename: "listing_tags_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_tags>;
}

/**
 * columns and relationships of "listing_wishes"
 */
export interface listing_wishes {
  __typename: "listing_wishes" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "listing_wishes"
 */
export interface listing_wishes_aggregate {
  __typename: "listing_wishes_aggregate" | undefined;
  aggregate?: Maybe<listing_wishes_aggregate_fields>;
  nodes: Array<listing_wishes>;
}

/**
 * aggregate fields of "listing_wishes"
 */
export interface listing_wishes_aggregate_fields {
  __typename: "listing_wishes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<listing_wishes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listing_wishes_max_fields>;
  min?: Maybe<listing_wishes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface listing_wishes_max_fields {
  __typename: "listing_wishes_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listing_wishes_min_fields {
  __typename: "listing_wishes_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listing_wishes"
 */
export interface listing_wishes_mutation_response {
  __typename: "listing_wishes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listing_wishes>;
}

/**
 * columns and relationships of "listings"
 */
export interface listings {
  __typename: "listings" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  category_slug: ScalarsEnums["String"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  discount_codes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => Array<discount_codes>;
  /**
   * An aggregate relationship
   */
  discount_codes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discount_codes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discount_codes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discount_codes_bool_exp>;
  }) => discount_codes_aggregate;
  /**
   * An array relationship
   */
  discussions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_discussions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_discussions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => Array<listing_discussions>;
  /**
   * An aggregate relationship
   */
  discussions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_discussions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_discussions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_discussions_bool_exp>;
  }) => listing_discussions_aggregate;
  /**
   * An array relationship
   */
  listing_in_collections: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_in_collections_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => Array<listing_in_collections>;
  /**
   * An aggregate relationship
   */
  listing_in_collections_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_in_collections_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_in_collections_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_in_collections_bool_exp>;
  }) => listing_in_collections_aggregate;
  /**
   * An array relationship
   */
  media: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_media_bool_exp>;
  }) => Array<listing_media>;
  /**
   * An aggregate relationship
   */
  media_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_media_bool_exp>;
  }) => listing_media_aggregate;
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  passes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  /**
   * An aggregate relationship
   */
  passes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  price: ScalarsEnums["float8"];
  published: ScalarsEnums["Boolean"];
  published_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  requests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  /**
   * An aggregate relationship
   */
  requests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  /**
   * An array relationship
   */
  reservations: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => Array<reservations>;
  /**
   * An aggregate relationship
   */
  reservations_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => reservations_aggregate;
  /**
   * An array relationship
   */
  reviews: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  /**
   * An aggregate relationship
   */
  reviews_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  slug: ScalarsEnums["String"];
  summary: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  tags: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_tags_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_tags_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_tags_bool_exp>;
  }) => Array<listing_tags>;
  /**
   * An aggregate relationship
   */
  tags_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_tags_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_tags_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_tags_bool_exp>;
  }) => listing_tags_aggregate;
  title: ScalarsEnums["String"];
  total_bathrooms: ScalarsEnums["Int"];
  total_bedrooms: ScalarsEnums["Int"];
  total_occupancy: ScalarsEnums["Int"];
  /**
   * room | facility | item | service
   */
  type: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  wishes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_wishes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_wishes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => Array<listing_wishes>;
  /**
   * An aggregate relationship
   */
  wishes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listing_wishes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listing_wishes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listing_wishes_bool_exp>;
  }) => listing_wishes_aggregate;
}

/**
 * aggregated selection of "listings"
 */
export interface listings_aggregate {
  __typename: "listings_aggregate" | undefined;
  aggregate?: Maybe<listings_aggregate_fields>;
  nodes: Array<listings>;
}

/**
 * aggregate fields of "listings"
 */
export interface listings_aggregate_fields {
  __typename: "listings_aggregate_fields" | undefined;
  avg?: Maybe<listings_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<listings_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<listings_max_fields>;
  min?: Maybe<listings_min_fields>;
  stddev?: Maybe<listings_stddev_fields>;
  stddev_pop?: Maybe<listings_stddev_pop_fields>;
  stddev_samp?: Maybe<listings_stddev_samp_fields>;
  sum?: Maybe<listings_sum_fields>;
  var_pop?: Maybe<listings_var_pop_fields>;
  var_samp?: Maybe<listings_var_samp_fields>;
  variance?: Maybe<listings_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface listings_avg_fields {
  __typename: "listings_avg_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface listings_max_fields {
  __typename: "listings_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  category_slug?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  published_at?: Maybe<ScalarsEnums["timestamptz"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  summary?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Int"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Int"]>;
  total_occupancy?: Maybe<ScalarsEnums["Int"]>;
  /**
   * room | facility | item | service
   */
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface listings_min_fields {
  __typename: "listings_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  category_slug?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  published_at?: Maybe<ScalarsEnums["timestamptz"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  summary?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Int"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Int"]>;
  total_occupancy?: Maybe<ScalarsEnums["Int"]>;
  /**
   * room | facility | item | service
   */
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "listings"
 */
export interface listings_mutation_response {
  __typename: "listings_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<listings>;
}

/**
 * aggregate stddev on columns
 */
export interface listings_stddev_fields {
  __typename: "listings_stddev_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface listings_stddev_pop_fields {
  __typename: "listings_stddev_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface listings_stddev_samp_fields {
  __typename: "listings_stddev_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface listings_sum_fields {
  __typename: "listings_sum_fields" | undefined;
  price?: Maybe<ScalarsEnums["float8"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Int"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Int"]>;
  total_occupancy?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface listings_var_pop_fields {
  __typename: "listings_var_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface listings_var_samp_fields {
  __typename: "listings_var_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface listings_variance_fields {
  __typename: "listings_variance_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
  total_bathrooms?: Maybe<ScalarsEnums["Float"]>;
  total_bedrooms?: Maybe<ScalarsEnums["Float"]>;
  total_occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "logs"
 */
export interface logs {
  __typename: "logs" | undefined;
  created_at: ScalarsEnums["uuid"];
  description: ScalarsEnums["String"];
  event_type: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "logs"
 */
export interface logs_aggregate {
  __typename: "logs_aggregate" | undefined;
  aggregate?: Maybe<logs_aggregate_fields>;
  nodes: Array<logs>;
}

/**
 * aggregate fields of "logs"
 */
export interface logs_aggregate_fields {
  __typename: "logs_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<logs_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<logs_max_fields>;
  min?: Maybe<logs_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface logs_max_fields {
  __typename: "logs_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["uuid"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface logs_min_fields {
  __typename: "logs_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["uuid"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "logs"
 */
export interface logs_mutation_response {
  __typename: "logs_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<logs>;
}

/**
 * columns and relationships of "media"
 */
export interface media {
  __typename: "media" | undefined;
  collection_name: ScalarsEnums["String"];
  created_at: ScalarsEnums["timestamptz"];
  file_name: ScalarsEnums["String"];
  index: ScalarsEnums["Int"];
  mime_type: ScalarsEnums["String"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  name: ScalarsEnums["String"];
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  s3_bucket_name: ScalarsEnums["String"];
  s3_key: ScalarsEnums["String"];
  size: ScalarsEnums["bigint"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "media"
 */
export interface media_aggregate {
  __typename: "media_aggregate" | undefined;
  aggregate?: Maybe<media_aggregate_fields>;
  nodes: Array<media>;
}

/**
 * aggregate fields of "media"
 */
export interface media_aggregate_fields {
  __typename: "media_aggregate_fields" | undefined;
  avg?: Maybe<media_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<media_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<media_max_fields>;
  min?: Maybe<media_min_fields>;
  stddev?: Maybe<media_stddev_fields>;
  stddev_pop?: Maybe<media_stddev_pop_fields>;
  stddev_samp?: Maybe<media_stddev_samp_fields>;
  sum?: Maybe<media_sum_fields>;
  var_pop?: Maybe<media_var_pop_fields>;
  var_samp?: Maybe<media_var_samp_fields>;
  variance?: Maybe<media_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface media_avg_fields {
  __typename: "media_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface media_max_fields {
  __typename: "media_max_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface media_min_fields {
  __typename: "media_min_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "media"
 */
export interface media_mutation_response {
  __typename: "media_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<media>;
}

/**
 * aggregate stddev on columns
 */
export interface media_stddev_fields {
  __typename: "media_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface media_stddev_pop_fields {
  __typename: "media_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface media_stddev_samp_fields {
  __typename: "media_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface media_sum_fields {
  __typename: "media_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface media_var_pop_fields {
  __typename: "media_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface media_var_samp_fields {
  __typename: "media_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface media_variance_fields {
  __typename: "media_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "messages"
 */
export interface messages {
  __typename: "messages" | undefined;
  author_uuid: ScalarsEnums["uuid"];
  content: ScalarsEnums["String"];
  content_type: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  conversation: conversations;
  conversation_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  private: ScalarsEnums["Boolean"];
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
  read?: Maybe<ScalarsEnums["Boolean"]>;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "messages"
 */
export interface messages_aggregate {
  __typename: "messages_aggregate" | undefined;
  aggregate?: Maybe<messages_aggregate_fields>;
  nodes: Array<messages>;
}

/**
 * aggregate fields of "messages"
 */
export interface messages_aggregate_fields {
  __typename: "messages_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<messages_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<messages_max_fields>;
  min?: Maybe<messages_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface messages_max_fields {
  __typename: "messages_max_fields" | undefined;
  author_uuid?: Maybe<ScalarsEnums["uuid"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  content_type?: Maybe<ScalarsEnums["String"]>;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface messages_min_fields {
  __typename: "messages_min_fields" | undefined;
  author_uuid?: Maybe<ScalarsEnums["uuid"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  content_type?: Maybe<ScalarsEnums["String"]>;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "messages"
 */
export interface messages_mutation_response {
  __typename: "messages_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<messages>;
}

/**
 * columns and relationships of "model_has_comments"
 */
export interface model_has_comments {
  __typename: "model_has_comments" | undefined;
  /**
   * An array relationship
   */
  comments: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<comment_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<comment_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<comment_comments_bool_exp>;
  }) => Array<comment_comments>;
  /**
   * An aggregate relationship
   */
  comments_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<comment_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<comment_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<comment_comments_bool_exp>;
  }) => comment_comments_aggregate;
  content: ScalarsEnums["String"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  likes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<comment_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<comment_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<comment_likes_bool_exp>;
  }) => Array<comment_likes>;
  /**
   * An aggregate relationship
   */
  likes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<comment_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<comment_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<comment_likes_bool_exp>;
  }) => comment_likes_aggregate;
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "model_has_comments"
 */
export interface model_has_comments_aggregate {
  __typename: "model_has_comments_aggregate" | undefined;
  aggregate?: Maybe<model_has_comments_aggregate_fields>;
  nodes: Array<model_has_comments>;
}

/**
 * aggregate fields of "model_has_comments"
 */
export interface model_has_comments_aggregate_fields {
  __typename: "model_has_comments_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<model_has_comments_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<model_has_comments_max_fields>;
  min?: Maybe<model_has_comments_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface model_has_comments_max_fields {
  __typename: "model_has_comments_max_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface model_has_comments_min_fields {
  __typename: "model_has_comments_min_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "model_has_comments"
 */
export interface model_has_comments_mutation_response {
  __typename: "model_has_comments_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<model_has_comments>;
}

/**
 * columns and relationships of "model_has_likes"
 */
export interface model_has_likes {
  __typename: "model_has_likes" | undefined;
  liked_at: ScalarsEnums["timestamptz"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "model_has_likes"
 */
export interface model_has_likes_aggregate {
  __typename: "model_has_likes_aggregate" | undefined;
  aggregate?: Maybe<model_has_likes_aggregate_fields>;
  nodes: Array<model_has_likes>;
}

/**
 * aggregate fields of "model_has_likes"
 */
export interface model_has_likes_aggregate_fields {
  __typename: "model_has_likes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<model_has_likes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<model_has_likes_max_fields>;
  min?: Maybe<model_has_likes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface model_has_likes_max_fields {
  __typename: "model_has_likes_max_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface model_has_likes_min_fields {
  __typename: "model_has_likes_min_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "model_has_likes"
 */
export interface model_has_likes_mutation_response {
  __typename: "model_has_likes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<model_has_likes>;
}

/**
 * columns and relationships of "model_has_permissions"
 */
export interface model_has_permissions {
  __typename: "model_has_permissions" | undefined;
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  permission: permissions;
  permission_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "model_has_permissions"
 */
export interface model_has_permissions_aggregate {
  __typename: "model_has_permissions_aggregate" | undefined;
  aggregate?: Maybe<model_has_permissions_aggregate_fields>;
  nodes: Array<model_has_permissions>;
}

/**
 * aggregate fields of "model_has_permissions"
 */
export interface model_has_permissions_aggregate_fields {
  __typename: "model_has_permissions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<model_has_permissions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<model_has_permissions_max_fields>;
  min?: Maybe<model_has_permissions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface model_has_permissions_max_fields {
  __typename: "model_has_permissions_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  permission_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface model_has_permissions_min_fields {
  __typename: "model_has_permissions_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  permission_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "model_has_permissions"
 */
export interface model_has_permissions_mutation_response {
  __typename: "model_has_permissions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<model_has_permissions>;
}

/**
 * columns and relationships of "model_has_roles"
 */
export interface model_has_roles {
  __typename: "model_has_roles" | undefined;
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  role: roles;
  role_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "model_has_roles"
 */
export interface model_has_roles_aggregate {
  __typename: "model_has_roles_aggregate" | undefined;
  aggregate?: Maybe<model_has_roles_aggregate_fields>;
  nodes: Array<model_has_roles>;
}

/**
 * aggregate fields of "model_has_roles"
 */
export interface model_has_roles_aggregate_fields {
  __typename: "model_has_roles_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<model_has_roles_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<model_has_roles_max_fields>;
  min?: Maybe<model_has_roles_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface model_has_roles_max_fields {
  __typename: "model_has_roles_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface model_has_roles_min_fields {
  __typename: "model_has_roles_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "model_has_roles"
 */
export interface model_has_roles_mutation_response {
  __typename: "model_has_roles_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<model_has_roles>;
}

/**
 * columns and relationships of "model_has_tags"
 */
export interface model_has_tags {
  __typename: "model_has_tags" | undefined;
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  tag_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "model_has_tags"
 */
export interface model_has_tags_aggregate {
  __typename: "model_has_tags_aggregate" | undefined;
  aggregate?: Maybe<model_has_tags_aggregate_fields>;
  nodes: Array<model_has_tags>;
}

/**
 * aggregate fields of "model_has_tags"
 */
export interface model_has_tags_aggregate_fields {
  __typename: "model_has_tags_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<model_has_tags_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<model_has_tags_max_fields>;
  min?: Maybe<model_has_tags_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface model_has_tags_max_fields {
  __typename: "model_has_tags_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface model_has_tags_min_fields {
  __typename: "model_has_tags_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  tag_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "model_has_tags"
 */
export interface model_has_tags_mutation_response {
  __typename: "model_has_tags_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<model_has_tags>;
}

/**
 * columns and relationships of "notifications"
 */
export interface notifications {
  __typename: "notifications" | undefined;
  action_text?: Maybe<ScalarsEnums["String"]>;
  action_url?: Maybe<ScalarsEnums["String"]>;
  content: ScalarsEnums["String"];
  created_at: ScalarsEnums["timestamptz"];
  icon?: Maybe<ScalarsEnums["String"]>;
  read: ScalarsEnums["Boolean"];
  read_at?: Maybe<ScalarsEnums["timestamptz"]>;
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "notifications"
 */
export interface notifications_aggregate {
  __typename: "notifications_aggregate" | undefined;
  aggregate?: Maybe<notifications_aggregate_fields>;
  nodes: Array<notifications>;
}

/**
 * aggregate fields of "notifications"
 */
export interface notifications_aggregate_fields {
  __typename: "notifications_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<notifications_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<notifications_max_fields>;
  min?: Maybe<notifications_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface notifications_max_fields {
  __typename: "notifications_max_fields" | undefined;
  action_text?: Maybe<ScalarsEnums["String"]>;
  action_url?: Maybe<ScalarsEnums["String"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  icon?: Maybe<ScalarsEnums["String"]>;
  read_at?: Maybe<ScalarsEnums["timestamptz"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface notifications_min_fields {
  __typename: "notifications_min_fields" | undefined;
  action_text?: Maybe<ScalarsEnums["String"]>;
  action_url?: Maybe<ScalarsEnums["String"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  icon?: Maybe<ScalarsEnums["String"]>;
  read_at?: Maybe<ScalarsEnums["timestamptz"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "notifications"
 */
export interface notifications_mutation_response {
  __typename: "notifications_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<notifications>;
}

/**
 * columns and relationships of "outlet_has_addons"
 */
export interface outlet_has_addons {
  __typename: "outlet_has_addons" | undefined;
  addon_uuid: ScalarsEnums["uuid"];
  available: ScalarsEnums["Boolean"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  default_addon: default_addons;
  description: ScalarsEnums["String"];
  outlet_uuid: ScalarsEnums["uuid"];
  price: ScalarsEnums["float8"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
}

/**
 * aggregated selection of "outlet_has_addons"
 */
export interface outlet_has_addons_aggregate {
  __typename: "outlet_has_addons_aggregate" | undefined;
  aggregate?: Maybe<outlet_has_addons_aggregate_fields>;
  nodes: Array<outlet_has_addons>;
}

/**
 * aggregate fields of "outlet_has_addons"
 */
export interface outlet_has_addons_aggregate_fields {
  __typename: "outlet_has_addons_aggregate_fields" | undefined;
  avg?: Maybe<outlet_has_addons_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<outlet_has_addons_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<outlet_has_addons_max_fields>;
  min?: Maybe<outlet_has_addons_min_fields>;
  stddev?: Maybe<outlet_has_addons_stddev_fields>;
  stddev_pop?: Maybe<outlet_has_addons_stddev_pop_fields>;
  stddev_samp?: Maybe<outlet_has_addons_stddev_samp_fields>;
  sum?: Maybe<outlet_has_addons_sum_fields>;
  var_pop?: Maybe<outlet_has_addons_var_pop_fields>;
  var_samp?: Maybe<outlet_has_addons_var_samp_fields>;
  variance?: Maybe<outlet_has_addons_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface outlet_has_addons_avg_fields {
  __typename: "outlet_has_addons_avg_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface outlet_has_addons_max_fields {
  __typename: "outlet_has_addons_max_fields" | undefined;
  addon_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * aggregate min on columns
 */
export interface outlet_has_addons_min_fields {
  __typename: "outlet_has_addons_min_fields" | undefined;
  addon_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  price?: Maybe<ScalarsEnums["float8"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * response of any mutation on the table "outlet_has_addons"
 */
export interface outlet_has_addons_mutation_response {
  __typename: "outlet_has_addons_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<outlet_has_addons>;
}

/**
 * aggregate stddev on columns
 */
export interface outlet_has_addons_stddev_fields {
  __typename: "outlet_has_addons_stddev_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface outlet_has_addons_stddev_pop_fields {
  __typename: "outlet_has_addons_stddev_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface outlet_has_addons_stddev_samp_fields {
  __typename: "outlet_has_addons_stddev_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface outlet_has_addons_sum_fields {
  __typename: "outlet_has_addons_sum_fields" | undefined;
  price?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface outlet_has_addons_var_pop_fields {
  __typename: "outlet_has_addons_var_pop_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface outlet_has_addons_var_samp_fields {
  __typename: "outlet_has_addons_var_samp_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface outlet_has_addons_variance_fields {
  __typename: "outlet_has_addons_variance_fields" | undefined;
  price?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "outlets"
 */
export interface outlets {
  __typename: "outlets" | undefined;
  area: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  aruba_wifi_accesses: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => Array<aruba_wifi_access>;
  /**
   * An aggregate relationship
   */
  aruba_wifi_accesses_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<aruba_wifi_access_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<aruba_wifi_access_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<aruba_wifi_access_bool_exp>;
  }) => aruba_wifi_access_aggregate;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  floor_plans: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plans_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plans_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plans_bool_exp>;
  }) => Array<floor_plans>;
  /**
   * An aggregate relationship
   */
  floor_plans_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<floor_plans_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<floor_plans_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<floor_plans_bool_exp>;
  }) => floor_plans_aggregate;
  full_address: ScalarsEnums["String"];
  geohash: ScalarsEnums["String"];
  gm_badge_printing: ScalarsEnums["Boolean"];
  gm_photo_taking: ScalarsEnums["Boolean"];
  guest_management: ScalarsEnums["Boolean"];
  /**
   * An array relationship
   */
  guests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  /**
   * An aggregate relationship
   */
  guests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  latitude: ScalarsEnums["float8"];
  /**
   * An array relationship
   */
  listings: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listings_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listings_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listings_bool_exp>;
  }) => Array<listings>;
  /**
   * An aggregate relationship
   */
  listings_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<listings_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<listings_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<listings_bool_exp>;
  }) => listings_aggregate;
  locale: ScalarsEnums["bpchar"];
  longitude: ScalarsEnums["float8"];
  occupancy: ScalarsEnums["Int"];
  /**
   * An array relationship
   */
  passes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  /**
   * An aggregate relationship
   */
  passes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  /**
   * An array relationship
   */
  requests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  /**
   * An aggregate relationship
   */
  requests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  /**
   * An array relationship
   */
  reviews: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  /**
   * An aggregate relationship
   */
  reviews_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  /**
   * An array relationship
   */
  spaces: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => Array<spaces>;
  /**
   * An aggregate relationship
   */
  spaces_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_bool_exp>;
  }) => spaces_aggregate;
  timezone: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "outlets"
 */
export interface outlets_aggregate {
  __typename: "outlets_aggregate" | undefined;
  aggregate?: Maybe<outlets_aggregate_fields>;
  nodes: Array<outlets>;
}

/**
 * aggregate fields of "outlets"
 */
export interface outlets_aggregate_fields {
  __typename: "outlets_aggregate_fields" | undefined;
  avg?: Maybe<outlets_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<outlets_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<outlets_max_fields>;
  min?: Maybe<outlets_min_fields>;
  stddev?: Maybe<outlets_stddev_fields>;
  stddev_pop?: Maybe<outlets_stddev_pop_fields>;
  stddev_samp?: Maybe<outlets_stddev_samp_fields>;
  sum?: Maybe<outlets_sum_fields>;
  var_pop?: Maybe<outlets_var_pop_fields>;
  var_samp?: Maybe<outlets_var_samp_fields>;
  variance?: Maybe<outlets_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface outlets_avg_fields {
  __typename: "outlets_avg_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface outlets_max_fields {
  __typename: "outlets_max_fields" | undefined;
  area?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  full_address?: Maybe<ScalarsEnums["String"]>;
  geohash?: Maybe<ScalarsEnums["String"]>;
  latitude?: Maybe<ScalarsEnums["float8"]>;
  locale?: Maybe<ScalarsEnums["bpchar"]>;
  longitude?: Maybe<ScalarsEnums["float8"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface outlets_min_fields {
  __typename: "outlets_min_fields" | undefined;
  area?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  full_address?: Maybe<ScalarsEnums["String"]>;
  geohash?: Maybe<ScalarsEnums["String"]>;
  latitude?: Maybe<ScalarsEnums["float8"]>;
  locale?: Maybe<ScalarsEnums["bpchar"]>;
  longitude?: Maybe<ScalarsEnums["float8"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "outlets"
 */
export interface outlets_mutation_response {
  __typename: "outlets_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<outlets>;
}

/**
 * aggregate stddev on columns
 */
export interface outlets_stddev_fields {
  __typename: "outlets_stddev_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface outlets_stddev_pop_fields {
  __typename: "outlets_stddev_pop_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface outlets_stddev_samp_fields {
  __typename: "outlets_stddev_samp_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface outlets_sum_fields {
  __typename: "outlets_sum_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["float8"]>;
  longitude?: Maybe<ScalarsEnums["float8"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface outlets_var_pop_fields {
  __typename: "outlets_var_pop_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface outlets_var_samp_fields {
  __typename: "outlets_var_samp_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface outlets_variance_fields {
  __typename: "outlets_variance_fields" | undefined;
  latitude?: Maybe<ScalarsEnums["Float"]>;
  longitude?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "passes"
 */
export interface passes {
  __typename: "passes" | undefined;
  /**
   * An object relationship
   */
  brand?: Maybe<brands>;
  brand_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at: ScalarsEnums["timestamptz"];
  date_end: ScalarsEnums["date"];
  date_start: ScalarsEnums["date"];
  description: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  listing?: Maybe<listings>;
  listing_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  listing_type?: Maybe<ScalarsEnums["uuid"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  outlet_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  request: requests;
  request_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  spaces_usages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  /**
   * An aggregate relationship
   */
  spaces_usages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  title: ScalarsEnums["String"];
  type: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * columns and relationships of "passes_activity_logs"
 */
export interface passes_activity_logs {
  __typename: "passes_activity_logs" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "passes_activity_logs"
 */
export interface passes_activity_logs_aggregate {
  __typename: "passes_activity_logs_aggregate" | undefined;
  aggregate?: Maybe<passes_activity_logs_aggregate_fields>;
  nodes: Array<passes_activity_logs>;
}

/**
 * aggregate fields of "passes_activity_logs"
 */
export interface passes_activity_logs_aggregate_fields {
  __typename: "passes_activity_logs_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<passes_activity_logs_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<passes_activity_logs_max_fields>;
  min?: Maybe<passes_activity_logs_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface passes_activity_logs_max_fields {
  __typename: "passes_activity_logs_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface passes_activity_logs_min_fields {
  __typename: "passes_activity_logs_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "passes_activity_logs"
 */
export interface passes_activity_logs_mutation_response {
  __typename: "passes_activity_logs_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<passes_activity_logs>;
}

/**
 * aggregated selection of "passes"
 */
export interface passes_aggregate {
  __typename: "passes_aggregate" | undefined;
  aggregate?: Maybe<passes_aggregate_fields>;
  nodes: Array<passes>;
}

/**
 * aggregate fields of "passes"
 */
export interface passes_aggregate_fields {
  __typename: "passes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<passes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<passes_max_fields>;
  min?: Maybe<passes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface passes_max_fields {
  __typename: "passes_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  listing_type?: Maybe<ScalarsEnums["uuid"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface passes_min_fields {
  __typename: "passes_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  listing_type?: Maybe<ScalarsEnums["uuid"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "passes"
 */
export interface passes_mutation_response {
  __typename: "passes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<passes>;
}

/**
 * columns and relationships of "payments"
 */
export interface payments {
  __typename: "payments" | undefined;
  base_3rd_party_platform: ScalarsEnums["String"];
  base_3rd_party_platform_fee: ScalarsEnums["float8"];
  base_brand_conversion_code: ScalarsEnums["float8"];
  base_brand_currency_code: ScalarsEnums["bpchar"];
  base_brand_gross_revenue: ScalarsEnums["float8"];
  base_cashback_by_brand: ScalarsEnums["float8"];
  base_cashback_by_stayr: ScalarsEnums["float8"];
  base_currency_code: ScalarsEnums["bpchar"];
  base_discount_by_brand: ScalarsEnums["float8"];
  base_discount_by_stayr: ScalarsEnums["float8"];
  base_payment_by_card: ScalarsEnums["float8"];
  base_payment_by_cash: ScalarsEnums["float8"];
  base_payment_by_credits: ScalarsEnums["float8"];
  base_pf_cc_fee: ScalarsEnums["float8"];
  base_pf_transaction_fee: ScalarsEnums["float8"];
  base_total_cashback: ScalarsEnums["float8"];
  base_total_discount: ScalarsEnums["float8"];
  base_total_payment: ScalarsEnums["float8"];
  base_total_price: ScalarsEnums["float8"];
  base_user_conversion_rate: ScalarsEnums["float8"];
  base_user_currency_code: ScalarsEnums["bpchar"];
  column_23: ScalarsEnums["String"];
  id: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "payments"
 */
export interface payments_aggregate {
  __typename: "payments_aggregate" | undefined;
  aggregate?: Maybe<payments_aggregate_fields>;
  nodes: Array<payments>;
}

/**
 * aggregate fields of "payments"
 */
export interface payments_aggregate_fields {
  __typename: "payments_aggregate_fields" | undefined;
  avg?: Maybe<payments_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<payments_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<payments_max_fields>;
  min?: Maybe<payments_min_fields>;
  stddev?: Maybe<payments_stddev_fields>;
  stddev_pop?: Maybe<payments_stddev_pop_fields>;
  stddev_samp?: Maybe<payments_stddev_samp_fields>;
  sum?: Maybe<payments_sum_fields>;
  var_pop?: Maybe<payments_var_pop_fields>;
  var_samp?: Maybe<payments_var_samp_fields>;
  variance?: Maybe<payments_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface payments_avg_fields {
  __typename: "payments_avg_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface payments_max_fields {
  __typename: "payments_max_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["float8"]>;
  base_brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  base_user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  column_23?: Maybe<ScalarsEnums["String"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface payments_min_fields {
  __typename: "payments_min_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["float8"]>;
  base_brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  base_user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  column_23?: Maybe<ScalarsEnums["String"]>;
  id?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "payments"
 */
export interface payments_mutation_response {
  __typename: "payments_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<payments>;
}

/**
 * aggregate stddev on columns
 */
export interface payments_stddev_fields {
  __typename: "payments_stddev_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface payments_stddev_pop_fields {
  __typename: "payments_stddev_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface payments_stddev_samp_fields {
  __typename: "payments_stddev_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface payments_sum_fields {
  __typename: "payments_sum_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["float8"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["float8"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface payments_var_pop_fields {
  __typename: "payments_var_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface payments_var_samp_fields {
  __typename: "payments_var_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface payments_variance_fields {
  __typename: "payments_variance_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_brand_conversion_code?: Maybe<ScalarsEnums["Float"]>;
  base_brand_gross_revenue?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_pf_cc_fee?: Maybe<ScalarsEnums["Float"]>;
  base_pf_transaction_fee?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_user_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "permissions"
 */
export interface permissions {
  __typename: "permissions" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  model_has_permissions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => Array<model_has_permissions>;
  /**
   * An aggregate relationship
   */
  model_has_permissions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_permissions_bool_exp>;
  }) => model_has_permissions_aggregate;
  name: ScalarsEnums["String"];
  /**
   * fetch data from the table: "role_has_permissions"
   */
  role_has_permissions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<role_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => Array<role_has_permissions>;
  /**
   * An aggregate relationship
   */
  role_has_permissions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<role_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => role_has_permissions_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "permissions"
 */
export interface permissions_aggregate {
  __typename: "permissions_aggregate" | undefined;
  aggregate?: Maybe<permissions_aggregate_fields>;
  nodes: Array<permissions>;
}

/**
 * aggregate fields of "permissions"
 */
export interface permissions_aggregate_fields {
  __typename: "permissions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<permissions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<permissions_max_fields>;
  min?: Maybe<permissions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface permissions_max_fields {
  __typename: "permissions_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface permissions_min_fields {
  __typename: "permissions_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "permissions"
 */
export interface permissions_mutation_response {
  __typename: "permissions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<permissions>;
}

/**
 * columns and relationships of "post_comments"
 */
export interface post_comments {
  __typename: "post_comments" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "post_comments"
 */
export interface post_comments_aggregate {
  __typename: "post_comments_aggregate" | undefined;
  aggregate?: Maybe<post_comments_aggregate_fields>;
  nodes: Array<post_comments>;
}

/**
 * aggregate fields of "post_comments"
 */
export interface post_comments_aggregate_fields {
  __typename: "post_comments_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<post_comments_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<post_comments_max_fields>;
  min?: Maybe<post_comments_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface post_comments_max_fields {
  __typename: "post_comments_max_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface post_comments_min_fields {
  __typename: "post_comments_min_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "post_comments"
 */
export interface post_comments_mutation_response {
  __typename: "post_comments_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<post_comments>;
}

/**
 * columns and relationships of "post_likes"
 */
export interface post_likes {
  __typename: "post_likes" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "post_likes"
 */
export interface post_likes_aggregate {
  __typename: "post_likes_aggregate" | undefined;
  aggregate?: Maybe<post_likes_aggregate_fields>;
  nodes: Array<post_likes>;
}

/**
 * aggregate fields of "post_likes"
 */
export interface post_likes_aggregate_fields {
  __typename: "post_likes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<post_likes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<post_likes_max_fields>;
  min?: Maybe<post_likes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface post_likes_max_fields {
  __typename: "post_likes_max_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface post_likes_min_fields {
  __typename: "post_likes_min_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "post_likes"
 */
export interface post_likes_mutation_response {
  __typename: "post_likes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<post_likes>;
}

/**
 * columns and relationships of "posts"
 */
export interface posts {
  __typename: "posts" | undefined;
  author_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  comments: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<post_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<post_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<post_comments_bool_exp>;
  }) => Array<post_comments>;
  /**
   * An aggregate relationship
   */
  comments_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<post_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<post_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<post_comments_bool_exp>;
  }) => post_comments_aggregate;
  content: ScalarsEnums["String"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  discussion: discussions;
  discussion_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  likes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<post_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<post_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<post_likes_bool_exp>;
  }) => Array<post_likes>;
  /**
   * An aggregate relationship
   */
  likes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<post_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<post_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<post_likes_bool_exp>;
  }) => post_likes_aggregate;
  type: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "posts"
 */
export interface posts_aggregate {
  __typename: "posts_aggregate" | undefined;
  aggregate?: Maybe<posts_aggregate_fields>;
  nodes: Array<posts>;
}

/**
 * aggregate fields of "posts"
 */
export interface posts_aggregate_fields {
  __typename: "posts_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<posts_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<posts_max_fields>;
  min?: Maybe<posts_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface posts_max_fields {
  __typename: "posts_max_fields" | undefined;
  author_uuid?: Maybe<ScalarsEnums["uuid"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  discussion_uuid?: Maybe<ScalarsEnums["uuid"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface posts_min_fields {
  __typename: "posts_min_fields" | undefined;
  author_uuid?: Maybe<ScalarsEnums["uuid"]>;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  discussion_uuid?: Maybe<ScalarsEnums["uuid"]>;
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "posts"
 */
export interface posts_mutation_response {
  __typename: "posts_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<posts>;
}

/**
 * columns and relationships of "questionaires"
 */
export interface questionaires {
  __typename: "questionaires" | undefined;
  /**
   * An object relationship
   */
  brand?: Maybe<brands>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  /**
   * fetch data from the table: "guest_questionaires_answers"
   */
  guest_questionaires_answers: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => Array<guest_questionaires_answers>;
  /**
   * An aggregate relationship
   */
  guest_questionaires_answers_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => guest_questionaires_answers_aggregate;
  /**
   * An array relationship
   */
  guests_has_questionaires: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => Array<guests_has_questionaires>;
  /**
   * An aggregate relationship
   */
  guests_has_questionaires_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_has_questionaires_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_has_questionaires_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_has_questionaires_bool_exp>;
  }) => guests_has_questionaires_aggregate;
  /**
   * An array relationship
   */
  questions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<questions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<questions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<questions_bool_exp>;
  }) => Array<questions>;
  /**
   * An aggregate relationship
   */
  questions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<questions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<questions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<questions_bool_exp>;
  }) => questions_aggregate;
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "questionaires"
 */
export interface questionaires_aggregate {
  __typename: "questionaires_aggregate" | undefined;
  aggregate?: Maybe<questionaires_aggregate_fields>;
  nodes: Array<questionaires>;
}

/**
 * aggregate fields of "questionaires"
 */
export interface questionaires_aggregate_fields {
  __typename: "questionaires_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<questionaires_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<questionaires_max_fields>;
  min?: Maybe<questionaires_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface questionaires_max_fields {
  __typename: "questionaires_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface questionaires_min_fields {
  __typename: "questionaires_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "questionaires"
 */
export interface questionaires_mutation_response {
  __typename: "questionaires_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<questionaires>;
}

/**
 * columns and relationships of "questions"
 */
export interface questions {
  __typename: "questions" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  field_type: ScalarsEnums["String"];
  /**
   * fetch data from the table: "guest_questionaires_answers"
   */
  guest_questionaires_answers: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => Array<guest_questionaires_answers>;
  /**
   * An aggregate relationship
   */
  guest_questionaires_answers_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guest_questionaires_answers_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guest_questionaires_answers_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guest_questionaires_answers_bool_exp>;
  }) => guest_questionaires_answers_aggregate;
  question: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  questionaire: questionaires;
  questionaire_uuid: ScalarsEnums["uuid"];
  required: ScalarsEnums["Boolean"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "questions"
 */
export interface questions_aggregate {
  __typename: "questions_aggregate" | undefined;
  aggregate?: Maybe<questions_aggregate_fields>;
  nodes: Array<questions>;
}

/**
 * aggregate fields of "questions"
 */
export interface questions_aggregate_fields {
  __typename: "questions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<questions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<questions_max_fields>;
  min?: Maybe<questions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface questions_max_fields {
  __typename: "questions_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  field_type?: Maybe<ScalarsEnums["String"]>;
  question?: Maybe<ScalarsEnums["String"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface questions_min_fields {
  __typename: "questions_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  field_type?: Maybe<ScalarsEnums["String"]>;
  question?: Maybe<ScalarsEnums["String"]>;
  questionaire_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "questions"
 */
export interface questions_mutation_response {
  __typename: "questions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<questions>;
}

/**
 * columns and relationships of "requests"
 */
export interface requests {
  __typename: "requests" | undefined;
  base_3rd_party_platform: ScalarsEnums["String"];
  base_3rd_party_platform_fee: ScalarsEnums["float8"];
  base_cashback_by_brand: ScalarsEnums["float8"];
  base_cashback_by_stayr: ScalarsEnums["float8"];
  base_currency_code: ScalarsEnums["bpchar"];
  base_discount_by_brand: ScalarsEnums["float8"];
  base_discount_by_stayr: ScalarsEnums["float8"];
  base_payment_by_card: ScalarsEnums["float8"];
  base_payment_by_cash: ScalarsEnums["float8"];
  base_payment_by_credits: ScalarsEnums["float8"];
  base_total_cashback: ScalarsEnums["float8"];
  base_total_discount: ScalarsEnums["float8"];
  base_total_payment: ScalarsEnums["float8"];
  base_total_price: ScalarsEnums["float8"];
  base_unit_price: ScalarsEnums["float8"];
  booking_type: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  brand: brands;
  brand_conversion_rate: ScalarsEnums["float8"];
  brand_currency_code: ScalarsEnums["bpchar"];
  brand_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  brand_uuid: ScalarsEnums["uuid"];
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  email_receipt_data: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  /**
   * An array relationship
   */
  extensions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<extensions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<extensions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<extensions_bool_exp>;
  }) => Array<extensions>;
  /**
   * An aggregate relationship
   */
  extensions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<extensions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<extensions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<extensions_bool_exp>;
  }) => extensions_aggregate;
  /**
   * An array relationship
   */
  inboxes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<inboxes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<inboxes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<inboxes_bool_exp>;
  }) => Array<inboxes>;
  /**
   * An aggregate relationship
   */
  inboxes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<inboxes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<inboxes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<inboxes_bool_exp>;
  }) => inboxes_aggregate;
  /**
   * An object relationship
   */
  invoice: invoice;
  invoice_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  listing: listings;
  listing_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  listing_type: ScalarsEnums["String"];
  listing_uuid: ScalarsEnums["uuid"];
  minutes?: Maybe<ScalarsEnums["Int"]>;
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  outlet_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  passes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  /**
   * An aggregate relationship
   */
  passes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  payment_intent_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  quantity: ScalarsEnums["Int"];
  /**
   * An array relationship
   */
  reservations: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => Array<reservations>;
  /**
   * An aggregate relationship
   */
  reservations_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reservations_bool_exp>;
  }) => reservations_aggregate;
  short_id: ScalarsEnums["String"];
  source_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  status: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_conversion_code: ScalarsEnums["float8"];
  user_currency_code: ScalarsEnums["bpchar"];
  user_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "requests"
 */
export interface requests_aggregate {
  __typename: "requests_aggregate" | undefined;
  aggregate?: Maybe<requests_aggregate_fields>;
  nodes: Array<requests>;
}

/**
 * aggregate fields of "requests"
 */
export interface requests_aggregate_fields {
  __typename: "requests_aggregate_fields" | undefined;
  avg?: Maybe<requests_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<requests_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<requests_max_fields>;
  min?: Maybe<requests_min_fields>;
  stddev?: Maybe<requests_stddev_fields>;
  stddev_pop?: Maybe<requests_stddev_pop_fields>;
  stddev_samp?: Maybe<requests_stddev_samp_fields>;
  sum?: Maybe<requests_sum_fields>;
  var_pop?: Maybe<requests_var_pop_fields>;
  var_samp?: Maybe<requests_var_samp_fields>;
  variance?: Maybe<requests_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface requests_avg_fields {
  __typename: "requests_avg_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface requests_max_fields {
  __typename: "requests_max_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_unit_price?: Maybe<ScalarsEnums["float8"]>;
  booking_type?: Maybe<ScalarsEnums["String"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  invoice_uuid?: Maybe<ScalarsEnums["uuid"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
  short_id?: Maybe<ScalarsEnums["String"]>;
  status?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_conversion_code?: Maybe<ScalarsEnums["float8"]>;
  user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface requests_min_fields {
  __typename: "requests_min_fields" | undefined;
  base_3rd_party_platform?: Maybe<ScalarsEnums["String"]>;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_unit_price?: Maybe<ScalarsEnums["float8"]>;
  booking_type?: Maybe<ScalarsEnums["String"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  brand_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  invoice_uuid?: Maybe<ScalarsEnums["uuid"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
  short_id?: Maybe<ScalarsEnums["String"]>;
  status?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_conversion_code?: Maybe<ScalarsEnums["float8"]>;
  user_currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "requests"
 */
export interface requests_mutation_response {
  __typename: "requests_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<requests>;
}

/**
 * aggregate stddev on columns
 */
export interface requests_stddev_fields {
  __typename: "requests_stddev_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface requests_stddev_pop_fields {
  __typename: "requests_stddev_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface requests_stddev_samp_fields {
  __typename: "requests_stddev_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface requests_sum_fields {
  __typename: "requests_sum_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["float8"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["float8"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["float8"]>;
  base_total_cashback?: Maybe<ScalarsEnums["float8"]>;
  base_total_discount?: Maybe<ScalarsEnums["float8"]>;
  base_total_payment?: Maybe<ScalarsEnums["float8"]>;
  base_total_price?: Maybe<ScalarsEnums["float8"]>;
  base_unit_price?: Maybe<ScalarsEnums["float8"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["float8"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
  user_conversion_code?: Maybe<ScalarsEnums["float8"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface requests_var_pop_fields {
  __typename: "requests_var_pop_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface requests_var_samp_fields {
  __typename: "requests_var_samp_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface requests_variance_fields {
  __typename: "requests_variance_fields" | undefined;
  base_3rd_party_platform_fee?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_cashback_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_brand?: Maybe<ScalarsEnums["Float"]>;
  base_discount_by_stayr?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_card?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_cash?: Maybe<ScalarsEnums["Float"]>;
  base_payment_by_credits?: Maybe<ScalarsEnums["Float"]>;
  base_total_cashback?: Maybe<ScalarsEnums["Float"]>;
  base_total_discount?: Maybe<ScalarsEnums["Float"]>;
  base_total_payment?: Maybe<ScalarsEnums["Float"]>;
  base_total_price?: Maybe<ScalarsEnums["Float"]>;
  base_unit_price?: Maybe<ScalarsEnums["Float"]>;
  brand_conversion_rate?: Maybe<ScalarsEnums["Float"]>;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
  user_conversion_code?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "reservations"
 */
export interface reservations {
  __typename: "reservations" | undefined;
  booking_type: ScalarsEnums["String"];
  /**
   * An object relationship
   */
  brand: brands;
  brand_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  brand_uuid: ScalarsEnums["uuid"];
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  listing: listings;
  listing_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  listing_type: ScalarsEnums["String"];
  listing_uuid: ScalarsEnums["uuid"];
  minutes: ScalarsEnums["Int"];
  outlet_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  outlet_uuid: ScalarsEnums["uuid"];
  quantity: ScalarsEnums["Int"];
  /**
   * An object relationship
   */
  request: requests;
  request_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  reviews: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  /**
   * An aggregate relationship
   */
  reviews_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  /**
   * An array relationship
   */
  spaces_usages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  /**
   * An aggregate relationship
   */
  spaces_usages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  user_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * columns and relationships of "reservations_activity_logs"
 */
export interface reservations_activity_logs {
  __typename: "reservations_activity_logs" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "reservations_activity_logs"
 */
export interface reservations_activity_logs_aggregate {
  __typename: "reservations_activity_logs_aggregate" | undefined;
  aggregate?: Maybe<reservations_activity_logs_aggregate_fields>;
  nodes: Array<reservations_activity_logs>;
}

/**
 * aggregate fields of "reservations_activity_logs"
 */
export interface reservations_activity_logs_aggregate_fields {
  __typename: "reservations_activity_logs_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<reservations_activity_logs_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<reservations_activity_logs_max_fields>;
  min?: Maybe<reservations_activity_logs_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface reservations_activity_logs_max_fields {
  __typename: "reservations_activity_logs_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface reservations_activity_logs_min_fields {
  __typename: "reservations_activity_logs_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  event_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "reservations_activity_logs"
 */
export interface reservations_activity_logs_mutation_response {
  __typename: "reservations_activity_logs_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<reservations_activity_logs>;
}

/**
 * aggregated selection of "reservations"
 */
export interface reservations_aggregate {
  __typename: "reservations_aggregate" | undefined;
  aggregate?: Maybe<reservations_aggregate_fields>;
  nodes: Array<reservations>;
}

/**
 * aggregate fields of "reservations"
 */
export interface reservations_aggregate_fields {
  __typename: "reservations_aggregate_fields" | undefined;
  avg?: Maybe<reservations_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<reservations_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<reservations_max_fields>;
  min?: Maybe<reservations_min_fields>;
  stddev?: Maybe<reservations_stddev_fields>;
  stddev_pop?: Maybe<reservations_stddev_pop_fields>;
  stddev_samp?: Maybe<reservations_stddev_samp_fields>;
  sum?: Maybe<reservations_sum_fields>;
  var_pop?: Maybe<reservations_var_pop_fields>;
  var_samp?: Maybe<reservations_var_samp_fields>;
  variance?: Maybe<reservations_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface reservations_avg_fields {
  __typename: "reservations_avg_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface reservations_max_fields {
  __typename: "reservations_max_fields" | undefined;
  booking_type?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface reservations_min_fields {
  __typename: "reservations_min_fields" | undefined;
  booking_type?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  checkin_at?: Maybe<ScalarsEnums["timestamptz"]>;
  checkout_at?: Maybe<ScalarsEnums["timestamptz"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "reservations"
 */
export interface reservations_mutation_response {
  __typename: "reservations_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<reservations>;
}

/**
 * aggregate stddev on columns
 */
export interface reservations_stddev_fields {
  __typename: "reservations_stddev_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface reservations_stddev_pop_fields {
  __typename: "reservations_stddev_pop_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface reservations_stddev_samp_fields {
  __typename: "reservations_stddev_samp_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface reservations_sum_fields {
  __typename: "reservations_sum_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Int"]>;
  quantity?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface reservations_var_pop_fields {
  __typename: "reservations_var_pop_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface reservations_var_samp_fields {
  __typename: "reservations_var_samp_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface reservations_variance_fields {
  __typename: "reservations_variance_fields" | undefined;
  minutes?: Maybe<ScalarsEnums["Float"]>;
  quantity?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "review_comments"
 */
export interface review_comments {
  __typename: "review_comments" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "review_comments"
 */
export interface review_comments_aggregate {
  __typename: "review_comments_aggregate" | undefined;
  aggregate?: Maybe<review_comments_aggregate_fields>;
  nodes: Array<review_comments>;
}

/**
 * aggregate fields of "review_comments"
 */
export interface review_comments_aggregate_fields {
  __typename: "review_comments_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<review_comments_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<review_comments_max_fields>;
  min?: Maybe<review_comments_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface review_comments_max_fields {
  __typename: "review_comments_max_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface review_comments_min_fields {
  __typename: "review_comments_min_fields" | undefined;
  content?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "review_comments"
 */
export interface review_comments_mutation_response {
  __typename: "review_comments_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<review_comments>;
}

/**
 * columns and relationships of "review_likes"
 */
export interface review_likes {
  __typename: "review_likes" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "review_likes"
 */
export interface review_likes_aggregate {
  __typename: "review_likes_aggregate" | undefined;
  aggregate?: Maybe<review_likes_aggregate_fields>;
  nodes: Array<review_likes>;
}

/**
 * aggregate fields of "review_likes"
 */
export interface review_likes_aggregate_fields {
  __typename: "review_likes_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<review_likes_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<review_likes_max_fields>;
  min?: Maybe<review_likes_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface review_likes_max_fields {
  __typename: "review_likes_max_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface review_likes_min_fields {
  __typename: "review_likes_min_fields" | undefined;
  liked_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "review_likes"
 */
export interface review_likes_mutation_response {
  __typename: "review_likes_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<review_likes>;
}

/**
 * columns and relationships of "review_media"
 */
export interface review_media {
  __typename: "review_media" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "review_media"
 */
export interface review_media_aggregate {
  __typename: "review_media_aggregate" | undefined;
  aggregate?: Maybe<review_media_aggregate_fields>;
  nodes: Array<review_media>;
}

/**
 * aggregate fields of "review_media"
 */
export interface review_media_aggregate_fields {
  __typename: "review_media_aggregate_fields" | undefined;
  avg?: Maybe<review_media_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<review_media_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<review_media_max_fields>;
  min?: Maybe<review_media_min_fields>;
  stddev?: Maybe<review_media_stddev_fields>;
  stddev_pop?: Maybe<review_media_stddev_pop_fields>;
  stddev_samp?: Maybe<review_media_stddev_samp_fields>;
  sum?: Maybe<review_media_sum_fields>;
  var_pop?: Maybe<review_media_var_pop_fields>;
  var_samp?: Maybe<review_media_var_samp_fields>;
  variance?: Maybe<review_media_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface review_media_avg_fields {
  __typename: "review_media_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface review_media_max_fields {
  __typename: "review_media_max_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface review_media_min_fields {
  __typename: "review_media_min_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "review_media"
 */
export interface review_media_mutation_response {
  __typename: "review_media_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<review_media>;
}

/**
 * aggregate stddev on columns
 */
export interface review_media_stddev_fields {
  __typename: "review_media_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface review_media_stddev_pop_fields {
  __typename: "review_media_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface review_media_stddev_samp_fields {
  __typename: "review_media_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface review_media_sum_fields {
  __typename: "review_media_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface review_media_var_pop_fields {
  __typename: "review_media_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface review_media_var_samp_fields {
  __typename: "review_media_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface review_media_variance_fields {
  __typename: "review_media_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "reviews"
 */
export interface reviews {
  __typename: "reviews" | undefined;
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  comment: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  comments: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_comments_bool_exp>;
  }) => Array<review_comments>;
  /**
   * An aggregate relationship
   */
  comments_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_comments_bool_exp>;
  }) => review_comments_aggregate;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  likes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_likes_bool_exp>;
  }) => Array<review_likes>;
  /**
   * An aggregate relationship
   */
  likes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_likes_bool_exp>;
  }) => review_likes_aggregate;
  /**
   * An object relationship
   */
  listing: listings;
  listing_type: ScalarsEnums["String"];
  listing_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  media: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_media_bool_exp>;
  }) => Array<review_media>;
  /**
   * An aggregate relationship
   */
  media_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<review_media_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<review_media_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<review_media_bool_exp>;
  }) => review_media_aggregate;
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  rating: ScalarsEnums["Int"];
  /**
   * An object relationship
   */
  reservation: reservations;
  reservation_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "reviews"
 */
export interface reviews_aggregate {
  __typename: "reviews_aggregate" | undefined;
  aggregate?: Maybe<reviews_aggregate_fields>;
  nodes: Array<reviews>;
}

/**
 * aggregate fields of "reviews"
 */
export interface reviews_aggregate_fields {
  __typename: "reviews_aggregate_fields" | undefined;
  avg?: Maybe<reviews_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<reviews_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<reviews_max_fields>;
  min?: Maybe<reviews_min_fields>;
  stddev?: Maybe<reviews_stddev_fields>;
  stddev_pop?: Maybe<reviews_stddev_pop_fields>;
  stddev_samp?: Maybe<reviews_stddev_samp_fields>;
  sum?: Maybe<reviews_sum_fields>;
  var_pop?: Maybe<reviews_var_pop_fields>;
  var_samp?: Maybe<reviews_var_samp_fields>;
  variance?: Maybe<reviews_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface reviews_avg_fields {
  __typename: "reviews_avg_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface reviews_max_fields {
  __typename: "reviews_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  comment?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  rating?: Maybe<ScalarsEnums["Int"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface reviews_min_fields {
  __typename: "reviews_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  comment?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  listing_type?: Maybe<ScalarsEnums["String"]>;
  listing_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  rating?: Maybe<ScalarsEnums["Int"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "reviews"
 */
export interface reviews_mutation_response {
  __typename: "reviews_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<reviews>;
}

/**
 * aggregate stddev on columns
 */
export interface reviews_stddev_fields {
  __typename: "reviews_stddev_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface reviews_stddev_pop_fields {
  __typename: "reviews_stddev_pop_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface reviews_stddev_samp_fields {
  __typename: "reviews_stddev_samp_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface reviews_sum_fields {
  __typename: "reviews_sum_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface reviews_var_pop_fields {
  __typename: "reviews_var_pop_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface reviews_var_samp_fields {
  __typename: "reviews_var_samp_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface reviews_variance_fields {
  __typename: "reviews_variance_fields" | undefined;
  rating?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "role_has_permissions"
 */
export interface role_has_permissions {
  __typename: "role_has_permissions" | undefined;
  /**
   * An object relationship
   */
  permission: permissions;
  permission_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  role: roles;
  role_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "role_has_permissions"
 */
export interface role_has_permissions_aggregate {
  __typename: "role_has_permissions_aggregate" | undefined;
  aggregate?: Maybe<role_has_permissions_aggregate_fields>;
  nodes: Array<role_has_permissions>;
}

/**
 * aggregate fields of "role_has_permissions"
 */
export interface role_has_permissions_aggregate_fields {
  __typename: "role_has_permissions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<role_has_permissions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<role_has_permissions_max_fields>;
  min?: Maybe<role_has_permissions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface role_has_permissions_max_fields {
  __typename: "role_has_permissions_max_fields" | undefined;
  permission_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface role_has_permissions_min_fields {
  __typename: "role_has_permissions_min_fields" | undefined;
  permission_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "role_has_permissions"
 */
export interface role_has_permissions_mutation_response {
  __typename: "role_has_permissions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<role_has_permissions>;
}

/**
 * columns and relationships of "roles"
 */
export interface roles {
  __typename: "roles" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  model_has_roles: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => Array<model_has_roles>;
  /**
   * An aggregate relationship
   */
  model_has_roles_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_roles_bool_exp>;
  }) => model_has_roles_aggregate;
  name: ScalarsEnums["String"];
  /**
   * fetch data from the table: "role_has_permissions"
   */
  role_has_permissions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<role_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => Array<role_has_permissions>;
  /**
   * An aggregate relationship
   */
  role_has_permissions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<role_has_permissions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<role_has_permissions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<role_has_permissions_bool_exp>;
  }) => role_has_permissions_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "roles"
 */
export interface roles_aggregate {
  __typename: "roles_aggregate" | undefined;
  aggregate?: Maybe<roles_aggregate_fields>;
  nodes: Array<roles>;
}

/**
 * aggregate fields of "roles"
 */
export interface roles_aggregate_fields {
  __typename: "roles_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<roles_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<roles_max_fields>;
  min?: Maybe<roles_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface roles_max_fields {
  __typename: "roles_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface roles_min_fields {
  __typename: "roles_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "roles"
 */
export interface roles_mutation_response {
  __typename: "roles_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<roles>;
}

/**
 * columns and relationships of "social_relationships"
 */
export interface social_relationships {
  __typename: "social_relationships" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  followed_uuid: ScalarsEnums["uuid"];
  follower_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  /**
   * An object relationship
   */
  userByFollowerUuid: users;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "social_relationships"
 */
export interface social_relationships_aggregate {
  __typename: "social_relationships_aggregate" | undefined;
  aggregate?: Maybe<social_relationships_aggregate_fields>;
  nodes: Array<social_relationships>;
}

/**
 * aggregate fields of "social_relationships"
 */
export interface social_relationships_aggregate_fields {
  __typename: "social_relationships_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<social_relationships_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<social_relationships_max_fields>;
  min?: Maybe<social_relationships_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface social_relationships_max_fields {
  __typename: "social_relationships_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  followed_uuid?: Maybe<ScalarsEnums["uuid"]>;
  follower_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface social_relationships_min_fields {
  __typename: "social_relationships_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  followed_uuid?: Maybe<ScalarsEnums["uuid"]>;
  follower_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "social_relationships"
 */
export interface social_relationships_mutation_response {
  __typename: "social_relationships_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<social_relationships>;
}

/**
 * columns and relationships of "spaces"
 */
export interface spaces {
  __typename: "spaces" | undefined;
  available: ScalarsEnums["Boolean"];
  /**
   * An object relationship
   */
  brand: brands;
  brand_uuid: ScalarsEnums["uuid"];
  building: ScalarsEnums["String"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  floor: ScalarsEnums["Int"];
  /**
   * An object relationship
   */
  floor_plan: floor_plans;
  /**
   * An object relationship
   */
  floor_plan_grid: floor_plan_grid;
  floor_plan_uuid: ScalarsEnums["uuid"];
  grid_uuid: ScalarsEnums["uuid"];
  occupancy: ScalarsEnums["Int"];
  /**
   * An object relationship
   */
  outlet: outlets;
  outlet_uuid: ScalarsEnums["uuid"];
  pathing: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  section: ScalarsEnums["String"];
  slug: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  spaces_usages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  /**
   * An aggregate relationship
   */
  spaces_usages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  title: ScalarsEnums["String"];
  /**
   * desk | meeting_room | event_space
   */
  type: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "spaces"
 */
export interface spaces_aggregate {
  __typename: "spaces_aggregate" | undefined;
  aggregate?: Maybe<spaces_aggregate_fields>;
  nodes: Array<spaces>;
}

/**
 * aggregate fields of "spaces"
 */
export interface spaces_aggregate_fields {
  __typename: "spaces_aggregate_fields" | undefined;
  avg?: Maybe<spaces_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<spaces_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<spaces_max_fields>;
  min?: Maybe<spaces_min_fields>;
  stddev?: Maybe<spaces_stddev_fields>;
  stddev_pop?: Maybe<spaces_stddev_pop_fields>;
  stddev_samp?: Maybe<spaces_stddev_samp_fields>;
  sum?: Maybe<spaces_sum_fields>;
  var_pop?: Maybe<spaces_var_pop_fields>;
  var_samp?: Maybe<spaces_var_samp_fields>;
  variance?: Maybe<spaces_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface spaces_avg_fields {
  __typename: "spaces_avg_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "spaces_guests"
 */
export interface spaces_guests {
  __typename: "spaces_guests" | undefined;
  brand_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  guest_uuid: ScalarsEnums["uuid"];
  invited_by_uuid: ScalarsEnums["uuid"];
  outlet_uuid: ScalarsEnums["uuid"];
  space_usage_uuid: ScalarsEnums["uuid"];
  space_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  spaces_usage: spaces_usage;
  updated_at: ScalarsEnums["timestamptz"];
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "spaces_guests"
 */
export interface spaces_guests_aggregate {
  __typename: "spaces_guests_aggregate" | undefined;
  aggregate?: Maybe<spaces_guests_aggregate_fields>;
  nodes: Array<spaces_guests>;
}

/**
 * aggregate fields of "spaces_guests"
 */
export interface spaces_guests_aggregate_fields {
  __typename: "spaces_guests_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<spaces_guests_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<spaces_guests_max_fields>;
  min?: Maybe<spaces_guests_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface spaces_guests_max_fields {
  __typename: "spaces_guests_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  invited_by_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_usage_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface spaces_guests_min_fields {
  __typename: "spaces_guests_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  invited_by_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_usage_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "spaces_guests"
 */
export interface spaces_guests_mutation_response {
  __typename: "spaces_guests_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<spaces_guests>;
}

/**
 * aggregate max on columns
 */
export interface spaces_max_fields {
  __typename: "spaces_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  building?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  floor?: Maybe<ScalarsEnums["Int"]>;
  floor_plan_uuid?: Maybe<ScalarsEnums["uuid"]>;
  grid_uuid?: Maybe<ScalarsEnums["uuid"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  section?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * desk | meeting_room | event_space
   */
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface spaces_min_fields {
  __typename: "spaces_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  building?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  floor?: Maybe<ScalarsEnums["Int"]>;
  floor_plan_uuid?: Maybe<ScalarsEnums["uuid"]>;
  grid_uuid?: Maybe<ScalarsEnums["uuid"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  section?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * desk | meeting_room | event_space
   */
  type?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "spaces"
 */
export interface spaces_mutation_response {
  __typename: "spaces_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<spaces>;
}

/**
 * aggregate stddev on columns
 */
export interface spaces_stddev_fields {
  __typename: "spaces_stddev_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface spaces_stddev_pop_fields {
  __typename: "spaces_stddev_pop_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface spaces_stddev_samp_fields {
  __typename: "spaces_stddev_samp_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface spaces_sum_fields {
  __typename: "spaces_sum_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Int"]>;
  occupancy?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * columns and relationships of "spaces_usage"
 */
export interface spaces_usage {
  __typename: "spaces_usage" | undefined;
  active: ScalarsEnums["Boolean"];
  brand_uuid: ScalarsEnums["uuid"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  guest: guests;
  guest_uuid: ScalarsEnums["uuid"];
  outlet_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  pass: passes;
  pass_uuid: ScalarsEnums["uuid"];
  permanent: ScalarsEnums["Boolean"];
  releasable: ScalarsEnums["Boolean"];
  released: ScalarsEnums["Boolean"];
  released_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  reservation: reservations;
  reservation_end: ScalarsEnums["timestamptz"];
  reservation_start: ScalarsEnums["timestamptz"];
  reservation_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  space: spaces;
  space_uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  spaces_guests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => Array<spaces_guests>;
  /**
   * An aggregate relationship
   */
  spaces_guests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_guests_bool_exp>;
  }) => spaces_guests_aggregate;
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "spaces_usage"
 */
export interface spaces_usage_aggregate {
  __typename: "spaces_usage_aggregate" | undefined;
  aggregate?: Maybe<spaces_usage_aggregate_fields>;
  nodes: Array<spaces_usage>;
}

/**
 * aggregate fields of "spaces_usage"
 */
export interface spaces_usage_aggregate_fields {
  __typename: "spaces_usage_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<spaces_usage_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<spaces_usage_max_fields>;
  min?: Maybe<spaces_usage_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface spaces_usage_max_fields {
  __typename: "spaces_usage_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pass_uuid?: Maybe<ScalarsEnums["uuid"]>;
  released_at?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_end?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_start?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface spaces_usage_min_fields {
  __typename: "spaces_usage_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pass_uuid?: Maybe<ScalarsEnums["uuid"]>;
  released_at?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_end?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_start?: Maybe<ScalarsEnums["timestamptz"]>;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "spaces_usage"
 */
export interface spaces_usage_mutation_response {
  __typename: "spaces_usage_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<spaces_usage>;
}

/**
 * aggregate var_pop on columns
 */
export interface spaces_var_pop_fields {
  __typename: "spaces_var_pop_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface spaces_var_samp_fields {
  __typename: "spaces_var_samp_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface spaces_variance_fields {
  __typename: "spaces_variance_fields" | undefined;
  floor?: Maybe<ScalarsEnums["Float"]>;
  occupancy?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "storage.buckets"
 */
export interface storage_buckets {
  __typename: "storage_buckets" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id: ScalarsEnums["String"];
  name: ScalarsEnums["String"];
  owner?: Maybe<ScalarsEnums["uuid"]>;
  public?: Maybe<ScalarsEnums["Boolean"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * aggregated selection of "storage.buckets"
 */
export interface storage_buckets_aggregate {
  __typename: "storage_buckets_aggregate" | undefined;
  aggregate?: Maybe<storage_buckets_aggregate_fields>;
  nodes: Array<storage_buckets>;
}

/**
 * aggregate fields of "storage.buckets"
 */
export interface storage_buckets_aggregate_fields {
  __typename: "storage_buckets_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<storage_buckets_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<storage_buckets_max_fields>;
  min?: Maybe<storage_buckets_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface storage_buckets_max_fields {
  __typename: "storage_buckets_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  owner?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * aggregate min on columns
 */
export interface storage_buckets_min_fields {
  __typename: "storage_buckets_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  id?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  owner?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
}

/**
 * response of any mutation on the table "storage.buckets"
 */
export interface storage_buckets_mutation_response {
  __typename: "storage_buckets_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<storage_buckets>;
}

/**
 * columns and relationships of "stripe_transfers"
 */
export interface stripe_transfers {
  __typename: "stripe_transfers" | undefined;
  amount: ScalarsEnums["String"];
  brand_currency: ScalarsEnums["String"];
  brand_stripe_id: ScalarsEnums["String"];
  brand_uuid: ScalarsEnums["uuid"];
  created_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  invoice: invoice;
  invoice_uuid: ScalarsEnums["uuid"];
  stripe_transfer_id: ScalarsEnums["String"];
  transfer_snapshot: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => ScalarsEnums["json"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "stripe_transfers"
 */
export interface stripe_transfers_aggregate {
  __typename: "stripe_transfers_aggregate" | undefined;
  aggregate?: Maybe<stripe_transfers_aggregate_fields>;
  nodes: Array<stripe_transfers>;
}

/**
 * aggregate fields of "stripe_transfers"
 */
export interface stripe_transfers_aggregate_fields {
  __typename: "stripe_transfers_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<stripe_transfers_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<stripe_transfers_max_fields>;
  min?: Maybe<stripe_transfers_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface stripe_transfers_max_fields {
  __typename: "stripe_transfers_max_fields" | undefined;
  amount?: Maybe<ScalarsEnums["String"]>;
  brand_currency?: Maybe<ScalarsEnums["String"]>;
  brand_stripe_id?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  invoice_uuid?: Maybe<ScalarsEnums["uuid"]>;
  stripe_transfer_id?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface stripe_transfers_min_fields {
  __typename: "stripe_transfers_min_fields" | undefined;
  amount?: Maybe<ScalarsEnums["String"]>;
  brand_currency?: Maybe<ScalarsEnums["String"]>;
  brand_stripe_id?: Maybe<ScalarsEnums["String"]>;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  invoice_uuid?: Maybe<ScalarsEnums["uuid"]>;
  stripe_transfer_id?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "stripe_transfers"
 */
export interface stripe_transfers_mutation_response {
  __typename: "stripe_transfers_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<stripe_transfers>;
}

/**
 * columns and relationships of "subscriptions"
 */
export interface subscriptions {
  __typename: "subscriptions" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  date_end: ScalarsEnums["date"];
  date_start: ScalarsEnums["date"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  name: ScalarsEnums["String"];
  quantity: ScalarsEnums["String"];
  stripe_id: ScalarsEnums["String"];
  stripe_status: ScalarsEnums["String"];
  trial_ends_at: ScalarsEnums["date"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "subscriptions"
 */
export interface subscriptions_aggregate {
  __typename: "subscriptions_aggregate" | undefined;
  aggregate?: Maybe<subscriptions_aggregate_fields>;
  nodes: Array<subscriptions>;
}

/**
 * aggregate fields of "subscriptions"
 */
export interface subscriptions_aggregate_fields {
  __typename: "subscriptions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<subscriptions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<subscriptions_max_fields>;
  min?: Maybe<subscriptions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface subscriptions_max_fields {
  __typename: "subscriptions_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface subscriptions_min_fields {
  __typename: "subscriptions_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "subscriptions"
 */
export interface subscriptions_mutation_response {
  __typename: "subscriptions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<subscriptions>;
}

/**
 * Supabase Functions Hooks: Audit trail for triggered hooks.
 *
 *
 * columns and relationships of "supabase_functions.hooks"
 */
export interface supabase_functions_hooks {
  __typename: "supabase_functions_hooks" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  hook_name: ScalarsEnums["String"];
  hook_table_id: ScalarsEnums["Int"];
  id: ScalarsEnums["bigint"];
  request_id?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregated selection of "supabase_functions.hooks"
 */
export interface supabase_functions_hooks_aggregate {
  __typename: "supabase_functions_hooks_aggregate" | undefined;
  aggregate?: Maybe<supabase_functions_hooks_aggregate_fields>;
  nodes: Array<supabase_functions_hooks>;
}

/**
 * aggregate fields of "supabase_functions.hooks"
 */
export interface supabase_functions_hooks_aggregate_fields {
  __typename: "supabase_functions_hooks_aggregate_fields" | undefined;
  avg?: Maybe<supabase_functions_hooks_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<supabase_functions_hooks_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<supabase_functions_hooks_max_fields>;
  min?: Maybe<supabase_functions_hooks_min_fields>;
  stddev?: Maybe<supabase_functions_hooks_stddev_fields>;
  stddev_pop?: Maybe<supabase_functions_hooks_stddev_pop_fields>;
  stddev_samp?: Maybe<supabase_functions_hooks_stddev_samp_fields>;
  sum?: Maybe<supabase_functions_hooks_sum_fields>;
  var_pop?: Maybe<supabase_functions_hooks_var_pop_fields>;
  var_samp?: Maybe<supabase_functions_hooks_var_samp_fields>;
  variance?: Maybe<supabase_functions_hooks_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface supabase_functions_hooks_avg_fields {
  __typename: "supabase_functions_hooks_avg_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface supabase_functions_hooks_max_fields {
  __typename: "supabase_functions_hooks_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  hook_name?: Maybe<ScalarsEnums["String"]>;
  hook_table_id?: Maybe<ScalarsEnums["Int"]>;
  id?: Maybe<ScalarsEnums["bigint"]>;
  request_id?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate min on columns
 */
export interface supabase_functions_hooks_min_fields {
  __typename: "supabase_functions_hooks_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  hook_name?: Maybe<ScalarsEnums["String"]>;
  hook_table_id?: Maybe<ScalarsEnums["Int"]>;
  id?: Maybe<ScalarsEnums["bigint"]>;
  request_id?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * response of any mutation on the table "supabase_functions.hooks"
 */
export interface supabase_functions_hooks_mutation_response {
  __typename: "supabase_functions_hooks_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<supabase_functions_hooks>;
}

/**
 * aggregate stddev on columns
 */
export interface supabase_functions_hooks_stddev_fields {
  __typename: "supabase_functions_hooks_stddev_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface supabase_functions_hooks_stddev_pop_fields {
  __typename: "supabase_functions_hooks_stddev_pop_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface supabase_functions_hooks_stddev_samp_fields {
  __typename: "supabase_functions_hooks_stddev_samp_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface supabase_functions_hooks_sum_fields {
  __typename: "supabase_functions_hooks_sum_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Int"]>;
  id?: Maybe<ScalarsEnums["bigint"]>;
  request_id?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface supabase_functions_hooks_var_pop_fields {
  __typename: "supabase_functions_hooks_var_pop_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface supabase_functions_hooks_var_samp_fields {
  __typename: "supabase_functions_hooks_var_samp_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface supabase_functions_hooks_variance_fields {
  __typename: "supabase_functions_hooks_variance_fields" | undefined;
  hook_table_id?: Maybe<ScalarsEnums["Float"]>;
  id?: Maybe<ScalarsEnums["Float"]>;
  request_id?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "tags"
 */
export interface tags {
  __typename: "tags" | undefined;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  description: ScalarsEnums["String"];
  slug: ScalarsEnums["String"];
  title: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "tags"
 */
export interface tags_aggregate {
  __typename: "tags_aggregate" | undefined;
  aggregate?: Maybe<tags_aggregate_fields>;
  nodes: Array<tags>;
}

/**
 * aggregate fields of "tags"
 */
export interface tags_aggregate_fields {
  __typename: "tags_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<tags_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<tags_max_fields>;
  min?: Maybe<tags_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface tags_max_fields {
  __typename: "tags_max_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface tags_min_fields {
  __typename: "tags_min_fields" | undefined;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  description?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  title?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "tags"
 */
export interface tags_mutation_response {
  __typename: "tags_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<tags>;
}

/**
 * columns and relationships of "team_memberships"
 */
export interface team_memberships {
  __typename: "team_memberships" | undefined;
  accepted: ScalarsEnums["Boolean"];
  created_at: ScalarsEnums["timestamptz"];
  email: ScalarsEnums["String"];
  invited_by_uuid?: Maybe<ScalarsEnums["uuid"]>;
  /**
   * An object relationship
   */
  team: teams;
  /**
   * An array relationship
   */
  team_schedules: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_schedules_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_schedules_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_schedules_bool_exp>;
  }) => Array<team_schedules>;
  /**
   * An aggregate relationship
   */
  team_schedules_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_schedules_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_schedules_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_schedules_bool_exp>;
  }) => team_schedules_aggregate;
  team_uuid: ScalarsEnums["uuid"];
  token: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user?: Maybe<users>;
  /**
   * An object relationship
   */
  userByUserUuid?: Maybe<users>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "team_memberships"
 */
export interface team_memberships_aggregate {
  __typename: "team_memberships_aggregate" | undefined;
  aggregate?: Maybe<team_memberships_aggregate_fields>;
  nodes: Array<team_memberships>;
}

/**
 * aggregate fields of "team_memberships"
 */
export interface team_memberships_aggregate_fields {
  __typename: "team_memberships_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<team_memberships_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<team_memberships_max_fields>;
  min?: Maybe<team_memberships_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface team_memberships_max_fields {
  __typename: "team_memberships_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  invited_by_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_uuid?: Maybe<ScalarsEnums["uuid"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface team_memberships_min_fields {
  __typename: "team_memberships_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  invited_by_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_uuid?: Maybe<ScalarsEnums["uuid"]>;
  token?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "team_memberships"
 */
export interface team_memberships_mutation_response {
  __typename: "team_memberships_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<team_memberships>;
}

/**
 * columns and relationships of "team_roles"
 */
export interface team_roles {
  __typename: "team_roles" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "team_roles"
 */
export interface team_roles_aggregate {
  __typename: "team_roles_aggregate" | undefined;
  aggregate?: Maybe<team_roles_aggregate_fields>;
  nodes: Array<team_roles>;
}

/**
 * aggregate fields of "team_roles"
 */
export interface team_roles_aggregate_fields {
  __typename: "team_roles_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<team_roles_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<team_roles_max_fields>;
  min?: Maybe<team_roles_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface team_roles_max_fields {
  __typename: "team_roles_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface team_roles_min_fields {
  __typename: "team_roles_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "team_roles"
 */
export interface team_roles_mutation_response {
  __typename: "team_roles_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<team_roles>;
}

/**
 * columns and relationships of "team_schedules"
 */
export interface team_schedules {
  __typename: "team_schedules" | undefined;
  brand_uuid: ScalarsEnums["uuid"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  date_schedule: ScalarsEnums["date"];
  guest_uuid: ScalarsEnums["uuid"];
  outlet_uuid: ScalarsEnums["uuid"];
  space_usage_uuid: ScalarsEnums["uuid"];
  space_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  team: teams;
  team_member_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  team_membership: team_memberships;
  team_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "team_schedules"
 */
export interface team_schedules_aggregate {
  __typename: "team_schedules_aggregate" | undefined;
  aggregate?: Maybe<team_schedules_aggregate_fields>;
  nodes: Array<team_schedules>;
}

/**
 * aggregate fields of "team_schedules"
 */
export interface team_schedules_aggregate_fields {
  __typename: "team_schedules_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<team_schedules_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<team_schedules_max_fields>;
  min?: Maybe<team_schedules_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface team_schedules_max_fields {
  __typename: "team_schedules_max_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_schedule?: Maybe<ScalarsEnums["date"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_usage_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_member_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface team_schedules_min_fields {
  __typename: "team_schedules_min_fields" | undefined;
  brand_uuid?: Maybe<ScalarsEnums["uuid"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_schedule?: Maybe<ScalarsEnums["date"]>;
  guest_uuid?: Maybe<ScalarsEnums["uuid"]>;
  outlet_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_usage_uuid?: Maybe<ScalarsEnums["uuid"]>;
  space_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_member_uuid?: Maybe<ScalarsEnums["uuid"]>;
  team_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "team_schedules"
 */
export interface team_schedules_mutation_response {
  __typename: "team_schedules_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<team_schedules>;
}

/**
 * columns and relationships of "team_subscriptions"
 */
export interface team_subscriptions {
  __typename: "team_subscriptions" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "team_subscriptions"
 */
export interface team_subscriptions_aggregate {
  __typename: "team_subscriptions_aggregate" | undefined;
  aggregate?: Maybe<team_subscriptions_aggregate_fields>;
  nodes: Array<team_subscriptions>;
}

/**
 * aggregate fields of "team_subscriptions"
 */
export interface team_subscriptions_aggregate_fields {
  __typename: "team_subscriptions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<team_subscriptions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<team_subscriptions_max_fields>;
  min?: Maybe<team_subscriptions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface team_subscriptions_max_fields {
  __typename: "team_subscriptions_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface team_subscriptions_min_fields {
  __typename: "team_subscriptions_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "team_subscriptions"
 */
export interface team_subscriptions_mutation_response {
  __typename: "team_subscriptions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<team_subscriptions>;
}

/**
 * columns and relationships of "teams"
 */
export interface teams {
  __typename: "teams" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  business_id?: Maybe<ScalarsEnums["String"]>;
  card_brand?: Maybe<ScalarsEnums["String"]>;
  card_country?: Maybe<ScalarsEnums["String"]>;
  card_last_4?: Maybe<ScalarsEnums["String"]>;
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  currency_code: ScalarsEnums["bpchar"];
  current_billing_plan?: Maybe<ScalarsEnums["String"]>;
  locale: ScalarsEnums["String"];
  name: ScalarsEnums["String"];
  /**
   * An array relationship
   */
  roles: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_roles_bool_exp>;
  }) => Array<team_roles>;
  /**
   * An aggregate relationship
   */
  roles_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_roles_bool_exp>;
  }) => team_roles_aggregate;
  slug: ScalarsEnums["String"];
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  subscriptions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_subscriptions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => Array<team_subscriptions>;
  /**
   * An aggregate relationship
   */
  subscriptions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_subscriptions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_subscriptions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_subscriptions_bool_exp>;
  }) => team_subscriptions_aggregate;
  /**
   * An array relationship
   */
  team_memberships: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => Array<team_memberships>;
  /**
   * An aggregate relationship
   */
  team_memberships_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => team_memberships_aggregate;
  /**
   * An array relationship
   */
  team_schedules: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_schedules_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_schedules_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_schedules_bool_exp>;
  }) => Array<team_schedules>;
  /**
   * An aggregate relationship
   */
  team_schedules_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_schedules_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_schedules_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_schedules_bool_exp>;
  }) => team_schedules_aggregate;
  timezone: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "teams"
 */
export interface teams_aggregate {
  __typename: "teams_aggregate" | undefined;
  aggregate?: Maybe<teams_aggregate_fields>;
  nodes: Array<teams>;
}

/**
 * aggregate fields of "teams"
 */
export interface teams_aggregate_fields {
  __typename: "teams_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<teams_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<teams_max_fields>;
  min?: Maybe<teams_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface teams_max_fields {
  __typename: "teams_max_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  business_id?: Maybe<ScalarsEnums["String"]>;
  card_brand?: Maybe<ScalarsEnums["String"]>;
  card_country?: Maybe<ScalarsEnums["String"]>;
  card_last_4?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  current_billing_plan?: Maybe<ScalarsEnums["String"]>;
  locale?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface teams_min_fields {
  __typename: "teams_min_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  business_id?: Maybe<ScalarsEnums["String"]>;
  card_brand?: Maybe<ScalarsEnums["String"]>;
  card_country?: Maybe<ScalarsEnums["String"]>;
  card_last_4?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  current_billing_plan?: Maybe<ScalarsEnums["String"]>;
  locale?: Maybe<ScalarsEnums["String"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  slug?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "teams"
 */
export interface teams_mutation_response {
  __typename: "teams_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<teams>;
}

/**
 * columns and relationships of "user_has_reservations"
 */
export interface user_has_reservations {
  __typename: "user_has_reservations" | undefined;
  reservation_uuid: ScalarsEnums["uuid"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "user_has_reservations"
 */
export interface user_has_reservations_aggregate {
  __typename: "user_has_reservations_aggregate" | undefined;
  aggregate?: Maybe<user_has_reservations_aggregate_fields>;
  nodes: Array<user_has_reservations>;
}

/**
 * aggregate fields of "user_has_reservations"
 */
export interface user_has_reservations_aggregate_fields {
  __typename: "user_has_reservations_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<user_has_reservations_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_has_reservations_max_fields>;
  min?: Maybe<user_has_reservations_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface user_has_reservations_max_fields {
  __typename: "user_has_reservations_max_fields" | undefined;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_has_reservations_min_fields {
  __typename: "user_has_reservations_min_fields" | undefined;
  reservation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_has_reservations"
 */
export interface user_has_reservations_mutation_response {
  __typename: "user_has_reservations_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_has_reservations>;
}

/**
 * columns and relationships of "user_inbox"
 */
export interface user_inbox {
  __typename: "user_inbox" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "user_inbox"
 */
export interface user_inbox_aggregate {
  __typename: "user_inbox_aggregate" | undefined;
  aggregate?: Maybe<user_inbox_aggregate_fields>;
  nodes: Array<user_inbox>;
}

/**
 * aggregate fields of "user_inbox"
 */
export interface user_inbox_aggregate_fields {
  __typename: "user_inbox_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<user_inbox_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_inbox_max_fields>;
  min?: Maybe<user_inbox_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface user_inbox_max_fields {
  __typename: "user_inbox_max_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_inbox_min_fields {
  __typename: "user_inbox_min_fields" | undefined;
  conversation_uuid?: Maybe<ScalarsEnums["uuid"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  pubsub_token?: Maybe<ScalarsEnums["String"]>;
  request_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_inbox"
 */
export interface user_inbox_mutation_response {
  __typename: "user_inbox_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_inbox>;
}

/**
 * columns and relationships of "user_media"
 */
export interface user_media {
  __typename: "user_media" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  properties: (args?: {
    /**
     * JSON select path
     */
    path?: Maybe<Scalars["String"]>;
  }) => Maybe<ScalarsEnums["json"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "user_media"
 */
export interface user_media_aggregate {
  __typename: "user_media_aggregate" | undefined;
  aggregate?: Maybe<user_media_aggregate_fields>;
  nodes: Array<user_media>;
}

/**
 * aggregate fields of "user_media"
 */
export interface user_media_aggregate_fields {
  __typename: "user_media_aggregate_fields" | undefined;
  avg?: Maybe<user_media_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<user_media_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_media_max_fields>;
  min?: Maybe<user_media_min_fields>;
  stddev?: Maybe<user_media_stddev_fields>;
  stddev_pop?: Maybe<user_media_stddev_pop_fields>;
  stddev_samp?: Maybe<user_media_stddev_samp_fields>;
  sum?: Maybe<user_media_sum_fields>;
  var_pop?: Maybe<user_media_var_pop_fields>;
  var_samp?: Maybe<user_media_var_samp_fields>;
  variance?: Maybe<user_media_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface user_media_avg_fields {
  __typename: "user_media_avg_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface user_media_max_fields {
  __typename: "user_media_max_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_media_min_fields {
  __typename: "user_media_min_fields" | undefined;
  collection_name?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  file_name?: Maybe<ScalarsEnums["String"]>;
  index?: Maybe<ScalarsEnums["Int"]>;
  mime_type?: Maybe<ScalarsEnums["String"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  s3_bucket_name?: Maybe<ScalarsEnums["String"]>;
  s3_key?: Maybe<ScalarsEnums["String"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_media"
 */
export interface user_media_mutation_response {
  __typename: "user_media_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_media>;
}

/**
 * aggregate stddev on columns
 */
export interface user_media_stddev_fields {
  __typename: "user_media_stddev_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface user_media_stddev_pop_fields {
  __typename: "user_media_stddev_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface user_media_stddev_samp_fields {
  __typename: "user_media_stddev_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface user_media_sum_fields {
  __typename: "user_media_sum_fields" | undefined;
  index?: Maybe<ScalarsEnums["Int"]>;
  size?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface user_media_var_pop_fields {
  __typename: "user_media_var_pop_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface user_media_var_samp_fields {
  __typename: "user_media_var_samp_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface user_media_variance_fields {
  __typename: "user_media_variance_fields" | undefined;
  index?: Maybe<ScalarsEnums["Float"]>;
  size?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "user_roles"
 */
export interface user_roles {
  __typename: "user_roles" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "user_roles"
 */
export interface user_roles_aggregate {
  __typename: "user_roles_aggregate" | undefined;
  aggregate?: Maybe<user_roles_aggregate_fields>;
  nodes: Array<user_roles>;
}

/**
 * aggregate fields of "user_roles"
 */
export interface user_roles_aggregate_fields {
  __typename: "user_roles_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<user_roles_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_roles_max_fields>;
  min?: Maybe<user_roles_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface user_roles_max_fields {
  __typename: "user_roles_max_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_roles_min_fields {
  __typename: "user_roles_min_fields" | undefined;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  role_uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_roles"
 */
export interface user_roles_mutation_response {
  __typename: "user_roles_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_roles>;
}

/**
 * columns and relationships of "user_sessions"
 */
export interface user_sessions {
  __typename: "user_sessions" | undefined;
  brand: ScalarsEnums["String"];
  country_code: ScalarsEnums["bpchar"];
  created_at: ScalarsEnums["timestamptz"];
  device_name: ScalarsEnums["String"];
  device_year_class: ScalarsEnums["String"];
  duration: ScalarsEnums["bigint"];
  hostname: ScalarsEnums["String"];
  ip_address: ScalarsEnums["String"];
  manufacturer: ScalarsEnums["String"];
  model_id: ScalarsEnums["String"];
  model_name: ScalarsEnums["String"];
  native_app_version: ScalarsEnums["String"];
  native_build_version: ScalarsEnums["String"];
  os_build_fingerprint: ScalarsEnums["String"];
  os_build_id: ScalarsEnums["String"];
  os_internal_build_id: ScalarsEnums["String"];
  os_name: ScalarsEnums["String"];
  os_version: ScalarsEnums["String"];
  platform: ScalarsEnums["String"];
  platform_api_level: ScalarsEnums["String"];
  product_name: ScalarsEnums["String"];
  status_bar_height: ScalarsEnums["String"];
  total_memory: ScalarsEnums["String"];
  updated_at: ScalarsEnums["timestamptz"];
  user_agent: ScalarsEnums["String"];
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "user_sessions"
 */
export interface user_sessions_aggregate {
  __typename: "user_sessions_aggregate" | undefined;
  aggregate?: Maybe<user_sessions_aggregate_fields>;
  nodes: Array<user_sessions>;
}

/**
 * aggregate fields of "user_sessions"
 */
export interface user_sessions_aggregate_fields {
  __typename: "user_sessions_aggregate_fields" | undefined;
  avg?: Maybe<user_sessions_avg_fields>;
  count: (args?: {
    columns?: Maybe<Array<user_sessions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_sessions_max_fields>;
  min?: Maybe<user_sessions_min_fields>;
  stddev?: Maybe<user_sessions_stddev_fields>;
  stddev_pop?: Maybe<user_sessions_stddev_pop_fields>;
  stddev_samp?: Maybe<user_sessions_stddev_samp_fields>;
  sum?: Maybe<user_sessions_sum_fields>;
  var_pop?: Maybe<user_sessions_var_pop_fields>;
  var_samp?: Maybe<user_sessions_var_samp_fields>;
  variance?: Maybe<user_sessions_variance_fields>;
}

/**
 * aggregate avg on columns
 */
export interface user_sessions_avg_fields {
  __typename: "user_sessions_avg_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate max on columns
 */
export interface user_sessions_max_fields {
  __typename: "user_sessions_max_fields" | undefined;
  brand?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  device_name?: Maybe<ScalarsEnums["String"]>;
  device_year_class?: Maybe<ScalarsEnums["String"]>;
  duration?: Maybe<ScalarsEnums["bigint"]>;
  hostname?: Maybe<ScalarsEnums["String"]>;
  ip_address?: Maybe<ScalarsEnums["String"]>;
  manufacturer?: Maybe<ScalarsEnums["String"]>;
  model_id?: Maybe<ScalarsEnums["String"]>;
  model_name?: Maybe<ScalarsEnums["String"]>;
  native_app_version?: Maybe<ScalarsEnums["String"]>;
  native_build_version?: Maybe<ScalarsEnums["String"]>;
  os_build_fingerprint?: Maybe<ScalarsEnums["String"]>;
  os_build_id?: Maybe<ScalarsEnums["String"]>;
  os_internal_build_id?: Maybe<ScalarsEnums["String"]>;
  os_name?: Maybe<ScalarsEnums["String"]>;
  os_version?: Maybe<ScalarsEnums["String"]>;
  platform?: Maybe<ScalarsEnums["String"]>;
  platform_api_level?: Maybe<ScalarsEnums["String"]>;
  product_name?: Maybe<ScalarsEnums["String"]>;
  status_bar_height?: Maybe<ScalarsEnums["String"]>;
  total_memory?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_agent?: Maybe<ScalarsEnums["String"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_sessions_min_fields {
  __typename: "user_sessions_min_fields" | undefined;
  brand?: Maybe<ScalarsEnums["String"]>;
  country_code?: Maybe<ScalarsEnums["bpchar"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  device_name?: Maybe<ScalarsEnums["String"]>;
  device_year_class?: Maybe<ScalarsEnums["String"]>;
  duration?: Maybe<ScalarsEnums["bigint"]>;
  hostname?: Maybe<ScalarsEnums["String"]>;
  ip_address?: Maybe<ScalarsEnums["String"]>;
  manufacturer?: Maybe<ScalarsEnums["String"]>;
  model_id?: Maybe<ScalarsEnums["String"]>;
  model_name?: Maybe<ScalarsEnums["String"]>;
  native_app_version?: Maybe<ScalarsEnums["String"]>;
  native_build_version?: Maybe<ScalarsEnums["String"]>;
  os_build_fingerprint?: Maybe<ScalarsEnums["String"]>;
  os_build_id?: Maybe<ScalarsEnums["String"]>;
  os_internal_build_id?: Maybe<ScalarsEnums["String"]>;
  os_name?: Maybe<ScalarsEnums["String"]>;
  os_version?: Maybe<ScalarsEnums["String"]>;
  platform?: Maybe<ScalarsEnums["String"]>;
  platform_api_level?: Maybe<ScalarsEnums["String"]>;
  product_name?: Maybe<ScalarsEnums["String"]>;
  status_bar_height?: Maybe<ScalarsEnums["String"]>;
  total_memory?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_agent?: Maybe<ScalarsEnums["String"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_sessions"
 */
export interface user_sessions_mutation_response {
  __typename: "user_sessions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_sessions>;
}

/**
 * aggregate stddev on columns
 */
export interface user_sessions_stddev_fields {
  __typename: "user_sessions_stddev_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_pop on columns
 */
export interface user_sessions_stddev_pop_fields {
  __typename: "user_sessions_stddev_pop_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate stddev_samp on columns
 */
export interface user_sessions_stddev_samp_fields {
  __typename: "user_sessions_stddev_samp_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate sum on columns
 */
export interface user_sessions_sum_fields {
  __typename: "user_sessions_sum_fields" | undefined;
  duration?: Maybe<ScalarsEnums["bigint"]>;
}

/**
 * aggregate var_pop on columns
 */
export interface user_sessions_var_pop_fields {
  __typename: "user_sessions_var_pop_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate var_samp on columns
 */
export interface user_sessions_var_samp_fields {
  __typename: "user_sessions_var_samp_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * aggregate variance on columns
 */
export interface user_sessions_variance_fields {
  __typename: "user_sessions_variance_fields" | undefined;
  duration?: Maybe<ScalarsEnums["Float"]>;
}

/**
 * columns and relationships of "user_subscriptions"
 */
export interface user_subscriptions {
  __typename: "user_subscriptions" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregated selection of "user_subscriptions"
 */
export interface user_subscriptions_aggregate {
  __typename: "user_subscriptions_aggregate" | undefined;
  aggregate?: Maybe<user_subscriptions_aggregate_fields>;
  nodes: Array<user_subscriptions>;
}

/**
 * aggregate fields of "user_subscriptions"
 */
export interface user_subscriptions_aggregate_fields {
  __typename: "user_subscriptions_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<user_subscriptions_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<user_subscriptions_max_fields>;
  min?: Maybe<user_subscriptions_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface user_subscriptions_max_fields {
  __typename: "user_subscriptions_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface user_subscriptions_min_fields {
  __typename: "user_subscriptions_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  date_end?: Maybe<ScalarsEnums["date"]>;
  date_start?: Maybe<ScalarsEnums["date"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  name?: Maybe<ScalarsEnums["String"]>;
  quantity?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  stripe_status?: Maybe<ScalarsEnums["String"]>;
  trial_ends_at?: Maybe<ScalarsEnums["date"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "user_subscriptions"
 */
export interface user_subscriptions_mutation_response {
  __typename: "user_subscriptions_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<user_subscriptions>;
}

/**
 * columns and relationships of "users"
 */
export interface users {
  __typename: "users" | undefined;
  /**
   * An object relationship
   */
  avatar?: Maybe<user_media>;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  brand_users: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_users_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_users_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_users_bool_exp>;
  }) => Array<brand_users>;
  /**
   * An aggregate relationship
   */
  brand_users_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<brand_users_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<brand_users_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<brand_users_bool_exp>;
  }) => brand_users_aggregate;
  /**
   * An array relationship
   */
  cards: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<card_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<card_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<card_bool_exp>;
  }) => Array<card>;
  /**
   * An aggregate relationship
   */
  cards_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<card_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<card_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<card_bool_exp>;
  }) => card_aggregate;
  /**
   * An array relationship
   */
  conversations: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<conversations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<conversations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<conversations_bool_exp>;
  }) => Array<conversations>;
  /**
   * An aggregate relationship
   */
  conversations_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<conversations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<conversations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<conversations_bool_exp>;
  }) => conversations_aggregate;
  country_birth_code?: Maybe<ScalarsEnums["String"]>;
  created_at: ScalarsEnums["timestamptz"];
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  date_birth?: Maybe<ScalarsEnums["date"]>;
  /**
   * An array relationship
   */
  discussion_users: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discussion_user_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discussion_user_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discussion_user_bool_exp>;
  }) => Array<discussion_user>;
  /**
   * An aggregate relationship
   */
  discussion_users_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<discussion_user_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<discussion_user_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<discussion_user_bool_exp>;
  }) => discussion_user_aggregate;
  display_name?: Maybe<ScalarsEnums["String"]>;
  email: ScalarsEnums["String"];
  email_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  full_name?: Maybe<ScalarsEnums["String"]>;
  gender?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  guests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => Array<guests>;
  /**
   * An aggregate relationship
   */
  guests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<guests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<guests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<guests_bool_exp>;
  }) => guests_aggregate;
  /**
   * An object relationship
   */
  inbox?: Maybe<user_inbox>;
  last_read_announcement_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_seen_at?: Maybe<ScalarsEnums["timestamptz"]>;
  locale?: Maybe<ScalarsEnums["bpchar"]>;
  /**
   * An array relationship
   */
  logs: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<logs_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<logs_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<logs_bool_exp>;
  }) => Array<logs>;
  /**
   * An aggregate relationship
   */
  logs_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<logs_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<logs_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<logs_bool_exp>;
  }) => logs_aggregate;
  mobile_no?: Maybe<ScalarsEnums["String"]>;
  mobile_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  /**
   * An array relationship
   */
  model_has_comments: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => Array<model_has_comments>;
  /**
   * An aggregate relationship
   */
  model_has_comments_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_comments_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_comments_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_comments_bool_exp>;
  }) => model_has_comments_aggregate;
  /**
   * An array relationship
   */
  model_has_likes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => Array<model_has_likes>;
  /**
   * An aggregate relationship
   */
  model_has_likes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<model_has_likes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<model_has_likes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<model_has_likes_bool_exp>;
  }) => model_has_likes_aggregate;
  nationality?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  notifications: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<notifications_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<notifications_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<notifications_bool_exp>;
  }) => Array<notifications>;
  /**
   * An aggregate relationship
   */
  notifications_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<notifications_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<notifications_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<notifications_bool_exp>;
  }) => notifications_aggregate;
  /**
   * An array relationship
   */
  passes: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => Array<passes>;
  /**
   * An aggregate relationship
   */
  passes_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<passes_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<passes_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<passes_bool_exp>;
  }) => passes_aggregate;
  password?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  posts: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<posts_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<posts_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<posts_bool_exp>;
  }) => Array<posts>;
  /**
   * An aggregate relationship
   */
  posts_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<posts_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<posts_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<posts_bool_exp>;
  }) => posts_aggregate;
  /**
   * An array relationship
   */
  requests: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => Array<requests>;
  /**
   * An aggregate relationship
   */
  requests_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<requests_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<requests_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<requests_bool_exp>;
  }) => requests_aggregate;
  /**
   * An array relationship
   */
  reviews: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => Array<reviews>;
  /**
   * An aggregate relationship
   */
  reviews_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<reviews_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<reviews_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<reviews_bool_exp>;
  }) => reviews_aggregate;
  /**
   * An array relationship
   */
  roles: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_roles_bool_exp>;
  }) => Array<user_roles>;
  /**
   * An aggregate relationship
   */
  roles_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_roles_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_roles_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_roles_bool_exp>;
  }) => user_roles_aggregate;
  /**
   * An array relationship
   */
  socialRelationshipsByFollowerUuid: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<social_relationships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<social_relationships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<social_relationships_bool_exp>;
  }) => Array<social_relationships>;
  /**
   * An aggregate relationship
   */
  socialRelationshipsByFollowerUuid_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<social_relationships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<social_relationships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<social_relationships_bool_exp>;
  }) => social_relationships_aggregate;
  /**
   * An array relationship
   */
  social_relationships: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<social_relationships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<social_relationships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<social_relationships_bool_exp>;
  }) => Array<social_relationships>;
  /**
   * An aggregate relationship
   */
  social_relationships_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<social_relationships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<social_relationships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<social_relationships_bool_exp>;
  }) => social_relationships_aggregate;
  /**
   * An array relationship
   */
  spaces_usages: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => Array<spaces_usage>;
  /**
   * An aggregate relationship
   */
  spaces_usages_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<spaces_usage_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<spaces_usage_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<spaces_usage_bool_exp>;
  }) => spaces_usage_aggregate;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  /**
   * An array relationship
   */
  subscriptions: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_subscriptions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => Array<user_subscriptions>;
  /**
   * An aggregate relationship
   */
  subscriptions_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_subscriptions_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_subscriptions_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_subscriptions_bool_exp>;
  }) => user_subscriptions_aggregate;
  /**
   * An array relationship
   */
  teamMembershipsByUserUuid: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => Array<team_memberships>;
  /**
   * An aggregate relationship
   */
  teamMembershipsByUserUuid_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => team_memberships_aggregate;
  /**
   * An array relationship
   */
  team_memberships: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => Array<team_memberships>;
  /**
   * An aggregate relationship
   */
  team_memberships_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<team_memberships_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<team_memberships_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<team_memberships_bool_exp>;
  }) => team_memberships_aggregate;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An array relationship
   */
  user_has_reservations: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_has_reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => Array<user_has_reservations>;
  /**
   * An aggregate relationship
   */
  user_has_reservations_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<user_has_reservations_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<user_has_reservations_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<user_has_reservations_bool_exp>;
  }) => user_has_reservations_aggregate;
  username?: Maybe<ScalarsEnums["String"]>;
  uuid: ScalarsEnums["uuid"];
  /**
   * An array relationship
   */
  wishlists: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<wishlist_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<wishlist_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<wishlist_bool_exp>;
  }) => Array<wishlist>;
  /**
   * An aggregate relationship
   */
  wishlists_aggregate: (args?: {
    /**
     * distinct select on columns
     */
    distinct_on?: Maybe<Array<wishlist_select_column>>
    /**
     * limit the number of rows returned
     */;
    limit?: Maybe<Scalars["Int"]>
    /**
     * skip the first n rows. Use only with order_by
     */;
    offset?: Maybe<Scalars["Int"]>
    /**
     * sort the rows by one or more columns
     */;
    order_by?: Maybe<Array<wishlist_order_by>>
    /**
     * filter the rows returned
     */;
    where?: Maybe<wishlist_bool_exp>;
  }) => wishlist_aggregate;
}

/**
 * aggregated selection of "users"
 */
export interface users_aggregate {
  __typename: "users_aggregate" | undefined;
  aggregate?: Maybe<users_aggregate_fields>;
  nodes: Array<users>;
}

/**
 * aggregate fields of "users"
 */
export interface users_aggregate_fields {
  __typename: "users_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<users_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<users_max_fields>;
  min?: Maybe<users_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface users_max_fields {
  __typename: "users_max_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  country_birth_code?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  date_birth?: Maybe<ScalarsEnums["date"]>;
  display_name?: Maybe<ScalarsEnums["String"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  email_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  full_name?: Maybe<ScalarsEnums["String"]>;
  gender?: Maybe<ScalarsEnums["String"]>;
  last_read_announcement_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_seen_at?: Maybe<ScalarsEnums["timestamptz"]>;
  locale?: Maybe<ScalarsEnums["bpchar"]>;
  mobile_no?: Maybe<ScalarsEnums["String"]>;
  mobile_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  nationality?: Maybe<ScalarsEnums["String"]>;
  password?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  username?: Maybe<ScalarsEnums["String"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface users_min_fields {
  __typename: "users_min_fields" | undefined;
  avatar_url?: Maybe<ScalarsEnums["String"]>;
  billing_address?: Maybe<ScalarsEnums["String"]>;
  billing_address_2?: Maybe<ScalarsEnums["String"]>;
  billing_city?: Maybe<ScalarsEnums["String"]>;
  billing_country_code?: Maybe<ScalarsEnums["String"]>;
  billing_state?: Maybe<ScalarsEnums["String"]>;
  billing_zip?: Maybe<ScalarsEnums["String"]>;
  bio?: Maybe<ScalarsEnums["String"]>;
  country_birth_code?: Maybe<ScalarsEnums["String"]>;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  currency_code?: Maybe<ScalarsEnums["bpchar"]>;
  date_birth?: Maybe<ScalarsEnums["date"]>;
  display_name?: Maybe<ScalarsEnums["String"]>;
  email?: Maybe<ScalarsEnums["String"]>;
  email_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  full_name?: Maybe<ScalarsEnums["String"]>;
  gender?: Maybe<ScalarsEnums["String"]>;
  last_read_announcement_at?: Maybe<ScalarsEnums["timestamptz"]>;
  last_seen_at?: Maybe<ScalarsEnums["timestamptz"]>;
  locale?: Maybe<ScalarsEnums["bpchar"]>;
  mobile_no?: Maybe<ScalarsEnums["String"]>;
  mobile_verified_at?: Maybe<ScalarsEnums["timestamptz"]>;
  nationality?: Maybe<ScalarsEnums["String"]>;
  password?: Maybe<ScalarsEnums["String"]>;
  stripe_id?: Maybe<ScalarsEnums["String"]>;
  timezone?: Maybe<ScalarsEnums["String"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  username?: Maybe<ScalarsEnums["String"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "users"
 */
export interface users_mutation_response {
  __typename: "users_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<users>;
}

/**
 * columns and relationships of "wishlist"
 */
export interface wishlist {
  __typename: "wishlist" | undefined;
  created_at: ScalarsEnums["timestamptz"];
  model_type: ScalarsEnums["String"];
  model_uuid: ScalarsEnums["uuid"];
  updated_at: ScalarsEnums["timestamptz"];
  /**
   * An object relationship
   */
  user: users;
  user_uuid: ScalarsEnums["uuid"];
  uuid: ScalarsEnums["uuid"];
}

/**
 * aggregated selection of "wishlist"
 */
export interface wishlist_aggregate {
  __typename: "wishlist_aggregate" | undefined;
  aggregate?: Maybe<wishlist_aggregate_fields>;
  nodes: Array<wishlist>;
}

/**
 * aggregate fields of "wishlist"
 */
export interface wishlist_aggregate_fields {
  __typename: "wishlist_aggregate_fields" | undefined;
  count: (args?: {
    columns?: Maybe<Array<wishlist_select_column>>;
    distinct?: Maybe<Scalars["Boolean"]>;
  }) => ScalarsEnums["Int"];
  max?: Maybe<wishlist_max_fields>;
  min?: Maybe<wishlist_min_fields>;
}

/**
 * aggregate max on columns
 */
export interface wishlist_max_fields {
  __typename: "wishlist_max_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * aggregate min on columns
 */
export interface wishlist_min_fields {
  __typename: "wishlist_min_fields" | undefined;
  created_at?: Maybe<ScalarsEnums["timestamptz"]>;
  model_type?: Maybe<ScalarsEnums["String"]>;
  model_uuid?: Maybe<ScalarsEnums["uuid"]>;
  updated_at?: Maybe<ScalarsEnums["timestamptz"]>;
  user_uuid?: Maybe<ScalarsEnums["uuid"]>;
  uuid?: Maybe<ScalarsEnums["uuid"]>;
}

/**
 * response of any mutation on the table "wishlist"
 */
export interface wishlist_mutation_response {
  __typename: "wishlist_mutation_response" | undefined;
  /**
   * number of rows affected by the mutation
   */
  affected_rows: ScalarsEnums["Int"];
  /**
   * data from the rows affected by the mutation
   */
  returning: Array<wishlist>;
}

export interface SchemaObjectTypes {
  Query: Query;
  Mutation: Mutation;
  Subscription: Subscription;
  activity_logs: activity_logs;
  activity_logs_aggregate: activity_logs_aggregate;
  activity_logs_aggregate_fields: activity_logs_aggregate_fields;
  activity_logs_max_fields: activity_logs_max_fields;
  activity_logs_min_fields: activity_logs_min_fields;
  activity_logs_mutation_response: activity_logs_mutation_response;
  aruba_wifi_access: aruba_wifi_access;
  aruba_wifi_access_aggregate: aruba_wifi_access_aggregate;
  aruba_wifi_access_aggregate_fields: aruba_wifi_access_aggregate_fields;
  aruba_wifi_access_max_fields: aruba_wifi_access_max_fields;
  aruba_wifi_access_min_fields: aruba_wifi_access_min_fields;
  aruba_wifi_access_mutation_response: aruba_wifi_access_mutation_response;
  auth_audit_log_entries: auth_audit_log_entries;
  auth_audit_log_entries_aggregate: auth_audit_log_entries_aggregate;
  auth_audit_log_entries_aggregate_fields: auth_audit_log_entries_aggregate_fields;
  auth_audit_log_entries_max_fields: auth_audit_log_entries_max_fields;
  auth_audit_log_entries_min_fields: auth_audit_log_entries_min_fields;
  auth_audit_log_entries_mutation_response: auth_audit_log_entries_mutation_response;
  auth_instances: auth_instances;
  auth_instances_aggregate: auth_instances_aggregate;
  auth_instances_aggregate_fields: auth_instances_aggregate_fields;
  auth_instances_max_fields: auth_instances_max_fields;
  auth_instances_min_fields: auth_instances_min_fields;
  auth_instances_mutation_response: auth_instances_mutation_response;
  auth_refresh_tokens: auth_refresh_tokens;
  auth_refresh_tokens_aggregate: auth_refresh_tokens_aggregate;
  auth_refresh_tokens_aggregate_fields: auth_refresh_tokens_aggregate_fields;
  auth_refresh_tokens_avg_fields: auth_refresh_tokens_avg_fields;
  auth_refresh_tokens_max_fields: auth_refresh_tokens_max_fields;
  auth_refresh_tokens_min_fields: auth_refresh_tokens_min_fields;
  auth_refresh_tokens_mutation_response: auth_refresh_tokens_mutation_response;
  auth_refresh_tokens_stddev_fields: auth_refresh_tokens_stddev_fields;
  auth_refresh_tokens_stddev_pop_fields: auth_refresh_tokens_stddev_pop_fields;
  auth_refresh_tokens_stddev_samp_fields: auth_refresh_tokens_stddev_samp_fields;
  auth_refresh_tokens_sum_fields: auth_refresh_tokens_sum_fields;
  auth_refresh_tokens_var_pop_fields: auth_refresh_tokens_var_pop_fields;
  auth_refresh_tokens_var_samp_fields: auth_refresh_tokens_var_samp_fields;
  auth_refresh_tokens_variance_fields: auth_refresh_tokens_variance_fields;
  auth_schema_migrations: auth_schema_migrations;
  auth_schema_migrations_aggregate: auth_schema_migrations_aggregate;
  auth_schema_migrations_aggregate_fields: auth_schema_migrations_aggregate_fields;
  auth_schema_migrations_max_fields: auth_schema_migrations_max_fields;
  auth_schema_migrations_min_fields: auth_schema_migrations_min_fields;
  auth_schema_migrations_mutation_response: auth_schema_migrations_mutation_response;
  auth_users: auth_users;
  auth_users_aggregate: auth_users_aggregate;
  auth_users_aggregate_fields: auth_users_aggregate_fields;
  auth_users_avg_fields: auth_users_avg_fields;
  auth_users_max_fields: auth_users_max_fields;
  auth_users_min_fields: auth_users_min_fields;
  auth_users_mutation_response: auth_users_mutation_response;
  auth_users_stddev_fields: auth_users_stddev_fields;
  auth_users_stddev_pop_fields: auth_users_stddev_pop_fields;
  auth_users_stddev_samp_fields: auth_users_stddev_samp_fields;
  auth_users_sum_fields: auth_users_sum_fields;
  auth_users_var_pop_fields: auth_users_var_pop_fields;
  auth_users_var_samp_fields: auth_users_var_samp_fields;
  auth_users_variance_fields: auth_users_variance_fields;
  brand_campaigns: brand_campaigns;
  brand_campaigns_aggregate: brand_campaigns_aggregate;
  brand_campaigns_aggregate_fields: brand_campaigns_aggregate_fields;
  brand_campaigns_max_fields: brand_campaigns_max_fields;
  brand_campaigns_min_fields: brand_campaigns_min_fields;
  brand_campaigns_mutation_response: brand_campaigns_mutation_response;
  brand_discussions: brand_discussions;
  brand_discussions_aggregate: brand_discussions_aggregate;
  brand_discussions_aggregate_fields: brand_discussions_aggregate_fields;
  brand_discussions_avg_fields: brand_discussions_avg_fields;
  brand_discussions_max_fields: brand_discussions_max_fields;
  brand_discussions_min_fields: brand_discussions_min_fields;
  brand_discussions_mutation_response: brand_discussions_mutation_response;
  brand_discussions_stddev_fields: brand_discussions_stddev_fields;
  brand_discussions_stddev_pop_fields: brand_discussions_stddev_pop_fields;
  brand_discussions_stddev_samp_fields: brand_discussions_stddev_samp_fields;
  brand_discussions_sum_fields: brand_discussions_sum_fields;
  brand_discussions_var_pop_fields: brand_discussions_var_pop_fields;
  brand_discussions_var_samp_fields: brand_discussions_var_samp_fields;
  brand_discussions_variance_fields: brand_discussions_variance_fields;
  brand_inbox: brand_inbox;
  brand_inbox_aggregate: brand_inbox_aggregate;
  brand_inbox_aggregate_fields: brand_inbox_aggregate_fields;
  brand_inbox_max_fields: brand_inbox_max_fields;
  brand_inbox_min_fields: brand_inbox_min_fields;
  brand_inbox_mutation_response: brand_inbox_mutation_response;
  brand_media: brand_media;
  brand_media_aggregate: brand_media_aggregate;
  brand_media_aggregate_fields: brand_media_aggregate_fields;
  brand_media_avg_fields: brand_media_avg_fields;
  brand_media_max_fields: brand_media_max_fields;
  brand_media_min_fields: brand_media_min_fields;
  brand_media_mutation_response: brand_media_mutation_response;
  brand_media_stddev_fields: brand_media_stddev_fields;
  brand_media_stddev_pop_fields: brand_media_stddev_pop_fields;
  brand_media_stddev_samp_fields: brand_media_stddev_samp_fields;
  brand_media_sum_fields: brand_media_sum_fields;
  brand_media_var_pop_fields: brand_media_var_pop_fields;
  brand_media_var_samp_fields: brand_media_var_samp_fields;
  brand_media_variance_fields: brand_media_variance_fields;
  brand_tags: brand_tags;
  brand_tags_aggregate: brand_tags_aggregate;
  brand_tags_aggregate_fields: brand_tags_aggregate_fields;
  brand_tags_max_fields: brand_tags_max_fields;
  brand_tags_min_fields: brand_tags_min_fields;
  brand_tags_mutation_response: brand_tags_mutation_response;
  brand_users: brand_users;
  brand_users_aggregate: brand_users_aggregate;
  brand_users_aggregate_fields: brand_users_aggregate_fields;
  brand_users_max_fields: brand_users_max_fields;
  brand_users_min_fields: brand_users_min_fields;
  brand_users_mutation_response: brand_users_mutation_response;
  brand_wishes: brand_wishes;
  brand_wishes_aggregate: brand_wishes_aggregate;
  brand_wishes_aggregate_fields: brand_wishes_aggregate_fields;
  brand_wishes_max_fields: brand_wishes_max_fields;
  brand_wishes_min_fields: brand_wishes_min_fields;
  brand_wishes_mutation_response: brand_wishes_mutation_response;
  brands: brands;
  brands_aggregate: brands_aggregate;
  brands_aggregate_fields: brands_aggregate_fields;
  brands_max_fields: brands_max_fields;
  brands_min_fields: brands_min_fields;
  brands_mutation_response: brands_mutation_response;
  campaigns: campaigns;
  campaigns_aggregate: campaigns_aggregate;
  campaigns_aggregate_fields: campaigns_aggregate_fields;
  campaigns_max_fields: campaigns_max_fields;
  campaigns_min_fields: campaigns_min_fields;
  campaigns_mutation_response: campaigns_mutation_response;
  card: card;
  card_aggregate: card_aggregate;
  card_aggregate_fields: card_aggregate_fields;
  card_max_fields: card_max_fields;
  card_min_fields: card_min_fields;
  card_mutation_response: card_mutation_response;
  comment_comments: comment_comments;
  comment_comments_aggregate: comment_comments_aggregate;
  comment_comments_aggregate_fields: comment_comments_aggregate_fields;
  comment_comments_max_fields: comment_comments_max_fields;
  comment_comments_min_fields: comment_comments_min_fields;
  comment_comments_mutation_response: comment_comments_mutation_response;
  comment_likes: comment_likes;
  comment_likes_aggregate: comment_likes_aggregate;
  comment_likes_aggregate_fields: comment_likes_aggregate_fields;
  comment_likes_max_fields: comment_likes_max_fields;
  comment_likes_min_fields: comment_likes_min_fields;
  comment_likes_mutation_response: comment_likes_mutation_response;
  conversations: conversations;
  conversations_aggregate: conversations_aggregate;
  conversations_aggregate_fields: conversations_aggregate_fields;
  conversations_max_fields: conversations_max_fields;
  conversations_min_fields: conversations_min_fields;
  conversations_mutation_response: conversations_mutation_response;
  currencies: currencies;
  currencies_aggregate: currencies_aggregate;
  currencies_aggregate_fields: currencies_aggregate_fields;
  currencies_max_fields: currencies_max_fields;
  currencies_min_fields: currencies_min_fields;
  currencies_mutation_response: currencies_mutation_response;
  daily_rates: daily_rates;
  daily_rates_aggregate: daily_rates_aggregate;
  daily_rates_aggregate_fields: daily_rates_aggregate_fields;
  daily_rates_avg_fields: daily_rates_avg_fields;
  daily_rates_max_fields: daily_rates_max_fields;
  daily_rates_min_fields: daily_rates_min_fields;
  daily_rates_mutation_response: daily_rates_mutation_response;
  daily_rates_stddev_fields: daily_rates_stddev_fields;
  daily_rates_stddev_pop_fields: daily_rates_stddev_pop_fields;
  daily_rates_stddev_samp_fields: daily_rates_stddev_samp_fields;
  daily_rates_sum_fields: daily_rates_sum_fields;
  daily_rates_var_pop_fields: daily_rates_var_pop_fields;
  daily_rates_var_samp_fields: daily_rates_var_samp_fields;
  daily_rates_variance_fields: daily_rates_variance_fields;
  default_addons: default_addons;
  default_addons_aggregate: default_addons_aggregate;
  default_addons_aggregate_fields: default_addons_aggregate_fields;
  default_addons_avg_fields: default_addons_avg_fields;
  default_addons_max_fields: default_addons_max_fields;
  default_addons_min_fields: default_addons_min_fields;
  default_addons_mutation_response: default_addons_mutation_response;
  default_addons_stddev_fields: default_addons_stddev_fields;
  default_addons_stddev_pop_fields: default_addons_stddev_pop_fields;
  default_addons_stddev_samp_fields: default_addons_stddev_samp_fields;
  default_addons_sum_fields: default_addons_sum_fields;
  default_addons_var_pop_fields: default_addons_var_pop_fields;
  default_addons_var_samp_fields: default_addons_var_samp_fields;
  default_addons_variance_fields: default_addons_variance_fields;
  discount_codes: discount_codes;
  discount_codes_aggregate: discount_codes_aggregate;
  discount_codes_aggregate_fields: discount_codes_aggregate_fields;
  discount_codes_avg_fields: discount_codes_avg_fields;
  discount_codes_max_fields: discount_codes_max_fields;
  discount_codes_min_fields: discount_codes_min_fields;
  discount_codes_mutation_response: discount_codes_mutation_response;
  discount_codes_stddev_fields: discount_codes_stddev_fields;
  discount_codes_stddev_pop_fields: discount_codes_stddev_pop_fields;
  discount_codes_stddev_samp_fields: discount_codes_stddev_samp_fields;
  discount_codes_sum_fields: discount_codes_sum_fields;
  discount_codes_var_pop_fields: discount_codes_var_pop_fields;
  discount_codes_var_samp_fields: discount_codes_var_samp_fields;
  discount_codes_variance_fields: discount_codes_variance_fields;
  discussion_user: discussion_user;
  discussion_user_aggregate: discussion_user_aggregate;
  discussion_user_aggregate_fields: discussion_user_aggregate_fields;
  discussion_user_max_fields: discussion_user_max_fields;
  discussion_user_min_fields: discussion_user_min_fields;
  discussion_user_mutation_response: discussion_user_mutation_response;
  discussions: discussions;
  discussions_aggregate: discussions_aggregate;
  discussions_aggregate_fields: discussions_aggregate_fields;
  discussions_avg_fields: discussions_avg_fields;
  discussions_max_fields: discussions_max_fields;
  discussions_min_fields: discussions_min_fields;
  discussions_mutation_response: discussions_mutation_response;
  discussions_stddev_fields: discussions_stddev_fields;
  discussions_stddev_pop_fields: discussions_stddev_pop_fields;
  discussions_stddev_samp_fields: discussions_stddev_samp_fields;
  discussions_sum_fields: discussions_sum_fields;
  discussions_var_pop_fields: discussions_var_pop_fields;
  discussions_var_samp_fields: discussions_var_samp_fields;
  discussions_variance_fields: discussions_variance_fields;
  extensions: extensions;
  extensions_aggregate: extensions_aggregate;
  extensions_aggregate_fields: extensions_aggregate_fields;
  extensions_avg_fields: extensions_avg_fields;
  extensions_geography_columns: extensions_geography_columns;
  extensions_geography_columns_aggregate: extensions_geography_columns_aggregate;
  extensions_geography_columns_aggregate_fields: extensions_geography_columns_aggregate_fields;
  extensions_geography_columns_avg_fields: extensions_geography_columns_avg_fields;
  extensions_geography_columns_max_fields: extensions_geography_columns_max_fields;
  extensions_geography_columns_min_fields: extensions_geography_columns_min_fields;
  extensions_geography_columns_stddev_fields: extensions_geography_columns_stddev_fields;
  extensions_geography_columns_stddev_pop_fields: extensions_geography_columns_stddev_pop_fields;
  extensions_geography_columns_stddev_samp_fields: extensions_geography_columns_stddev_samp_fields;
  extensions_geography_columns_sum_fields: extensions_geography_columns_sum_fields;
  extensions_geography_columns_var_pop_fields: extensions_geography_columns_var_pop_fields;
  extensions_geography_columns_var_samp_fields: extensions_geography_columns_var_samp_fields;
  extensions_geography_columns_variance_fields: extensions_geography_columns_variance_fields;
  extensions_geometry_columns: extensions_geometry_columns;
  extensions_geometry_columns_aggregate: extensions_geometry_columns_aggregate;
  extensions_geometry_columns_aggregate_fields: extensions_geometry_columns_aggregate_fields;
  extensions_geometry_columns_avg_fields: extensions_geometry_columns_avg_fields;
  extensions_geometry_columns_max_fields: extensions_geometry_columns_max_fields;
  extensions_geometry_columns_min_fields: extensions_geometry_columns_min_fields;
  extensions_geometry_columns_mutation_response: extensions_geometry_columns_mutation_response;
  extensions_geometry_columns_stddev_fields: extensions_geometry_columns_stddev_fields;
  extensions_geometry_columns_stddev_pop_fields: extensions_geometry_columns_stddev_pop_fields;
  extensions_geometry_columns_stddev_samp_fields: extensions_geometry_columns_stddev_samp_fields;
  extensions_geometry_columns_sum_fields: extensions_geometry_columns_sum_fields;
  extensions_geometry_columns_var_pop_fields: extensions_geometry_columns_var_pop_fields;
  extensions_geometry_columns_var_samp_fields: extensions_geometry_columns_var_samp_fields;
  extensions_geometry_columns_variance_fields: extensions_geometry_columns_variance_fields;
  extensions_max_fields: extensions_max_fields;
  extensions_min_fields: extensions_min_fields;
  extensions_mutation_response: extensions_mutation_response;
  extensions_pg_stat_statements: extensions_pg_stat_statements;
  extensions_pg_stat_statements_aggregate: extensions_pg_stat_statements_aggregate;
  extensions_pg_stat_statements_aggregate_fields: extensions_pg_stat_statements_aggregate_fields;
  extensions_pg_stat_statements_avg_fields: extensions_pg_stat_statements_avg_fields;
  extensions_pg_stat_statements_max_fields: extensions_pg_stat_statements_max_fields;
  extensions_pg_stat_statements_min_fields: extensions_pg_stat_statements_min_fields;
  extensions_pg_stat_statements_stddev_fields: extensions_pg_stat_statements_stddev_fields;
  extensions_pg_stat_statements_stddev_pop_fields: extensions_pg_stat_statements_stddev_pop_fields;
  extensions_pg_stat_statements_stddev_samp_fields: extensions_pg_stat_statements_stddev_samp_fields;
  extensions_pg_stat_statements_sum_fields: extensions_pg_stat_statements_sum_fields;
  extensions_pg_stat_statements_var_pop_fields: extensions_pg_stat_statements_var_pop_fields;
  extensions_pg_stat_statements_var_samp_fields: extensions_pg_stat_statements_var_samp_fields;
  extensions_pg_stat_statements_variance_fields: extensions_pg_stat_statements_variance_fields;
  extensions_spatial_ref_sys: extensions_spatial_ref_sys;
  extensions_spatial_ref_sys_aggregate: extensions_spatial_ref_sys_aggregate;
  extensions_spatial_ref_sys_aggregate_fields: extensions_spatial_ref_sys_aggregate_fields;
  extensions_spatial_ref_sys_avg_fields: extensions_spatial_ref_sys_avg_fields;
  extensions_spatial_ref_sys_max_fields: extensions_spatial_ref_sys_max_fields;
  extensions_spatial_ref_sys_min_fields: extensions_spatial_ref_sys_min_fields;
  extensions_spatial_ref_sys_mutation_response: extensions_spatial_ref_sys_mutation_response;
  extensions_spatial_ref_sys_stddev_fields: extensions_spatial_ref_sys_stddev_fields;
  extensions_spatial_ref_sys_stddev_pop_fields: extensions_spatial_ref_sys_stddev_pop_fields;
  extensions_spatial_ref_sys_stddev_samp_fields: extensions_spatial_ref_sys_stddev_samp_fields;
  extensions_spatial_ref_sys_sum_fields: extensions_spatial_ref_sys_sum_fields;
  extensions_spatial_ref_sys_var_pop_fields: extensions_spatial_ref_sys_var_pop_fields;
  extensions_spatial_ref_sys_var_samp_fields: extensions_spatial_ref_sys_var_samp_fields;
  extensions_spatial_ref_sys_variance_fields: extensions_spatial_ref_sys_variance_fields;
  extensions_stddev_fields: extensions_stddev_fields;
  extensions_stddev_pop_fields: extensions_stddev_pop_fields;
  extensions_stddev_samp_fields: extensions_stddev_samp_fields;
  extensions_sum_fields: extensions_sum_fields;
  extensions_var_pop_fields: extensions_var_pop_fields;
  extensions_var_samp_fields: extensions_var_samp_fields;
  extensions_variance_fields: extensions_variance_fields;
  floor_plan_grid: floor_plan_grid;
  floor_plan_grid_aggregate: floor_plan_grid_aggregate;
  floor_plan_grid_aggregate_fields: floor_plan_grid_aggregate_fields;
  floor_plan_grid_avg_fields: floor_plan_grid_avg_fields;
  floor_plan_grid_max_fields: floor_plan_grid_max_fields;
  floor_plan_grid_min_fields: floor_plan_grid_min_fields;
  floor_plan_grid_mutation_response: floor_plan_grid_mutation_response;
  floor_plan_grid_stddev_fields: floor_plan_grid_stddev_fields;
  floor_plan_grid_stddev_pop_fields: floor_plan_grid_stddev_pop_fields;
  floor_plan_grid_stddev_samp_fields: floor_plan_grid_stddev_samp_fields;
  floor_plan_grid_sum_fields: floor_plan_grid_sum_fields;
  floor_plan_grid_var_pop_fields: floor_plan_grid_var_pop_fields;
  floor_plan_grid_var_samp_fields: floor_plan_grid_var_samp_fields;
  floor_plan_grid_variance_fields: floor_plan_grid_variance_fields;
  floor_plans: floor_plans;
  floor_plans_aggregate: floor_plans_aggregate;
  floor_plans_aggregate_fields: floor_plans_aggregate_fields;
  floor_plans_max_fields: floor_plans_max_fields;
  floor_plans_min_fields: floor_plans_min_fields;
  floor_plans_mutation_response: floor_plans_mutation_response;
  guest_questionaires_answers: guest_questionaires_answers;
  guest_questionaires_answers_aggregate: guest_questionaires_answers_aggregate;
  guest_questionaires_answers_aggregate_fields: guest_questionaires_answers_aggregate_fields;
  guest_questionaires_answers_max_fields: guest_questionaires_answers_max_fields;
  guest_questionaires_answers_min_fields: guest_questionaires_answers_min_fields;
  guest_questionaires_answers_mutation_response: guest_questionaires_answers_mutation_response;
  guests: guests;
  guests_aggregate: guests_aggregate;
  guests_aggregate_fields: guests_aggregate_fields;
  guests_has_questionaires: guests_has_questionaires;
  guests_has_questionaires_aggregate: guests_has_questionaires_aggregate;
  guests_has_questionaires_aggregate_fields: guests_has_questionaires_aggregate_fields;
  guests_has_questionaires_max_fields: guests_has_questionaires_max_fields;
  guests_has_questionaires_min_fields: guests_has_questionaires_min_fields;
  guests_has_questionaires_mutation_response: guests_has_questionaires_mutation_response;
  guests_max_fields: guests_max_fields;
  guests_min_fields: guests_min_fields;
  guests_mutation_response: guests_mutation_response;
  inboxes: inboxes;
  inboxes_aggregate: inboxes_aggregate;
  inboxes_aggregate_fields: inboxes_aggregate_fields;
  inboxes_max_fields: inboxes_max_fields;
  inboxes_min_fields: inboxes_min_fields;
  inboxes_mutation_response: inboxes_mutation_response;
  invoice: invoice;
  invoice_aggregate: invoice_aggregate;
  invoice_aggregate_fields: invoice_aggregate_fields;
  invoice_avg_fields: invoice_avg_fields;
  invoice_max_fields: invoice_max_fields;
  invoice_min_fields: invoice_min_fields;
  invoice_mutation_response: invoice_mutation_response;
  invoice_stddev_fields: invoice_stddev_fields;
  invoice_stddev_pop_fields: invoice_stddev_pop_fields;
  invoice_stddev_samp_fields: invoice_stddev_samp_fields;
  invoice_sum_fields: invoice_sum_fields;
  invoice_var_pop_fields: invoice_var_pop_fields;
  invoice_var_samp_fields: invoice_var_samp_fields;
  invoice_variance_fields: invoice_variance_fields;
  key_performance_snapshots: key_performance_snapshots;
  key_performance_snapshots_aggregate: key_performance_snapshots_aggregate;
  key_performance_snapshots_aggregate_fields: key_performance_snapshots_aggregate_fields;
  key_performance_snapshots_max_fields: key_performance_snapshots_max_fields;
  key_performance_snapshots_min_fields: key_performance_snapshots_min_fields;
  key_performance_snapshots_mutation_response: key_performance_snapshots_mutation_response;
  listing_categories: listing_categories;
  listing_categories_aggregate: listing_categories_aggregate;
  listing_categories_aggregate_fields: listing_categories_aggregate_fields;
  listing_categories_avg_fields: listing_categories_avg_fields;
  listing_categories_max_fields: listing_categories_max_fields;
  listing_categories_min_fields: listing_categories_min_fields;
  listing_categories_mutation_response: listing_categories_mutation_response;
  listing_categories_stddev_fields: listing_categories_stddev_fields;
  listing_categories_stddev_pop_fields: listing_categories_stddev_pop_fields;
  listing_categories_stddev_samp_fields: listing_categories_stddev_samp_fields;
  listing_categories_sum_fields: listing_categories_sum_fields;
  listing_categories_var_pop_fields: listing_categories_var_pop_fields;
  listing_categories_var_samp_fields: listing_categories_var_samp_fields;
  listing_categories_variance_fields: listing_categories_variance_fields;
  listing_collections: listing_collections;
  listing_collections_aggregate: listing_collections_aggregate;
  listing_collections_aggregate_fields: listing_collections_aggregate_fields;
  listing_collections_avg_fields: listing_collections_avg_fields;
  listing_collections_max_fields: listing_collections_max_fields;
  listing_collections_min_fields: listing_collections_min_fields;
  listing_collections_mutation_response: listing_collections_mutation_response;
  listing_collections_stddev_fields: listing_collections_stddev_fields;
  listing_collections_stddev_pop_fields: listing_collections_stddev_pop_fields;
  listing_collections_stddev_samp_fields: listing_collections_stddev_samp_fields;
  listing_collections_sum_fields: listing_collections_sum_fields;
  listing_collections_var_pop_fields: listing_collections_var_pop_fields;
  listing_collections_var_samp_fields: listing_collections_var_samp_fields;
  listing_collections_variance_fields: listing_collections_variance_fields;
  listing_discussions: listing_discussions;
  listing_discussions_aggregate: listing_discussions_aggregate;
  listing_discussions_aggregate_fields: listing_discussions_aggregate_fields;
  listing_discussions_avg_fields: listing_discussions_avg_fields;
  listing_discussions_max_fields: listing_discussions_max_fields;
  listing_discussions_min_fields: listing_discussions_min_fields;
  listing_discussions_mutation_response: listing_discussions_mutation_response;
  listing_discussions_stddev_fields: listing_discussions_stddev_fields;
  listing_discussions_stddev_pop_fields: listing_discussions_stddev_pop_fields;
  listing_discussions_stddev_samp_fields: listing_discussions_stddev_samp_fields;
  listing_discussions_sum_fields: listing_discussions_sum_fields;
  listing_discussions_var_pop_fields: listing_discussions_var_pop_fields;
  listing_discussions_var_samp_fields: listing_discussions_var_samp_fields;
  listing_discussions_variance_fields: listing_discussions_variance_fields;
  listing_in_collections: listing_in_collections;
  listing_in_collections_aggregate: listing_in_collections_aggregate;
  listing_in_collections_aggregate_fields: listing_in_collections_aggregate_fields;
  listing_in_collections_max_fields: listing_in_collections_max_fields;
  listing_in_collections_min_fields: listing_in_collections_min_fields;
  listing_in_collections_mutation_response: listing_in_collections_mutation_response;
  listing_media: listing_media;
  listing_media_aggregate: listing_media_aggregate;
  listing_media_aggregate_fields: listing_media_aggregate_fields;
  listing_media_avg_fields: listing_media_avg_fields;
  listing_media_max_fields: listing_media_max_fields;
  listing_media_min_fields: listing_media_min_fields;
  listing_media_mutation_response: listing_media_mutation_response;
  listing_media_stddev_fields: listing_media_stddev_fields;
  listing_media_stddev_pop_fields: listing_media_stddev_pop_fields;
  listing_media_stddev_samp_fields: listing_media_stddev_samp_fields;
  listing_media_sum_fields: listing_media_sum_fields;
  listing_media_var_pop_fields: listing_media_var_pop_fields;
  listing_media_var_samp_fields: listing_media_var_samp_fields;
  listing_media_variance_fields: listing_media_variance_fields;
  listing_tags: listing_tags;
  listing_tags_aggregate: listing_tags_aggregate;
  listing_tags_aggregate_fields: listing_tags_aggregate_fields;
  listing_tags_max_fields: listing_tags_max_fields;
  listing_tags_min_fields: listing_tags_min_fields;
  listing_tags_mutation_response: listing_tags_mutation_response;
  listing_wishes: listing_wishes;
  listing_wishes_aggregate: listing_wishes_aggregate;
  listing_wishes_aggregate_fields: listing_wishes_aggregate_fields;
  listing_wishes_max_fields: listing_wishes_max_fields;
  listing_wishes_min_fields: listing_wishes_min_fields;
  listing_wishes_mutation_response: listing_wishes_mutation_response;
  listings: listings;
  listings_aggregate: listings_aggregate;
  listings_aggregate_fields: listings_aggregate_fields;
  listings_avg_fields: listings_avg_fields;
  listings_max_fields: listings_max_fields;
  listings_min_fields: listings_min_fields;
  listings_mutation_response: listings_mutation_response;
  listings_stddev_fields: listings_stddev_fields;
  listings_stddev_pop_fields: listings_stddev_pop_fields;
  listings_stddev_samp_fields: listings_stddev_samp_fields;
  listings_sum_fields: listings_sum_fields;
  listings_var_pop_fields: listings_var_pop_fields;
  listings_var_samp_fields: listings_var_samp_fields;
  listings_variance_fields: listings_variance_fields;
  logs: logs;
  logs_aggregate: logs_aggregate;
  logs_aggregate_fields: logs_aggregate_fields;
  logs_max_fields: logs_max_fields;
  logs_min_fields: logs_min_fields;
  logs_mutation_response: logs_mutation_response;
  media: media;
  media_aggregate: media_aggregate;
  media_aggregate_fields: media_aggregate_fields;
  media_avg_fields: media_avg_fields;
  media_max_fields: media_max_fields;
  media_min_fields: media_min_fields;
  media_mutation_response: media_mutation_response;
  media_stddev_fields: media_stddev_fields;
  media_stddev_pop_fields: media_stddev_pop_fields;
  media_stddev_samp_fields: media_stddev_samp_fields;
  media_sum_fields: media_sum_fields;
  media_var_pop_fields: media_var_pop_fields;
  media_var_samp_fields: media_var_samp_fields;
  media_variance_fields: media_variance_fields;
  messages: messages;
  messages_aggregate: messages_aggregate;
  messages_aggregate_fields: messages_aggregate_fields;
  messages_max_fields: messages_max_fields;
  messages_min_fields: messages_min_fields;
  messages_mutation_response: messages_mutation_response;
  model_has_comments: model_has_comments;
  model_has_comments_aggregate: model_has_comments_aggregate;
  model_has_comments_aggregate_fields: model_has_comments_aggregate_fields;
  model_has_comments_max_fields: model_has_comments_max_fields;
  model_has_comments_min_fields: model_has_comments_min_fields;
  model_has_comments_mutation_response: model_has_comments_mutation_response;
  model_has_likes: model_has_likes;
  model_has_likes_aggregate: model_has_likes_aggregate;
  model_has_likes_aggregate_fields: model_has_likes_aggregate_fields;
  model_has_likes_max_fields: model_has_likes_max_fields;
  model_has_likes_min_fields: model_has_likes_min_fields;
  model_has_likes_mutation_response: model_has_likes_mutation_response;
  model_has_permissions: model_has_permissions;
  model_has_permissions_aggregate: model_has_permissions_aggregate;
  model_has_permissions_aggregate_fields: model_has_permissions_aggregate_fields;
  model_has_permissions_max_fields: model_has_permissions_max_fields;
  model_has_permissions_min_fields: model_has_permissions_min_fields;
  model_has_permissions_mutation_response: model_has_permissions_mutation_response;
  model_has_roles: model_has_roles;
  model_has_roles_aggregate: model_has_roles_aggregate;
  model_has_roles_aggregate_fields: model_has_roles_aggregate_fields;
  model_has_roles_max_fields: model_has_roles_max_fields;
  model_has_roles_min_fields: model_has_roles_min_fields;
  model_has_roles_mutation_response: model_has_roles_mutation_response;
  model_has_tags: model_has_tags;
  model_has_tags_aggregate: model_has_tags_aggregate;
  model_has_tags_aggregate_fields: model_has_tags_aggregate_fields;
  model_has_tags_max_fields: model_has_tags_max_fields;
  model_has_tags_min_fields: model_has_tags_min_fields;
  model_has_tags_mutation_response: model_has_tags_mutation_response;
  notifications: notifications;
  notifications_aggregate: notifications_aggregate;
  notifications_aggregate_fields: notifications_aggregate_fields;
  notifications_max_fields: notifications_max_fields;
  notifications_min_fields: notifications_min_fields;
  notifications_mutation_response: notifications_mutation_response;
  outlet_has_addons: outlet_has_addons;
  outlet_has_addons_aggregate: outlet_has_addons_aggregate;
  outlet_has_addons_aggregate_fields: outlet_has_addons_aggregate_fields;
  outlet_has_addons_avg_fields: outlet_has_addons_avg_fields;
  outlet_has_addons_max_fields: outlet_has_addons_max_fields;
  outlet_has_addons_min_fields: outlet_has_addons_min_fields;
  outlet_has_addons_mutation_response: outlet_has_addons_mutation_response;
  outlet_has_addons_stddev_fields: outlet_has_addons_stddev_fields;
  outlet_has_addons_stddev_pop_fields: outlet_has_addons_stddev_pop_fields;
  outlet_has_addons_stddev_samp_fields: outlet_has_addons_stddev_samp_fields;
  outlet_has_addons_sum_fields: outlet_has_addons_sum_fields;
  outlet_has_addons_var_pop_fields: outlet_has_addons_var_pop_fields;
  outlet_has_addons_var_samp_fields: outlet_has_addons_var_samp_fields;
  outlet_has_addons_variance_fields: outlet_has_addons_variance_fields;
  outlets: outlets;
  outlets_aggregate: outlets_aggregate;
  outlets_aggregate_fields: outlets_aggregate_fields;
  outlets_avg_fields: outlets_avg_fields;
  outlets_max_fields: outlets_max_fields;
  outlets_min_fields: outlets_min_fields;
  outlets_mutation_response: outlets_mutation_response;
  outlets_stddev_fields: outlets_stddev_fields;
  outlets_stddev_pop_fields: outlets_stddev_pop_fields;
  outlets_stddev_samp_fields: outlets_stddev_samp_fields;
  outlets_sum_fields: outlets_sum_fields;
  outlets_var_pop_fields: outlets_var_pop_fields;
  outlets_var_samp_fields: outlets_var_samp_fields;
  outlets_variance_fields: outlets_variance_fields;
  passes: passes;
  passes_activity_logs: passes_activity_logs;
  passes_activity_logs_aggregate: passes_activity_logs_aggregate;
  passes_activity_logs_aggregate_fields: passes_activity_logs_aggregate_fields;
  passes_activity_logs_max_fields: passes_activity_logs_max_fields;
  passes_activity_logs_min_fields: passes_activity_logs_min_fields;
  passes_activity_logs_mutation_response: passes_activity_logs_mutation_response;
  passes_aggregate: passes_aggregate;
  passes_aggregate_fields: passes_aggregate_fields;
  passes_max_fields: passes_max_fields;
  passes_min_fields: passes_min_fields;
  passes_mutation_response: passes_mutation_response;
  payments: payments;
  payments_aggregate: payments_aggregate;
  payments_aggregate_fields: payments_aggregate_fields;
  payments_avg_fields: payments_avg_fields;
  payments_max_fields: payments_max_fields;
  payments_min_fields: payments_min_fields;
  payments_mutation_response: payments_mutation_response;
  payments_stddev_fields: payments_stddev_fields;
  payments_stddev_pop_fields: payments_stddev_pop_fields;
  payments_stddev_samp_fields: payments_stddev_samp_fields;
  payments_sum_fields: payments_sum_fields;
  payments_var_pop_fields: payments_var_pop_fields;
  payments_var_samp_fields: payments_var_samp_fields;
  payments_variance_fields: payments_variance_fields;
  permissions: permissions;
  permissions_aggregate: permissions_aggregate;
  permissions_aggregate_fields: permissions_aggregate_fields;
  permissions_max_fields: permissions_max_fields;
  permissions_min_fields: permissions_min_fields;
  permissions_mutation_response: permissions_mutation_response;
  post_comments: post_comments;
  post_comments_aggregate: post_comments_aggregate;
  post_comments_aggregate_fields: post_comments_aggregate_fields;
  post_comments_max_fields: post_comments_max_fields;
  post_comments_min_fields: post_comments_min_fields;
  post_comments_mutation_response: post_comments_mutation_response;
  post_likes: post_likes;
  post_likes_aggregate: post_likes_aggregate;
  post_likes_aggregate_fields: post_likes_aggregate_fields;
  post_likes_max_fields: post_likes_max_fields;
  post_likes_min_fields: post_likes_min_fields;
  post_likes_mutation_response: post_likes_mutation_response;
  posts: posts;
  posts_aggregate: posts_aggregate;
  posts_aggregate_fields: posts_aggregate_fields;
  posts_max_fields: posts_max_fields;
  posts_min_fields: posts_min_fields;
  posts_mutation_response: posts_mutation_response;
  questionaires: questionaires;
  questionaires_aggregate: questionaires_aggregate;
  questionaires_aggregate_fields: questionaires_aggregate_fields;
  questionaires_max_fields: questionaires_max_fields;
  questionaires_min_fields: questionaires_min_fields;
  questionaires_mutation_response: questionaires_mutation_response;
  questions: questions;
  questions_aggregate: questions_aggregate;
  questions_aggregate_fields: questions_aggregate_fields;
  questions_max_fields: questions_max_fields;
  questions_min_fields: questions_min_fields;
  questions_mutation_response: questions_mutation_response;
  requests: requests;
  requests_aggregate: requests_aggregate;
  requests_aggregate_fields: requests_aggregate_fields;
  requests_avg_fields: requests_avg_fields;
  requests_max_fields: requests_max_fields;
  requests_min_fields: requests_min_fields;
  requests_mutation_response: requests_mutation_response;
  requests_stddev_fields: requests_stddev_fields;
  requests_stddev_pop_fields: requests_stddev_pop_fields;
  requests_stddev_samp_fields: requests_stddev_samp_fields;
  requests_sum_fields: requests_sum_fields;
  requests_var_pop_fields: requests_var_pop_fields;
  requests_var_samp_fields: requests_var_samp_fields;
  requests_variance_fields: requests_variance_fields;
  reservations: reservations;
  reservations_activity_logs: reservations_activity_logs;
  reservations_activity_logs_aggregate: reservations_activity_logs_aggregate;
  reservations_activity_logs_aggregate_fields: reservations_activity_logs_aggregate_fields;
  reservations_activity_logs_max_fields: reservations_activity_logs_max_fields;
  reservations_activity_logs_min_fields: reservations_activity_logs_min_fields;
  reservations_activity_logs_mutation_response: reservations_activity_logs_mutation_response;
  reservations_aggregate: reservations_aggregate;
  reservations_aggregate_fields: reservations_aggregate_fields;
  reservations_avg_fields: reservations_avg_fields;
  reservations_max_fields: reservations_max_fields;
  reservations_min_fields: reservations_min_fields;
  reservations_mutation_response: reservations_mutation_response;
  reservations_stddev_fields: reservations_stddev_fields;
  reservations_stddev_pop_fields: reservations_stddev_pop_fields;
  reservations_stddev_samp_fields: reservations_stddev_samp_fields;
  reservations_sum_fields: reservations_sum_fields;
  reservations_var_pop_fields: reservations_var_pop_fields;
  reservations_var_samp_fields: reservations_var_samp_fields;
  reservations_variance_fields: reservations_variance_fields;
  review_comments: review_comments;
  review_comments_aggregate: review_comments_aggregate;
  review_comments_aggregate_fields: review_comments_aggregate_fields;
  review_comments_max_fields: review_comments_max_fields;
  review_comments_min_fields: review_comments_min_fields;
  review_comments_mutation_response: review_comments_mutation_response;
  review_likes: review_likes;
  review_likes_aggregate: review_likes_aggregate;
  review_likes_aggregate_fields: review_likes_aggregate_fields;
  review_likes_max_fields: review_likes_max_fields;
  review_likes_min_fields: review_likes_min_fields;
  review_likes_mutation_response: review_likes_mutation_response;
  review_media: review_media;
  review_media_aggregate: review_media_aggregate;
  review_media_aggregate_fields: review_media_aggregate_fields;
  review_media_avg_fields: review_media_avg_fields;
  review_media_max_fields: review_media_max_fields;
  review_media_min_fields: review_media_min_fields;
  review_media_mutation_response: review_media_mutation_response;
  review_media_stddev_fields: review_media_stddev_fields;
  review_media_stddev_pop_fields: review_media_stddev_pop_fields;
  review_media_stddev_samp_fields: review_media_stddev_samp_fields;
  review_media_sum_fields: review_media_sum_fields;
  review_media_var_pop_fields: review_media_var_pop_fields;
  review_media_var_samp_fields: review_media_var_samp_fields;
  review_media_variance_fields: review_media_variance_fields;
  reviews: reviews;
  reviews_aggregate: reviews_aggregate;
  reviews_aggregate_fields: reviews_aggregate_fields;
  reviews_avg_fields: reviews_avg_fields;
  reviews_max_fields: reviews_max_fields;
  reviews_min_fields: reviews_min_fields;
  reviews_mutation_response: reviews_mutation_response;
  reviews_stddev_fields: reviews_stddev_fields;
  reviews_stddev_pop_fields: reviews_stddev_pop_fields;
  reviews_stddev_samp_fields: reviews_stddev_samp_fields;
  reviews_sum_fields: reviews_sum_fields;
  reviews_var_pop_fields: reviews_var_pop_fields;
  reviews_var_samp_fields: reviews_var_samp_fields;
  reviews_variance_fields: reviews_variance_fields;
  role_has_permissions: role_has_permissions;
  role_has_permissions_aggregate: role_has_permissions_aggregate;
  role_has_permissions_aggregate_fields: role_has_permissions_aggregate_fields;
  role_has_permissions_max_fields: role_has_permissions_max_fields;
  role_has_permissions_min_fields: role_has_permissions_min_fields;
  role_has_permissions_mutation_response: role_has_permissions_mutation_response;
  roles: roles;
  roles_aggregate: roles_aggregate;
  roles_aggregate_fields: roles_aggregate_fields;
  roles_max_fields: roles_max_fields;
  roles_min_fields: roles_min_fields;
  roles_mutation_response: roles_mutation_response;
  social_relationships: social_relationships;
  social_relationships_aggregate: social_relationships_aggregate;
  social_relationships_aggregate_fields: social_relationships_aggregate_fields;
  social_relationships_max_fields: social_relationships_max_fields;
  social_relationships_min_fields: social_relationships_min_fields;
  social_relationships_mutation_response: social_relationships_mutation_response;
  spaces: spaces;
  spaces_aggregate: spaces_aggregate;
  spaces_aggregate_fields: spaces_aggregate_fields;
  spaces_avg_fields: spaces_avg_fields;
  spaces_guests: spaces_guests;
  spaces_guests_aggregate: spaces_guests_aggregate;
  spaces_guests_aggregate_fields: spaces_guests_aggregate_fields;
  spaces_guests_max_fields: spaces_guests_max_fields;
  spaces_guests_min_fields: spaces_guests_min_fields;
  spaces_guests_mutation_response: spaces_guests_mutation_response;
  spaces_max_fields: spaces_max_fields;
  spaces_min_fields: spaces_min_fields;
  spaces_mutation_response: spaces_mutation_response;
  spaces_stddev_fields: spaces_stddev_fields;
  spaces_stddev_pop_fields: spaces_stddev_pop_fields;
  spaces_stddev_samp_fields: spaces_stddev_samp_fields;
  spaces_sum_fields: spaces_sum_fields;
  spaces_usage: spaces_usage;
  spaces_usage_aggregate: spaces_usage_aggregate;
  spaces_usage_aggregate_fields: spaces_usage_aggregate_fields;
  spaces_usage_max_fields: spaces_usage_max_fields;
  spaces_usage_min_fields: spaces_usage_min_fields;
  spaces_usage_mutation_response: spaces_usage_mutation_response;
  spaces_var_pop_fields: spaces_var_pop_fields;
  spaces_var_samp_fields: spaces_var_samp_fields;
  spaces_variance_fields: spaces_variance_fields;
  storage_buckets: storage_buckets;
  storage_buckets_aggregate: storage_buckets_aggregate;
  storage_buckets_aggregate_fields: storage_buckets_aggregate_fields;
  storage_buckets_max_fields: storage_buckets_max_fields;
  storage_buckets_min_fields: storage_buckets_min_fields;
  storage_buckets_mutation_response: storage_buckets_mutation_response;
  stripe_transfers: stripe_transfers;
  stripe_transfers_aggregate: stripe_transfers_aggregate;
  stripe_transfers_aggregate_fields: stripe_transfers_aggregate_fields;
  stripe_transfers_max_fields: stripe_transfers_max_fields;
  stripe_transfers_min_fields: stripe_transfers_min_fields;
  stripe_transfers_mutation_response: stripe_transfers_mutation_response;
  subscriptions: subscriptions;
  subscriptions_aggregate: subscriptions_aggregate;
  subscriptions_aggregate_fields: subscriptions_aggregate_fields;
  subscriptions_max_fields: subscriptions_max_fields;
  subscriptions_min_fields: subscriptions_min_fields;
  subscriptions_mutation_response: subscriptions_mutation_response;
  supabase_functions_hooks: supabase_functions_hooks;
  supabase_functions_hooks_aggregate: supabase_functions_hooks_aggregate;
  supabase_functions_hooks_aggregate_fields: supabase_functions_hooks_aggregate_fields;
  supabase_functions_hooks_avg_fields: supabase_functions_hooks_avg_fields;
  supabase_functions_hooks_max_fields: supabase_functions_hooks_max_fields;
  supabase_functions_hooks_min_fields: supabase_functions_hooks_min_fields;
  supabase_functions_hooks_mutation_response: supabase_functions_hooks_mutation_response;
  supabase_functions_hooks_stddev_fields: supabase_functions_hooks_stddev_fields;
  supabase_functions_hooks_stddev_pop_fields: supabase_functions_hooks_stddev_pop_fields;
  supabase_functions_hooks_stddev_samp_fields: supabase_functions_hooks_stddev_samp_fields;
  supabase_functions_hooks_sum_fields: supabase_functions_hooks_sum_fields;
  supabase_functions_hooks_var_pop_fields: supabase_functions_hooks_var_pop_fields;
  supabase_functions_hooks_var_samp_fields: supabase_functions_hooks_var_samp_fields;
  supabase_functions_hooks_variance_fields: supabase_functions_hooks_variance_fields;
  tags: tags;
  tags_aggregate: tags_aggregate;
  tags_aggregate_fields: tags_aggregate_fields;
  tags_max_fields: tags_max_fields;
  tags_min_fields: tags_min_fields;
  tags_mutation_response: tags_mutation_response;
  team_memberships: team_memberships;
  team_memberships_aggregate: team_memberships_aggregate;
  team_memberships_aggregate_fields: team_memberships_aggregate_fields;
  team_memberships_max_fields: team_memberships_max_fields;
  team_memberships_min_fields: team_memberships_min_fields;
  team_memberships_mutation_response: team_memberships_mutation_response;
  team_roles: team_roles;
  team_roles_aggregate: team_roles_aggregate;
  team_roles_aggregate_fields: team_roles_aggregate_fields;
  team_roles_max_fields: team_roles_max_fields;
  team_roles_min_fields: team_roles_min_fields;
  team_roles_mutation_response: team_roles_mutation_response;
  team_schedules: team_schedules;
  team_schedules_aggregate: team_schedules_aggregate;
  team_schedules_aggregate_fields: team_schedules_aggregate_fields;
  team_schedules_max_fields: team_schedules_max_fields;
  team_schedules_min_fields: team_schedules_min_fields;
  team_schedules_mutation_response: team_schedules_mutation_response;
  team_subscriptions: team_subscriptions;
  team_subscriptions_aggregate: team_subscriptions_aggregate;
  team_subscriptions_aggregate_fields: team_subscriptions_aggregate_fields;
  team_subscriptions_max_fields: team_subscriptions_max_fields;
  team_subscriptions_min_fields: team_subscriptions_min_fields;
  team_subscriptions_mutation_response: team_subscriptions_mutation_response;
  teams: teams;
  teams_aggregate: teams_aggregate;
  teams_aggregate_fields: teams_aggregate_fields;
  teams_max_fields: teams_max_fields;
  teams_min_fields: teams_min_fields;
  teams_mutation_response: teams_mutation_response;
  user_has_reservations: user_has_reservations;
  user_has_reservations_aggregate: user_has_reservations_aggregate;
  user_has_reservations_aggregate_fields: user_has_reservations_aggregate_fields;
  user_has_reservations_max_fields: user_has_reservations_max_fields;
  user_has_reservations_min_fields: user_has_reservations_min_fields;
  user_has_reservations_mutation_response: user_has_reservations_mutation_response;
  user_inbox: user_inbox;
  user_inbox_aggregate: user_inbox_aggregate;
  user_inbox_aggregate_fields: user_inbox_aggregate_fields;
  user_inbox_max_fields: user_inbox_max_fields;
  user_inbox_min_fields: user_inbox_min_fields;
  user_inbox_mutation_response: user_inbox_mutation_response;
  user_media: user_media;
  user_media_aggregate: user_media_aggregate;
  user_media_aggregate_fields: user_media_aggregate_fields;
  user_media_avg_fields: user_media_avg_fields;
  user_media_max_fields: user_media_max_fields;
  user_media_min_fields: user_media_min_fields;
  user_media_mutation_response: user_media_mutation_response;
  user_media_stddev_fields: user_media_stddev_fields;
  user_media_stddev_pop_fields: user_media_stddev_pop_fields;
  user_media_stddev_samp_fields: user_media_stddev_samp_fields;
  user_media_sum_fields: user_media_sum_fields;
  user_media_var_pop_fields: user_media_var_pop_fields;
  user_media_var_samp_fields: user_media_var_samp_fields;
  user_media_variance_fields: user_media_variance_fields;
  user_roles: user_roles;
  user_roles_aggregate: user_roles_aggregate;
  user_roles_aggregate_fields: user_roles_aggregate_fields;
  user_roles_max_fields: user_roles_max_fields;
  user_roles_min_fields: user_roles_min_fields;
  user_roles_mutation_response: user_roles_mutation_response;
  user_sessions: user_sessions;
  user_sessions_aggregate: user_sessions_aggregate;
  user_sessions_aggregate_fields: user_sessions_aggregate_fields;
  user_sessions_avg_fields: user_sessions_avg_fields;
  user_sessions_max_fields: user_sessions_max_fields;
  user_sessions_min_fields: user_sessions_min_fields;
  user_sessions_mutation_response: user_sessions_mutation_response;
  user_sessions_stddev_fields: user_sessions_stddev_fields;
  user_sessions_stddev_pop_fields: user_sessions_stddev_pop_fields;
  user_sessions_stddev_samp_fields: user_sessions_stddev_samp_fields;
  user_sessions_sum_fields: user_sessions_sum_fields;
  user_sessions_var_pop_fields: user_sessions_var_pop_fields;
  user_sessions_var_samp_fields: user_sessions_var_samp_fields;
  user_sessions_variance_fields: user_sessions_variance_fields;
  user_subscriptions: user_subscriptions;
  user_subscriptions_aggregate: user_subscriptions_aggregate;
  user_subscriptions_aggregate_fields: user_subscriptions_aggregate_fields;
  user_subscriptions_max_fields: user_subscriptions_max_fields;
  user_subscriptions_min_fields: user_subscriptions_min_fields;
  user_subscriptions_mutation_response: user_subscriptions_mutation_response;
  users: users;
  users_aggregate: users_aggregate;
  users_aggregate_fields: users_aggregate_fields;
  users_max_fields: users_max_fields;
  users_min_fields: users_min_fields;
  users_mutation_response: users_mutation_response;
  wishlist: wishlist;
  wishlist_aggregate: wishlist_aggregate;
  wishlist_aggregate_fields: wishlist_aggregate_fields;
  wishlist_max_fields: wishlist_max_fields;
  wishlist_min_fields: wishlist_min_fields;
  wishlist_mutation_response: wishlist_mutation_response;
}
export type SchemaObjectTypesNames =
  | "Query"
  | "Mutation"
  | "Subscription"
  | "activity_logs"
  | "activity_logs_aggregate"
  | "activity_logs_aggregate_fields"
  | "activity_logs_max_fields"
  | "activity_logs_min_fields"
  | "activity_logs_mutation_response"
  | "aruba_wifi_access"
  | "aruba_wifi_access_aggregate"
  | "aruba_wifi_access_aggregate_fields"
  | "aruba_wifi_access_max_fields"
  | "aruba_wifi_access_min_fields"
  | "aruba_wifi_access_mutation_response"
  | "auth_audit_log_entries"
  | "auth_audit_log_entries_aggregate"
  | "auth_audit_log_entries_aggregate_fields"
  | "auth_audit_log_entries_max_fields"
  | "auth_audit_log_entries_min_fields"
  | "auth_audit_log_entries_mutation_response"
  | "auth_instances"
  | "auth_instances_aggregate"
  | "auth_instances_aggregate_fields"
  | "auth_instances_max_fields"
  | "auth_instances_min_fields"
  | "auth_instances_mutation_response"
  | "auth_refresh_tokens"
  | "auth_refresh_tokens_aggregate"
  | "auth_refresh_tokens_aggregate_fields"
  | "auth_refresh_tokens_avg_fields"
  | "auth_refresh_tokens_max_fields"
  | "auth_refresh_tokens_min_fields"
  | "auth_refresh_tokens_mutation_response"
  | "auth_refresh_tokens_stddev_fields"
  | "auth_refresh_tokens_stddev_pop_fields"
  | "auth_refresh_tokens_stddev_samp_fields"
  | "auth_refresh_tokens_sum_fields"
  | "auth_refresh_tokens_var_pop_fields"
  | "auth_refresh_tokens_var_samp_fields"
  | "auth_refresh_tokens_variance_fields"
  | "auth_schema_migrations"
  | "auth_schema_migrations_aggregate"
  | "auth_schema_migrations_aggregate_fields"
  | "auth_schema_migrations_max_fields"
  | "auth_schema_migrations_min_fields"
  | "auth_schema_migrations_mutation_response"
  | "auth_users"
  | "auth_users_aggregate"
  | "auth_users_aggregate_fields"
  | "auth_users_avg_fields"
  | "auth_users_max_fields"
  | "auth_users_min_fields"
  | "auth_users_mutation_response"
  | "auth_users_stddev_fields"
  | "auth_users_stddev_pop_fields"
  | "auth_users_stddev_samp_fields"
  | "auth_users_sum_fields"
  | "auth_users_var_pop_fields"
  | "auth_users_var_samp_fields"
  | "auth_users_variance_fields"
  | "brand_campaigns"
  | "brand_campaigns_aggregate"
  | "brand_campaigns_aggregate_fields"
  | "brand_campaigns_max_fields"
  | "brand_campaigns_min_fields"
  | "brand_campaigns_mutation_response"
  | "brand_discussions"
  | "brand_discussions_aggregate"
  | "brand_discussions_aggregate_fields"
  | "brand_discussions_avg_fields"
  | "brand_discussions_max_fields"
  | "brand_discussions_min_fields"
  | "brand_discussions_mutation_response"
  | "brand_discussions_stddev_fields"
  | "brand_discussions_stddev_pop_fields"
  | "brand_discussions_stddev_samp_fields"
  | "brand_discussions_sum_fields"
  | "brand_discussions_var_pop_fields"
  | "brand_discussions_var_samp_fields"
  | "brand_discussions_variance_fields"
  | "brand_inbox"
  | "brand_inbox_aggregate"
  | "brand_inbox_aggregate_fields"
  | "brand_inbox_max_fields"
  | "brand_inbox_min_fields"
  | "brand_inbox_mutation_response"
  | "brand_media"
  | "brand_media_aggregate"
  | "brand_media_aggregate_fields"
  | "brand_media_avg_fields"
  | "brand_media_max_fields"
  | "brand_media_min_fields"
  | "brand_media_mutation_response"
  | "brand_media_stddev_fields"
  | "brand_media_stddev_pop_fields"
  | "brand_media_stddev_samp_fields"
  | "brand_media_sum_fields"
  | "brand_media_var_pop_fields"
  | "brand_media_var_samp_fields"
  | "brand_media_variance_fields"
  | "brand_tags"
  | "brand_tags_aggregate"
  | "brand_tags_aggregate_fields"
  | "brand_tags_max_fields"
  | "brand_tags_min_fields"
  | "brand_tags_mutation_response"
  | "brand_users"
  | "brand_users_aggregate"
  | "brand_users_aggregate_fields"
  | "brand_users_max_fields"
  | "brand_users_min_fields"
  | "brand_users_mutation_response"
  | "brand_wishes"
  | "brand_wishes_aggregate"
  | "brand_wishes_aggregate_fields"
  | "brand_wishes_max_fields"
  | "brand_wishes_min_fields"
  | "brand_wishes_mutation_response"
  | "brands"
  | "brands_aggregate"
  | "brands_aggregate_fields"
  | "brands_max_fields"
  | "brands_min_fields"
  | "brands_mutation_response"
  | "campaigns"
  | "campaigns_aggregate"
  | "campaigns_aggregate_fields"
  | "campaigns_max_fields"
  | "campaigns_min_fields"
  | "campaigns_mutation_response"
  | "card"
  | "card_aggregate"
  | "card_aggregate_fields"
  | "card_max_fields"
  | "card_min_fields"
  | "card_mutation_response"
  | "comment_comments"
  | "comment_comments_aggregate"
  | "comment_comments_aggregate_fields"
  | "comment_comments_max_fields"
  | "comment_comments_min_fields"
  | "comment_comments_mutation_response"
  | "comment_likes"
  | "comment_likes_aggregate"
  | "comment_likes_aggregate_fields"
  | "comment_likes_max_fields"
  | "comment_likes_min_fields"
  | "comment_likes_mutation_response"
  | "conversations"
  | "conversations_aggregate"
  | "conversations_aggregate_fields"
  | "conversations_max_fields"
  | "conversations_min_fields"
  | "conversations_mutation_response"
  | "currencies"
  | "currencies_aggregate"
  | "currencies_aggregate_fields"
  | "currencies_max_fields"
  | "currencies_min_fields"
  | "currencies_mutation_response"
  | "daily_rates"
  | "daily_rates_aggregate"
  | "daily_rates_aggregate_fields"
  | "daily_rates_avg_fields"
  | "daily_rates_max_fields"
  | "daily_rates_min_fields"
  | "daily_rates_mutation_response"
  | "daily_rates_stddev_fields"
  | "daily_rates_stddev_pop_fields"
  | "daily_rates_stddev_samp_fields"
  | "daily_rates_sum_fields"
  | "daily_rates_var_pop_fields"
  | "daily_rates_var_samp_fields"
  | "daily_rates_variance_fields"
  | "default_addons"
  | "default_addons_aggregate"
  | "default_addons_aggregate_fields"
  | "default_addons_avg_fields"
  | "default_addons_max_fields"
  | "default_addons_min_fields"
  | "default_addons_mutation_response"
  | "default_addons_stddev_fields"
  | "default_addons_stddev_pop_fields"
  | "default_addons_stddev_samp_fields"
  | "default_addons_sum_fields"
  | "default_addons_var_pop_fields"
  | "default_addons_var_samp_fields"
  | "default_addons_variance_fields"
  | "discount_codes"
  | "discount_codes_aggregate"
  | "discount_codes_aggregate_fields"
  | "discount_codes_avg_fields"
  | "discount_codes_max_fields"
  | "discount_codes_min_fields"
  | "discount_codes_mutation_response"
  | "discount_codes_stddev_fields"
  | "discount_codes_stddev_pop_fields"
  | "discount_codes_stddev_samp_fields"
  | "discount_codes_sum_fields"
  | "discount_codes_var_pop_fields"
  | "discount_codes_var_samp_fields"
  | "discount_codes_variance_fields"
  | "discussion_user"
  | "discussion_user_aggregate"
  | "discussion_user_aggregate_fields"
  | "discussion_user_max_fields"
  | "discussion_user_min_fields"
  | "discussion_user_mutation_response"
  | "discussions"
  | "discussions_aggregate"
  | "discussions_aggregate_fields"
  | "discussions_avg_fields"
  | "discussions_max_fields"
  | "discussions_min_fields"
  | "discussions_mutation_response"
  | "discussions_stddev_fields"
  | "discussions_stddev_pop_fields"
  | "discussions_stddev_samp_fields"
  | "discussions_sum_fields"
  | "discussions_var_pop_fields"
  | "discussions_var_samp_fields"
  | "discussions_variance_fields"
  | "extensions"
  | "extensions_aggregate"
  | "extensions_aggregate_fields"
  | "extensions_avg_fields"
  | "extensions_geography_columns"
  | "extensions_geography_columns_aggregate"
  | "extensions_geography_columns_aggregate_fields"
  | "extensions_geography_columns_avg_fields"
  | "extensions_geography_columns_max_fields"
  | "extensions_geography_columns_min_fields"
  | "extensions_geography_columns_stddev_fields"
  | "extensions_geography_columns_stddev_pop_fields"
  | "extensions_geography_columns_stddev_samp_fields"
  | "extensions_geography_columns_sum_fields"
  | "extensions_geography_columns_var_pop_fields"
  | "extensions_geography_columns_var_samp_fields"
  | "extensions_geography_columns_variance_fields"
  | "extensions_geometry_columns"
  | "extensions_geometry_columns_aggregate"
  | "extensions_geometry_columns_aggregate_fields"
  | "extensions_geometry_columns_avg_fields"
  | "extensions_geometry_columns_max_fields"
  | "extensions_geometry_columns_min_fields"
  | "extensions_geometry_columns_mutation_response"
  | "extensions_geometry_columns_stddev_fields"
  | "extensions_geometry_columns_stddev_pop_fields"
  | "extensions_geometry_columns_stddev_samp_fields"
  | "extensions_geometry_columns_sum_fields"
  | "extensions_geometry_columns_var_pop_fields"
  | "extensions_geometry_columns_var_samp_fields"
  | "extensions_geometry_columns_variance_fields"
  | "extensions_max_fields"
  | "extensions_min_fields"
  | "extensions_mutation_response"
  | "extensions_pg_stat_statements"
  | "extensions_pg_stat_statements_aggregate"
  | "extensions_pg_stat_statements_aggregate_fields"
  | "extensions_pg_stat_statements_avg_fields"
  | "extensions_pg_stat_statements_max_fields"
  | "extensions_pg_stat_statements_min_fields"
  | "extensions_pg_stat_statements_stddev_fields"
  | "extensions_pg_stat_statements_stddev_pop_fields"
  | "extensions_pg_stat_statements_stddev_samp_fields"
  | "extensions_pg_stat_statements_sum_fields"
  | "extensions_pg_stat_statements_var_pop_fields"
  | "extensions_pg_stat_statements_var_samp_fields"
  | "extensions_pg_stat_statements_variance_fields"
  | "extensions_spatial_ref_sys"
  | "extensions_spatial_ref_sys_aggregate"
  | "extensions_spatial_ref_sys_aggregate_fields"
  | "extensions_spatial_ref_sys_avg_fields"
  | "extensions_spatial_ref_sys_max_fields"
  | "extensions_spatial_ref_sys_min_fields"
  | "extensions_spatial_ref_sys_mutation_response"
  | "extensions_spatial_ref_sys_stddev_fields"
  | "extensions_spatial_ref_sys_stddev_pop_fields"
  | "extensions_spatial_ref_sys_stddev_samp_fields"
  | "extensions_spatial_ref_sys_sum_fields"
  | "extensions_spatial_ref_sys_var_pop_fields"
  | "extensions_spatial_ref_sys_var_samp_fields"
  | "extensions_spatial_ref_sys_variance_fields"
  | "extensions_stddev_fields"
  | "extensions_stddev_pop_fields"
  | "extensions_stddev_samp_fields"
  | "extensions_sum_fields"
  | "extensions_var_pop_fields"
  | "extensions_var_samp_fields"
  | "extensions_variance_fields"
  | "floor_plan_grid"
  | "floor_plan_grid_aggregate"
  | "floor_plan_grid_aggregate_fields"
  | "floor_plan_grid_avg_fields"
  | "floor_plan_grid_max_fields"
  | "floor_plan_grid_min_fields"
  | "floor_plan_grid_mutation_response"
  | "floor_plan_grid_stddev_fields"
  | "floor_plan_grid_stddev_pop_fields"
  | "floor_plan_grid_stddev_samp_fields"
  | "floor_plan_grid_sum_fields"
  | "floor_plan_grid_var_pop_fields"
  | "floor_plan_grid_var_samp_fields"
  | "floor_plan_grid_variance_fields"
  | "floor_plans"
  | "floor_plans_aggregate"
  | "floor_plans_aggregate_fields"
  | "floor_plans_max_fields"
  | "floor_plans_min_fields"
  | "floor_plans_mutation_response"
  | "guest_questionaires_answers"
  | "guest_questionaires_answers_aggregate"
  | "guest_questionaires_answers_aggregate_fields"
  | "guest_questionaires_answers_max_fields"
  | "guest_questionaires_answers_min_fields"
  | "guest_questionaires_answers_mutation_response"
  | "guests"
  | "guests_aggregate"
  | "guests_aggregate_fields"
  | "guests_has_questionaires"
  | "guests_has_questionaires_aggregate"
  | "guests_has_questionaires_aggregate_fields"
  | "guests_has_questionaires_max_fields"
  | "guests_has_questionaires_min_fields"
  | "guests_has_questionaires_mutation_response"
  | "guests_max_fields"
  | "guests_min_fields"
  | "guests_mutation_response"
  | "inboxes"
  | "inboxes_aggregate"
  | "inboxes_aggregate_fields"
  | "inboxes_max_fields"
  | "inboxes_min_fields"
  | "inboxes_mutation_response"
  | "invoice"
  | "invoice_aggregate"
  | "invoice_aggregate_fields"
  | "invoice_avg_fields"
  | "invoice_max_fields"
  | "invoice_min_fields"
  | "invoice_mutation_response"
  | "invoice_stddev_fields"
  | "invoice_stddev_pop_fields"
  | "invoice_stddev_samp_fields"
  | "invoice_sum_fields"
  | "invoice_var_pop_fields"
  | "invoice_var_samp_fields"
  | "invoice_variance_fields"
  | "key_performance_snapshots"
  | "key_performance_snapshots_aggregate"
  | "key_performance_snapshots_aggregate_fields"
  | "key_performance_snapshots_max_fields"
  | "key_performance_snapshots_min_fields"
  | "key_performance_snapshots_mutation_response"
  | "listing_categories"
  | "listing_categories_aggregate"
  | "listing_categories_aggregate_fields"
  | "listing_categories_avg_fields"
  | "listing_categories_max_fields"
  | "listing_categories_min_fields"
  | "listing_categories_mutation_response"
  | "listing_categories_stddev_fields"
  | "listing_categories_stddev_pop_fields"
  | "listing_categories_stddev_samp_fields"
  | "listing_categories_sum_fields"
  | "listing_categories_var_pop_fields"
  | "listing_categories_var_samp_fields"
  | "listing_categories_variance_fields"
  | "listing_collections"
  | "listing_collections_aggregate"
  | "listing_collections_aggregate_fields"
  | "listing_collections_avg_fields"
  | "listing_collections_max_fields"
  | "listing_collections_min_fields"
  | "listing_collections_mutation_response"
  | "listing_collections_stddev_fields"
  | "listing_collections_stddev_pop_fields"
  | "listing_collections_stddev_samp_fields"
  | "listing_collections_sum_fields"
  | "listing_collections_var_pop_fields"
  | "listing_collections_var_samp_fields"
  | "listing_collections_variance_fields"
  | "listing_discussions"
  | "listing_discussions_aggregate"
  | "listing_discussions_aggregate_fields"
  | "listing_discussions_avg_fields"
  | "listing_discussions_max_fields"
  | "listing_discussions_min_fields"
  | "listing_discussions_mutation_response"
  | "listing_discussions_stddev_fields"
  | "listing_discussions_stddev_pop_fields"
  | "listing_discussions_stddev_samp_fields"
  | "listing_discussions_sum_fields"
  | "listing_discussions_var_pop_fields"
  | "listing_discussions_var_samp_fields"
  | "listing_discussions_variance_fields"
  | "listing_in_collections"
  | "listing_in_collections_aggregate"
  | "listing_in_collections_aggregate_fields"
  | "listing_in_collections_max_fields"
  | "listing_in_collections_min_fields"
  | "listing_in_collections_mutation_response"
  | "listing_media"
  | "listing_media_aggregate"
  | "listing_media_aggregate_fields"
  | "listing_media_avg_fields"
  | "listing_media_max_fields"
  | "listing_media_min_fields"
  | "listing_media_mutation_response"
  | "listing_media_stddev_fields"
  | "listing_media_stddev_pop_fields"
  | "listing_media_stddev_samp_fields"
  | "listing_media_sum_fields"
  | "listing_media_var_pop_fields"
  | "listing_media_var_samp_fields"
  | "listing_media_variance_fields"
  | "listing_tags"
  | "listing_tags_aggregate"
  | "listing_tags_aggregate_fields"
  | "listing_tags_max_fields"
  | "listing_tags_min_fields"
  | "listing_tags_mutation_response"
  | "listing_wishes"
  | "listing_wishes_aggregate"
  | "listing_wishes_aggregate_fields"
  | "listing_wishes_max_fields"
  | "listing_wishes_min_fields"
  | "listing_wishes_mutation_response"
  | "listings"
  | "listings_aggregate"
  | "listings_aggregate_fields"
  | "listings_avg_fields"
  | "listings_max_fields"
  | "listings_min_fields"
  | "listings_mutation_response"
  | "listings_stddev_fields"
  | "listings_stddev_pop_fields"
  | "listings_stddev_samp_fields"
  | "listings_sum_fields"
  | "listings_var_pop_fields"
  | "listings_var_samp_fields"
  | "listings_variance_fields"
  | "logs"
  | "logs_aggregate"
  | "logs_aggregate_fields"
  | "logs_max_fields"
  | "logs_min_fields"
  | "logs_mutation_response"
  | "media"
  | "media_aggregate"
  | "media_aggregate_fields"
  | "media_avg_fields"
  | "media_max_fields"
  | "media_min_fields"
  | "media_mutation_response"
  | "media_stddev_fields"
  | "media_stddev_pop_fields"
  | "media_stddev_samp_fields"
  | "media_sum_fields"
  | "media_var_pop_fields"
  | "media_var_samp_fields"
  | "media_variance_fields"
  | "messages"
  | "messages_aggregate"
  | "messages_aggregate_fields"
  | "messages_max_fields"
  | "messages_min_fields"
  | "messages_mutation_response"
  | "model_has_comments"
  | "model_has_comments_aggregate"
  | "model_has_comments_aggregate_fields"
  | "model_has_comments_max_fields"
  | "model_has_comments_min_fields"
  | "model_has_comments_mutation_response"
  | "model_has_likes"
  | "model_has_likes_aggregate"
  | "model_has_likes_aggregate_fields"
  | "model_has_likes_max_fields"
  | "model_has_likes_min_fields"
  | "model_has_likes_mutation_response"
  | "model_has_permissions"
  | "model_has_permissions_aggregate"
  | "model_has_permissions_aggregate_fields"
  | "model_has_permissions_max_fields"
  | "model_has_permissions_min_fields"
  | "model_has_permissions_mutation_response"
  | "model_has_roles"
  | "model_has_roles_aggregate"
  | "model_has_roles_aggregate_fields"
  | "model_has_roles_max_fields"
  | "model_has_roles_min_fields"
  | "model_has_roles_mutation_response"
  | "model_has_tags"
  | "model_has_tags_aggregate"
  | "model_has_tags_aggregate_fields"
  | "model_has_tags_max_fields"
  | "model_has_tags_min_fields"
  | "model_has_tags_mutation_response"
  | "notifications"
  | "notifications_aggregate"
  | "notifications_aggregate_fields"
  | "notifications_max_fields"
  | "notifications_min_fields"
  | "notifications_mutation_response"
  | "outlet_has_addons"
  | "outlet_has_addons_aggregate"
  | "outlet_has_addons_aggregate_fields"
  | "outlet_has_addons_avg_fields"
  | "outlet_has_addons_max_fields"
  | "outlet_has_addons_min_fields"
  | "outlet_has_addons_mutation_response"
  | "outlet_has_addons_stddev_fields"
  | "outlet_has_addons_stddev_pop_fields"
  | "outlet_has_addons_stddev_samp_fields"
  | "outlet_has_addons_sum_fields"
  | "outlet_has_addons_var_pop_fields"
  | "outlet_has_addons_var_samp_fields"
  | "outlet_has_addons_variance_fields"
  | "outlets"
  | "outlets_aggregate"
  | "outlets_aggregate_fields"
  | "outlets_avg_fields"
  | "outlets_max_fields"
  | "outlets_min_fields"
  | "outlets_mutation_response"
  | "outlets_stddev_fields"
  | "outlets_stddev_pop_fields"
  | "outlets_stddev_samp_fields"
  | "outlets_sum_fields"
  | "outlets_var_pop_fields"
  | "outlets_var_samp_fields"
  | "outlets_variance_fields"
  | "passes"
  | "passes_activity_logs"
  | "passes_activity_logs_aggregate"
  | "passes_activity_logs_aggregate_fields"
  | "passes_activity_logs_max_fields"
  | "passes_activity_logs_min_fields"
  | "passes_activity_logs_mutation_response"
  | "passes_aggregate"
  | "passes_aggregate_fields"
  | "passes_max_fields"
  | "passes_min_fields"
  | "passes_mutation_response"
  | "payments"
  | "payments_aggregate"
  | "payments_aggregate_fields"
  | "payments_avg_fields"
  | "payments_max_fields"
  | "payments_min_fields"
  | "payments_mutation_response"
  | "payments_stddev_fields"
  | "payments_stddev_pop_fields"
  | "payments_stddev_samp_fields"
  | "payments_sum_fields"
  | "payments_var_pop_fields"
  | "payments_var_samp_fields"
  | "payments_variance_fields"
  | "permissions"
  | "permissions_aggregate"
  | "permissions_aggregate_fields"
  | "permissions_max_fields"
  | "permissions_min_fields"
  | "permissions_mutation_response"
  | "post_comments"
  | "post_comments_aggregate"
  | "post_comments_aggregate_fields"
  | "post_comments_max_fields"
  | "post_comments_min_fields"
  | "post_comments_mutation_response"
  | "post_likes"
  | "post_likes_aggregate"
  | "post_likes_aggregate_fields"
  | "post_likes_max_fields"
  | "post_likes_min_fields"
  | "post_likes_mutation_response"
  | "posts"
  | "posts_aggregate"
  | "posts_aggregate_fields"
  | "posts_max_fields"
  | "posts_min_fields"
  | "posts_mutation_response"
  | "questionaires"
  | "questionaires_aggregate"
  | "questionaires_aggregate_fields"
  | "questionaires_max_fields"
  | "questionaires_min_fields"
  | "questionaires_mutation_response"
  | "questions"
  | "questions_aggregate"
  | "questions_aggregate_fields"
  | "questions_max_fields"
  | "questions_min_fields"
  | "questions_mutation_response"
  | "requests"
  | "requests_aggregate"
  | "requests_aggregate_fields"
  | "requests_avg_fields"
  | "requests_max_fields"
  | "requests_min_fields"
  | "requests_mutation_response"
  | "requests_stddev_fields"
  | "requests_stddev_pop_fields"
  | "requests_stddev_samp_fields"
  | "requests_sum_fields"
  | "requests_var_pop_fields"
  | "requests_var_samp_fields"
  | "requests_variance_fields"
  | "reservations"
  | "reservations_activity_logs"
  | "reservations_activity_logs_aggregate"
  | "reservations_activity_logs_aggregate_fields"
  | "reservations_activity_logs_max_fields"
  | "reservations_activity_logs_min_fields"
  | "reservations_activity_logs_mutation_response"
  | "reservations_aggregate"
  | "reservations_aggregate_fields"
  | "reservations_avg_fields"
  | "reservations_max_fields"
  | "reservations_min_fields"
  | "reservations_mutation_response"
  | "reservations_stddev_fields"
  | "reservations_stddev_pop_fields"
  | "reservations_stddev_samp_fields"
  | "reservations_sum_fields"
  | "reservations_var_pop_fields"
  | "reservations_var_samp_fields"
  | "reservations_variance_fields"
  | "review_comments"
  | "review_comments_aggregate"
  | "review_comments_aggregate_fields"
  | "review_comments_max_fields"
  | "review_comments_min_fields"
  | "review_comments_mutation_response"
  | "review_likes"
  | "review_likes_aggregate"
  | "review_likes_aggregate_fields"
  | "review_likes_max_fields"
  | "review_likes_min_fields"
  | "review_likes_mutation_response"
  | "review_media"
  | "review_media_aggregate"
  | "review_media_aggregate_fields"
  | "review_media_avg_fields"
  | "review_media_max_fields"
  | "review_media_min_fields"
  | "review_media_mutation_response"
  | "review_media_stddev_fields"
  | "review_media_stddev_pop_fields"
  | "review_media_stddev_samp_fields"
  | "review_media_sum_fields"
  | "review_media_var_pop_fields"
  | "review_media_var_samp_fields"
  | "review_media_variance_fields"
  | "reviews"
  | "reviews_aggregate"
  | "reviews_aggregate_fields"
  | "reviews_avg_fields"
  | "reviews_max_fields"
  | "reviews_min_fields"
  | "reviews_mutation_response"
  | "reviews_stddev_fields"
  | "reviews_stddev_pop_fields"
  | "reviews_stddev_samp_fields"
  | "reviews_sum_fields"
  | "reviews_var_pop_fields"
  | "reviews_var_samp_fields"
  | "reviews_variance_fields"
  | "role_has_permissions"
  | "role_has_permissions_aggregate"
  | "role_has_permissions_aggregate_fields"
  | "role_has_permissions_max_fields"
  | "role_has_permissions_min_fields"
  | "role_has_permissions_mutation_response"
  | "roles"
  | "roles_aggregate"
  | "roles_aggregate_fields"
  | "roles_max_fields"
  | "roles_min_fields"
  | "roles_mutation_response"
  | "social_relationships"
  | "social_relationships_aggregate"
  | "social_relationships_aggregate_fields"
  | "social_relationships_max_fields"
  | "social_relationships_min_fields"
  | "social_relationships_mutation_response"
  | "spaces"
  | "spaces_aggregate"
  | "spaces_aggregate_fields"
  | "spaces_avg_fields"
  | "spaces_guests"
  | "spaces_guests_aggregate"
  | "spaces_guests_aggregate_fields"
  | "spaces_guests_max_fields"
  | "spaces_guests_min_fields"
  | "spaces_guests_mutation_response"
  | "spaces_max_fields"
  | "spaces_min_fields"
  | "spaces_mutation_response"
  | "spaces_stddev_fields"
  | "spaces_stddev_pop_fields"
  | "spaces_stddev_samp_fields"
  | "spaces_sum_fields"
  | "spaces_usage"
  | "spaces_usage_aggregate"
  | "spaces_usage_aggregate_fields"
  | "spaces_usage_max_fields"
  | "spaces_usage_min_fields"
  | "spaces_usage_mutation_response"
  | "spaces_var_pop_fields"
  | "spaces_var_samp_fields"
  | "spaces_variance_fields"
  | "storage_buckets"
  | "storage_buckets_aggregate"
  | "storage_buckets_aggregate_fields"
  | "storage_buckets_max_fields"
  | "storage_buckets_min_fields"
  | "storage_buckets_mutation_response"
  | "stripe_transfers"
  | "stripe_transfers_aggregate"
  | "stripe_transfers_aggregate_fields"
  | "stripe_transfers_max_fields"
  | "stripe_transfers_min_fields"
  | "stripe_transfers_mutation_response"
  | "subscriptions"
  | "subscriptions_aggregate"
  | "subscriptions_aggregate_fields"
  | "subscriptions_max_fields"
  | "subscriptions_min_fields"
  | "subscriptions_mutation_response"
  | "supabase_functions_hooks"
  | "supabase_functions_hooks_aggregate"
  | "supabase_functions_hooks_aggregate_fields"
  | "supabase_functions_hooks_avg_fields"
  | "supabase_functions_hooks_max_fields"
  | "supabase_functions_hooks_min_fields"
  | "supabase_functions_hooks_mutation_response"
  | "supabase_functions_hooks_stddev_fields"
  | "supabase_functions_hooks_stddev_pop_fields"
  | "supabase_functions_hooks_stddev_samp_fields"
  | "supabase_functions_hooks_sum_fields"
  | "supabase_functions_hooks_var_pop_fields"
  | "supabase_functions_hooks_var_samp_fields"
  | "supabase_functions_hooks_variance_fields"
  | "tags"
  | "tags_aggregate"
  | "tags_aggregate_fields"
  | "tags_max_fields"
  | "tags_min_fields"
  | "tags_mutation_response"
  | "team_memberships"
  | "team_memberships_aggregate"
  | "team_memberships_aggregate_fields"
  | "team_memberships_max_fields"
  | "team_memberships_min_fields"
  | "team_memberships_mutation_response"
  | "team_roles"
  | "team_roles_aggregate"
  | "team_roles_aggregate_fields"
  | "team_roles_max_fields"
  | "team_roles_min_fields"
  | "team_roles_mutation_response"
  | "team_schedules"
  | "team_schedules_aggregate"
  | "team_schedules_aggregate_fields"
  | "team_schedules_max_fields"
  | "team_schedules_min_fields"
  | "team_schedules_mutation_response"
  | "team_subscriptions"
  | "team_subscriptions_aggregate"
  | "team_subscriptions_aggregate_fields"
  | "team_subscriptions_max_fields"
  | "team_subscriptions_min_fields"
  | "team_subscriptions_mutation_response"
  | "teams"
  | "teams_aggregate"
  | "teams_aggregate_fields"
  | "teams_max_fields"
  | "teams_min_fields"
  | "teams_mutation_response"
  | "user_has_reservations"
  | "user_has_reservations_aggregate"
  | "user_has_reservations_aggregate_fields"
  | "user_has_reservations_max_fields"
  | "user_has_reservations_min_fields"
  | "user_has_reservations_mutation_response"
  | "user_inbox"
  | "user_inbox_aggregate"
  | "user_inbox_aggregate_fields"
  | "user_inbox_max_fields"
  | "user_inbox_min_fields"
  | "user_inbox_mutation_response"
  | "user_media"
  | "user_media_aggregate"
  | "user_media_aggregate_fields"
  | "user_media_avg_fields"
  | "user_media_max_fields"
  | "user_media_min_fields"
  | "user_media_mutation_response"
  | "user_media_stddev_fields"
  | "user_media_stddev_pop_fields"
  | "user_media_stddev_samp_fields"
  | "user_media_sum_fields"
  | "user_media_var_pop_fields"
  | "user_media_var_samp_fields"
  | "user_media_variance_fields"
  | "user_roles"
  | "user_roles_aggregate"
  | "user_roles_aggregate_fields"
  | "user_roles_max_fields"
  | "user_roles_min_fields"
  | "user_roles_mutation_response"
  | "user_sessions"
  | "user_sessions_aggregate"
  | "user_sessions_aggregate_fields"
  | "user_sessions_avg_fields"
  | "user_sessions_max_fields"
  | "user_sessions_min_fields"
  | "user_sessions_mutation_response"
  | "user_sessions_stddev_fields"
  | "user_sessions_stddev_pop_fields"
  | "user_sessions_stddev_samp_fields"
  | "user_sessions_sum_fields"
  | "user_sessions_var_pop_fields"
  | "user_sessions_var_samp_fields"
  | "user_sessions_variance_fields"
  | "user_subscriptions"
  | "user_subscriptions_aggregate"
  | "user_subscriptions_aggregate_fields"
  | "user_subscriptions_max_fields"
  | "user_subscriptions_min_fields"
  | "user_subscriptions_mutation_response"
  | "users"
  | "users_aggregate"
  | "users_aggregate_fields"
  | "users_max_fields"
  | "users_min_fields"
  | "users_mutation_response"
  | "wishlist"
  | "wishlist_aggregate"
  | "wishlist_aggregate_fields"
  | "wishlist_max_fields"
  | "wishlist_min_fields"
  | "wishlist_mutation_response";

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export type MakeNullable<T> = {
  [K in keyof T]: T[K] | undefined;
};

export interface ScalarsEnums extends MakeNullable<Scalars> {
  activity_logs_constraint: activity_logs_constraint | undefined;
  activity_logs_select_column: activity_logs_select_column | undefined;
  activity_logs_update_column: activity_logs_update_column | undefined;
  aruba_wifi_access_constraint: aruba_wifi_access_constraint | undefined;
  aruba_wifi_access_select_column: aruba_wifi_access_select_column | undefined;
  aruba_wifi_access_update_column: aruba_wifi_access_update_column | undefined;
  auth_audit_log_entries_constraint:
    | auth_audit_log_entries_constraint
    | undefined;
  auth_audit_log_entries_select_column:
    | auth_audit_log_entries_select_column
    | undefined;
  auth_audit_log_entries_update_column:
    | auth_audit_log_entries_update_column
    | undefined;
  auth_instances_constraint: auth_instances_constraint | undefined;
  auth_instances_select_column: auth_instances_select_column | undefined;
  auth_instances_update_column: auth_instances_update_column | undefined;
  auth_refresh_tokens_constraint: auth_refresh_tokens_constraint | undefined;
  auth_refresh_tokens_select_column:
    | auth_refresh_tokens_select_column
    | undefined;
  auth_refresh_tokens_update_column:
    | auth_refresh_tokens_update_column
    | undefined;
  auth_schema_migrations_constraint:
    | auth_schema_migrations_constraint
    | undefined;
  auth_schema_migrations_select_column:
    | auth_schema_migrations_select_column
    | undefined;
  auth_schema_migrations_update_column:
    | auth_schema_migrations_update_column
    | undefined;
  auth_users_constraint: auth_users_constraint | undefined;
  auth_users_select_column: auth_users_select_column | undefined;
  auth_users_update_column: auth_users_update_column | undefined;
  brand_campaigns_constraint: brand_campaigns_constraint | undefined;
  brand_campaigns_select_column: brand_campaigns_select_column | undefined;
  brand_campaigns_update_column: brand_campaigns_update_column | undefined;
  brand_discussions_select_column: brand_discussions_select_column | undefined;
  brand_inbox_select_column: brand_inbox_select_column | undefined;
  brand_media_select_column: brand_media_select_column | undefined;
  brand_tags_select_column: brand_tags_select_column | undefined;
  brand_users_constraint: brand_users_constraint | undefined;
  brand_users_select_column: brand_users_select_column | undefined;
  brand_users_update_column: brand_users_update_column | undefined;
  brand_wishes_select_column: brand_wishes_select_column | undefined;
  brands_constraint: brands_constraint | undefined;
  brands_select_column: brands_select_column | undefined;
  brands_update_column: brands_update_column | undefined;
  campaigns_constraint: campaigns_constraint | undefined;
  campaigns_select_column: campaigns_select_column | undefined;
  campaigns_update_column: campaigns_update_column | undefined;
  card_constraint: card_constraint | undefined;
  card_select_column: card_select_column | undefined;
  card_update_column: card_update_column | undefined;
  comment_comments_select_column: comment_comments_select_column | undefined;
  comment_likes_select_column: comment_likes_select_column | undefined;
  conversations_constraint: conversations_constraint | undefined;
  conversations_select_column: conversations_select_column | undefined;
  conversations_update_column: conversations_update_column | undefined;
  currencies_constraint: currencies_constraint | undefined;
  currencies_select_column: currencies_select_column | undefined;
  currencies_update_column: currencies_update_column | undefined;
  daily_rates_constraint: daily_rates_constraint | undefined;
  daily_rates_select_column: daily_rates_select_column | undefined;
  daily_rates_update_column: daily_rates_update_column | undefined;
  default_addons_constraint: default_addons_constraint | undefined;
  default_addons_select_column: default_addons_select_column | undefined;
  default_addons_update_column: default_addons_update_column | undefined;
  discount_codes_constraint: discount_codes_constraint | undefined;
  discount_codes_select_column: discount_codes_select_column | undefined;
  discount_codes_update_column: discount_codes_update_column | undefined;
  discussion_user_select_column: discussion_user_select_column | undefined;
  discussions_constraint: discussions_constraint | undefined;
  discussions_select_column: discussions_select_column | undefined;
  discussions_update_column: discussions_update_column | undefined;
  extensions_constraint: extensions_constraint | undefined;
  extensions_geography_columns_select_column:
    | extensions_geography_columns_select_column
    | undefined;
  extensions_geometry_columns_select_column:
    | extensions_geometry_columns_select_column
    | undefined;
  extensions_pg_stat_statements_select_column:
    | extensions_pg_stat_statements_select_column
    | undefined;
  extensions_select_column: extensions_select_column | undefined;
  extensions_spatial_ref_sys_constraint:
    | extensions_spatial_ref_sys_constraint
    | undefined;
  extensions_spatial_ref_sys_select_column:
    | extensions_spatial_ref_sys_select_column
    | undefined;
  extensions_spatial_ref_sys_update_column:
    | extensions_spatial_ref_sys_update_column
    | undefined;
  extensions_update_column: extensions_update_column | undefined;
  floor_plan_grid_constraint: floor_plan_grid_constraint | undefined;
  floor_plan_grid_select_column: floor_plan_grid_select_column | undefined;
  floor_plan_grid_update_column: floor_plan_grid_update_column | undefined;
  floor_plans_constraint: floor_plans_constraint | undefined;
  floor_plans_select_column: floor_plans_select_column | undefined;
  floor_plans_update_column: floor_plans_update_column | undefined;
  guest_questionaires_answers_constraint:
    | guest_questionaires_answers_constraint
    | undefined;
  guest_questionaires_answers_select_column:
    | guest_questionaires_answers_select_column
    | undefined;
  guest_questionaires_answers_update_column:
    | guest_questionaires_answers_update_column
    | undefined;
  guests_constraint: guests_constraint | undefined;
  guests_has_questionaires_constraint:
    | guests_has_questionaires_constraint
    | undefined;
  guests_has_questionaires_select_column:
    | guests_has_questionaires_select_column
    | undefined;
  guests_has_questionaires_update_column:
    | guests_has_questionaires_update_column
    | undefined;
  guests_select_column: guests_select_column | undefined;
  guests_update_column: guests_update_column | undefined;
  inboxes_constraint: inboxes_constraint | undefined;
  inboxes_select_column: inboxes_select_column | undefined;
  inboxes_update_column: inboxes_update_column | undefined;
  invoice_constraint: invoice_constraint | undefined;
  invoice_select_column: invoice_select_column | undefined;
  invoice_update_column: invoice_update_column | undefined;
  key_performance_snapshots_constraint:
    | key_performance_snapshots_constraint
    | undefined;
  key_performance_snapshots_select_column:
    | key_performance_snapshots_select_column
    | undefined;
  key_performance_snapshots_update_column:
    | key_performance_snapshots_update_column
    | undefined;
  listing_categories_constraint: listing_categories_constraint | undefined;
  listing_categories_select_column:
    | listing_categories_select_column
    | undefined;
  listing_categories_update_column:
    | listing_categories_update_column
    | undefined;
  listing_collections_constraint: listing_collections_constraint | undefined;
  listing_collections_select_column:
    | listing_collections_select_column
    | undefined;
  listing_collections_update_column:
    | listing_collections_update_column
    | undefined;
  listing_discussions_select_column:
    | listing_discussions_select_column
    | undefined;
  listing_in_collections_select_column:
    | listing_in_collections_select_column
    | undefined;
  listing_media_select_column: listing_media_select_column | undefined;
  listing_tags_select_column: listing_tags_select_column | undefined;
  listing_wishes_select_column: listing_wishes_select_column | undefined;
  listings_constraint: listings_constraint | undefined;
  listings_select_column: listings_select_column | undefined;
  listings_update_column: listings_update_column | undefined;
  logs_constraint: logs_constraint | undefined;
  logs_select_column: logs_select_column | undefined;
  logs_update_column: logs_update_column | undefined;
  media_constraint: media_constraint | undefined;
  media_select_column: media_select_column | undefined;
  media_update_column: media_update_column | undefined;
  messages_constraint: messages_constraint | undefined;
  messages_select_column: messages_select_column | undefined;
  messages_update_column: messages_update_column | undefined;
  model_has_comments_constraint: model_has_comments_constraint | undefined;
  model_has_comments_select_column:
    | model_has_comments_select_column
    | undefined;
  model_has_comments_update_column:
    | model_has_comments_update_column
    | undefined;
  model_has_likes_select_column: model_has_likes_select_column | undefined;
  model_has_permissions_select_column:
    | model_has_permissions_select_column
    | undefined;
  model_has_roles_select_column: model_has_roles_select_column | undefined;
  model_has_tags_constraint: model_has_tags_constraint | undefined;
  model_has_tags_select_column: model_has_tags_select_column | undefined;
  model_has_tags_update_column: model_has_tags_update_column | undefined;
  notifications_constraint: notifications_constraint | undefined;
  notifications_select_column: notifications_select_column | undefined;
  notifications_update_column: notifications_update_column | undefined;
  order_by: order_by | undefined;
  outlet_has_addons_constraint: outlet_has_addons_constraint | undefined;
  outlet_has_addons_select_column: outlet_has_addons_select_column | undefined;
  outlet_has_addons_update_column: outlet_has_addons_update_column | undefined;
  outlets_constraint: outlets_constraint | undefined;
  outlets_select_column: outlets_select_column | undefined;
  outlets_update_column: outlets_update_column | undefined;
  passes_activity_logs_select_column:
    | passes_activity_logs_select_column
    | undefined;
  passes_constraint: passes_constraint | undefined;
  passes_select_column: passes_select_column | undefined;
  passes_update_column: passes_update_column | undefined;
  payments_constraint: payments_constraint | undefined;
  payments_select_column: payments_select_column | undefined;
  payments_update_column: payments_update_column | undefined;
  permissions_constraint: permissions_constraint | undefined;
  permissions_select_column: permissions_select_column | undefined;
  permissions_update_column: permissions_update_column | undefined;
  post_comments_select_column: post_comments_select_column | undefined;
  post_likes_select_column: post_likes_select_column | undefined;
  posts_constraint: posts_constraint | undefined;
  posts_select_column: posts_select_column | undefined;
  posts_update_column: posts_update_column | undefined;
  questionaires_constraint: questionaires_constraint | undefined;
  questionaires_select_column: questionaires_select_column | undefined;
  questionaires_update_column: questionaires_update_column | undefined;
  questions_constraint: questions_constraint | undefined;
  questions_select_column: questions_select_column | undefined;
  questions_update_column: questions_update_column | undefined;
  requests_constraint: requests_constraint | undefined;
  requests_select_column: requests_select_column | undefined;
  requests_update_column: requests_update_column | undefined;
  reservations_activity_logs_select_column:
    | reservations_activity_logs_select_column
    | undefined;
  reservations_constraint: reservations_constraint | undefined;
  reservations_select_column: reservations_select_column | undefined;
  reservations_update_column: reservations_update_column | undefined;
  review_comments_select_column: review_comments_select_column | undefined;
  review_likes_select_column: review_likes_select_column | undefined;
  review_media_select_column: review_media_select_column | undefined;
  reviews_constraint: reviews_constraint | undefined;
  reviews_select_column: reviews_select_column | undefined;
  reviews_update_column: reviews_update_column | undefined;
  role_has_permissions_select_column:
    | role_has_permissions_select_column
    | undefined;
  roles_constraint: roles_constraint | undefined;
  roles_select_column: roles_select_column | undefined;
  roles_update_column: roles_update_column | undefined;
  social_relationships_constraint: social_relationships_constraint | undefined;
  social_relationships_select_column:
    | social_relationships_select_column
    | undefined;
  social_relationships_update_column:
    | social_relationships_update_column
    | undefined;
  spaces_constraint: spaces_constraint | undefined;
  spaces_guests_constraint: spaces_guests_constraint | undefined;
  spaces_guests_select_column: spaces_guests_select_column | undefined;
  spaces_guests_update_column: spaces_guests_update_column | undefined;
  spaces_select_column: spaces_select_column | undefined;
  spaces_update_column: spaces_update_column | undefined;
  spaces_usage_constraint: spaces_usage_constraint | undefined;
  spaces_usage_select_column: spaces_usage_select_column | undefined;
  spaces_usage_update_column: spaces_usage_update_column | undefined;
  storage_buckets_constraint: storage_buckets_constraint | undefined;
  storage_buckets_select_column: storage_buckets_select_column | undefined;
  storage_buckets_update_column: storage_buckets_update_column | undefined;
  stripe_transfers_constraint: stripe_transfers_constraint | undefined;
  stripe_transfers_select_column: stripe_transfers_select_column | undefined;
  stripe_transfers_update_column: stripe_transfers_update_column | undefined;
  subscriptions_constraint: subscriptions_constraint | undefined;
  subscriptions_select_column: subscriptions_select_column | undefined;
  subscriptions_update_column: subscriptions_update_column | undefined;
  supabase_functions_hooks_constraint:
    | supabase_functions_hooks_constraint
    | undefined;
  supabase_functions_hooks_select_column:
    | supabase_functions_hooks_select_column
    | undefined;
  supabase_functions_hooks_update_column:
    | supabase_functions_hooks_update_column
    | undefined;
  tags_constraint: tags_constraint | undefined;
  tags_select_column: tags_select_column | undefined;
  tags_update_column: tags_update_column | undefined;
  team_memberships_constraint: team_memberships_constraint | undefined;
  team_memberships_select_column: team_memberships_select_column | undefined;
  team_memberships_update_column: team_memberships_update_column | undefined;
  team_roles_select_column: team_roles_select_column | undefined;
  team_schedules_constraint: team_schedules_constraint | undefined;
  team_schedules_select_column: team_schedules_select_column | undefined;
  team_schedules_update_column: team_schedules_update_column | undefined;
  team_subscriptions_select_column:
    | team_subscriptions_select_column
    | undefined;
  teams_constraint: teams_constraint | undefined;
  teams_select_column: teams_select_column | undefined;
  teams_update_column: teams_update_column | undefined;
  user_has_reservations_constraint:
    | user_has_reservations_constraint
    | undefined;
  user_has_reservations_select_column:
    | user_has_reservations_select_column
    | undefined;
  user_has_reservations_update_column:
    | user_has_reservations_update_column
    | undefined;
  user_inbox_select_column: user_inbox_select_column | undefined;
  user_media_select_column: user_media_select_column | undefined;
  user_roles_select_column: user_roles_select_column | undefined;
  user_sessions_constraint: user_sessions_constraint | undefined;
  user_sessions_select_column: user_sessions_select_column | undefined;
  user_sessions_update_column: user_sessions_update_column | undefined;
  user_subscriptions_select_column:
    | user_subscriptions_select_column
    | undefined;
  users_constraint: users_constraint | undefined;
  users_select_column: users_select_column | undefined;
  users_update_column: users_update_column | undefined;
  wishlist_constraint: wishlist_constraint | undefined;
  wishlist_select_column: wishlist_select_column | undefined;
  wishlist_update_column: wishlist_update_column | undefined;
}
